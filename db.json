{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/rating.js","path":"js/third-party/rating.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/archives/index.md","hash":"2ad6541aac8f4be0f3c9beb1513e46bc137fb65d","modified":1641442152575},{"_id":"source/categories/index.md","hash":"793826f27982d525dcc9dc36cc7d9dcb1079fee3","modified":1641442152575},{"_id":"source/_posts/5g-technology-advent.md","hash":"585e6588ee3e55d1baaf466aa69f10c0310c17e1","modified":1641442152126},{"_id":"source/_posts/bathing-thinking.md","hash":"3cbeb42133cbbdcd7492e019e8deae63e71366c7","modified":1641442152128},{"_id":"source/_posts/bitmap-resolver-rectify.md","hash":"59f385da91fa6e022404c03bb7e470cb420ec9aa","modified":1641442152129},{"_id":"source/_posts/bitmap-resolver.md","hash":"4c867b8a0994c9d6812596020b5576e732f20285","modified":1641442152130},{"_id":"source/_posts/bmp-edge-dection.md","hash":"1b11405c0d7b58ccb0b4c516d33427d9f272ce17","modified":1641442152136},{"_id":"source/_posts/byte-alignment.md","hash":"93ca9d95d4c04e20a82178cec21f1cc1c228a54a","modified":1641442152142},{"_id":"source/_posts/c-function-pointer.md","hash":"694fee6efd22ab5d7cbd602853b8057d71a8f006","modified":1641442152143},{"_id":"source/_posts/c-reference-pointer.md","hash":"6af45c209d8039d067fc27f35e5898715848e9f3","modified":1641442152147},{"_id":"source/_posts/concurrency-parallelism.md","hash":"abbfc06d591a1eb5756048b4d990dc92632512d7","modified":1641442152175},{"_id":"source/_posts/csapp-lab-3.md","hash":"0a9ce90897bd37cd4a569fb207161e473c2b18b8","modified":1641442152214},{"_id":"source/_posts/csapp-lab-2.md","hash":"66893304ffb63ffca1dd5376c087ba5f0cbc517d","modified":1641442152183},{"_id":"source/_posts/csapp-lab-1.md","hash":"2224d3b85e13a198ce23a7eef578fbee7498a44a","modified":1641442152178},{"_id":"source/_posts/csapp-lab-4.md","hash":"c759eefb0994cfd72566a822eed1c331f19ffd0d","modified":1641442152220},{"_id":"source/_posts/css-align-center.md","hash":"bc0e12c29e8670ac4fe5d1c7a0e4ce7d8d00a091","modified":1641442152281},{"_id":"source/_posts/csapp-lab-5.md","hash":"bb63a36cc21deffc18ccb6d320e4407e942226a1","modified":1641442152280},{"_id":"source/_posts/csapp-lab-6.md","hash":"cba8bb2c24aeafeac9800d2ad765a3b8e06da662","modified":1641442152281},{"_id":"source/_posts/css-selectors.md","hash":"72adb684b78c8a6c736afa5aab0ef7168521ed6f","modified":1641442152282},{"_id":"source/_posts/css-reflow-repaint.md","hash":"7c7bff3d711bb8f55db22c51a6980f59a97defe1","modified":1641442152281},{"_id":"source/_posts/dao-specification.md","hash":"fdec27e4586d0751bfb8738ace78f02545d271d4","modified":1641442152282},{"_id":"source/_posts/daul-system-principle.md","hash":"4d124878f6c6bd4e715206a919ed9f5a0015bbd2","modified":1641442152283},{"_id":"source/_posts/digital-image-kernel-collection.md","hash":"bdb37bfe44b609f6bb2a3f23a5ae0009951c9670","modified":1641442152283},{"_id":"source/_posts/dip-transformation.md","hash":"1ba6ddd3bd23cb758a0830350ce14f732a534588","modified":1641442152290},{"_id":"source/_posts/docker-two.md","hash":"4c6743a3477276e9af47c1fbba38e353f2b3593d","modified":1641442152324},{"_id":"source/_posts/docker-one.md","hash":"01e4f039c73652cbce4bf9b98eda0e9c36b1d78d","modified":1641442152314},{"_id":"source/_posts/docker-zero.md","hash":"8d0995b197db9c744763ba7aa2347ca232082096","modified":1641442152324},{"_id":"source/_posts/fallout4.md","hash":"6423aed77b384fe0619e703d9fd6cb53b841c68d","modified":1641442152325},{"_id":"source/_posts/float-think.md","hash":"52cc364a2c461f2f88803c802086fa5b5a2dcce5","modified":1641442152425},{"_id":"source/_posts/git-learning-1.md","hash":"e34bd3ec27d1db74222c482105553d05879177fc","modified":1641442152427},{"_id":"source/_posts/git-learning.md","hash":"b33ca860d1d359387b66993e498d0bc3cec248f2","modified":1641442152427},{"_id":"source/_posts/grayscale-histogram-resolver.md","hash":"69e69d1e81a1d85f1876fa92efbeff366d56fe30","modified":1641442152428},{"_id":"source/_posts/http-change-history.md","hash":"fcd79d0466cb49af02d76234e30665bbda6f4eb9","modified":1641442152462},{"_id":"source/_posts/http-status-code.md","hash":"d94a7608c437d3098aa492b919253a1eb03878f8","modified":1641442152462},{"_id":"source/_posts/ieee754-float-instance-js.md","hash":"7ca97e141b321c28d2e5032611f7ca05d0ac572d","modified":1641442152462},{"_id":"source/_posts/js-concept-1.md","hash":"1bd8622f36fd6644e1097e8c6491b1ef0d06bf68","modified":1641442152463},{"_id":"source/_posts/js-concept-15-this-call-bind-apply.md","hash":"9f774512f9b282c37a82e6fe1230d1890d75b6a6","modified":1641442152464},{"_id":"source/_posts/js-concept-17-prototype-inheritance.md","hash":"7d076eedda7092a4527d371ab6ca49f1dc090f29","modified":1641442152464},{"_id":"source/_posts/js-concept-19-map-reduce-filter.md","hash":"2f036508572e5a1203f74db2cd797f980dd75c7f","modified":1641442152464},{"_id":"source/_posts/js-concept-2-primitive-type.md","hash":"923cfeef63b21450907d6f6f02234d34096efac9","modified":1641442152464},{"_id":"source/_posts/js-concept-21-closures.md","hash":"18ce434a6fe257ac25456857eae2ef6e24c4a749","modified":1641442152464},{"_id":"source/_posts/js-concept-7-scope-2.md","hash":"99bc954c44fca56aabd55486260a770abcb654bd","modified":1641442152464},{"_id":"source/_posts/js-concept-7-scope.md","hash":"171fcca8a1a9d02134d0e24e6ec5ce72e8039901","modified":1641442152465},{"_id":"source/_posts/js-debouncing-throttling.md","hash":"4ee8680f3e8ee31cc82690061d443f8c49c623be","modified":1641442152465},{"_id":"source/_posts/js-dont-know-const.md","hash":"056b6e9a210e02d41f65467b375188fde621c607","modified":1641442152465},{"_id":"source/_posts/js-storage.md","hash":"f530470bbd0c27fe54372605fd261ced4d63e737","modified":1641442152466},{"_id":"source/_posts/js-dont-know-property-hidden.md","hash":"c749aa939473e92e61f4f04d68fde9290643f4e8","modified":1641442152465},{"_id":"source/_posts/js-taskqueue.md","hash":"6896473a86017ec48915de7ea1413267d8b547f6","modified":1641442152466},{"_id":"source/_posts/lc-solutions.md","hash":"0a6aef103c526865aadbec76a13b6b7992e21dc3","modified":1641442152466},{"_id":"source/_posts/learn-method.md","hash":"85e94672433fd69a319f8df5fd4333a7456258b4","modified":1629814366053},{"_id":"source/_posts/osdev-platform.md","hash":"56102a1e2d4695942a7ab156320d719441ee0275","modified":1641442152466},{"_id":"source/_posts/secure-xss-csrf.md","hash":"2af83cdf94b0613ac5c215abe7e518cd4eb7e486","modified":1641442152477},{"_id":"source/_posts/secure-same-origin-policy.md","hash":"7ca8489171600443e928eee590b7b9ca9b653294","modified":1641442152476},{"_id":"source/_posts/shadow-thinking-in-winapi.md","hash":"4ac249082ea53feb7562089a38cfbc9817273a29","modified":1641442152477},{"_id":"source/_posts/spatial-filter.md","hash":"1b1d43bbc9bb4f002013adb4e9ef7c915b4892e0","modified":1641442152481},{"_id":"source/_posts/tflearn-1.md","hash":"9b904155336de3c4c8d6b8746a92ab96ac5fe9d7","modified":1641442152490},{"_id":"source/_posts/thinking-2018-9-23.md","hash":"a049bb3396261022ac665b14368330db7680077c","modified":1641442152491},{"_id":"source/_posts/threshold-segmentation.md","hash":"a93c5cbabac6fa6162e22574cacbfc52f9089d7c","modified":1641442152491},{"_id":"source/_posts/virtual-memory.md","hash":"25e79d9fa2b69c14ff21dab216796cdf3081712a","modified":1641442152503},{"_id":"source/_posts/web-study.md","hash":"4239792000c103ff97acafaf346f4c135e95198f","modified":1641442152542},{"_id":"source/_posts/webpack-optimize.md","hash":"18a7ed7b167249adbbe6f353097e350fecfbaa09","modified":1641442152561},{"_id":"source/_posts/what-person-i-am.md","hash":"25efc62b16c675f014bbdb36ac5406c1c3648100","modified":1641442152575},{"_id":"source/tags/index.md","hash":"abf42be73f504aa264cc9d73c02cf169d6726df9","modified":1641442152575},{"_id":"source/_posts/5g-technology-advent/1552395582880.png","hash":"812cda6416f8a4861f28647b3ac75079ec46c797","modified":1629730711140},{"_id":"source/_posts/bitmap-resolver-rectify/n4xout.png","hash":"75f4c0ba215e47d1959c6c24259364140d8201d5","modified":1629730711141},{"_id":"source/_posts/bitmap-resolver-rectify/1552183022513.png","hash":"27ea08970f1d51a2a50882d9a5da02a86e786a25","modified":1629730711141},{"_id":"source/_posts/byte-alignment/1552037289894.png","hash":"73a85e9c3e6d10ed751ab1ea08064ebf7fa992ee","modified":1629730711150},{"_id":"source/_posts/byte-alignment/1552037549973.png","hash":"a32a6a713ecf67ed58d83ac6302ad8b3d2940a24","modified":1629730711150},{"_id":"source/_posts/byte-alignment/1552038354295.png","hash":"10484776d9d40879643655aaa634ec532db5d7a4","modified":1629730711151},{"_id":"source/_posts/byte-alignment/x86-size.png","hash":"4ebb6c03f3b395503ddffc80f81388a2294ff8bd","modified":1629730711152},{"_id":"source/_posts/byte-alignment/x64-size.png","hash":"5bca5551793eb35654673383809c826f9d2b6b84","modified":1629730711151},{"_id":"source/_posts/c-reference-pointer/segment.jpg","hash":"b8d0b6c6bdbd0a18cc965c92e8d90492f1212244","modified":1629730711161},{"_id":"source/_posts/csapp-lab-2/phrase1-input.png","hash":"b4e08513a63678cfc8607b812faef382c32a6b85","modified":1629730711172},{"_id":"source/_posts/csapp-lab-2/phrase1-inputstr.png","hash":"2218e2246959796f6a0e5c41a8a9e0ce23e11dab","modified":1629730711172},{"_id":"source/_posts/csapp-lab-2/phrase1.png","hash":"a1e1589893a6ad7f3a9c02eb58e49445473db9db","modified":1629730711172},{"_id":"source/_posts/csapp-lab-2/phrase3-result.png","hash":"497f33c00fdffe53f9e52e79c1fdd65347cb739e","modified":1629730711174},{"_id":"source/_posts/csapp-lab-2/phrase3-think.png","hash":"ce78de952b28086d1d4f5710116fe34527874b87","modified":1629730711175},{"_id":"source/_posts/csapp-lab-2/phrase6-linklist.png","hash":"9cc58e779792f16351e69bcf0a120b0f7300f028","modified":1629730711183},{"_id":"source/_posts/csapp-lab-3/1553868529136.png","hash":"4fff6d3cc1dae7df10e69e9380b302056ff64445","modified":1629730711187},{"_id":"source/_posts/csapp-lab-3/1553869869465.png","hash":"df66b07f560582f06d4d4e85549fc440a34a224c","modified":1629730711188},{"_id":"source/_posts/csapp-lab-3/1553870526705.png","hash":"7b8a7def9249dfe403f9809d203f197feac4e3ad","modified":1629730711188},{"_id":"source/_posts/csapp-lab-3/phrase1-success.png","hash":"4bc744696bdd13faecf68408c23575194c0e46ad","modified":1629730711188},{"_id":"source/_posts/csapp-lab-3/phrase3-rsp-new.png","hash":"37fa2e50410d2531bc6cc122178ee106805406ef","modified":1629730711190},{"_id":"source/_posts/csapp-lab-3/phrase2-success.png","hash":"b23929af05a57388861ed2a9370cca84dab9b570","modified":1629730711190},{"_id":"source/_posts/csapp-lab-3/phrase2-insert.png","hash":"bc988de4d61084e73287a1d7fb82844a39376478","modified":1629730711189},{"_id":"source/_posts/csapp-lab-3/phrase3-rsp-old.png","hash":"913251cf178707118ea9a285293bfacdd70e588d","modified":1629730711191},{"_id":"source/_posts/csapp-lab-3/phrase3-success.png","hash":"caa0985c835c3f7499dc7d5c56b053766ffdfda7","modified":1629730711191},{"_id":"source/_posts/csapp-lab-4/result.png","hash":"1220ac1a61b48c5a5249dc1c0dfd050358f32b4c","modified":1629730711207},{"_id":"source/_posts/csapp-lab-4/result2.png","hash":"4ab9b7530fd91c83c0bdea2610744205d1018268","modified":1629730711207},{"_id":"source/_posts/daul-system-principle/daul.jpg","hash":"08ddeaec0286c4ee8cf838489a504de3572fe9f6","modified":1629730711226},{"_id":"source/_posts/grayscale-histogram-resolver/4.png","hash":"90bb5e9d9217c56459da2cc25158b6b6335a79ac","modified":1629730711330},{"_id":"source/_posts/grayscale-histogram-resolver/5.png","hash":"1b0870d3b627d1a58773ead99bc8f7c4903c777c","modified":1629730711330},{"_id":"source/_posts/ieee754-float-instance-js/754-js.png","hash":"05d907354b7a8dd5a17f615c532b4503e1b88af0","modified":1629730711331},{"_id":"source/_posts/pics/1552037549973.png","hash":"a32a6a713ecf67ed58d83ac6302ad8b3d2940a24","modified":1629730711344},{"_id":"source/_posts/pics/1552037289894.png","hash":"73a85e9c3e6d10ed751ab1ea08064ebf7fa992ee","modified":1629730711344},{"_id":"source/_posts/pics/1552183022513.png","hash":"27ea08970f1d51a2a50882d9a5da02a86e786a25","modified":1629730711345},{"_id":"source/_posts/pics/1552038354295.png","hash":"10484776d9d40879643655aaa634ec532db5d7a4","modified":1629730711345},{"_id":"source/_posts/pics/1552395582880.png","hash":"812cda6416f8a4861f28647b3ac75079ec46c797","modified":1629730711345},{"_id":"source/_posts/threshold-segmentation/threshold-histogram-iteration.png","hash":"c1d8cf7c7cce911de63832800e58e89a41c9d9d2","modified":1629730711379},{"_id":"source/_posts/threshold-segmentation/threshold-histogram-otsu.png","hash":"a468be512bb12bb443760756e85a80ce70848425","modified":1629730711379},{"_id":"source/_posts/threshold-segmentation/threshold-histogram-seed.png","hash":"deec33f0c6f2c1d83a758abda72cc0481376b648","modified":1629730711380},{"_id":"source/_posts/threshold-segmentation/threshold-otsu.png","hash":"43c40bd15e5d3e5f542139e6b28c06ab56b0dd3b","modified":1629730711380},{"_id":"source/_posts/threshold-segmentation/threshold-iteration.png","hash":"ad878bd55515be260bf9d5ffdc2e87aa009cad93","modified":1629730711380},{"_id":"source/_posts/threshold-segmentation/threshold-seed.png","hash":"e7bc0af8dc94f8db2ffe987f69ec8bedab9df141","modified":1629730711381},{"_id":"source/_posts/virtual-memory/mem-fast1.png","hash":"6b4ad24836e093d583363d2864ec5b65bfe95046","modified":1629730711389},{"_id":"source/_posts/virtual-memory/mem-fast2.png","hash":"ab613f441de5ecada8cd7a7dbe32c8bce3c6549d","modified":1629730711390},{"_id":"source/_posts/virtual-memory/mem-fast3.png","hash":"3b445d7b5cd948860b17a7c7a644c4e334288962","modified":1629730711390},{"_id":"source/_posts/virtual-memory/mem-protection1.png","hash":"e24b5d35c35dba84b7facb3d14d16a63dac3f3db","modified":1629730711391},{"_id":"source/_posts/virtual-memory/tlb-cache2.png","hash":"a88d5be2af8252370e23a6ec342d2c59291ec5cd","modified":1629730711413},{"_id":"source/_posts/virtual-memory/tlb-cache1.png","hash":"9d156d9655638ec3591e68c15a8156c9c1a6a1ee","modified":1629730711413},{"_id":"source/_posts/virtual-memory/tlb-cache3.png","hash":"f42a610112e4838f726aa4b620bdeaee15f4c966","modified":1629730711414},{"_id":"source/_posts/virtual-memory/vm-cache.png","hash":"6b95f6ee70ce563071d27eebfd482b29feda7e79","modified":1629730711419},{"_id":"source/_posts/virtual-memory/vm-problem3.png","hash":"f2d1acaeefc7590502d702f1f620b304db521a36","modified":1629730711421},{"_id":"source/_posts/web-study/web-study.jpg","hash":"1ddee4e369873b1b2bedfec10a0c21accb41a1ad","modified":1629730711437},{"_id":"source/_posts/bitmap-resolver/rdivision.png","hash":"b4b814987546c1aacdbc9096104f1705bb06347b","modified":1629730711146},{"_id":"source/_posts/csapp-lab-1/result.png","hash":"a5ff5bdb080a10e5c43e807cb5dd4829f251bfd5","modified":1629730711167},{"_id":"source/_posts/csapp-lab-2/phrase2-readnum.png","hash":"637a28b2cce6b627813af4ca48711e484c0c37de","modified":1629730711173},{"_id":"source/_posts/csapp-lab-2/phrase2.png","hash":"7bff4edb7b9f5671ec719fdbce4a2089941760d9","modified":1629730711174},{"_id":"source/_posts/csapp-lab-2/phrase4-func.png","hash":"27cfe2e8fab787a581c42125af6272e1e1769cf1","modified":1629730711177},{"_id":"source/_posts/csapp-lab-2/phrase4.png","hash":"9f34205bc7604838b3ec8fe1e6c7dadb858e6974","modified":1629730711178},{"_id":"source/_posts/csapp-lab-3/phrase1.png","hash":"f4a5efe6ce43c0769dacb2acd508fa56675eacdb","modified":1629730711189},{"_id":"source/_posts/csapp-lab-3/phrase4-success.png","hash":"713c11841e0615826597e0e738c34876ba44600c","modified":1629730711192},{"_id":"source/_posts/concurrency-parallelism/solver-class.png","hash":"4b541a8bbe3622ec73cc1130d003632cc699eabb","modified":1629730711163},{"_id":"source/_posts/csapp-lab-5/cache-simulator.png","hash":"613337bd84fa3e2daff6391f700967455314c808","modified":1629730711223},{"_id":"source/_posts/dao-specification/UMLer.jpg","hash":"edbbd10b31e266f4d7c795f8f1afab405879b005","modified":1629730711225},{"_id":"source/_posts/tflearn-1/tf.png","hash":"ce595a491e93985d6c1326ebf0f75c8e70dfe0b8","modified":1629730711367},{"_id":"source/_posts/virtual-memory/addr-trans1.png","hash":"9c06ab1d3659b5b5e27cc16b6b9c4cb4773d5817","modified":1629730711382},{"_id":"source/_posts/virtual-memory/memory-share.png","hash":"e3099391f0c6b234d66a33562314748139248759","modified":1629730711397},{"_id":"source/_posts/virtual-memory/multi-level-page-table1.png","hash":"4e4e7d76bba3be594ee7db0bc44b21bec28137f1","modified":1629730711397},{"_id":"source/_posts/virtual-memory/tlb-cache4.png","hash":"510b7790bcc10110785ccac3a492b6a7d7ddb43c","modified":1629730711414},{"_id":"source/_posts/virtual-memory/vm-problem1.png","hash":"dec693e7b31651ecb1cf0824936559b2e1e1dea8","modified":1629730711420},{"_id":"source/_posts/virtual-memory/vm-problem2.png","hash":"716a626f5dd455cad99c9826cf8a406d1e63712d","modified":1629730711421},{"_id":"source/_posts/bmp-edge-dection/3-3.png","hash":"216c90b70c8a1b48029231694f8c9f6801f08d9b","modified":1629730711147},{"_id":"source/_posts/bmp-edge-dection/3-log.png","hash":"250fc4167bfec23a920a71096ea9a8c982ec04c4","modified":1629730711148},{"_id":"source/_posts/bmp-edge-dection/3-prewit.png","hash":"b0de110629390d2e031ed4d2ea4930289ab2576b","modified":1629730711149},{"_id":"source/_posts/bmp-edge-dection/3-sobel.png","hash":"6c4306c8d06ae3d3efc25912b273662d6544b01c","modified":1629730711150},{"_id":"source/_posts/c-reference-pointer/reference-class-new.png","hash":"da462e9a2ded92277880da4cccea24dfa65d6e3a","modified":1629730711155},{"_id":"source/_posts/c-reference-pointer/reference-class.png","hash":"dba094ffd898c389bbc19c983d1d3e48f4fef3e6","modified":1629730711157},{"_id":"source/_posts/c-reference-pointer/reference-struct.png","hash":"8571d4edda0e13abe1aa983f86cf9e9fc7625d48","modified":1629730711158},{"_id":"source/_posts/c-reference-pointer/reference.png","hash":"be25b806eedaed23cecd597c60c5eeee4411bad7","modified":1629730711160},{"_id":"source/_posts/csapp-lab-2/cgdb.png","hash":"4a431c3a914be040ca81b225cef9203439e8c518","modified":1629730711171},{"_id":"source/_posts/csapp-lab-2/phrase3.png","hash":"73737818436af849e41738f278ddb46f73520d3b","modified":1629730711176},{"_id":"source/_posts/csapp-lab-2/phrase5.png","hash":"8a93bae8b0f8db8d49593ecd8f162ff4dd09b554","modified":1629730711179},{"_id":"source/_posts/csapp-lab-2/phrase6-1.png","hash":"2fc6ae9d8849830f444640c7636aa574d55767d2","modified":1629730711180},{"_id":"source/_posts/csapp-lab-2/stackframe.png","hash":"a279c2ec85f7abcd2800f0350354d476d4077c39","modified":1629730711185},{"_id":"source/_posts/csapp-lab-2/success.png","hash":"5cc41e9ca137c35d479f8ae2f8d95222fbe1a32d","modified":1629730711186},{"_id":"source/_posts/dip-transformation/rotate.png","hash":"575fed5573cb20f03d8357bcc74387826bcb671c","modified":1629730711236},{"_id":"source/_posts/dip-transformation/shift.png","hash":"dd3e5ab68d1e733b561482ca907b7eb472cdb05d","modified":1629730711244},{"_id":"source/_posts/grayscale-histogram-resolver/1552461156688.png","hash":"e5395140f88b0749aa534e1f8014ce6f703935f8","modified":1629730711320},{"_id":"source/_posts/grayscale-histogram-resolver/1552526052073.png","hash":"7e9c877f69cd2d997136a51662b38eb4dd254ac2","modified":1629730711321},{"_id":"source/_posts/js-concept-1/stackframe.png","hash":"a279c2ec85f7abcd2800f0350354d476d4077c39","modified":1629730711332},{"_id":"source/_posts/pics/1552461156688.png","hash":"e5395140f88b0749aa534e1f8014ce6f703935f8","modified":1629730711346},{"_id":"source/_posts/pics/1552526052073.png","hash":"7e9c877f69cd2d997136a51662b38eb4dd254ac2","modified":1629730711347},{"_id":"source/_posts/virtual-memory/addr-trans2.png","hash":"32d155c369769202c2a55d5bade0402b3c3ece58","modified":1629730711383},{"_id":"source/_posts/virtual-memory/mem-protection2.png","hash":"9dba764612a5d1f1105c3d7b32caef03210eff2a","modified":1629730711391},{"_id":"source/_posts/virtual-memory/mem-protection4.png","hash":"c60e337210ec1016d7b83999c9794ef3d28534d9","modified":1629730711393},{"_id":"source/_posts/virtual-memory/mem-protection3.png","hash":"09a8c426e77cf7cdb584657d012c6de107226819","modified":1629730711392},{"_id":"source/_posts/virtual-memory/multi-level-page-table3.png","hash":"ec10bfb6e7a380bb14dfffda734af5855023f40f","modified":1629730711400},{"_id":"source/_posts/virtual-memory/tlb-example1.png","hash":"e97ceb9dc4fd02736f595e27de35923482079ab4","modified":1629730711416},{"_id":"source/_posts/virtual-memory/tlb-example3.png","hash":"7b4879e38866b5808320ae73fa0662460c617450","modified":1629730711417},{"_id":"source/_posts/virtual-memory/tlb-example2.png","hash":"6fbc81c90433953e8d7f6d9aaa807efc7fabce6b","modified":1629730711417},{"_id":"source/_posts/virtual-memory/tlb-example4.png","hash":"17ee48426b1fee3ea07c84532ecdeed270f7485b","modified":1629730711419},{"_id":"source/_posts/web-study/atom.png","hash":"3618bb16813cee1a226e19d4627bbaa71eadf244","modified":1629730711431},{"_id":"source/_posts/webpack-optimize/analyzer.png","hash":"a059b20af1eefa5b6e998dfdcd78e0e03ce5abc9","modified":1629730711479},{"_id":"source/_posts/webpack-optimize/optimize2.png","hash":"86a55375b9845c967360da123b736c6e033a26f2","modified":1629730711483},{"_id":"source/_posts/webpack-optimize/optimize4.png","hash":"549bf83d128703ea4524c5d9ff852eb29a9aa33b","modified":1629730711486},{"_id":"source/_posts/webpack-optimize/optimize5.png","hash":"e1bd20a6caef06dfbc40a19a501f4f47d243ec5d","modified":1629730711487},{"_id":"source/_posts/c-function-pointer/20140317171259_KCBfP.jpeg","hash":"25ff57eccf8b31c821904354e1525432fe074d05","modified":1629730711153},{"_id":"source/_posts/c-reference-pointer/reference2.png","hash":"30d89310e17f00e6170ca47e86acf2bcf0c76beb","modified":1629730711161},{"_id":"source/_posts/csapp-lab-2/phrase6-2.png","hash":"8e238729c8aa2d0d2c5e622d967e15128fec7156","modified":1629730711182},{"_id":"source/_posts/concurrency-parallelism/multikernel.png","hash":"6d7aa49d60b6f9173b8a921f8de537d1d15d6756","modified":1629730711163},{"_id":"source/_posts/dip-transformation/back.png","hash":"2a435c39a1b8b6038aec726dd20ef453f70ab130","modified":1629730711234},{"_id":"source/_posts/float-think/float.png","hash":"f5de417d2c38362da15490ea22b73c7b4e9568f3","modified":1629730711310},{"_id":"source/_posts/spatial-filter/gray3-3.png","hash":"db5a4638ff91da19547a45eba22494a555dad21e","modified":1629730711364},{"_id":"source/_posts/virtual-memory/addr-trans3.png","hash":"a76c721ed84403002a7a3d4535e2859b01ff801f","modified":1629730711385},{"_id":"source/_posts/virtual-memory/addr-trans4.png","hash":"c1daf27b9d2aa4b81b25030e9552b6361522b363","modified":1629730711386},{"_id":"source/_posts/virtual-memory/addr-trans5.png","hash":"3dfc248858d6cd2341aed82abfff739bb09dee40","modified":1629730711387},{"_id":"source/_posts/virtual-memory/multi-level-page-table2.png","hash":"88b66350de7df3ecda297acaaec9b0abfa52945e","modified":1629730711399},{"_id":"source/_posts/virtual-memory/program-secure.png","hash":"7de6e721fde11d1969755c4bfa3697603a1e682c","modified":1629730711412},{"_id":"source/_posts/webpack-optimize/optimize1.png","hash":"6127c3b1219fd04117e9909201f0a5ac812db6ff","modified":1629730711480},{"_id":"source/_posts/webpack-optimize/optimize3.png","hash":"0c7cc3e9087187357aad8003812e5e1904256754","modified":1629730711485},{"_id":"source/_posts/bitmap-resolver/degrey.png","hash":"2a6f1e0d1207ca78bb0dc38a1c3edf933cd73d99","modified":1629730711143},{"_id":"source/_posts/bitmap-resolver/grey.png","hash":"fc36ff98b7fe783a6b6098a82183d3ebd9697270","modified":1629730711144},{"_id":"source/_posts/bitmap-resolver/origin.png","hash":"0f3c38d809cce2d2591d8f31fbbc31d57a9080fe","modified":1629730711145},{"_id":"source/_posts/csapp-lab-2/bomb.png","hash":"5a05d653f252826b19773de16a2b1e0fa0de5f92","modified":1629730711170},{"_id":"source/_posts/dip-transformation/3-3.png","hash":"ba74180ba0481d4cb59ef103427305f3900ca053","modified":1629730711233},{"_id":"source/_posts/dip-transformation/x-mirror.png","hash":"3a358b3a7ffd02cd39ec175abf56213d821609d3","modified":1629730711246},{"_id":"source/_posts/dip-transformation/y-mirror.png","hash":"e75533f912587dc778c1edb699631d3ebbe2a3c3","modified":1629730711249},{"_id":"source/_posts/spatial-filter/gray2-3.png","hash":"178ef55f5028ce94a2f6a216717eb62855558328","modified":1629730711360},{"_id":"source/_posts/spatial-filter/gray2.png","hash":"d523263af428f05250b98552f3667d6181badcbe","modified":1629730711362},{"_id":"source/_posts/spatial-filter/gray3.png","hash":"ba74180ba0481d4cb59ef103427305f3900ca053","modified":1629730711366},{"_id":"source/_posts/virtual-memory/addr-trans6.png","hash":"2318da6ec6fb3153635b3367f32c0656fecd1ac7","modified":1629730711389},{"_id":"source/_posts/virtual-memory/page-table2.png","hash":"58e2a7c5cc1eea4e2b9f1b51f8bc81883b8ae7c2","modified":1629730711408},{"_id":"source/_posts/spatial-filter/gray1.png","hash":"0c704f3d8ab01ca5baff6307687624edc8f0dacd","modified":1629730711357},{"_id":"source/_posts/virtual-memory/vm-work1.png","hash":"c7779e251c5c87eeecb57565d7c751bff855a771","modified":1629730711424},{"_id":"source/_posts/web-study/sublime.png","hash":"d1812f28af782a22428c8ad439258e8fab823fa0","modified":1629730711437},{"_id":"source/_posts/csapp-lab-1/1546740914782.png","hash":"1ab05a41e2cc58ce29e20fac50335dcb2d77825a","modified":1629730711167},{"_id":"source/_posts/virtual-memory/memory-hole.png","hash":"a37748ef73249b412ffa5c73c1e174f61214f80c","modified":1629730711396},{"_id":"source/_posts/virtual-memory/vm-work2.png","hash":"82dede7fd115597f5548357ca671fa2e1a8151a3","modified":1629730711426},{"_id":"source/_posts/csapp-lab-2/registers.png","hash":"c5ab1b5a40ccc7689c60d3219808b9a2f9fadac3","modified":1629730711185},{"_id":"source/_posts/grayscale-histogram-resolver/3.png","hash":"4bdd5db5ef23de461148ab0fc975b4305c29dd27","modified":1629730711329},{"_id":"source/_posts/virtual-memory/page-table1.png","hash":"35e3c199a6a6937a1f51e1483ecd20aa6c76fbf5","modified":1629730711406},{"_id":"source/_posts/virtual-memory/page-table3.png","hash":"e0e0d1b13bf542747d40014ee48c9c4e198ffc1b","modified":1629730711411},{"_id":"source/_posts/virtual-memory/whatis-vm1.png","hash":"7c6dfb9dc84909b835dc7b822bd061330d13d4de","modified":1629730711429},{"_id":"source/_posts/web-study/edit.png","hash":"e666f070dbaa3445f841c9176610ba7e1a41009b","modified":1629730711435},{"_id":"source/_posts/webpack-optimize/optimize7.png","hash":"44f0293665038dd2e2ec3d4c0e00d39247cfb4c8","modified":1629730711495},{"_id":"source/_posts/webpack-optimize/optimize6.png","hash":"7420537f0a6f9205c6c43624b83006322be6f1ac","modified":1629730711491},{"_id":"source/_posts/grayscale-histogram-resolver/2.png","hash":"3984d76831eb7bdd378766682081a546cb7b6bb1","modified":1629730711325},{"_id":"source/_posts/threshold-segmentation/gray.png","hash":"3984d76831eb7bdd378766682081a546cb7b6bb1","modified":1629730711372},{"_id":"source/_posts/virtual-memory/not-enough-memory.png","hash":"44d6aa50984b8ce80a63198578de9625a67c6c66","modified":1629730711403},{"_id":"node_modules/hexo-theme-next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/_config.yml","hash":"b49dff9ef271f86369d8603807505a178cda0ca7","modified":1641442169962},{"_id":"node_modules/hexo-theme-next/README.md","hash":"fab15a85d9d8d90ecd8879525b9b74fb1c197978","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/_vendors.yml","hash":"c474404eedba7847556ddb4ef733b563b620bc2e","modified":1641442169962},{"_id":"node_modules/hexo-theme-next/package.json","hash":"9fbbfc8048656a77bafde1401cdbeec7e279fb15","modified":1641442169962},{"_id":"node_modules/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/languages/ar.yml","hash":"bca66db21c015dbd32970d8708b898518a773e1e","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/languages/de.yml","hash":"4be7b8b76c81bf1853eb36d2e874b17546a0e792","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/languages/en.yml","hash":"814d81c27fed736055ee300e0a6505b26ff4313c","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/languages/es.yml","hash":"651e3b33d86a7cdb9fd7895ca28279f8b1a24faa","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/languages/fa.yml","hash":"6456d40dd42f44101d9d6e7054e9884e9163f948","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/languages/fr.yml","hash":"b15dc05afdc94de02e5d3fee4f8d3dc5594dd37e","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/languages/ja.yml","hash":"d48c4157e0e02e847aac7b513580d3364c81948c","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/languages/id.yml","hash":"14e794db4eca36b257994d81eb513e61d1edcbd6","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/languages/it.yml","hash":"c1eeab4992c76bfd436bb205ce58b1cfeef55ee6","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/languages/ko.yml","hash":"6387357ac2dd498e8b8d630d27050a59180d7e8f","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/languages/nl.yml","hash":"ecb8e39c6225f3c068a5fdd569ee7dafd5c41a1f","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/languages/pt-BR.yml","hash":"a1f27b3a592fc58f17d247f5563ff4a90a3da5f2","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/languages/pt.yml","hash":"63a3e1e728ba5e6e22150de7331bb8a654f34960","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/languages/ru.yml","hash":"e9af1afe529ca747a04b801401d394b2ad696fde","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/languages/si.yml","hash":"615d18d044f44df476d6bfbf73f7b0edc2632168","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/languages/tr.yml","hash":"0bebba73d6f06c7dad61f80c0d7ad5f6f1791a01","modified":1636772244388},{"_id":"node_modules/hexo-theme-next/languages/uk.yml","hash":"7dd24580c0865c5a7bc4d391855045366a598936","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/languages/vi.yml","hash":"c669c34da544a563ceae3e196addc9df6a78e024","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/languages/zh-CN.yml","hash":"5a3ab21210304efef736e96bad254f789f42c567","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/languages/zh-HK.yml","hash":"f195bb0502ffe66e850077a1af1033455ea65f93","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/_layout.njk","hash":"20e4160cd0deb4fa272cc3aed0f43520b3cf4a9c","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/languages/zh-TW.yml","hash":"92256b90028de9a1e79c6bc0e5885b93e7fb4b17","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1641442169962},{"_id":"node_modules/hexo-theme-next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1641442169962},{"_id":"node_modules/hexo-theme-next/layout/page.njk","hash":"6c40aa438c658eb7f0cd0f6a759f18b43e7e8f93","modified":1641442169962},{"_id":"node_modules/hexo-theme-next/layout/post.njk","hash":"6abeb85fb3e4c382ed4bb6049b12a807e6226e67","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1641442169962},{"_id":"node_modules/hexo-theme-next/docs/ru/README.md","hash":"87edab5a3eb7577a409c01df3f1631de40f8956f","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7a06d443f374bd1e84294067a0ac796afd9fbe60","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/README.md","hash":"02bafc6ee86263790603861e356596f0c916e392","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/_macro/post.njk","hash":"d0ed41b9b05254e19d051b5f91fdcaa125ee7ca6","modified":1641442169962},{"_id":"node_modules/hexo-theme-next/layout/_partials/comments.njk","hash":"c12f8a7497596441503f2541d2f746f2ee7dd594","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/_macro/sidebar.njk","hash":"eb786e8b35e354287cda345c524cd35ec955f692","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/layout/_partials/footer.njk","hash":"19713f472972caac33ae5fbcfe9105da61257de4","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/_partials/pagination.njk","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/_partials/widgets.njk","hash":"852a750524decf1efa587cd52b09e387ed8315de","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/_third-party/index.njk","hash":"d41eeb262978e34de4679d8971a9e7ac5d90ecbc","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/layout/_third-party/nprogress.njk","hash":"80fd1a45e91207fc16df1136e12b8b71b4f65dea","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/_third-party/rating.njk","hash":"1bcdbc7fde26d6d9ef4e7fa43ffcff5a9506b20e","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/scripts/events/index.js","hash":"1ce12eda88fa5df7e76ec7b78b8463fc6618410c","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/scripts/filters/locals.js","hash":"0cd7da6755459d60779f0a7ccf311e26e184d55d","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/scripts/filters/post.js","hash":"ab8bb12e4d55640b1ac4252514468ce37ebcb0b0","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/scripts/filters/minify.js","hash":"0af64049db8188d5f8cc226b353e0d7909819feb","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/scripts/helpers/engine.js","hash":"77b116298a8ecdea8189d5ae68c00bc2ef772a66","modified":1641442169962},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-config.js","hash":"9a07f2d979fc8fe0c5e07d48304187b9b03ea7ff","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-url.js","hash":"a11b71ba0c5012e2cdcab31c15439156b215563e","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/scripts/tags/group-pictures.js","hash":"9ed799c329abf830f623689d7e136991256a24ca","modified":1641442169962},{"_id":"node_modules/hexo-theme-next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_mixins.styl","hash":"acef5acc728f24cb657be8d7010d836b4d556b0e","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","hash":"76bba5d7916e9930e68215a0fce3a7d81c44510f","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","hash":"78ce791cc4ac95386cf6839ca72f5f7b51f86ee9","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","hash":"919f5281c4a04d11cfd94573ecf57b3dbabd3cc8","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","hash":"48497e2156a10155dc42311633a110c9685692c9","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","hash":"2b43e2d576a308289880befc27580dbb2aa34439","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","hash":"e447160d342b1f93df5214b6a733441039ced439","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head-unique.njk","hash":"9167e429a459686c9fc140790124a46d677e6b15","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/brand.njk","hash":"aff4613756456be26415febc668860fdab8d33c5","modified":1641442169962},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head.njk","hash":"d3c094aaef1431fbc9df333529a7b1789ccd134c","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1641442169962},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu-item.njk","hash":"b46f412c0b4f775fd329d50357f722f5d7c1a3ba","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu.njk","hash":"8561e4125b227e5134cb058e2a76fb2e5233ca29","modified":1641442169962},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/sub-menu.njk","hash":"75a158a5b54a3a76ee6590f5e0e2dd4a9f0be869","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/breadcrumb.njk","hash":"edb3bb6d644b7407673c5ef3a426a244e98fcf89","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/schedule.njk","hash":"ca2ccf3cf1874c45712f192ad45dea96fbd9920d","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-followme.njk","hash":"154df0bb323c332d8c25343f258ee865e5553423","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-footer.njk","hash":"bde2c7356d9362972bde41cc206d5816f8ed714d","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1641442169962},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-related.njk","hash":"7384e6390067ef2a84e7310d6adb3f6104ed62e2","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-reward.njk","hash":"002b51d0cae3f2e2e008bdc58be90c728282de5b","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/cloudflare.njk","hash":"c978e9efd472c4825f93b83524b11f1c4f7efaab","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/_partials/sidebar/site-overview.njk","hash":"3d8591bb92df77ceb9d5b07bc76da1ca89e5bd76","modified":1641442169962},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/index.njk","hash":"2d36a481a70d5f450f1f166dc556ac1218b18537","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/gitter.njk","hash":"f8cc14b7aa949999a1faaeb7855e2f20b59a386d","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/katex.njk","hash":"d82c24136bbd3443b85f07f5579845833b594684","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"7fa8701c86485b2fe7324e017101a32417902397","modified":1641442169962},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"135b87d151055eefdbc711d9e704b112b3214a84","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/config.js","hash":"b0ced2583fdd505da3ef27a9db9c55cc7b936732","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/utils.js","hash":"501799ee0c949c079edd944f5efae63bbdc48049","modified":1641442169962},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/vendors.js","hash":"299664182f502447c07301461db99bfd6993fdac","modified":1641442169962},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Mist.styl","hash":"e1fbf169b9b6a194b518240cbd06ec3c48b83d61","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"c65536a128b9bc9dbe2fbb1b235a3cded2891002","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_variables/base.styl","hash":"163c7441d777bee87042d475e6ce0fde199add28","modified":1641442169962},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","hash":"9a836d2bcc3defe4bd1ee51f5f4eb7006ebdd41b","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1641442169962},{"_id":"node_modules/hexo-theme-next/source/js/third-party/nprogress.js","hash":"7d56b18a2bdece5468470c70c5f3eb79d4120964","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"bab653bcf226311381e8411a0492202f1bf1fce9","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d4809783ded05625675b1b4bbd9e99d7f5f7d7f9","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/index.styl","hash":"fe1868f47681e00a33a96199302be85377282f63","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"64775c729512b30b144ab5ae9dc4a4dfd4e13f35","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"d0a7c99095f490b0d2ed6b1be43d435960798cec","modified":1641442169962},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"b5c7782368889fa9fd93807d28ff2daf270e3703","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"4817e77577896ab5c0da434549917ee703a3f4cf","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"572a41499391677d84b16d8dbd6a996a3d5ce041","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"5604ac1e161099a4d3e5657d53507268866dc717","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"357b899ac0f0dfbbbebf1ea972030c7cefa463ce","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"b332868d76d9f1651efd65abfc0d3c9d699b1a45","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"fd49b521d67eaccc629f77b4e095cb7310327565","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"06080fd963c904d96c00eff098a284e337953013","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"8a70d51d8f7cd113e5fbc9f0e70c46a072f282c8","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"82a29572dd90451f75358a2ee2522b87304a0bb8","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"944364893bd7160d954c10ba931af641c91515a4","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"b741ab96e73370711c63a6581159f2ea8b5bfa1b","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"6eee86c8f0175d6c09e434053516cd8556f78d44","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d9141e6e14a56b5952488101e9a8388c2170e270","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1641442169962},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","hash":"ac401e3736d56a3c9cb85ab885744cce0b813c55","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","hash":"45c485f82258d246f37deb66884bd2643323ef3a","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","hash":"0960f16107ed61452fb0dffc6ed22dc143de34ef","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","hash":"3dc4628efa6debd6490fc0ebddff2424a7b319d8","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/index.styl","hash":"d0805a763176b3c0003967401644f41dfe3bc9e8","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-body.styl","hash":"ea351936d71e0b6259febac3d7d56d1be6927bf9","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"ec37a36e94ba791663607a5022f763915778578f","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"fc1a7bac6493f24aa50665574f37f3dd954f210c","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-footer.styl","hash":"1d284f3ea03ba9b4feb76b375e539a8e0bccf1c3","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"010c901e4ef49a606f8a350efbf09044e76d2ff3","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"07cff69f2d57e6321595f64c16d8b763dc88df6a","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"b6677dc2a2368084ab82bb4f145ac79e5966c150","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"070737d101e7cd58e997e8c7af09958268c43a21","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/index.styl","hash":"fb0b9eaca498be8af0bc430171a17becf87f8554","modified":1641442169962},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"e72799ce3f9b79753e365b2f8c8ef6c310668d4a","modified":1641442169962},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/related-posts.styl","hash":"41ed817e1eb64078074e245e771446ee041e5790","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"392fd53a8dd4e3f33a853ebb24290a622300e0ff","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/index.styl","hash":"650ed4ad6df1b6ff04647e7b6d568304e4d3ed2e","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"759e582d34d08e3386c55d87a835a9523608619f","modified":1641442169962},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/footer/index.styl","hash":"8b9407e5cfd0571ef8de7df19022b268f962fa2f","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"52fc98b1435129eb3edb9293ced9e507741f1350","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/index.styl","hash":"cee43480eba028c37d51cb620c2d81486aa24e01","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"9950c3188a28e1c63b5498b7bdcd14b12ace3e28","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"b926e368f702f8686aaa2eb98d3d2e533418958c","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"fbdb63c6a8887d19b7137325ba7d6806f728139c","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"ee94a1a27090ad24e3ed579093088d97ff96d77d","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"021a37cf178440cc341940a299d3bca359996c6b","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"3103b81fc76b59e1e2c161e2c484625c770ed66f","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"83ee4993710fc8daa1c8dbfccd5d5091fd244c30","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/index.styl","hash":"f2328caa94645836e06fb39a6a9c9a84ed68a8b5","modified":1641442169962},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/index.styl","hash":"3f76c73a891bbc10679753e702feba9e8a5ffdd2","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1629728270409},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"d27fbf7799695295dd5860a161a13ac4d90c5ba4","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"9b34143aec49e390e18f380026a45096f7477722","modified":1636772510055},{"_id":"source/_posts/fallout4/ScreenShot2.png","hash":"eab99ed147f0a98c84dfbaa7c9823a3877398e1c","modified":1629730711281},{"_id":"source/_posts/threshold-segmentation/origin.png","hash":"8ce90a96302b90b632279f07759f96ced8ca960d","modified":1629730711379},{"_id":"source/_posts/dip-transformation/scale.png","hash":"f863c9aad3a4237904af13f334f9a27217a64946","modified":1629730711243},{"_id":"source/_posts/grayscale-histogram-resolver/1.png","hash":"a0709e701b9489a4a22282cadfcb9f5690701d8d","modified":1629730711318},{"_id":"source/_posts/digital-image-kernel-collection/top.jpg","hash":"6bbcd1286cb108106cbb619c1b57980a63645ac5","modified":1629730711231},{"_id":"source/_posts/docker-one/docker.png","hash":"e2e059ebf9a28f6b92a7defb12168340969cc9ca","modified":1629730711255},{"_id":"source/_posts/osdev-platform/osdev.png","hash":"ff0739fdefafa42fc228cf9004bc9220ba42af89","modified":1629730711343},{"_id":"source/_posts/web-study/web前端.png","hash":"190e575a7d04e567635acdd21e67d8c21fff7d32","modified":1629730711470},{"_id":"source/_posts/web-study/布局.png","hash":"e789ca3fb187cf7643e8aae2a91921d550cd0aff","modified":1629730711477},{"_id":"source/_posts/shadow-thinking-in-winapi/windows.jpg","hash":"8754c3377c92cbdd4a971fe45124f183386500b0","modified":1629730711354},{"_id":"source/_posts/fallout4/ScreenShot3.png","hash":"21debd54b6abdcda1aefcc779508c5dd145f2e1d","modified":1629730711288},{"_id":"source/_posts/fallout4/ScreenShot5.png","hash":"db0bc02e9f2541866b8a37315c28961fb97788ac","modified":1629730711308},{"_id":"source/_posts/fallout4/ScreenShot1.png","hash":"1f66a03b9b36d93163fc21983e4bc3e91d2c695e","modified":1629730711277},{"_id":"source/_posts/fallout4/ScreenShot0.png","hash":"5d50dd668845fd0adebab4e92b5426958adcf97f","modified":1629730711267},{"_id":"source/_posts/fallout4/ScreenShot4.png","hash":"2078717792a29303596399bc8a464474d926c9e3","modified":1629730711300},{"_id":"source/_posts/csapp-lab-4/pipe.jpg","hash":"8d838bb47b73e6e23548590c130330c4225e6b81","modified":1629730711206},{"_id":"source/_posts/csapp-lab-4/seq.jpg","hash":"7ed7c5a5e2dd783d73190a42d3a3564b8c77999f","modified":1629730711222},{"_id":"public/search.xml","hash":"aa63db6f6b9bd46f39fe75ffe03f1a0a3fc11cb1","modified":1629815325147},{"_id":"public/archives/index.html","hash":"1850385be1c594aba4e8f948f1caf101ccfd549e","modified":1629815251990},{"_id":"public/categories/index.html","hash":"042861e3816deff62160592e961756e13a608711","modified":1629815161552},{"_id":"public/tags/index.html","hash":"cb6a25d8dff9f826d106a6838a00958e09b141f3","modified":1629815161552},{"_id":"public/lc-solutions/index.html","hash":"62907e6ee4abffc3eefd3c1b0928cfbddce932f7","modified":1629815161552},{"_id":"public/learn-method/index.html","hash":"5b032062d59af340f224f39e18caf4e8e8c85dbf","modified":1629815161552},{"_id":"public/git-learning-1/index.html","hash":"91a9fb41a62fd40694d1be758ca1eb548a4b42b2","modified":1629815161552},{"_id":"public/git-learning/index.html","hash":"bc2b8ca1b0cf6e170a38607c52c273497bada954","modified":1629815161552},{"_id":"public/js-debouncing-throttling/index.html","hash":"a7ffcd3f6dc148f38698bd8b9e210254f7396f2e","modified":1629815161552},{"_id":"public/js-dont-know-const/index.html","hash":"319b6c2ad3517cd08d618ea6d98934fdddd48d24","modified":1629815161552},{"_id":"public/js-dont-know-property-hidden/index.html","hash":"32824cde8b2b04b6b6e1641cb14922b5fdbbea73","modified":1629815161552},{"_id":"public/css-reflow-repaint/index.html","hash":"da0c4f651789e2a1dde461417bee18be92d7c789","modified":1629815161552},{"_id":"public/css-selectors/index.html","hash":"28b84b2075930854da1800b6fbb167539f19d816","modified":1629815161552},{"_id":"public/js-concept-17-prototype-inheritance/index.html","hash":"953dfe31d60e010faa240ffefb2c07f2d01e34d8","modified":1629815161552},{"_id":"public/js-concept-2-primitive-type/index.html","hash":"f24307116fe5ed6ced10eab42a0d44b85cfacbe5","modified":1629815161552},{"_id":"public/js-concept-19-map-reduce-filter/index.html","hash":"0c11e8a8b1f3ae3b97edd28601308fe14115a70d","modified":1629815161552},{"_id":"public/http-change-history/index.html","hash":"728fc6c58f75d0e3fdb56da061698560c5122086","modified":1629815161552},{"_id":"public/http-status-code/index.html","hash":"85c72c4f2ae8323c0c418ec47762b36c71be17e4","modified":1629815161552},{"_id":"public/secure-same-origin-policy/index.html","hash":"0884953dd8ea87241824ea0468f328607cd733e6","modified":1629815161552},{"_id":"public/js-taskqueue/index.html","hash":"502cd4e4f8fe60f03ea06179548bdf7516af23e9","modified":1629815161552},{"_id":"public/secure-xss-csrf/index.html","hash":"162ffc6311945d2bcc456d5a1eafc93a1413454b","modified":1629815161552},{"_id":"public/css-align-center/index.html","hash":"5f6d3f8e2e3b8ab8ef2e55ac0d64dea75f8f6985","modified":1629815161552},{"_id":"public/js-concept-7-scope-2/index.html","hash":"50b3f0b8c761a0844dd96a9ed0a5ff47b37c3dca","modified":1629815161552},{"_id":"public/js-storage/index.html","hash":"e97eab7d827442db23d604e4a1fec6b1e8a4b8b7","modified":1629815161552},{"_id":"public/js-concept-15-this-call-bind-apply/index.html","hash":"d3a73a335cda286931b8a3731a899900117effbb","modified":1629815161552},{"_id":"public/js-concept-21-closures/index.html","hash":"b4acf14fb56299570c53350e038d1ca247429268","modified":1629815161552},{"_id":"public/js-concept-7-scope/index.html","hash":"a7a4f6acd4ee2d6e4aa07cecfda29be19ba59162","modified":1629815161552},{"_id":"public/js-concept-1/index.html","hash":"6d76d8f1397c6b66033b986cd40a490ca95b1609","modified":1629815161552},{"_id":"public/csapp-lab-6/index.html","hash":"3e2aa1d38a059c1f4b9cc748b37635679dfcdb15","modified":1629815161552},{"_id":"public/ieee754-float-instance-js/index.html","hash":"6a7b03028a4885efd4fa90b57f5bd11b5f47f6dd","modified":1629815161552},{"_id":"public/csapp-lab-5/index.html","hash":"f396866628e6ab26d961ee40deeeda6a1146f6e2","modified":1629815161552},{"_id":"public/bathing-thinking/index.html","hash":"a1a7d43fc60e6b2d3a05bd163f448315865c3de8","modified":1629815161552},{"_id":"public/bmp-edge-dection/index.html","hash":"14b72d17bb9ec2b832841287220bfe304af8c911","modified":1629815161552},{"_id":"public/fallout4/index.html","hash":"303fcb0ff21e0b363f8bc1ed3e801fca3195f20b","modified":1629815161552},{"_id":"public/csapp-lab-4/index.html","hash":"45916e64cb26cff7e0765951ecf4b0c06ff55580","modified":1629815161552},{"_id":"public/threshold-segmentation/index.html","hash":"91d814f699ca7447078aa7bb5563acb449ae30f8","modified":1629815161552},{"_id":"public/c-reference-pointer/index.html","hash":"8d9de1b16b4b38868941b15a89adb28200acb13f","modified":1629815161552},{"_id":"public/c-function-pointer/index.html","hash":"d376a336db19e6f3c0f1fb647c451eaee5b76a9b","modified":1629815161552},{"_id":"public/what-person-i-am/index.html","hash":"5ce67f67eaf8e96f8b2036815e9da98b67839c1b","modified":1629815161552},{"_id":"public/dip-transformation/index.html","hash":"98d43e09c022d5ecbdf81544a4ede5e12e9a4fc5","modified":1629815161552},{"_id":"public/csapp-lab-3/index.html","hash":"ba6b8ac98bbbba50131f841ad88ce5cfca1e1964","modified":1629815161552},{"_id":"public/spatial-filter/index.html","hash":"3ec45c16fe92c61a6d820bc5ea7727d5db3cffc7","modified":1629815161552},{"_id":"public/concurrency-parallelism/index.html","hash":"5364b24245b0f7f91aa074f5129cc5d55b92cce0","modified":1629815161552},{"_id":"public/csapp-lab-2/index.html","hash":"a8f44b03135d0b74b34bd5d4fd51634b7b2c5bc4","modified":1629815161552},{"_id":"public/digital-image-kernel-collection/index.html","hash":"b2713596fb5c82eb7bd899cd7270891cdfa987ab","modified":1629815161552},{"_id":"public/grayscale-histogram-resolver/index.html","hash":"62968227c28849187498cb81cdca68978f5a55ad","modified":1629815161552},{"_id":"public/5g-technology-advent/index.html","hash":"08fb3fe1404a75a3ff0d8d433c88d9f5da016e78","modified":1629815161552},{"_id":"public/byte-alignment/index.html","hash":"67e7666400adc06937c571e01dc216a716dc41c4","modified":1629815161552},{"_id":"public/bitmap-resolver-rectify/index.html","hash":"d2ed85ca2ada32ca004d2db4ab938c6942418cd4","modified":1629815161552},{"_id":"public/bitmap-resolver/index.html","hash":"02abf8c59b7fd284cef4366dd78f38a6aeff9c51","modified":1629815161552},{"_id":"public/archives/page/2/index.html","hash":"e5ceb639ed306f74cda7ee3526853792f7d71b7d","modified":1629815251990},{"_id":"public/archives/page/3/index.html","hash":"c0360850c2fd8f33c68b6ce5733535ee610a7872","modified":1629815251990},{"_id":"public/archives/page/4/index.html","hash":"5aeaa741ab258c4e0218ae48f7f94d68695d5539","modified":1629815251990},{"_id":"public/archives/page/6/index.html","hash":"7bb4207bbb23de5fd56517ba23e6a4f42643d9f8","modified":1629815251990},{"_id":"public/archives/2018/index.html","hash":"9b705b0b78d32328f6373a00e406dbd79f660117","modified":1629815251990},{"_id":"public/archives/2018/page/2/index.html","hash":"9b81a5ebec30d9302eea2f4ec2d4a7a840553d4f","modified":1629815251990},{"_id":"public/archives/2018/01/index.html","hash":"805eff1149a6929d4b912c304b21352193616c3b","modified":1629815251990},{"_id":"public/archives/2018/02/index.html","hash":"8bd7256dc396eb3e611fa721cf20838ea707719f","modified":1629815251990},{"_id":"public/archives/2018/03/index.html","hash":"f8c486ccad802c996a7447e59e29cfc325dd2a7a","modified":1629815251990},{"_id":"public/archives/2018/09/index.html","hash":"ce5c37a36383c114a5b79c797df0e9ae0a963548","modified":1629815251990},{"_id":"public/archives/2018/10/index.html","hash":"630c2b27380566600f5373953afe549c60b35f53","modified":1629815251990},{"_id":"public/archives/2018/12/index.html","hash":"f975c437444cc42fbe8e29aeac0310256616ece4","modified":1629815251990},{"_id":"public/archives/2019/index.html","hash":"cc1f38ae9a5ff94590eeb17c9a1df0ee295c7e08","modified":1629815251990},{"_id":"public/archives/2019/page/2/index.html","hash":"9d523c7245252e224d2bd53c1b579fd28bfef964","modified":1629815251990},{"_id":"public/archives/2019/page/3/index.html","hash":"bb747f1809ad7c4f19314424e69884bcc2bb8e33","modified":1629815251990},{"_id":"public/archives/2019/page/4/index.html","hash":"b5327cf2b45c383ac103f4dca9e4b948e472e164","modified":1629815251990},{"_id":"public/archives/2019/page/5/index.html","hash":"cacaa7fa613c06086fbd6f444c0eba09ecc725d4","modified":1629815251990},{"_id":"public/archives/2019/02/index.html","hash":"f0711083fe587cf35a8aefc7e394d219d5688c0e","modified":1629815251990},{"_id":"public/archives/2019/03/index.html","hash":"64bd10a67a59b85041d1f93c29bf8eb73ecefa25","modified":1629815251990},{"_id":"public/archives/2019/03/page/2/index.html","hash":"819cddc1d2836be348bd514a59777b01bf5dc983","modified":1629815251990},{"_id":"public/archives/2019/04/index.html","hash":"fb3ac870faf3545a338e6847671bfaba3ffd55bd","modified":1629815251990},{"_id":"public/archives/2019/05/index.html","hash":"76508095b7359075f5a5979eaa1e58a0edb20a61","modified":1629815251990},{"_id":"public/archives/2019/07/index.html","hash":"7b38763faa353f7817a64393a85e5cc054b07708","modified":1629815251990},{"_id":"public/archives/2019/09/index.html","hash":"43943e4ac2a2cc0ff52e1b5111034b8a0a47129f","modified":1629815251990},{"_id":"public/archives/2019/10/index.html","hash":"923df519318a32e9e5c2f2b0cfee46cbc6d4a2f0","modified":1629815251990},{"_id":"public/archives/2019/11/index.html","hash":"aa52ae2fdcb1b01188ab6ef23175f77e0867e7a9","modified":1629815251990},{"_id":"public/archives/2019/11/page/2/index.html","hash":"5582e0ef806bd152c4e20ee62bc52e0bb96f2fe9","modified":1629815251990},{"_id":"public/archives/2019/12/index.html","hash":"db05ec07197f2be997ff113a873b598fc6a51dd1","modified":1629815251990},{"_id":"public/archives/2020/index.html","hash":"0d0297b8d759e4a604055c67027d523a1f8611bd","modified":1629815251990},{"_id":"public/archives/2020/02/index.html","hash":"73bc3e584eabcbe3d576f75b157285018191de2b","modified":1629815251990},{"_id":"public/archives/2020/03/index.html","hash":"fd639c64258b4110801f9f9c3ff5f0bcd30379ae","modified":1629815251990},{"_id":"public/categories/Technology/index.html","hash":"55ce4eb76bde0fc8896eff70076b01b8ffcd250f","modified":1629815251990},{"_id":"public/categories/Computer-Science/index.html","hash":"f3cd863fd7847cce5999223186cf9b16a2962b96","modified":1629815251990},{"_id":"public/categories/Computer-Science/page/2/index.html","hash":"8abf7c4081c042bb59ff33c120b6d1faa892c4c5","modified":1629815251990},{"_id":"public/categories/Computer-Science/page/3/index.html","hash":"aa55a1b0dff61d935441fcfa8b04543da6fcd78e","modified":1629815251990},{"_id":"public/categories/Back-End-Development/index.html","hash":"fe6ef5a7bbfc7af152fa48269e9475b4d0a50f3d","modified":1629815251990},{"_id":"public/categories/Computer-Science/Operating-System/index.html","hash":"c9d7d82cf3114e4b19efbcbe918fdf98c78e652b","modified":1629815251990},{"_id":"public/categories/Computer-Science/Operating-System/page/2/index.html","hash":"493af24c6c1edced92e04835eb79ae6a3cdc16ae","modified":1629815251990},{"_id":"public/categories/Computer-Science/Computer-Graphics/index.html","hash":"a2c722039104ad88c195c8b2fb6b7f9a1294ec70","modified":1629815251990},{"_id":"public/categories/Front-End-Development/index.html","hash":"1b48fb86c9ac6a6a293ee413cd4770a73b53ae4f","modified":1629815251990},{"_id":"public/categories/Front-End-Development/page/2/index.html","hash":"c06dfe17d02c165d6443ede9bd4dffd397d17eff","modified":1629815251990},{"_id":"public/categories/Back-End-Development/C/index.html","hash":"bc971f73b3d8a288de95376ed7eca4543f4f9d4f","modified":1629815251990},{"_id":"public/categories/Back-End-Development/Java-Web/index.html","hash":"4083ee59d0addc0197a58e2ac3506d8594aae71c","modified":1629815251990},{"_id":"public/categories/Tools/index.html","hash":"759ad19fcdb1ec11f649bae6009251dbdfad3fff","modified":1629815251990},{"_id":"public/categories/Game-Review/index.html","hash":"311457575aa5955a99d50978f926a6dc0d50500c","modified":1629815251990},{"_id":"public/categories/Protocol/index.html","hash":"d9adf7bd4336566b2175685b581453d5afd861a2","modified":1629815251990},{"_id":"public/categories/Front-End-Development/CSS/index.html","hash":"b7754b374eebf71467d3134258d002202072a17e","modified":1629815251990},{"_id":"public/categories/Front-End-Development/JavaScript/page/2/index.html","hash":"29dd1a3f497202459a0292d260915beb5f983e18","modified":1629815251990},{"_id":"public/categories/Front-End-Development/Web-API/index.html","hash":"dba381af5d7ce89f3ce19799247caecf573e0640","modified":1629815251990},{"_id":"public/categories/Algorithm-Data-Structure/index.html","hash":"6b9c37ef57599cd9dcf405ce16b4577d204ed24a","modified":1629815251990},{"_id":"public/categories/Method/index.html","hash":"92987fc648449af8c19906d37eee9b6eb08e0810","modified":1629815251990},{"_id":"public/categories/Tools/Docker/index.html","hash":"e3de429da8a2226b45b6e5be14ec18367697ac49","modified":1629815251990},{"_id":"public/categories/Security/index.html","hash":"0310b62ccb4a946aa323bee78d8da21d34ae96f6","modified":1629815251990},{"_id":"public/categories/AI/index.html","hash":"ef13866a991532fa8e17a44f757da9df1808028a","modified":1629815251990},{"_id":"public/categories/Game-Review/FPS/index.html","hash":"30910be4c5f03788480aee7df55f2f3c8b44b9b7","modified":1629815251990},{"_id":"public/categories/Tools/Git/index.html","hash":"21300e7eec4a034fc96560532fe13612daa34b1f","modified":1629815251990},{"_id":"public/categories/Protocol/HTTP/index.html","hash":"1c96edee6eec2abf8c7c8941533595b3c0c3a10c","modified":1629815251990},{"_id":"public/categories/AI/Tensorflow/index.html","hash":"b6a050125c008cbe17517a671f78e35fa638085a","modified":1629815251990},{"_id":"public/categories/Prose-and-Essay/index.html","hash":"084aba51609de6c345740e225513ca1dc011f9f5","modified":1629815251990},{"_id":"public/tags/Technology/index.html","hash":"9d42c37db58ed3ee7bb8b91a0861733050def2d5","modified":1629815251990},{"_id":"public/tags/5G/index.html","hash":"7fd3c10a519bb4cdc4f9f290fe11ee7d9adfd833","modified":1629815251990},{"_id":"public/tags/Computer-Science/index.html","hash":"d4f90b4d80ff78c7b0558048b84bda031dbd5879","modified":1629815251990},{"_id":"public/tags/Prose-and-Essay/index.html","hash":"c0fc687820af39307644aebf0e90404cbce02e9d","modified":1629815251990},{"_id":"public/tags/Computer-Graphics/index.html","hash":"19ef048a141a29682bddbd370a5869c88fcd56c3","modified":1629815251990},{"_id":"public/tags/DIP/index.html","hash":"11683f189230d132780044c546fee43138081ef6","modified":1629815251990},{"_id":"public/tags/CSAPP/index.html","hash":"82d2c66721338b65df33f7aabadd410351fc03aa","modified":1629815251990},{"_id":"public/tags/C/index.html","hash":"e5b1ac96924d658ae50f4bc7b72898176439e12e","modified":1629815251990},{"_id":"public/tags/Functional-Programming/index.html","hash":"53870ace3b339aa370b6fbfba8cc382bab6c4220","modified":1629815251990},{"_id":"public/tags/Express-in-English/index.html","hash":"a6c01321f8f201aa5c557b52f6689304e04a425d","modified":1629815251990},{"_id":"public/tags/Operating-System/index.html","hash":"ac3d162e9ed2c92c49b37f3299ffb5cdd3af1c2d","modified":1629815251990},{"_id":"public/tags/Operating-System/page/2/index.html","hash":"c1512ff95e5cd83fda218bee4de34973ad2f7401","modified":1629815251990},{"_id":"public/tags/CSAPP-Lab/index.html","hash":"c4d2edffeb709956e0fff7483519fe991e9cebfc","modified":1629815251990},{"_id":"public/tags/CSS/index.html","hash":"99d7f5a7f7ad891f58f93ad1936285af4734ac69","modified":1629815251990},{"_id":"public/tags/Java-Web/index.html","hash":"0a1177f36cc28b08d4c2727a986af0ef344e7ac1","modified":1629815251990},{"_id":"public/tags/Docker/index.html","hash":"00300fd4d01be04f2af17b2411d453c14ac3b150","modified":1629815251990},{"_id":"public/tags/Docker-Compose/index.html","hash":"333ce15c12ba9a3a787c09a57b0cc708c097e8e9","modified":1629815251990},{"_id":"public/tags/FPS/index.html","hash":"e5e262e734626213dd9a31bd75e36d28888d38c2","modified":1629815251990},{"_id":"public/tags/Game/index.html","hash":"36d2b28d6a0f7d529671628fb55967b6ca623b17","modified":1629815251990},{"_id":"public/tags/Git/index.html","hash":"b0e4e3dab4e6033090fe06a671db4325013bc76d","modified":1629815251990},{"_id":"public/tags/Protocol/index.html","hash":"5bfed0e941c20930046018e2ae4ae5c424050d25","modified":1629815251990},{"_id":"public/tags/HTTP/index.html","hash":"1c5f851104159c870be9ce7127b523147ec9a820","modified":1629815251990},{"_id":"public/tags/JavaScript/index.html","hash":"04527e129bc3eaf7c9cc617f486a754fc15c8e98","modified":1629815251990},{"_id":"public/tags/JavaScript/page/2/index.html","hash":"ce17f74d99d72de0c33917907ccc8c4757f3cc9b","modified":1629815251990},{"_id":"public/tags/33-JS-Concept/index.html","hash":"fa1aa5632cab7e4026b7f7bf435c3963a040d892","modified":1629815251990},{"_id":"public/tags/Web-API/index.html","hash":"d9a4d479a53d007d5e6bfcea9b7a5cd2a18266fe","modified":1629815251990},{"_id":"public/tags/Algorithm/index.html","hash":"e21dd4f3332d5887a9b0f40c2fd44069622453ea","modified":1629815251990},{"_id":"public/tags/Data-Structure/index.html","hash":"8328dcf11a144b29de246dff2cb8cf2e94f394de","modified":1629815251990},{"_id":"public/tags/LeetCode/index.html","hash":"729ac6756336a5dc487482041b49528461e9db0f","modified":1629815251990},{"_id":"public/tags/Method/index.html","hash":"c502f1cfef841c16e2a39f9ddcec8434d51c914e","modified":1629815251990},{"_id":"public/tags/Security/index.html","hash":"c1f56ef5aa382dffcd0577b3e46a80e726985aa9","modified":1629815251990},{"_id":"public/tags/Windows-API/index.html","hash":"95f966800a9872e45492360804ddb0500240170d","modified":1629815251990},{"_id":"public/tags/Tensorflow/index.html","hash":"8c136dda9eca3b52bc8ba1146b50925ef5763c25","modified":1629815251990},{"_id":"public/tags/Python/index.html","hash":"725c38d7f934280f4b156d8c15ffe62d3b34d06f","modified":1629815251990},{"_id":"public/tags/Front-End-Development/index.html","hash":"eaf8b567ef4d777ca7d1b369e0e53f65a12b9ea4","modified":1629815251990},{"_id":"public/tags/Webpack/index.html","hash":"eb51862d986b19f6a5b7e8ff90c54992487bc109","modified":1629815251990},{"_id":"public/float-think/index.html","hash":"de7d36e3cd821860cdf2bc7141bceea0afe09d65","modified":1629815161552},{"_id":"public/csapp-lab-1/index.html","hash":"da2325cee25fd8dd420e9a29bf832072fe9b3590","modified":1629815161552},{"_id":"public/tflearn-1/index.html","hash":"019a54edf5958dcc430939bc83bb492ed24151c2","modified":1629815161552},{"_id":"public/osdev-platform/index.html","hash":"29e2cc1a622417b9e4b7f3d99c24db51e50e5054","modified":1629815161552},{"_id":"public/virtual-memory/index.html","hash":"b7e43d92fc70d350003cfb872eb01cc0f93a4e1e","modified":1629815161552},{"_id":"public/thinking-2018-9-23/index.html","hash":"7d78360a7a5cd3754b6a7faba2c8ff3154907cc2","modified":1629815161552},{"_id":"public/shadow-thinking-in-winapi/index.html","hash":"68654d126dba6a5d2caa89f1f2523754a3950434","modified":1629815161552},{"_id":"public/daul-system-principle/index.html","hash":"f5fbc45a90a987bbca6b3d33c053c73fd0467e9e","modified":1629815161552},{"_id":"public/dao-specification/index.html","hash":"c5a7ebeb3ebec260af70e1c2f202c53a853aa89a","modified":1629815161552},{"_id":"public/docker-two/index.html","hash":"7f378a62599e20e229c10bddd166ed5d787190e3","modified":1629815161552},{"_id":"public/docker-zero/index.html","hash":"dd537af4f33c77012dd69c2d36b0ab177276403a","modified":1629815161552},{"_id":"public/docker-one/index.html","hash":"cfad225bd3186c951c758d33323e76032b1449af","modified":1629815161552},{"_id":"public/webpack-optimize/index.html","hash":"8136504e69b8b97597d9bfeda28d37b4ec4f6fa3","modified":1629815161552},{"_id":"public/web-study/index.html","hash":"21bc89315481d16754b272f7d8e02a3930c182bf","modified":1629815161552},{"_id":"public/archives/page/5/index.html","hash":"6b1cab7383889ab410b7c6039417db8ae1d33e9b","modified":1629815251990},{"_id":"public/categories/Front-End-Development/JavaScript/index.html","hash":"15a1de87c8a1bd5b0ba9bb72fea2ebae1506e8ba","modified":1629815251990},{"_id":"public/index.html","hash":"55120d985f8d347dd229e4a8be2f17771024884b","modified":1629815251990},{"_id":"public/page/2/index.html","hash":"3d55944256bbe25faad95155bb433fac07c38c5b","modified":1629815251990},{"_id":"public/page/3/index.html","hash":"9a3bee21a1d71a232959764b25d5ebdcf122d41e","modified":1629815251990},{"_id":"public/page/4/index.html","hash":"749a39986335235be74348931836b3399338ecc6","modified":1629815251990},{"_id":"public/page/5/index.html","hash":"e33b7c1e11dcfd3d06d0a8314976762c87a4511f","modified":1629815325147},{"_id":"public/page/6/index.html","hash":"a054be7e0bd45f91ad5a282b5a3727fae0f2fbc2","modified":1629815251990},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1629815161552},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1629815161552},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1629815161552},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1629815161552},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1629815161552},{"_id":"public/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1629815161552},{"_id":"public/5g-technology-advent/1552395582880.png","hash":"812cda6416f8a4861f28647b3ac75079ec46c797","modified":1629815161552},{"_id":"public/bitmap-resolver-rectify/n4xout.png","hash":"75f4c0ba215e47d1959c6c24259364140d8201d5","modified":1629815161552},{"_id":"public/bitmap-resolver-rectify/1552183022513.png","hash":"27ea08970f1d51a2a50882d9a5da02a86e786a25","modified":1629815161552},{"_id":"public/byte-alignment/1552037289894.png","hash":"73a85e9c3e6d10ed751ab1ea08064ebf7fa992ee","modified":1629815161552},{"_id":"public/byte-alignment/1552037549973.png","hash":"a32a6a713ecf67ed58d83ac6302ad8b3d2940a24","modified":1629815161552},{"_id":"public/byte-alignment/1552038354295.png","hash":"10484776d9d40879643655aaa634ec532db5d7a4","modified":1629815161552},{"_id":"public/byte-alignment/x86-size.png","hash":"4ebb6c03f3b395503ddffc80f81388a2294ff8bd","modified":1629815161552},{"_id":"public/byte-alignment/x64-size.png","hash":"5bca5551793eb35654673383809c826f9d2b6b84","modified":1629815161552},{"_id":"public/csapp-lab-3/1553868529136.png","hash":"4fff6d3cc1dae7df10e69e9380b302056ff64445","modified":1629815161552},{"_id":"public/csapp-lab-3/1553870526705.png","hash":"7b8a7def9249dfe403f9809d203f197feac4e3ad","modified":1629815161552},{"_id":"public/csapp-lab-3/1553869869465.png","hash":"df66b07f560582f06d4d4e85549fc440a34a224c","modified":1629815161552},{"_id":"public/csapp-lab-3/phrase1-success.png","hash":"4bc744696bdd13faecf68408c23575194c0e46ad","modified":1629815161552},{"_id":"public/csapp-lab-3/phrase2-insert.png","hash":"bc988de4d61084e73287a1d7fb82844a39376478","modified":1629815161552},{"_id":"public/csapp-lab-3/phrase2-success.png","hash":"b23929af05a57388861ed2a9370cca84dab9b570","modified":1629815161552},{"_id":"public/csapp-lab-3/phrase3-rsp-new.png","hash":"37fa2e50410d2531bc6cc122178ee106805406ef","modified":1629815161552},{"_id":"public/csapp-lab-3/phrase3-success.png","hash":"caa0985c835c3f7499dc7d5c56b053766ffdfda7","modified":1629815161552},{"_id":"public/csapp-lab-3/phrase3-rsp-old.png","hash":"913251cf178707118ea9a285293bfacdd70e588d","modified":1629815161552},{"_id":"public/c-reference-pointer/segment.jpg","hash":"b8d0b6c6bdbd0a18cc965c92e8d90492f1212244","modified":1629815161552},{"_id":"public/csapp-lab-2/phrase1-inputstr.png","hash":"2218e2246959796f6a0e5c41a8a9e0ce23e11dab","modified":1629815161552},{"_id":"public/csapp-lab-2/phrase1-input.png","hash":"b4e08513a63678cfc8607b812faef382c32a6b85","modified":1629815161552},{"_id":"public/csapp-lab-2/phrase1.png","hash":"a1e1589893a6ad7f3a9c02eb58e49445473db9db","modified":1629815161552},{"_id":"public/csapp-lab-2/phrase3-result.png","hash":"497f33c00fdffe53f9e52e79c1fdd65347cb739e","modified":1629815161552},{"_id":"public/csapp-lab-2/phrase3-think.png","hash":"ce78de952b28086d1d4f5710116fe34527874b87","modified":1629815161552},{"_id":"public/csapp-lab-2/phrase6-linklist.png","hash":"9cc58e779792f16351e69bcf0a120b0f7300f028","modified":1629815161552},{"_id":"public/daul-system-principle/daul.jpg","hash":"08ddeaec0286c4ee8cf838489a504de3572fe9f6","modified":1629815161552},{"_id":"public/grayscale-histogram-resolver/4.png","hash":"90bb5e9d9217c56459da2cc25158b6b6335a79ac","modified":1629815161552},{"_id":"public/ieee754-float-instance-js/754-js.png","hash":"05d907354b7a8dd5a17f615c532b4503e1b88af0","modified":1629815161552},{"_id":"public/grayscale-histogram-resolver/5.png","hash":"1b0870d3b627d1a58773ead99bc8f7c4903c777c","modified":1629815161552},{"_id":"public/threshold-segmentation/threshold-histogram-iteration.png","hash":"c1d8cf7c7cce911de63832800e58e89a41c9d9d2","modified":1629815161552},{"_id":"public/threshold-segmentation/threshold-histogram-otsu.png","hash":"a468be512bb12bb443760756e85a80ce70848425","modified":1629815161552},{"_id":"public/threshold-segmentation/threshold-iteration.png","hash":"ad878bd55515be260bf9d5ffdc2e87aa009cad93","modified":1629815161552},{"_id":"public/threshold-segmentation/threshold-seed.png","hash":"e7bc0af8dc94f8db2ffe987f69ec8bedab9df141","modified":1629815161552},{"_id":"public/threshold-segmentation/threshold-otsu.png","hash":"43c40bd15e5d3e5f542139e6b28c06ab56b0dd3b","modified":1629815161552},{"_id":"public/threshold-segmentation/threshold-histogram-seed.png","hash":"deec33f0c6f2c1d83a758abda72cc0481376b648","modified":1629815161552},{"_id":"public/web-study/web-study.jpg","hash":"1ddee4e369873b1b2bedfec10a0c21accb41a1ad","modified":1629815161552},{"_id":"public/csapp-lab-4/result.png","hash":"1220ac1a61b48c5a5249dc1c0dfd050358f32b4c","modified":1629815161552},{"_id":"public/csapp-lab-4/result2.png","hash":"4ab9b7530fd91c83c0bdea2610744205d1018268","modified":1629815161552},{"_id":"public/virtual-memory/mem-fast1.png","hash":"6b4ad24836e093d583363d2864ec5b65bfe95046","modified":1629815161552},{"_id":"public/virtual-memory/mem-fast2.png","hash":"ab613f441de5ecada8cd7a7dbe32c8bce3c6549d","modified":1629815161552},{"_id":"public/virtual-memory/mem-fast3.png","hash":"3b445d7b5cd948860b17a7c7a644c4e334288962","modified":1629815161552},{"_id":"public/virtual-memory/mem-protection1.png","hash":"e24b5d35c35dba84b7facb3d14d16a63dac3f3db","modified":1629815161552},{"_id":"public/virtual-memory/tlb-cache3.png","hash":"f42a610112e4838f726aa4b620bdeaee15f4c966","modified":1629815161552},{"_id":"public/virtual-memory/tlb-cache1.png","hash":"9d156d9655638ec3591e68c15a8156c9c1a6a1ee","modified":1629815161552},{"_id":"public/virtual-memory/tlb-cache2.png","hash":"a88d5be2af8252370e23a6ec342d2c59291ec5cd","modified":1629815161552},{"_id":"public/virtual-memory/vm-cache.png","hash":"6b95f6ee70ce563071d27eebfd482b29feda7e79","modified":1629815161552},{"_id":"public/virtual-memory/vm-problem3.png","hash":"f2d1acaeefc7590502d702f1f620b304db521a36","modified":1629815161552},{"_id":"public/bitmap-resolver/rdivision.png","hash":"b4b814987546c1aacdbc9096104f1705bb06347b","modified":1629815161552},{"_id":"public/concurrency-parallelism/solver-class.png","hash":"4b541a8bbe3622ec73cc1130d003632cc699eabb","modified":1629815161552},{"_id":"public/csapp-lab-3/phrase1.png","hash":"f4a5efe6ce43c0769dacb2acd508fa56675eacdb","modified":1629815161552},{"_id":"public/csapp-lab-3/phrase4-success.png","hash":"713c11841e0615826597e0e738c34876ba44600c","modified":1629815161552},{"_id":"public/csapp-lab-2/phrase2-readnum.png","hash":"637a28b2cce6b627813af4ca48711e484c0c37de","modified":1629815161552},{"_id":"public/csapp-lab-2/phrase2.png","hash":"7bff4edb7b9f5671ec719fdbce4a2089941760d9","modified":1629815161552},{"_id":"public/csapp-lab-2/phrase4-func.png","hash":"27cfe2e8fab787a581c42125af6272e1e1769cf1","modified":1629815161552},{"_id":"public/csapp-lab-2/phrase4.png","hash":"9f34205bc7604838b3ec8fe1e6c7dadb858e6974","modified":1629815161552},{"_id":"public/csapp-lab-5/cache-simulator.png","hash":"613337bd84fa3e2daff6391f700967455314c808","modified":1629815161552},{"_id":"public/dao-specification/UMLer.jpg","hash":"edbbd10b31e266f4d7c795f8f1afab405879b005","modified":1629815161552},{"_id":"public/tflearn-1/tf.png","hash":"ce595a491e93985d6c1326ebf0f75c8e70dfe0b8","modified":1629815161552},{"_id":"public/csapp-lab-1/result.png","hash":"a5ff5bdb080a10e5c43e807cb5dd4829f251bfd5","modified":1629815161552},{"_id":"public/virtual-memory/addr-trans1.png","hash":"9c06ab1d3659b5b5e27cc16b6b9c4cb4773d5817","modified":1629815161552},{"_id":"public/virtual-memory/memory-share.png","hash":"e3099391f0c6b234d66a33562314748139248759","modified":1629815161552},{"_id":"public/virtual-memory/multi-level-page-table1.png","hash":"4e4e7d76bba3be594ee7db0bc44b21bec28137f1","modified":1629815161552},{"_id":"public/virtual-memory/tlb-cache4.png","hash":"510b7790bcc10110785ccac3a492b6a7d7ddb43c","modified":1629815161552},{"_id":"public/virtual-memory/vm-problem1.png","hash":"dec693e7b31651ecb1cf0824936559b2e1e1dea8","modified":1629815161552},{"_id":"public/virtual-memory/vm-problem2.png","hash":"716a626f5dd455cad99c9826cf8a406d1e63712d","modified":1629815161552},{"_id":"public/bmp-edge-dection/3-3.png","hash":"216c90b70c8a1b48029231694f8c9f6801f08d9b","modified":1629815161552},{"_id":"public/bmp-edge-dection/3-prewit.png","hash":"b0de110629390d2e031ed4d2ea4930289ab2576b","modified":1629815161552},{"_id":"public/bmp-edge-dection/3-log.png","hash":"250fc4167bfec23a920a71096ea9a8c982ec04c4","modified":1629815161552},{"_id":"public/bmp-edge-dection/3-sobel.png","hash":"6c4306c8d06ae3d3efc25912b273662d6544b01c","modified":1629815161552},{"_id":"public/c-reference-pointer/reference-class-new.png","hash":"da462e9a2ded92277880da4cccea24dfa65d6e3a","modified":1629815161552},{"_id":"public/c-reference-pointer/reference-class.png","hash":"dba094ffd898c389bbc19c983d1d3e48f4fef3e6","modified":1629815161552},{"_id":"public/c-reference-pointer/reference-struct.png","hash":"8571d4edda0e13abe1aa983f86cf9e9fc7625d48","modified":1629815161552},{"_id":"public/c-reference-pointer/reference.png","hash":"be25b806eedaed23cecd597c60c5eeee4411bad7","modified":1629815161552},{"_id":"public/csapp-lab-2/cgdb.png","hash":"4a431c3a914be040ca81b225cef9203439e8c518","modified":1629815161552},{"_id":"public/csapp-lab-2/phrase5.png","hash":"8a93bae8b0f8db8d49593ecd8f162ff4dd09b554","modified":1629815161552},{"_id":"public/csapp-lab-2/phrase6-1.png","hash":"2fc6ae9d8849830f444640c7636aa574d55767d2","modified":1629815161552},{"_id":"public/csapp-lab-2/phrase3.png","hash":"73737818436af849e41738f278ddb46f73520d3b","modified":1629815161552},{"_id":"public/csapp-lab-2/success.png","hash":"5cc41e9ca137c35d479f8ae2f8d95222fbe1a32d","modified":1629815161552},{"_id":"public/csapp-lab-2/stackframe.png","hash":"a279c2ec85f7abcd2800f0350354d476d4077c39","modified":1629815161552},{"_id":"public/dip-transformation/rotate.png","hash":"575fed5573cb20f03d8357bcc74387826bcb671c","modified":1629815161552},{"_id":"public/dip-transformation/shift.png","hash":"dd3e5ab68d1e733b561482ca907b7eb472cdb05d","modified":1629815161552},{"_id":"public/grayscale-histogram-resolver/1552461156688.png","hash":"e5395140f88b0749aa534e1f8014ce6f703935f8","modified":1629815161552},{"_id":"public/grayscale-histogram-resolver/1552526052073.png","hash":"7e9c877f69cd2d997136a51662b38eb4dd254ac2","modified":1629815161552},{"_id":"public/js-concept-1/stackframe.png","hash":"a279c2ec85f7abcd2800f0350354d476d4077c39","modified":1629815161552},{"_id":"public/web-study/atom.png","hash":"3618bb16813cee1a226e19d4627bbaa71eadf244","modified":1629815161552},{"_id":"public/webpack-optimize/optimize2.png","hash":"86a55375b9845c967360da123b736c6e033a26f2","modified":1629815161552},{"_id":"public/webpack-optimize/analyzer.png","hash":"a059b20af1eefa5b6e998dfdcd78e0e03ce5abc9","modified":1629815161552},{"_id":"public/webpack-optimize/optimize4.png","hash":"549bf83d128703ea4524c5d9ff852eb29a9aa33b","modified":1629815161552},{"_id":"public/webpack-optimize/optimize5.png","hash":"e1bd20a6caef06dfbc40a19a501f4f47d243ec5d","modified":1629815161552},{"_id":"public/virtual-memory/addr-trans2.png","hash":"32d155c369769202c2a55d5bade0402b3c3ece58","modified":1629815161552},{"_id":"public/virtual-memory/mem-protection2.png","hash":"9dba764612a5d1f1105c3d7b32caef03210eff2a","modified":1629815161552},{"_id":"public/virtual-memory/mem-protection3.png","hash":"09a8c426e77cf7cdb584657d012c6de107226819","modified":1629815161552},{"_id":"public/virtual-memory/mem-protection4.png","hash":"c60e337210ec1016d7b83999c9794ef3d28534d9","modified":1629815161552},{"_id":"public/virtual-memory/multi-level-page-table3.png","hash":"ec10bfb6e7a380bb14dfffda734af5855023f40f","modified":1629815161552},{"_id":"public/virtual-memory/tlb-example1.png","hash":"e97ceb9dc4fd02736f595e27de35923482079ab4","modified":1629815161552},{"_id":"public/virtual-memory/tlb-example2.png","hash":"6fbc81c90433953e8d7f6d9aaa807efc7fabce6b","modified":1629815161552},{"_id":"public/virtual-memory/tlb-example3.png","hash":"7b4879e38866b5808320ae73fa0662460c617450","modified":1629815161552},{"_id":"public/virtual-memory/tlb-example4.png","hash":"17ee48426b1fee3ea07c84532ecdeed270f7485b","modified":1629815161552},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1629815161552},{"_id":"public/css/noscript.css","hash":"54d14cd43dc297950a4a8d39ec9644dd5fc3499f","modified":1629815161552},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1629815161552},{"_id":"public/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1629815161552},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1629815161552},{"_id":"public/js/next-boot.js","hash":"2ecaa30ec42d28ef769d875cf2d26959b8de7d24","modified":1629815161552},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1629815161552},{"_id":"public/js/pjax.js","hash":"5bfc1cea214bd31847adc356f37df8e0b6a449df","modified":1629815161552},{"_id":"public/js/schedule.js","hash":"71d62fc3584c47ff2d4cc945226e412264399be9","modified":1629815161552},{"_id":"public/js/utils.js","hash":"2ffeac130c5309bc83b1e9b764dd23688c0cd7db","modified":1629815161552},{"_id":"public/js/schemes/muse.js","hash":"62f4638674c92dfb72454fee38751d0227d3d225","modified":1629815161552},{"_id":"public/js/third-party/quicklink.js","hash":"6f58cd7aa8f6f1ab92d5a96551add293f4e55312","modified":1629815161552},{"_id":"public/js/third-party/nprogress.js","hash":"7d56b18a2bdece5468470c70c5f3eb79d4120964","modified":1629815161552},{"_id":"public/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1629815161552},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1629815161552},{"_id":"public/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1629815161552},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1629815161552},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1629815161552},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1629815161552},{"_id":"public/js/third-party/comments/changyan.js","hash":"8c8ebec444c727b704ea41ad88b0b96ed2e4b8d4","modified":1629815161552},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1629815161552},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1629815161552},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1629815161552},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":1629815161552},{"_id":"public/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1629815161552},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1629815161552},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1629815161552},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1629815161552},{"_id":"public/js/third-party/search/algolia-search.js","hash":"ac401e3736d56a3c9cb85ab885744cce0b813c55","modified":1629815161552},{"_id":"public/js/third-party/math/mathjax.js","hash":"9771db8b6b2541181a0e463c4bf305276d47657d","modified":1629815161552},{"_id":"public/js/third-party/search/local-search.js","hash":"b37f1b14aef2402d0c2d88f999ff0ce5ef6823c1","modified":1629815161552},{"_id":"public/js/third-party/tags/mermaid.js","hash":"aafb764c64f6cd5a48ad194adf65ac77078242b1","modified":1629815161552},{"_id":"public/js/third-party/statistics/firestore.js","hash":"0960f16107ed61452fb0dffc6ed22dc143de34ef","modified":1629815161552},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":1629815161552},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1629815161552},{"_id":"public/css/main.css","hash":"aeaf2491861e0db62a9fe9d0db1b5b36b00952f0","modified":1629815161552},{"_id":"public/c-function-pointer/20140317171259_KCBfP.jpeg","hash":"25ff57eccf8b31c821904354e1525432fe074d05","modified":1629815161552},{"_id":"public/concurrency-parallelism/multikernel.png","hash":"6d7aa49d60b6f9173b8a921f8de537d1d15d6756","modified":1629815161552},{"_id":"public/c-reference-pointer/reference2.png","hash":"30d89310e17f00e6170ca47e86acf2bcf0c76beb","modified":1629815161552},{"_id":"public/csapp-lab-2/phrase6-2.png","hash":"8e238729c8aa2d0d2c5e622d967e15128fec7156","modified":1629815161552},{"_id":"public/dip-transformation/back.png","hash":"2a435c39a1b8b6038aec726dd20ef453f70ab130","modified":1629815161552},{"_id":"public/float-think/float.png","hash":"f5de417d2c38362da15490ea22b73c7b4e9568f3","modified":1629815161552},{"_id":"public/spatial-filter/gray3-3.png","hash":"db5a4638ff91da19547a45eba22494a555dad21e","modified":1629815161552},{"_id":"public/webpack-optimize/optimize1.png","hash":"6127c3b1219fd04117e9909201f0a5ac812db6ff","modified":1629815161552},{"_id":"public/webpack-optimize/optimize3.png","hash":"0c7cc3e9087187357aad8003812e5e1904256754","modified":1629815161552},{"_id":"public/virtual-memory/addr-trans4.png","hash":"c1daf27b9d2aa4b81b25030e9552b6361522b363","modified":1629815161552},{"_id":"public/virtual-memory/addr-trans3.png","hash":"a76c721ed84403002a7a3d4535e2859b01ff801f","modified":1629815161552},{"_id":"public/virtual-memory/addr-trans5.png","hash":"3dfc248858d6cd2341aed82abfff739bb09dee40","modified":1629815161552},{"_id":"public/virtual-memory/multi-level-page-table2.png","hash":"88b66350de7df3ecda297acaaec9b0abfa52945e","modified":1629815161552},{"_id":"public/virtual-memory/program-secure.png","hash":"7de6e721fde11d1969755c4bfa3697603a1e682c","modified":1629815161552},{"_id":"public/bitmap-resolver/grey.png","hash":"fc36ff98b7fe783a6b6098a82183d3ebd9697270","modified":1629815161552},{"_id":"public/bitmap-resolver/degrey.png","hash":"2a6f1e0d1207ca78bb0dc38a1c3edf933cd73d99","modified":1629815161552},{"_id":"public/bitmap-resolver/origin.png","hash":"0f3c38d809cce2d2591d8f31fbbc31d57a9080fe","modified":1629815161552},{"_id":"public/csapp-lab-2/bomb.png","hash":"5a05d653f252826b19773de16a2b1e0fa0de5f92","modified":1629815161552},{"_id":"public/dip-transformation/3-3.png","hash":"ba74180ba0481d4cb59ef103427305f3900ca053","modified":1629815161552},{"_id":"public/dip-transformation/x-mirror.png","hash":"3a358b3a7ffd02cd39ec175abf56213d821609d3","modified":1629815161552},{"_id":"public/dip-transformation/y-mirror.png","hash":"e75533f912587dc778c1edb699631d3ebbe2a3c3","modified":1629815161552},{"_id":"public/spatial-filter/gray2-3.png","hash":"178ef55f5028ce94a2f6a216717eb62855558328","modified":1629815161552},{"_id":"public/spatial-filter/gray2.png","hash":"d523263af428f05250b98552f3667d6181badcbe","modified":1629815161552},{"_id":"public/spatial-filter/gray3.png","hash":"ba74180ba0481d4cb59ef103427305f3900ca053","modified":1629815161552},{"_id":"public/virtual-memory/addr-trans6.png","hash":"2318da6ec6fb3153635b3367f32c0656fecd1ac7","modified":1629815161552},{"_id":"public/virtual-memory/page-table2.png","hash":"58e2a7c5cc1eea4e2b9f1b51f8bc81883b8ae7c2","modified":1629815161552},{"_id":"public/spatial-filter/gray1.png","hash":"0c704f3d8ab01ca5baff6307687624edc8f0dacd","modified":1629815161552},{"_id":"public/web-study/sublime.png","hash":"d1812f28af782a22428c8ad439258e8fab823fa0","modified":1629815161552},{"_id":"public/virtual-memory/vm-work1.png","hash":"c7779e251c5c87eeecb57565d7c751bff855a771","modified":1629815161552},{"_id":"public/csapp-lab-1/1546740914782.png","hash":"1ab05a41e2cc58ce29e20fac50335dcb2d77825a","modified":1629815161552},{"_id":"public/virtual-memory/memory-hole.png","hash":"a37748ef73249b412ffa5c73c1e174f61214f80c","modified":1629815161552},{"_id":"public/virtual-memory/vm-work2.png","hash":"82dede7fd115597f5548357ca671fa2e1a8151a3","modified":1629815161552},{"_id":"public/csapp-lab-2/registers.png","hash":"c5ab1b5a40ccc7689c60d3219808b9a2f9fadac3","modified":1629815161552},{"_id":"public/grayscale-histogram-resolver/3.png","hash":"4bdd5db5ef23de461148ab0fc975b4305c29dd27","modified":1629815161552},{"_id":"public/web-study/edit.png","hash":"e666f070dbaa3445f841c9176610ba7e1a41009b","modified":1629815161552},{"_id":"public/webpack-optimize/optimize6.png","hash":"7420537f0a6f9205c6c43624b83006322be6f1ac","modified":1629815161552},{"_id":"public/webpack-optimize/optimize7.png","hash":"44f0293665038dd2e2ec3d4c0e00d39247cfb4c8","modified":1629815161552},{"_id":"public/virtual-memory/page-table1.png","hash":"35e3c199a6a6937a1f51e1483ecd20aa6c76fbf5","modified":1629815161552},{"_id":"public/virtual-memory/page-table3.png","hash":"e0e0d1b13bf542747d40014ee48c9c4e198ffc1b","modified":1629815161552},{"_id":"public/virtual-memory/whatis-vm1.png","hash":"7c6dfb9dc84909b835dc7b822bd061330d13d4de","modified":1629815161552},{"_id":"public/grayscale-histogram-resolver/2.png","hash":"3984d76831eb7bdd378766682081a546cb7b6bb1","modified":1629815161552},{"_id":"public/virtual-memory/not-enough-memory.png","hash":"44d6aa50984b8ce80a63198578de9625a67c6c66","modified":1629815161552},{"_id":"public/threshold-segmentation/gray.png","hash":"3984d76831eb7bdd378766682081a546cb7b6bb1","modified":1629815161552},{"_id":"public/fallout4/ScreenShot2.png","hash":"eab99ed147f0a98c84dfbaa7c9823a3877398e1c","modified":1629815161552},{"_id":"public/threshold-segmentation/origin.png","hash":"8ce90a96302b90b632279f07759f96ced8ca960d","modified":1629815161552},{"_id":"public/dip-transformation/scale.png","hash":"f863c9aad3a4237904af13f334f9a27217a64946","modified":1629815161552},{"_id":"public/grayscale-histogram-resolver/1.png","hash":"a0709e701b9489a4a22282cadfcb9f5690701d8d","modified":1629815161552},{"_id":"public/digital-image-kernel-collection/top.jpg","hash":"6bbcd1286cb108106cbb619c1b57980a63645ac5","modified":1629815161552},{"_id":"public/docker-one/docker.png","hash":"e2e059ebf9a28f6b92a7defb12168340969cc9ca","modified":1629815161552},{"_id":"public/osdev-platform/osdev.png","hash":"ff0739fdefafa42fc228cf9004bc9220ba42af89","modified":1629815161552},{"_id":"public/web-study/布局.png","hash":"e789ca3fb187cf7643e8aae2a91921d550cd0aff","modified":1629815161552},{"_id":"public/web-study/web前端.png","hash":"190e575a7d04e567635acdd21e67d8c21fff7d32","modified":1629815161552},{"_id":"public/shadow-thinking-in-winapi/windows.jpg","hash":"8754c3377c92cbdd4a971fe45124f183386500b0","modified":1629815161552},{"_id":"public/fallout4/ScreenShot3.png","hash":"21debd54b6abdcda1aefcc779508c5dd145f2e1d","modified":1629815161552},{"_id":"public/fallout4/ScreenShot5.png","hash":"db0bc02e9f2541866b8a37315c28961fb97788ac","modified":1629815161552},{"_id":"public/fallout4/ScreenShot1.png","hash":"1f66a03b9b36d93163fc21983e4bc3e91d2c695e","modified":1629815161552},{"_id":"public/fallout4/ScreenShot0.png","hash":"5d50dd668845fd0adebab4e92b5426958adcf97f","modified":1629815161552},{"_id":"public/fallout4/ScreenShot4.png","hash":"2078717792a29303596399bc8a464474d926c9e3","modified":1629815161552},{"_id":"public/csapp-lab-4/pipe.jpg","hash":"8d838bb47b73e6e23548590c130330c4225e6b81","modified":1629815161552},{"_id":"public/csapp-lab-4/seq.jpg","hash":"7ed7c5a5e2dd783d73190a42d3a3564b8c77999f","modified":1629815161552},{"_id":"public/lc-solutions.html","hash":"193e3a9250043e1f92e80f3c92a9caaa2aeec4a0","modified":1629815251990},{"_id":"public/git-learning-1.html","hash":"4f4426902c4a99f72eb45c9ed1506c52953e4ef5","modified":1629815251990},{"_id":"public/learn-method.html","hash":"f2bc2a4c305a472f9d52ab79eabe620b4f0069af","modified":1629815251990},{"_id":"public/js-debouncing-throttling.html","hash":"b5ac4808844696207d578ac04e903b736c946d54","modified":1629815251990},{"_id":"public/git-learning.html","hash":"714358062790d0801c46cc889ca5d6de2b47bd28","modified":1629815251990},{"_id":"public/js-dont-know-const.html","hash":"bbffc575144000f1d9045a3fda94cbed0aee5f2b","modified":1629815251990},{"_id":"public/js-dont-know-property-hidden.html","hash":"7a5513f45e0323981893115c647d04d88ea0bac0","modified":1629815251990},{"_id":"public/css-reflow-repaint.html","hash":"2cbb63951dbad5302730fdfafd63ff50d6cc06c2","modified":1629815251990},{"_id":"public/css-selectors.html","hash":"f415076f979989783c0738159af29e1fdb4504dd","modified":1629815251990},{"_id":"public/js-concept-17-prototype-inheritance.html","hash":"9b0fef72f62692b8760f178e4b89eaf6783140c0","modified":1629815251990},{"_id":"public/js-concept-2-primitive-type.html","hash":"2bfbf01e98105c685fab46db577888684a787acf","modified":1629815251990},{"_id":"public/js-concept-19-map-reduce-filter.html","hash":"00343fcf748a8ed13d2779935c7aacee33b1d1d3","modified":1629815251990},{"_id":"public/http-change-history.html","hash":"60db510fba58fed2ee78cf1c80801cebb9ee9b49","modified":1629815251990},{"_id":"public/http-status-code.html","hash":"fe5fae8877a3957d837ce33ac19b675c214f8b9d","modified":1629815251990},{"_id":"public/secure-same-origin-policy.html","hash":"138f19a3faf939e58a6d39e30bb123198971c0ee","modified":1629815251990},{"_id":"public/js-taskqueue.html","hash":"834bedfc7e301dd76250ac2acc9dbf9508a0a3e9","modified":1629815251990},{"_id":"public/secure-xss-csrf.html","hash":"4637e42c945e057068a37c3bc8307b3a3d010278","modified":1629815251990},{"_id":"public/css-align-center.html","hash":"a823a7ed0c0f660c80227219cd90613d923931d9","modified":1629815251990},{"_id":"public/js-concept-7-scope-2.html","hash":"12e369ec4e9728123feb3ace5d663433d808198f","modified":1629815251990},{"_id":"public/js-storage.html","hash":"39b9c11ba4092cf0c4a7debac0b1aed6151e4370","modified":1629815251990},{"_id":"public/js-concept-15-this-call-bind-apply.html","hash":"91e1173e4dd857dd299dff8b1d28074f1a535b1a","modified":1629815251990},{"_id":"public/js-concept-21-closures.html","hash":"4d638fb9a28de39fbca924ea0a15d958d15ed3b6","modified":1629815251990},{"_id":"public/js-concept-7-scope.html","hash":"2e1635e836b07826aae0fe60abf04a6d51269e53","modified":1629815251990},{"_id":"public/js-concept-1.html","hash":"5a729dc6dbf4fdb94b3bcd0bacf16440d4d5b558","modified":1629815251990},{"_id":"public/csapp-lab-6.html","hash":"daf7750c1d626f26be030f35ef6b2704d3850433","modified":1629815251990},{"_id":"public/ieee754-float-instance-js.html","hash":"29b94d92910261976270ea8b77153ddd719c95ef","modified":1629815251990},{"_id":"public/csapp-lab-5.html","hash":"9a749986db942be770b79811ad39621d210906be","modified":1629815251990},{"_id":"public/bathing-thinking.html","hash":"39f03f95ae6780a155e2b8b7025a000c95fa944a","modified":1629815251990},{"_id":"public/bmp-edge-dection.html","hash":"293e4e1e38b94006ad6726436f5a2df3da05f6a6","modified":1629815251990},{"_id":"public/fallout4.html","hash":"33c05f65bc21640a307c3bf34e21dfc09bb51147","modified":1629815251990},{"_id":"public/csapp-lab-4.html","hash":"6d37ec43db8d652f5d4a24b2488fe07486dfdb87","modified":1629815251990},{"_id":"public/threshold-segmentation.html","hash":"c7b3c74d420c89b2a9ad39ab37809ea184eacaae","modified":1629815251990},{"_id":"public/c-reference-pointer.html","hash":"9a1e0cf7a967bd0b761d58b4e75cfda92564bdc6","modified":1629815251990},{"_id":"public/c-function-pointer.html","hash":"cb02f395e2917e74bfcc14ff58070e3c4eb8a53d","modified":1629815251990},{"_id":"public/what-person-i-am.html","hash":"7371bb3487bd06b3093b01aa8d6ba325705281ae","modified":1629815251990},{"_id":"public/dip-transformation.html","hash":"79f93e70429b3130beb84c6a8cc7401c1b49cce4","modified":1629815251990},{"_id":"public/csapp-lab-3.html","hash":"dc6802fb7f914eca92eaf90518e682260d3210a7","modified":1629815251990},{"_id":"public/spatial-filter.html","hash":"dfbe161cfe7b39c7b37a87605c66efb7a9048337","modified":1629815251990},{"_id":"public/concurrency-parallelism.html","hash":"7b5f66ab01e5e080d0f79c2f5132f6b227691eed","modified":1629815251990},{"_id":"public/csapp-lab-2.html","hash":"bea0e82bb7db3309f3029a9d91e6255d1007079c","modified":1629815251990},{"_id":"public/digital-image-kernel-collection.html","hash":"c64fd7ede204e01e7d5afadc611832358b4e03cd","modified":1629815251990},{"_id":"public/grayscale-histogram-resolver.html","hash":"22a2acab16f51a49edc059620bfbf2b7a4eb5ac4","modified":1629815251990},{"_id":"public/5g-technology-advent.html","hash":"cd986aaf3d556cb1cc4f5a1481ab2c3c4bb712d0","modified":1629815251990},{"_id":"public/byte-alignment.html","hash":"690d3030ae22049795905301645973d6c2f4ff3b","modified":1629815251990},{"_id":"public/bitmap-resolver-rectify.html","hash":"24160b93f59dd450cb1d19ea1d3fad29217f74dd","modified":1629815251990},{"_id":"public/bitmap-resolver.html","hash":"736d5c9e998b933224db7b41ab08d549d38eee64","modified":1629815251990},{"_id":"public/float-think.html","hash":"fa36206b15bb19c64724334884eac63c9e8a31d5","modified":1629815251990},{"_id":"public/csapp-lab-1.html","hash":"1a7cd50bec80dbc668f44304ffff7cc0ecb18ccb","modified":1629815325147},{"_id":"public/tflearn-1.html","hash":"6838f87fce1904ba3e42648e74d18f47ab4864ad","modified":1629815251990},{"_id":"public/osdev-platform.html","hash":"a88ea7b78e1567b07cfeea7986b2d1f11bd38a4c","modified":1629815251990},{"_id":"public/virtual-memory.html","hash":"5df0bd55c9ab8625d444e4a31ab8abcea7a11e9e","modified":1629815251990},{"_id":"public/shadow-thinking-in-winapi.html","hash":"219fc56cfa1afc934d3d7de9d0f495d97a759bd6","modified":1629815251990},{"_id":"public/thinking-2018-9-23.html","hash":"4b270bf02507969e333f819508369ecb61213bc2","modified":1629815251990},{"_id":"public/daul-system-principle.html","hash":"775c1c650dbd8583ee96b3a435d2d2a8a181eba7","modified":1629815251990},{"_id":"public/dao-specification.html","hash":"bfa319516e2c6eec02e0ccb664f2ef5a337463b8","modified":1629815251990},{"_id":"public/docker-zero.html","hash":"888764614e7c9ab730b8f766ed411df638129aed","modified":1629815251990},{"_id":"public/docker-two.html","hash":"9bceb62ddf60201a1bd9a4068571f82450e62f9f","modified":1629815251990},{"_id":"public/docker-one.html","hash":"8d60bb6677600b378397b59a060830204e752274","modified":1629815251990},{"_id":"public/webpack-optimize.html","hash":"000f9adb95f41488e82f7583f86b37f5664fc4ad","modified":1629815251990},{"_id":"public/web-study.html","hash":"c6c40a5b517efe60c7dd720684ee2758d51c55ad","modified":1629815251990},{"_id":"node_modules/hexo-theme-next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1636772510055},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1636772510055},{"_id":"source/_posts/rCore-lab-1.md","hash":"7025bb6ad68f814448fe679eaa866419baafdf9e","modified":1641442152476},{"_id":"source/_posts/rCore-lab-1/result.png","hash":"43dd2f45ae937b6465e4ea865da09a9fb6caf405","modified":1641442152476},{"_id":"node_modules/hexo-theme-next/languages/tk.yml","hash":"519239e35c3bda7b62b00ff5d34644f45b16fe6a","modified":1641442169962},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/disqusjs.styl","hash":"c2326ee3e8b724d99c24a818ddee32813ea5bf89","modified":1641442169962}],"Category":[{"name":"Technology","_id":"cksq5v7lx0004n0pu8wrycmpo"},{"name":"Computer Science","_id":"cksq5v7m1000an0puc6j33bkj"},{"name":"Back-End Development","_id":"cksq5v7m9000wn0pu1y74f0dj"},{"name":"Operating System","parent":"cksq5v7m1000an0puc6j33bkj","_id":"cksq5v7ma0011n0pufrq3bqor"},{"name":"Computer Graphics","parent":"cksq5v7m1000an0puc6j33bkj","_id":"cksq5v7mc0016n0pu5gz511uz"},{"name":"Front-End Development","_id":"cksq5v7mm0029n0pu9zhd7h76"},{"name":"C","parent":"cksq5v7m9000wn0pu1y74f0dj","_id":"cksq5v7ms0032n0pu0j4mgpp6"},{"name":"Java Web","parent":"cksq5v7m9000wn0pu1y74f0dj","_id":"cksq5v7mw003on0pug85e1d0g"},{"name":"Tools","_id":"cksq5v7my003vn0pubik6dfpa"},{"name":"Game Review","_id":"cksq5v7n4004nn0puhjng8bci"},{"name":"Protocol","_id":"cksq5v7n70057n0pu0g1w17d3"},{"name":"CSS","parent":"cksq5v7mm0029n0pu9zhd7h76","_id":"cksq5v7n8005dn0puf6og1mob"},{"name":"JavaScript","parent":"cksq5v7mm0029n0pu9zhd7h76","_id":"cksq5v7n9005jn0pufbwtcnan"},{"name":"Web API","parent":"cksq5v7mm0029n0pu9zhd7h76","_id":"cksq5v7nj007fn0puar9j0vda"},{"name":"Algorithm & Data Structure","_id":"cksq5v7nk007rn0pubjy40hhy"},{"name":"Method","_id":"cksq5v7nl007yn0puburz4dok"},{"name":"Docker","parent":"cksq5v7my003vn0pubik6dfpa","_id":"cksq5v7nl0082n0pu2b9majog"},{"name":"Security","_id":"cksq5v7nm0086n0pudkxjaux9"},{"name":"AI","_id":"cksq5v7nn008jn0puazvphqq7"},{"name":"FPS","parent":"cksq5v7n4004nn0puhjng8bci","_id":"cksq5v7no008rn0pudc460cux"},{"name":"Git","parent":"cksq5v7my003vn0pubik6dfpa","_id":"cksq5v7np008vn0pu1ofdeff5"},{"name":"HTTP","parent":"cksq5v7n70057n0pu0g1w17d3","_id":"cksq5v7nq0094n0pub9kydb0t"},{"name":"Tensorflow","parent":"cksq5v7nn008jn0puazvphqq7","_id":"cksq5v7nr009en0pugqr46494"},{"name":"Prose and Essay","_id":"cksq5v7o500b3n0pu7dlrejqi"}],"Data":[],"Page":[{"title":"archives","date":"2021-08-24T13:57:38.000Z","type":"archives","layout":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2021-08-24 21:57:38\ntype: \"archives\"\nlayout: \"archives\"\n---\n","updated":"2022-01-06T04:09:12.575Z","path":"archives/index.html","_id":"cksq5v7lt0000n0pu83ygfwpn","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2021-08-24T13:58:05.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-08-24 21:58:05\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2022-01-06T04:09:12.575Z","path":"categories/index.html","_id":"cksq5v7lw0002n0pu3wkhfuol","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2021-08-24T13:55:10.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-08-24 21:55:10\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2022-01-06T04:09:12.575Z","path":"tags/index.html","_id":"cksq5v7lz0006n0pucqzmbz5u","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"5G会带来哪些技术发展","mathjax":false,"copyright":true,"comment":true,"date":"2019-03-12T00:12:08.000Z","_content":"\n{% note primary %}\n网速已不是桎梏，那桎梏在哪里？\n{% endnote %}\n\n<!-- more -->\n\n---\n\n\n\n## 前言\n\n5G会带来哪些技术发展？这个问题在看到华为1月13日深圳首测5G新闻时便在思考。和别人交流时也不经意间挑起了这个话题，想借此机会写一写。当然这仅代表个人看法，很有可能有些观点是不对的，也欢迎大家在评论区共同探讨。\n\n## 5G有什么新特性\n\n我们知道3G、4G，那5G就是下一代（next generation）移动通信技术了。\n\n可能会对某些名词很陌生，不过一些比较值得我们关心的特性还是比较清楚的。\n\n1月14日央视新闻公众号发表了一篇文章[《比Wi-Fi快60多倍，比高清清晰4倍！5G+4K，是时候“种草”了！》](https://mp.weixin.qq.com/s?__biz=MTI0MDU3NDYwMQ==&mid=2656731598&idx=1&sn=72bb734076a75781355e607bf92ee138&chksm=7a607c284d17f53e6d46151b3cc132984322bab60dcac85a367a3009fc6e0ca710ea29094273&mpshare=1&scene=23&srcid=01140Ws70oMmlIw3GZy71Xup#rd)。值得我们关注的就是网速。\n\n### 速度有多快\n\n5G理论速率峰值达10Gb/s，1.25GB/s，**50GB的游戏1分钟之内下完**。当然这只是理论上的峰值，一般是低于峰值的，需要考虑信号强弱和网络拥塞等情况。\n\n相对应的，现在用的比较多的是如下几种媒介：\n\n- 家用千兆带宽（并不常见），理论速率峰值1Gb/s，0.125GB/s，**50GB的游戏需下载近10分钟**。\n- 主流手机连Wi-Fi理论速率峰值150Mb/s，18.75MB/s，**50G游戏下载近1小时**\n- 家庭常用100M宽带，理论速率峰值100Mb/s，12.5MB/s，**50G游戏下载1-2小时**\n- 4G网络，理论速率峰值同家用100M宽带\n\n### 不足\n\n由于物理波段的限制，也将会与其他通信技术并用，包含长距离的其他传统电信波段。\n\n## 带来的技术发展——云硬盘（实现真正的存储器层次结构最后一层）\n\n这是我想到的第一条，而且应该是应用更为大众化的。而且不仅仅是云硬盘，与之相连的**一系列云服务**都会大量使用，因为网速不再是瓶颈，**云服务和本地服务几乎没有差距**，而且云服务计算可能更为迅速。能观看高质量视频、VR视频等都是网速加快直接导致的结果，在此不谈。\n\n为什么是云硬盘呢？\n\n谈到硬盘，这就想到了去年买iPad2018，32GB本地存储存存文档还可以，小电影能存得了几部？（兄嘚，评论区借一部说话？ :smile:）\n\n最终说动我自己下定决心的就是想到了存储器层次结构（本地存储不够，那就百度云呗。按局部性原理需求换入换出）\n\n存储器层次结构：\n\n![](5g-technology-advent/1552395582880.png)\n\n5G时代的到来，打破了网速的桎梏，这不就是实现了真正的**存储器层次结构**的最后一层吗？\n\n\n{% note info %}\n\n\n这一系列与云硬盘相关的技术的有哪些？\n\n- 云硬盘，当做本地磁盘的大众使用\n- 云应用\n  - 简单的Webapp、小程序的大型化\n  - Native APP和PC APP的云应用化，需要一套解决方案来解决云端和本地的换入换出问题（是直接传输已安装的二进制+配置文件还是每次都需要安装？）\n  - 云游戏，这既包含NativeAPP还有PC端还有各种平台的云游戏。这不最近腾讯出了个云游戏服务平台[CMatrix](https://mp.weixin.qq.com/s?__biz=MzA3NTYzODYzMg==&mid=2653580148&idx=1&sn=14b1a602918bb376dfa53a369252bb43&chksm=84b3b973b3c4306557968d2adfe06206d2d4fc4952b83c7c8b5fbafdf07513b7ad773c88ad74&mpshare=1&scene=23&srcid=#rd)\n- 好吧，暂时想不出来还有啥了\n\n{% endnote %}\n\n\n\n\n\n\n## 总结\n\n回到一开始的问题：网速已不是桎梏，那桎梏在哪里？硬件和软件，网络协议能不能有更好的更快速的更安全的算法；硬件能不能更快一点。\n\n第一次写这种主观性的技术文章，可能有些逻辑和文章结构可能不够严谨。如果有什么好的建议请在评论区和右下角DAOVoice联系。多谢！","source":"_posts/5g-technology-advent.md","raw":"---\ntitle: 5G会带来哪些技术发展\nmathjax: false\ncopyright: true\ncomment: true\ndate: 2019-03-12 08:12:08\ntags:\n- Technology\n- 5G\ncategories: Technology\n\n---\n\n{% note primary %}\n网速已不是桎梏，那桎梏在哪里？\n{% endnote %}\n\n<!-- more -->\n\n---\n\n\n\n## 前言\n\n5G会带来哪些技术发展？这个问题在看到华为1月13日深圳首测5G新闻时便在思考。和别人交流时也不经意间挑起了这个话题，想借此机会写一写。当然这仅代表个人看法，很有可能有些观点是不对的，也欢迎大家在评论区共同探讨。\n\n## 5G有什么新特性\n\n我们知道3G、4G，那5G就是下一代（next generation）移动通信技术了。\n\n可能会对某些名词很陌生，不过一些比较值得我们关心的特性还是比较清楚的。\n\n1月14日央视新闻公众号发表了一篇文章[《比Wi-Fi快60多倍，比高清清晰4倍！5G+4K，是时候“种草”了！》](https://mp.weixin.qq.com/s?__biz=MTI0MDU3NDYwMQ==&mid=2656731598&idx=1&sn=72bb734076a75781355e607bf92ee138&chksm=7a607c284d17f53e6d46151b3cc132984322bab60dcac85a367a3009fc6e0ca710ea29094273&mpshare=1&scene=23&srcid=01140Ws70oMmlIw3GZy71Xup#rd)。值得我们关注的就是网速。\n\n### 速度有多快\n\n5G理论速率峰值达10Gb/s，1.25GB/s，**50GB的游戏1分钟之内下完**。当然这只是理论上的峰值，一般是低于峰值的，需要考虑信号强弱和网络拥塞等情况。\n\n相对应的，现在用的比较多的是如下几种媒介：\n\n- 家用千兆带宽（并不常见），理论速率峰值1Gb/s，0.125GB/s，**50GB的游戏需下载近10分钟**。\n- 主流手机连Wi-Fi理论速率峰值150Mb/s，18.75MB/s，**50G游戏下载近1小时**\n- 家庭常用100M宽带，理论速率峰值100Mb/s，12.5MB/s，**50G游戏下载1-2小时**\n- 4G网络，理论速率峰值同家用100M宽带\n\n### 不足\n\n由于物理波段的限制，也将会与其他通信技术并用，包含长距离的其他传统电信波段。\n\n## 带来的技术发展——云硬盘（实现真正的存储器层次结构最后一层）\n\n这是我想到的第一条，而且应该是应用更为大众化的。而且不仅仅是云硬盘，与之相连的**一系列云服务**都会大量使用，因为网速不再是瓶颈，**云服务和本地服务几乎没有差距**，而且云服务计算可能更为迅速。能观看高质量视频、VR视频等都是网速加快直接导致的结果，在此不谈。\n\n为什么是云硬盘呢？\n\n谈到硬盘，这就想到了去年买iPad2018，32GB本地存储存存文档还可以，小电影能存得了几部？（兄嘚，评论区借一部说话？ :smile:）\n\n最终说动我自己下定决心的就是想到了存储器层次结构（本地存储不够，那就百度云呗。按局部性原理需求换入换出）\n\n存储器层次结构：\n\n![](5g-technology-advent/1552395582880.png)\n\n5G时代的到来，打破了网速的桎梏，这不就是实现了真正的**存储器层次结构**的最后一层吗？\n\n\n{% note info %}\n\n\n这一系列与云硬盘相关的技术的有哪些？\n\n- 云硬盘，当做本地磁盘的大众使用\n- 云应用\n  - 简单的Webapp、小程序的大型化\n  - Native APP和PC APP的云应用化，需要一套解决方案来解决云端和本地的换入换出问题（是直接传输已安装的二进制+配置文件还是每次都需要安装？）\n  - 云游戏，这既包含NativeAPP还有PC端还有各种平台的云游戏。这不最近腾讯出了个云游戏服务平台[CMatrix](https://mp.weixin.qq.com/s?__biz=MzA3NTYzODYzMg==&mid=2653580148&idx=1&sn=14b1a602918bb376dfa53a369252bb43&chksm=84b3b973b3c4306557968d2adfe06206d2d4fc4952b83c7c8b5fbafdf07513b7ad773c88ad74&mpshare=1&scene=23&srcid=#rd)\n- 好吧，暂时想不出来还有啥了\n\n{% endnote %}\n\n\n\n\n\n\n## 总结\n\n回到一开始的问题：网速已不是桎梏，那桎梏在哪里？硬件和软件，网络协议能不能有更好的更快速的更安全的算法；硬件能不能更快一点。\n\n第一次写这种主观性的技术文章，可能有些逻辑和文章结构可能不够严谨。如果有什么好的建议请在评论区和右下角DAOVoice联系。多谢！","slug":"5g-technology-advent","published":1,"updated":"2022-01-06T04:09:12.126Z","_id":"cksq5v7lu0001n0pu2xr7gl47","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note primary\"><p>网速已不是桎梏，那桎梏在哪里？</p>\n</div>\n\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>5G会带来哪些技术发展？这个问题在看到华为1月13日深圳首测5G新闻时便在思考。和别人交流时也不经意间挑起了这个话题，想借此机会写一写。当然这仅代表个人看法，很有可能有些观点是不对的，也欢迎大家在评论区共同探讨。</p>\n<h2 id=\"5G有什么新特性\"><a href=\"#5G有什么新特性\" class=\"headerlink\" title=\"5G有什么新特性\"></a>5G有什么新特性</h2><p>我们知道3G、4G，那5G就是下一代（next generation）移动通信技术了。</p>\n<p>可能会对某些名词很陌生，不过一些比较值得我们关心的特性还是比较清楚的。</p>\n<p>1月14日央视新闻公众号发表了一篇文章<a href=\"https://mp.weixin.qq.com/s?__biz=MTI0MDU3NDYwMQ==&mid=2656731598&idx=1&sn=72bb734076a75781355e607bf92ee138&chksm=7a607c284d17f53e6d46151b3cc132984322bab60dcac85a367a3009fc6e0ca710ea29094273&mpshare=1&scene=23&srcid=01140Ws70oMmlIw3GZy71Xup#rd\">《比Wi-Fi快60多倍，比高清清晰4倍！5G+4K，是时候“种草”了！》</a>。值得我们关注的就是网速。</p>\n<h3 id=\"速度有多快\"><a href=\"#速度有多快\" class=\"headerlink\" title=\"速度有多快\"></a>速度有多快</h3><p>5G理论速率峰值达10Gb/s，1.25GB/s，<strong>50GB的游戏1分钟之内下完</strong>。当然这只是理论上的峰值，一般是低于峰值的，需要考虑信号强弱和网络拥塞等情况。</p>\n<p>相对应的，现在用的比较多的是如下几种媒介：</p>\n<ul>\n<li>家用千兆带宽（并不常见），理论速率峰值1Gb/s，0.125GB/s，<strong>50GB的游戏需下载近10分钟</strong>。</li>\n<li>主流手机连Wi-Fi理论速率峰值150Mb/s，18.75MB/s，<strong>50G游戏下载近1小时</strong></li>\n<li>家庭常用100M宽带，理论速率峰值100Mb/s，12.5MB/s，<strong>50G游戏下载1-2小时</strong></li>\n<li>4G网络，理论速率峰值同家用100M宽带</li>\n</ul>\n<h3 id=\"不足\"><a href=\"#不足\" class=\"headerlink\" title=\"不足\"></a>不足</h3><p>由于物理波段的限制，也将会与其他通信技术并用，包含长距离的其他传统电信波段。</p>\n<h2 id=\"带来的技术发展——云硬盘（实现真正的存储器层次结构最后一层）\"><a href=\"#带来的技术发展——云硬盘（实现真正的存储器层次结构最后一层）\" class=\"headerlink\" title=\"带来的技术发展——云硬盘（实现真正的存储器层次结构最后一层）\"></a>带来的技术发展——云硬盘（实现真正的存储器层次结构最后一层）</h2><p>这是我想到的第一条，而且应该是应用更为大众化的。而且不仅仅是云硬盘，与之相连的<strong>一系列云服务</strong>都会大量使用，因为网速不再是瓶颈，<strong>云服务和本地服务几乎没有差距</strong>，而且云服务计算可能更为迅速。能观看高质量视频、VR视频等都是网速加快直接导致的结果，在此不谈。</p>\n<p>为什么是云硬盘呢？</p>\n<p>谈到硬盘，这就想到了去年买iPad2018，32GB本地存储存存文档还可以，小电影能存得了几部？（兄嘚，评论区借一部说话？ :smile:）</p>\n<p>最终说动我自己下定决心的就是想到了存储器层次结构（本地存储不够，那就百度云呗。按局部性原理需求换入换出）</p>\n<p>存储器层次结构：</p>\n<p><img data-src=\"5g-technology-advent/1552395582880.png\"></p>\n<p>5G时代的到来，打破了网速的桎梏，这不就是实现了真正的<strong>存储器层次结构</strong>的最后一层吗？</p>\n<div class=\"note info\"><p>这一系列与云硬盘相关的技术的有哪些？</p>\n<ul>\n<li>云硬盘，当做本地磁盘的大众使用</li>\n<li>云应用<ul>\n<li>简单的Webapp、小程序的大型化</li>\n<li>Native APP和PC APP的云应用化，需要一套解决方案来解决云端和本地的换入换出问题（是直接传输已安装的二进制+配置文件还是每次都需要安装？）</li>\n<li>云游戏，这既包含NativeAPP还有PC端还有各种平台的云游戏。这不最近腾讯出了个云游戏服务平台<a href=\"https://mp.weixin.qq.com/s?__biz=MzA3NTYzODYzMg==&mid=2653580148&idx=1&sn=14b1a602918bb376dfa53a369252bb43&chksm=84b3b973b3c4306557968d2adfe06206d2d4fc4952b83c7c8b5fbafdf07513b7ad773c88ad74&mpshare=1&scene=23&srcid=#rd\">CMatrix</a></li>\n</ul>\n</li>\n<li>好吧，暂时想不出来还有啥了</li>\n</ul>\n</div>\n\n\n\n\n\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>回到一开始的问题：网速已不是桎梏，那桎梏在哪里？硬件和软件，网络协议能不能有更好的更快速的更安全的算法；硬件能不能更快一点。</p>\n<p>第一次写这种主观性的技术文章，可能有些逻辑和文章结构可能不够严谨。如果有什么好的建议请在评论区和右下角DAOVoice联系。多谢！</p>\n","site":{"data":{}},"excerpt":"<div class=\"note primary\"><p>网速已不是桎梏，那桎梏在哪里？</p>\n</div>","more":"<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>5G会带来哪些技术发展？这个问题在看到华为1月13日深圳首测5G新闻时便在思考。和别人交流时也不经意间挑起了这个话题，想借此机会写一写。当然这仅代表个人看法，很有可能有些观点是不对的，也欢迎大家在评论区共同探讨。</p>\n<h2 id=\"5G有什么新特性\"><a href=\"#5G有什么新特性\" class=\"headerlink\" title=\"5G有什么新特性\"></a>5G有什么新特性</h2><p>我们知道3G、4G，那5G就是下一代（next generation）移动通信技术了。</p>\n<p>可能会对某些名词很陌生，不过一些比较值得我们关心的特性还是比较清楚的。</p>\n<p>1月14日央视新闻公众号发表了一篇文章<a href=\"https://mp.weixin.qq.com/s?__biz=MTI0MDU3NDYwMQ==&mid=2656731598&idx=1&sn=72bb734076a75781355e607bf92ee138&chksm=7a607c284d17f53e6d46151b3cc132984322bab60dcac85a367a3009fc6e0ca710ea29094273&mpshare=1&scene=23&srcid=01140Ws70oMmlIw3GZy71Xup#rd\">《比Wi-Fi快60多倍，比高清清晰4倍！5G+4K，是时候“种草”了！》</a>。值得我们关注的就是网速。</p>\n<h3 id=\"速度有多快\"><a href=\"#速度有多快\" class=\"headerlink\" title=\"速度有多快\"></a>速度有多快</h3><p>5G理论速率峰值达10Gb/s，1.25GB/s，<strong>50GB的游戏1分钟之内下完</strong>。当然这只是理论上的峰值，一般是低于峰值的，需要考虑信号强弱和网络拥塞等情况。</p>\n<p>相对应的，现在用的比较多的是如下几种媒介：</p>\n<ul>\n<li>家用千兆带宽（并不常见），理论速率峰值1Gb/s，0.125GB/s，<strong>50GB的游戏需下载近10分钟</strong>。</li>\n<li>主流手机连Wi-Fi理论速率峰值150Mb/s，18.75MB/s，<strong>50G游戏下载近1小时</strong></li>\n<li>家庭常用100M宽带，理论速率峰值100Mb/s，12.5MB/s，<strong>50G游戏下载1-2小时</strong></li>\n<li>4G网络，理论速率峰值同家用100M宽带</li>\n</ul>\n<h3 id=\"不足\"><a href=\"#不足\" class=\"headerlink\" title=\"不足\"></a>不足</h3><p>由于物理波段的限制，也将会与其他通信技术并用，包含长距离的其他传统电信波段。</p>\n<h2 id=\"带来的技术发展——云硬盘（实现真正的存储器层次结构最后一层）\"><a href=\"#带来的技术发展——云硬盘（实现真正的存储器层次结构最后一层）\" class=\"headerlink\" title=\"带来的技术发展——云硬盘（实现真正的存储器层次结构最后一层）\"></a>带来的技术发展——云硬盘（实现真正的存储器层次结构最后一层）</h2><p>这是我想到的第一条，而且应该是应用更为大众化的。而且不仅仅是云硬盘，与之相连的<strong>一系列云服务</strong>都会大量使用，因为网速不再是瓶颈，<strong>云服务和本地服务几乎没有差距</strong>，而且云服务计算可能更为迅速。能观看高质量视频、VR视频等都是网速加快直接导致的结果，在此不谈。</p>\n<p>为什么是云硬盘呢？</p>\n<p>谈到硬盘，这就想到了去年买iPad2018，32GB本地存储存存文档还可以，小电影能存得了几部？（兄嘚，评论区借一部说话？ :smile:）</p>\n<p>最终说动我自己下定决心的就是想到了存储器层次结构（本地存储不够，那就百度云呗。按局部性原理需求换入换出）</p>\n<p>存储器层次结构：</p>\n<p><img data-src=\"5g-technology-advent/1552395582880.png\"></p>\n<p>5G时代的到来，打破了网速的桎梏，这不就是实现了真正的<strong>存储器层次结构</strong>的最后一层吗？</p>\n<div class=\"note info\"><p>这一系列与云硬盘相关的技术的有哪些？</p>\n<ul>\n<li>云硬盘，当做本地磁盘的大众使用</li>\n<li>云应用<ul>\n<li>简单的Webapp、小程序的大型化</li>\n<li>Native APP和PC APP的云应用化，需要一套解决方案来解决云端和本地的换入换出问题（是直接传输已安装的二进制+配置文件还是每次都需要安装？）</li>\n<li>云游戏，这既包含NativeAPP还有PC端还有各种平台的云游戏。这不最近腾讯出了个云游戏服务平台<a href=\"https://mp.weixin.qq.com/s?__biz=MzA3NTYzODYzMg==&mid=2653580148&idx=1&sn=14b1a602918bb376dfa53a369252bb43&chksm=84b3b973b3c4306557968d2adfe06206d2d4fc4952b83c7c8b5fbafdf07513b7ad773c88ad74&mpshare=1&scene=23&srcid=#rd\">CMatrix</a></li>\n</ul>\n</li>\n<li>好吧，暂时想不出来还有啥了</li>\n</ul>\n</div>\n\n\n\n\n\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>回到一开始的问题：网速已不是桎梏，那桎梏在哪里？硬件和软件，网络协议能不能有更好的更快速的更安全的算法；硬件能不能更快一点。</p>\n<p>第一次写这种主观性的技术文章，可能有些逻辑和文章结构可能不够严谨。如果有什么好的建议请在评论区和右下角DAOVoice联系。多谢！</p>"},{"title":"丧心病狂的洗澡方式","mathjax":false,"copyright":true,"comment":true,"date":"2019-07-05T13:11:56.000Z","_content":"\n{% note primary %}\n\n少一点功利主义的追求，多一点不为什么的坚持。\n\n{% endnote %}\n\n<!-- more -->\n\n---\n\n\n## 引子\n\n我感觉我快疯了。去洗澡的时候都会想问题想的出神。\n\n事情是这样的。某日，我去洗澡，因为正直小学期，正是炎热的时候，晚上洗澡的人特别多，于是排起了长长的队伍。然后我就想到了高并发问题，于是就刹不住车了，引起对计算机的一片思考，下文的思考是经过大学这几年沉淀下来的东西加上自己读的一些课外计算机读物所得的。\n\n## 干货\n\n澡堂外排起了长长的队伍，这让我首先想到的是高并发，这就像是双十一和六一八一样，澡堂就好比淘宝和京东的服务器，洗澡的人就是买家用户。\n\n因为我们知道可以排队可以按照顺序来使自己洗澡，如果中途走了就得重新排队。这就像那些有高并发问题的**消息中间件**，消息都需要排队，如果消息队列满了那剩下的就丢了。\n\n为什么会引起排队呢？有两点：一是澡堂可用的淋浴喷头太少，二是人们洗澡的时间太长。\n\n那么解决办法就从这两点出发，即增加淋浴喷头或者提高人们洗澡的效率。\n\n增加淋浴喷头很简单了，没有下文了，只能多修几个淋浴喷头来增加澡堂内同时洗澡的人数。这就像**服务器的横向扩展**，增加服务器的数量。\n\n提高人们洗澡的效率就值得深究了，嘿嘿嘿。这也就是**服务器的纵向扩展**，提高服务器的性能。\n\n那么怎么提高人们洗澡的效率，提高服务器的性能呢？\n\n想象一下，怎么让人洗澡洗的快呢？\n\n其一，使用先进的淋浴喷头，水大、温度调节能力好；人们使用方便的沐浴露、浴巾。这就像制造**集成电路**需要好的材料一般。\n\n其二，分阶段加流水线操作。一个人正在涂抹洗发水或沐浴露的时候，淋浴喷头闲置，这是一用浪费，这时候应该让另一个人来冲洗。这就像**CPU的分阶段流水线的指令处理**。\n\n其三，一个淋浴喷头上产生一个分叉，分出两个喷头来，一个水温适中偏凉适合洗头，一个水温适中偏热适合洗身体，可以减少调节水温的时间。这有点像服务器的横向扩展，不过不是，这是服务器内部性能的提高。\n\n其四，排队队头处于澡堂内部。这样排队的队头的人可以看到澡堂内有人洗完了，可以快速加入洗澡人员的行列。这就像**高速缓存**，总比访问内存快一点。\n\n其五，洗澡洗累了不能占用淋浴喷头，搓背搓得手酸了，这时候自己需要待在一旁休息，需要将淋浴喷头让与他人使用。这就像**进程被异常中断**挂起后保存自己的进程信息转而执行其他进程。\n\n## 总结\n\n当然这种洗澡方式有点不人性了，甚至有点丧心病狂。不过就这样吧，将就着用吧，关于衣柜的**加锁**和**解锁**问题还没有涉及，以后有空再写。","source":"_posts/bathing-thinking.md","raw":"---\ntitle: 丧心病狂的洗澡方式\nmathjax: false\ncopyright: true\ncomment: true\ndate: 2019-07-05 21:11:56\ntags:\n- Computer Science\n- Prose and Essay\ncategories:\n- Computer Science\n\n---\n\n{% note primary %}\n\n少一点功利主义的追求，多一点不为什么的坚持。\n\n{% endnote %}\n\n<!-- more -->\n\n---\n\n\n## 引子\n\n我感觉我快疯了。去洗澡的时候都会想问题想的出神。\n\n事情是这样的。某日，我去洗澡，因为正直小学期，正是炎热的时候，晚上洗澡的人特别多，于是排起了长长的队伍。然后我就想到了高并发问题，于是就刹不住车了，引起对计算机的一片思考，下文的思考是经过大学这几年沉淀下来的东西加上自己读的一些课外计算机读物所得的。\n\n## 干货\n\n澡堂外排起了长长的队伍，这让我首先想到的是高并发，这就像是双十一和六一八一样，澡堂就好比淘宝和京东的服务器，洗澡的人就是买家用户。\n\n因为我们知道可以排队可以按照顺序来使自己洗澡，如果中途走了就得重新排队。这就像那些有高并发问题的**消息中间件**，消息都需要排队，如果消息队列满了那剩下的就丢了。\n\n为什么会引起排队呢？有两点：一是澡堂可用的淋浴喷头太少，二是人们洗澡的时间太长。\n\n那么解决办法就从这两点出发，即增加淋浴喷头或者提高人们洗澡的效率。\n\n增加淋浴喷头很简单了，没有下文了，只能多修几个淋浴喷头来增加澡堂内同时洗澡的人数。这就像**服务器的横向扩展**，增加服务器的数量。\n\n提高人们洗澡的效率就值得深究了，嘿嘿嘿。这也就是**服务器的纵向扩展**，提高服务器的性能。\n\n那么怎么提高人们洗澡的效率，提高服务器的性能呢？\n\n想象一下，怎么让人洗澡洗的快呢？\n\n其一，使用先进的淋浴喷头，水大、温度调节能力好；人们使用方便的沐浴露、浴巾。这就像制造**集成电路**需要好的材料一般。\n\n其二，分阶段加流水线操作。一个人正在涂抹洗发水或沐浴露的时候，淋浴喷头闲置，这是一用浪费，这时候应该让另一个人来冲洗。这就像**CPU的分阶段流水线的指令处理**。\n\n其三，一个淋浴喷头上产生一个分叉，分出两个喷头来，一个水温适中偏凉适合洗头，一个水温适中偏热适合洗身体，可以减少调节水温的时间。这有点像服务器的横向扩展，不过不是，这是服务器内部性能的提高。\n\n其四，排队队头处于澡堂内部。这样排队的队头的人可以看到澡堂内有人洗完了，可以快速加入洗澡人员的行列。这就像**高速缓存**，总比访问内存快一点。\n\n其五，洗澡洗累了不能占用淋浴喷头，搓背搓得手酸了，这时候自己需要待在一旁休息，需要将淋浴喷头让与他人使用。这就像**进程被异常中断**挂起后保存自己的进程信息转而执行其他进程。\n\n## 总结\n\n当然这种洗澡方式有点不人性了，甚至有点丧心病狂。不过就这样吧，将就着用吧，关于衣柜的**加锁**和**解锁**问题还没有涉及，以后有空再写。","slug":"bathing-thinking","published":1,"updated":"2022-01-06T04:09:12.128Z","_id":"cksq5v7lw0003n0pufnfj83ux","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note primary\"><p>少一点功利主义的追求，多一点不为什么的坚持。</p>\n</div>\n\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"引子\"><a href=\"#引子\" class=\"headerlink\" title=\"引子\"></a>引子</h2><p>我感觉我快疯了。去洗澡的时候都会想问题想的出神。</p>\n<p>事情是这样的。某日，我去洗澡，因为正直小学期，正是炎热的时候，晚上洗澡的人特别多，于是排起了长长的队伍。然后我就想到了高并发问题，于是就刹不住车了，引起对计算机的一片思考，下文的思考是经过大学这几年沉淀下来的东西加上自己读的一些课外计算机读物所得的。</p>\n<h2 id=\"干货\"><a href=\"#干货\" class=\"headerlink\" title=\"干货\"></a>干货</h2><p>澡堂外排起了长长的队伍，这让我首先想到的是高并发，这就像是双十一和六一八一样，澡堂就好比淘宝和京东的服务器，洗澡的人就是买家用户。</p>\n<p>因为我们知道可以排队可以按照顺序来使自己洗澡，如果中途走了就得重新排队。这就像那些有高并发问题的<strong>消息中间件</strong>，消息都需要排队，如果消息队列满了那剩下的就丢了。</p>\n<p>为什么会引起排队呢？有两点：一是澡堂可用的淋浴喷头太少，二是人们洗澡的时间太长。</p>\n<p>那么解决办法就从这两点出发，即增加淋浴喷头或者提高人们洗澡的效率。</p>\n<p>增加淋浴喷头很简单了，没有下文了，只能多修几个淋浴喷头来增加澡堂内同时洗澡的人数。这就像<strong>服务器的横向扩展</strong>，增加服务器的数量。</p>\n<p>提高人们洗澡的效率就值得深究了，嘿嘿嘿。这也就是<strong>服务器的纵向扩展</strong>，提高服务器的性能。</p>\n<p>那么怎么提高人们洗澡的效率，提高服务器的性能呢？</p>\n<p>想象一下，怎么让人洗澡洗的快呢？</p>\n<p>其一，使用先进的淋浴喷头，水大、温度调节能力好；人们使用方便的沐浴露、浴巾。这就像制造<strong>集成电路</strong>需要好的材料一般。</p>\n<p>其二，分阶段加流水线操作。一个人正在涂抹洗发水或沐浴露的时候，淋浴喷头闲置，这是一用浪费，这时候应该让另一个人来冲洗。这就像<strong>CPU的分阶段流水线的指令处理</strong>。</p>\n<p>其三，一个淋浴喷头上产生一个分叉，分出两个喷头来，一个水温适中偏凉适合洗头，一个水温适中偏热适合洗身体，可以减少调节水温的时间。这有点像服务器的横向扩展，不过不是，这是服务器内部性能的提高。</p>\n<p>其四，排队队头处于澡堂内部。这样排队的队头的人可以看到澡堂内有人洗完了，可以快速加入洗澡人员的行列。这就像<strong>高速缓存</strong>，总比访问内存快一点。</p>\n<p>其五，洗澡洗累了不能占用淋浴喷头，搓背搓得手酸了，这时候自己需要待在一旁休息，需要将淋浴喷头让与他人使用。这就像<strong>进程被异常中断</strong>挂起后保存自己的进程信息转而执行其他进程。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>当然这种洗澡方式有点不人性了，甚至有点丧心病狂。不过就这样吧，将就着用吧，关于衣柜的<strong>加锁</strong>和<strong>解锁</strong>问题还没有涉及，以后有空再写。</p>\n","site":{"data":{}},"excerpt":"<div class=\"note primary\"><p>少一点功利主义的追求，多一点不为什么的坚持。</p>\n</div>","more":"<hr>\n<h2 id=\"引子\"><a href=\"#引子\" class=\"headerlink\" title=\"引子\"></a>引子</h2><p>我感觉我快疯了。去洗澡的时候都会想问题想的出神。</p>\n<p>事情是这样的。某日，我去洗澡，因为正直小学期，正是炎热的时候，晚上洗澡的人特别多，于是排起了长长的队伍。然后我就想到了高并发问题，于是就刹不住车了，引起对计算机的一片思考，下文的思考是经过大学这几年沉淀下来的东西加上自己读的一些课外计算机读物所得的。</p>\n<h2 id=\"干货\"><a href=\"#干货\" class=\"headerlink\" title=\"干货\"></a>干货</h2><p>澡堂外排起了长长的队伍，这让我首先想到的是高并发，这就像是双十一和六一八一样，澡堂就好比淘宝和京东的服务器，洗澡的人就是买家用户。</p>\n<p>因为我们知道可以排队可以按照顺序来使自己洗澡，如果中途走了就得重新排队。这就像那些有高并发问题的<strong>消息中间件</strong>，消息都需要排队，如果消息队列满了那剩下的就丢了。</p>\n<p>为什么会引起排队呢？有两点：一是澡堂可用的淋浴喷头太少，二是人们洗澡的时间太长。</p>\n<p>那么解决办法就从这两点出发，即增加淋浴喷头或者提高人们洗澡的效率。</p>\n<p>增加淋浴喷头很简单了，没有下文了，只能多修几个淋浴喷头来增加澡堂内同时洗澡的人数。这就像<strong>服务器的横向扩展</strong>，增加服务器的数量。</p>\n<p>提高人们洗澡的效率就值得深究了，嘿嘿嘿。这也就是<strong>服务器的纵向扩展</strong>，提高服务器的性能。</p>\n<p>那么怎么提高人们洗澡的效率，提高服务器的性能呢？</p>\n<p>想象一下，怎么让人洗澡洗的快呢？</p>\n<p>其一，使用先进的淋浴喷头，水大、温度调节能力好；人们使用方便的沐浴露、浴巾。这就像制造<strong>集成电路</strong>需要好的材料一般。</p>\n<p>其二，分阶段加流水线操作。一个人正在涂抹洗发水或沐浴露的时候，淋浴喷头闲置，这是一用浪费，这时候应该让另一个人来冲洗。这就像<strong>CPU的分阶段流水线的指令处理</strong>。</p>\n<p>其三，一个淋浴喷头上产生一个分叉，分出两个喷头来，一个水温适中偏凉适合洗头，一个水温适中偏热适合洗身体，可以减少调节水温的时间。这有点像服务器的横向扩展，不过不是，这是服务器内部性能的提高。</p>\n<p>其四，排队队头处于澡堂内部。这样排队的队头的人可以看到澡堂内有人洗完了，可以快速加入洗澡人员的行列。这就像<strong>高速缓存</strong>，总比访问内存快一点。</p>\n<p>其五，洗澡洗累了不能占用淋浴喷头，搓背搓得手酸了，这时候自己需要待在一旁休息，需要将淋浴喷头让与他人使用。这就像<strong>进程被异常中断</strong>挂起后保存自己的进程信息转而执行其他进程。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>当然这种洗澡方式有点不人性了，甚至有点丧心病狂。不过就这样吧，将就着用吧，关于衣柜的<strong>加锁</strong>和<strong>解锁</strong>问题还没有涉及，以后有空再写。</p>"},{"title":"BMP文件的特殊宽度处理及字节对齐问题","mathjax":true,"copyright":true,"comment":true,"date":"2019-03-08T00:10:54.000Z","_content":"\n{% note default %}\n所见所观，皆为虚幻。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 前言\n\n[BMP文件处理（C语言实现）](bitmap-resolver.html)这篇文章中说到了两个不足之处：\n\n- 文件头的字节对齐问题\n- BMP文件的特殊宽度处理问题\n\n对于字节对齐，可以查看[计算机的字节对齐](byte-alignment.html)这篇文章。本篇文章主要写对BMP文件的特殊宽度处理。\n\n\n\n## 文件头的字节对齐问题\n\n\n\n上次文章中写到的BMP文件头的结构体是下文中代码块这样的，结合字节对齐规则，**“K大小的基本数据类型的地址必须是K的倍数”，“对于结构体，结构体的地址是结构体内最大元素字节大小的整数倍，结构体的大小是结构体内最大元素字节大小的整数倍”。**\n\n\n\n```c\ntypedef struct bitmapFileHeader {\n\tunsigned char type[2];\n\tunsigned size;\n\tunsigned char resvered1[2];\n\tunsigned char reserved2[2];\n\tunsigned offset;\n} BMFILEHEADER;\n```\n\n\n\n但是，实际要求BMP文件头大小必须是14，而针对以上结构体进行`sizeof()`运算得到的数值是**16**。结果显然是错误的，错误原因如下所示：\n\n1. 结构体大小必须是结构体内最大元素字节大小的整数倍（最大的是unsigned，4字节）（*所以肯定不是*14）。\n2. 结构体的地址是结构体内最大元素字节大小的整数倍，在此假设一个结构体首地址是0\n\n下图便是划分图：\n\n![1552183022513](bitmap-resolver-rectify/1552183022513.png)\n\n对于char数组而言，并无特殊字节对齐要求，但是对于unsigned类型，需要首地址为4的倍数。因此在type字段后面的两个字节需要填充。\n\n这样，结构体的大小为最大元素大小4的倍数，结构体的地址是最大元素字节的整数倍。所以结果总大小为16。\n\n\n\n那么应该怎么写呢？需要14个字节的大小的BMP文件头。为了简单起见，我是这么写的：\n\n```c\ntypedef struct bitmapFileHeader {\n\tunsigned char type[2];\n\tunsigned char size[4];\n\tunsigned char resvered1[2];\n\tunsigned char reserved2[2];\n\tunsigned char offset[4];\n} BMFILEHEADER;\n```\n\n\n\n因为都是元素都是char类型的，所以不需要刻意的字节对齐。但是虽然简单了，数据访问是个问题。比如想访问offset这个应该为int类型的字段应该如何访问？在此感谢[XBlame](https://github.com/Blameying)的指导。写法是这样的：\n\n\n\n```c\n*(int *)offset;\n```\n\n首先将`char*`类型转换为`int*`，然后通过`*`来索引，得到的就是一个int值。\n\n相对应的，你想获取size字段，就需要使用：\n\n```c\n*(int *)size;\n```\n\n\n\n\n\n## BMP文件的特殊宽度处理\n\n[BMP文件处理（C语言实现）](bitmap-resolver.html)这篇文章中说到BMP的宽度字节数规定必须为4的倍数，文章中的代码读取BMP宽度字节数为非4倍数并且不为3的倍数时（是3倍但不是4倍时，不会造成像素偏移），会造成像素偏移问题，效果如下：\n\n> 大图没有保留，只剩小的测试图了，不过效果就是有线条（RGB像素字节错位所致）\n\n![](bitmap-resolver-rectify/n4xout.png)\n\n根据测试，BMP的宽度字节数不是4的倍数时，也有特别情况，这种情况下我的程序也能处理。为什么呢？\n\nBMP的宽度字节规定必须为4的倍数，在宽度字节数不为4的倍数时，就需要补齐。这说明补齐字节数有可能是0、1、2、3这几个数中的一个（0的时候宽度字节数是4的倍数）。如果需要补齐的字节数为3，这就是特殊情况，每行补齐三个字节数，顺序读取并没有导致RGB的字节错位。相反的，如果补齐字节数为1或者2，这样每一行都会多于1个或者2个字节，顺序读取就会造成RGB字节错位，而且是周期性的（补齐字节为1或2，则3行显示一行正确像素），所以显示图片能够看出原来的样子，但是有线条。如果字节全部错乱就完全不像原图了。\n\n\n\n那么解决方法是什么？\n\n> 遇到补齐的字节跳过。\n\n\n\n那么问题来了，如何知道每行补齐的字节数和实际？\n\n获取信息头里面的sizeImage字段（指的是图像实际用到的字节数，包含补齐），用它除以高度得到的是每行的字节数realWidth（包含补齐字节）。用realWidth整除每个像素所含字节数3，得到实际像素数；realWidth对3取余，得到补齐字节数。\n\n在读取的时候每行只需要跳过最终的补齐字节，输出时输出补齐字节即可。\n\n代码如下：\n\n```c\nunsigned offset = *(int *)(header.offset);\nunsigned realWidth = info.sizeImage / info.height;\nunsigned rowPixelNumber = realWidth / sizeof(RGBITEM);\nunsigned remanentByteOfRow = realWidth % sizeof(RGBITEM);\nunsigned pixelCounts = rowPixelNumber * info.height;\nfseek(fp, offset, 0);\n\n\nRGBITEM *pitem = (RGBITEM *)malloc(pixelCounts*sizeof(RGBITEM));\n//char *garbage = (char *)malloc(remanentByteOfRow);\n\nfor (size_t i = 0; i < info.height; i++)\n{\n    RGBITEM * currentAddr = pitem + i * rowPixelNumber;\n    fread(currentAddr, sizeof(RGBITEM), rowPixelNumber, fp);\n    //fread(garbage, remanentByteOfRow, 1, fp);\n    fseek(fp, remanentByteOfRow, SEEK_CUR);\n}\n```\n\n\n\n\n\n## 转为8位灰度图\n\n\n\n\n\n在上篇文章中展示的灰度图是用24位真彩色位图模拟的，就是将RGB三个字节都设为通过RGB求得的一个灰度值，这样无疑就每3个字节浪费2个字节，结果是输出的位图8位灰度图大小比24模拟灰度图会小$\\frac{2}{3}$。\n\n那么将24位真彩色（RGB）位图转换为8位灰度图需要修改那些属性呢？\n\n### 方法\n\n1. 图像数据$RGB24位真彩色\\to8位灰度$\n2. 调色板数据添加，每个单位1个字节\n3. 文件头\n   1. 文件大小\n   2. 偏移量\n4. 信息头\n   2. 颜色位数\n   3. 图像实际所用字节数\n\n\n### 实现\n\n\n\n```c\nvoid BMP24To8Gray(const char * from, const char * to) {\n\tBMFILEHEADER fromHeader;\n\tINFOHEADER fromInfo;\n\n\n\tRGBITEM ** fromData = malloc(sizeof(RGBITEM*));\n\tRGBQUAD ** fromPalette = malloc(sizeof(RGBQUAD*));\n\n\tint fromPixelNumber = BMPReader(from, &fromHeader, &fromInfo, fromPalette, fromData);\n\n\n\tBMFILEHEADER toHeader = fromHeader;\n\tINFOHEADER toInfo = fromInfo;\n\t// set info\n\ttoInfo.colorCount = 8;\n\ttoInfo.infoHeaderSize = 40;\n\ttoInfo.planes = 1;\n\ttoInfo.sizeImage = (toInfo.width+3)/4*4*toInfo.height;\n\ttoInfo.colorUsed = 256;\n\n\n\tRGBQUAD ** toPalette = malloc(sizeof(RGBQUAD*));\n\t*toPalette = malloc(256 * sizeof(RGBQUAD));\n\tfor (size_t i = 0; i < 256; i++)\n\t{\n\t\t((*toPalette) + i)->r = ((*toPalette) + i)->b = ((*toPalette) + i)->g = i;\n\t}\n\n\tunsigned char **toData = malloc(sizeof(unsigned char *));\n\t*toData = malloc(fromPixelNumber);\n\n\tfor (size_t i = 0; i < fromPixelNumber; i++)\n\t{\n\t\t*(*toData+i)= ((*fromData + i)->r * 299 + (*fromData + i)->g * 587 + (*fromData + i)->b * 114 + 500) / 1000;\n\t}\n\n\t*(unsigned *)toHeader.offset = sizeof(toHeader) + sizeof(toInfo) + 256 * sizeof(RGBQUAD);\n\t*(unsigned *)toHeader.size = toHeader.offset + toInfo.sizeImage;\n\n\tBMPWriter8(to, &toHeader, &toInfo, toPalette, toData);\n\n}\n```\n\n\n\n## 代码\n\n\n\n\n\n{% note primary%}\n\n**全部代码请查看[GitHub](https://github.com/ScarboroughCoral/DIPModule**\n\n{% endnote %}\n\n\n\n```c\n#include \"BMP.h\"\n#include<stdlib.h>\n#include<stdio.h>\n\n#pragma warning(disable : 4996)\n\nvoid BMPResolver() {\n\tFILE * fp = fopen(\"width.bmp\", \"rb\");\n\tif (fp == NULL)\n\t{\n\t\tgetchar();\n\t\treturn;\n\t}\n\tBMFILEHEADER header;\n\tINFOHEADER info;\n\t\n\tfread(&header, 14, 1, fp);\n\tfread(&info, sizeof(INFOHEADER), 1, fp);\n\n\n\n\t//RGBQUAD * prgbquad = (RGBQUAD *)malloc(info.colorUsed * sizeof(RGBQUAD));\n\t//fread(prgbquad, sizeof(RGBQUAD), info.colorUsed, fp);\n\tunsigned offset = *(int *)(header.offset);\n\tunsigned realWidth = info.sizeImage / info.height;\n\tunsigned rowPixelNumber = realWidth / sizeof(RGBITEM);\n\tunsigned remanentByteOfRow = realWidth % sizeof(RGBITEM);\n\tunsigned pixelCounts = rowPixelNumber * info.height;\n\tfseek(fp, offset, 0);\n\n\n\tRGBITEM *pitem = (RGBITEM *)malloc(pixelCounts*sizeof(RGBITEM));\n\tchar *garbage = (char *)malloc(remanentByteOfRow);\n\n\tfor (size_t i = 0; i < info.height; i++)\n\t{\n\t\tRGBITEM * currentAddr = pitem + i * rowPixelNumber;\n\t\tfread(currentAddr, sizeof(RGBITEM), rowPixelNumber, fp);\n\t\tfread(garbage, remanentByteOfRow, 1, fp);\n\t\t//fseek(fp, remanentByteOfRow, SEEK_CUR);\n\t}\n\n\n\t//修改单色\n\t//for (size_t i = 0; i < pixelCounts; i++)\n\t//{\n\t//\t//printf(\"%p-%p\\n\", pitem,pitem+1);\n\t//\t//(pitem+i)->r = 0;\n\t//\t(pitem + i)->g = 0;\n\t//\t(pitem + i)->b = 0;\n\t//}\n\n\t//灰度化\n\tint gray;\n\t/*for (size_t i = 0; i < pixelCounts; i++)\n\t{\n\t\tgray = ((pitem + i)->r * 299 + (pitem + i)->g * 587 + (pitem + i)->b * 114 + 500) / 1000;\n\t\t(pitem + i)->r = gray;\n\t\t(pitem + i)->g = gray;\n\t\t(pitem + i)->b = gray;\n\t}*/\n\n\t//灰度图反色\n\tfor (size_t i = 0; i < pixelCounts; i++)\n\t{\n\t\tgray = ((pitem + i)->r * 299 + (pitem + i)->g * 587 + (pitem + i)->b * 114 + 500) / 1000;\n\t\t(pitem + i)->r = 255 - gray;\n\t\t(pitem + i)->g = 255 - gray;\n\t\t(pitem + i)->b = 255 - gray;\n\t}\n\n\tchar * result = \"result.bmp\";\n\tFILE * rp = fopen(result, \"wb\");\n\tif (rp == NULL)\n\t{\n\t\treturn;\n\t}\n\tfwrite(&header, 14, 1, rp);\n\tfwrite(&info, sizeof(INFOHEADER), 1, rp);\n\tfseek(rp, offset, 0);\n\t//fwrite(prgbquad, sizeof(RGBQUAD), info.colorUsed, rp);\n\t//fwrite(pitem, sizeof(RGBITEM), info.sizeImage / 3, rp)\n\n\tfor (size_t i = 0; i < info.height; i++)\n\t{\n\t\tfwrite(pitem+i*rowPixelNumber, sizeof(RGBITEM), rowPixelNumber, rp);\n\t\tfwrite(garbage, remanentByteOfRow, 1, rp);\n\t};\n\tprintf(\"Output singleColor.bmp  successfully!\\n\");\n\tfclose(fp);\n\tfclose(rp);\n}\n```\n\n\n\n## 总结\n\n\n\n\n\n","source":"_posts/bitmap-resolver-rectify.md","raw":"---\ntitle: BMP文件的特殊宽度处理及字节对齐问题\nmathjax: true\ncopyright: true\ncomment: true\ndate: 2019-03-08 08:10:54\ntags:\n- Computer Graphics\n- DIP\ncategories: \n- Computer Science\n- Computer Graphics\n\n---\n\n{% note default %}\n所见所观，皆为虚幻。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 前言\n\n[BMP文件处理（C语言实现）](bitmap-resolver.html)这篇文章中说到了两个不足之处：\n\n- 文件头的字节对齐问题\n- BMP文件的特殊宽度处理问题\n\n对于字节对齐，可以查看[计算机的字节对齐](byte-alignment.html)这篇文章。本篇文章主要写对BMP文件的特殊宽度处理。\n\n\n\n## 文件头的字节对齐问题\n\n\n\n上次文章中写到的BMP文件头的结构体是下文中代码块这样的，结合字节对齐规则，**“K大小的基本数据类型的地址必须是K的倍数”，“对于结构体，结构体的地址是结构体内最大元素字节大小的整数倍，结构体的大小是结构体内最大元素字节大小的整数倍”。**\n\n\n\n```c\ntypedef struct bitmapFileHeader {\n\tunsigned char type[2];\n\tunsigned size;\n\tunsigned char resvered1[2];\n\tunsigned char reserved2[2];\n\tunsigned offset;\n} BMFILEHEADER;\n```\n\n\n\n但是，实际要求BMP文件头大小必须是14，而针对以上结构体进行`sizeof()`运算得到的数值是**16**。结果显然是错误的，错误原因如下所示：\n\n1. 结构体大小必须是结构体内最大元素字节大小的整数倍（最大的是unsigned，4字节）（*所以肯定不是*14）。\n2. 结构体的地址是结构体内最大元素字节大小的整数倍，在此假设一个结构体首地址是0\n\n下图便是划分图：\n\n![1552183022513](bitmap-resolver-rectify/1552183022513.png)\n\n对于char数组而言，并无特殊字节对齐要求，但是对于unsigned类型，需要首地址为4的倍数。因此在type字段后面的两个字节需要填充。\n\n这样，结构体的大小为最大元素大小4的倍数，结构体的地址是最大元素字节的整数倍。所以结果总大小为16。\n\n\n\n那么应该怎么写呢？需要14个字节的大小的BMP文件头。为了简单起见，我是这么写的：\n\n```c\ntypedef struct bitmapFileHeader {\n\tunsigned char type[2];\n\tunsigned char size[4];\n\tunsigned char resvered1[2];\n\tunsigned char reserved2[2];\n\tunsigned char offset[4];\n} BMFILEHEADER;\n```\n\n\n\n因为都是元素都是char类型的，所以不需要刻意的字节对齐。但是虽然简单了，数据访问是个问题。比如想访问offset这个应该为int类型的字段应该如何访问？在此感谢[XBlame](https://github.com/Blameying)的指导。写法是这样的：\n\n\n\n```c\n*(int *)offset;\n```\n\n首先将`char*`类型转换为`int*`，然后通过`*`来索引，得到的就是一个int值。\n\n相对应的，你想获取size字段，就需要使用：\n\n```c\n*(int *)size;\n```\n\n\n\n\n\n## BMP文件的特殊宽度处理\n\n[BMP文件处理（C语言实现）](bitmap-resolver.html)这篇文章中说到BMP的宽度字节数规定必须为4的倍数，文章中的代码读取BMP宽度字节数为非4倍数并且不为3的倍数时（是3倍但不是4倍时，不会造成像素偏移），会造成像素偏移问题，效果如下：\n\n> 大图没有保留，只剩小的测试图了，不过效果就是有线条（RGB像素字节错位所致）\n\n![](bitmap-resolver-rectify/n4xout.png)\n\n根据测试，BMP的宽度字节数不是4的倍数时，也有特别情况，这种情况下我的程序也能处理。为什么呢？\n\nBMP的宽度字节规定必须为4的倍数，在宽度字节数不为4的倍数时，就需要补齐。这说明补齐字节数有可能是0、1、2、3这几个数中的一个（0的时候宽度字节数是4的倍数）。如果需要补齐的字节数为3，这就是特殊情况，每行补齐三个字节数，顺序读取并没有导致RGB的字节错位。相反的，如果补齐字节数为1或者2，这样每一行都会多于1个或者2个字节，顺序读取就会造成RGB字节错位，而且是周期性的（补齐字节为1或2，则3行显示一行正确像素），所以显示图片能够看出原来的样子，但是有线条。如果字节全部错乱就完全不像原图了。\n\n\n\n那么解决方法是什么？\n\n> 遇到补齐的字节跳过。\n\n\n\n那么问题来了，如何知道每行补齐的字节数和实际？\n\n获取信息头里面的sizeImage字段（指的是图像实际用到的字节数，包含补齐），用它除以高度得到的是每行的字节数realWidth（包含补齐字节）。用realWidth整除每个像素所含字节数3，得到实际像素数；realWidth对3取余，得到补齐字节数。\n\n在读取的时候每行只需要跳过最终的补齐字节，输出时输出补齐字节即可。\n\n代码如下：\n\n```c\nunsigned offset = *(int *)(header.offset);\nunsigned realWidth = info.sizeImage / info.height;\nunsigned rowPixelNumber = realWidth / sizeof(RGBITEM);\nunsigned remanentByteOfRow = realWidth % sizeof(RGBITEM);\nunsigned pixelCounts = rowPixelNumber * info.height;\nfseek(fp, offset, 0);\n\n\nRGBITEM *pitem = (RGBITEM *)malloc(pixelCounts*sizeof(RGBITEM));\n//char *garbage = (char *)malloc(remanentByteOfRow);\n\nfor (size_t i = 0; i < info.height; i++)\n{\n    RGBITEM * currentAddr = pitem + i * rowPixelNumber;\n    fread(currentAddr, sizeof(RGBITEM), rowPixelNumber, fp);\n    //fread(garbage, remanentByteOfRow, 1, fp);\n    fseek(fp, remanentByteOfRow, SEEK_CUR);\n}\n```\n\n\n\n\n\n## 转为8位灰度图\n\n\n\n\n\n在上篇文章中展示的灰度图是用24位真彩色位图模拟的，就是将RGB三个字节都设为通过RGB求得的一个灰度值，这样无疑就每3个字节浪费2个字节，结果是输出的位图8位灰度图大小比24模拟灰度图会小$\\frac{2}{3}$。\n\n那么将24位真彩色（RGB）位图转换为8位灰度图需要修改那些属性呢？\n\n### 方法\n\n1. 图像数据$RGB24位真彩色\\to8位灰度$\n2. 调色板数据添加，每个单位1个字节\n3. 文件头\n   1. 文件大小\n   2. 偏移量\n4. 信息头\n   2. 颜色位数\n   3. 图像实际所用字节数\n\n\n### 实现\n\n\n\n```c\nvoid BMP24To8Gray(const char * from, const char * to) {\n\tBMFILEHEADER fromHeader;\n\tINFOHEADER fromInfo;\n\n\n\tRGBITEM ** fromData = malloc(sizeof(RGBITEM*));\n\tRGBQUAD ** fromPalette = malloc(sizeof(RGBQUAD*));\n\n\tint fromPixelNumber = BMPReader(from, &fromHeader, &fromInfo, fromPalette, fromData);\n\n\n\tBMFILEHEADER toHeader = fromHeader;\n\tINFOHEADER toInfo = fromInfo;\n\t// set info\n\ttoInfo.colorCount = 8;\n\ttoInfo.infoHeaderSize = 40;\n\ttoInfo.planes = 1;\n\ttoInfo.sizeImage = (toInfo.width+3)/4*4*toInfo.height;\n\ttoInfo.colorUsed = 256;\n\n\n\tRGBQUAD ** toPalette = malloc(sizeof(RGBQUAD*));\n\t*toPalette = malloc(256 * sizeof(RGBQUAD));\n\tfor (size_t i = 0; i < 256; i++)\n\t{\n\t\t((*toPalette) + i)->r = ((*toPalette) + i)->b = ((*toPalette) + i)->g = i;\n\t}\n\n\tunsigned char **toData = malloc(sizeof(unsigned char *));\n\t*toData = malloc(fromPixelNumber);\n\n\tfor (size_t i = 0; i < fromPixelNumber; i++)\n\t{\n\t\t*(*toData+i)= ((*fromData + i)->r * 299 + (*fromData + i)->g * 587 + (*fromData + i)->b * 114 + 500) / 1000;\n\t}\n\n\t*(unsigned *)toHeader.offset = sizeof(toHeader) + sizeof(toInfo) + 256 * sizeof(RGBQUAD);\n\t*(unsigned *)toHeader.size = toHeader.offset + toInfo.sizeImage;\n\n\tBMPWriter8(to, &toHeader, &toInfo, toPalette, toData);\n\n}\n```\n\n\n\n## 代码\n\n\n\n\n\n{% note primary%}\n\n**全部代码请查看[GitHub](https://github.com/ScarboroughCoral/DIPModule**\n\n{% endnote %}\n\n\n\n```c\n#include \"BMP.h\"\n#include<stdlib.h>\n#include<stdio.h>\n\n#pragma warning(disable : 4996)\n\nvoid BMPResolver() {\n\tFILE * fp = fopen(\"width.bmp\", \"rb\");\n\tif (fp == NULL)\n\t{\n\t\tgetchar();\n\t\treturn;\n\t}\n\tBMFILEHEADER header;\n\tINFOHEADER info;\n\t\n\tfread(&header, 14, 1, fp);\n\tfread(&info, sizeof(INFOHEADER), 1, fp);\n\n\n\n\t//RGBQUAD * prgbquad = (RGBQUAD *)malloc(info.colorUsed * sizeof(RGBQUAD));\n\t//fread(prgbquad, sizeof(RGBQUAD), info.colorUsed, fp);\n\tunsigned offset = *(int *)(header.offset);\n\tunsigned realWidth = info.sizeImage / info.height;\n\tunsigned rowPixelNumber = realWidth / sizeof(RGBITEM);\n\tunsigned remanentByteOfRow = realWidth % sizeof(RGBITEM);\n\tunsigned pixelCounts = rowPixelNumber * info.height;\n\tfseek(fp, offset, 0);\n\n\n\tRGBITEM *pitem = (RGBITEM *)malloc(pixelCounts*sizeof(RGBITEM));\n\tchar *garbage = (char *)malloc(remanentByteOfRow);\n\n\tfor (size_t i = 0; i < info.height; i++)\n\t{\n\t\tRGBITEM * currentAddr = pitem + i * rowPixelNumber;\n\t\tfread(currentAddr, sizeof(RGBITEM), rowPixelNumber, fp);\n\t\tfread(garbage, remanentByteOfRow, 1, fp);\n\t\t//fseek(fp, remanentByteOfRow, SEEK_CUR);\n\t}\n\n\n\t//修改单色\n\t//for (size_t i = 0; i < pixelCounts; i++)\n\t//{\n\t//\t//printf(\"%p-%p\\n\", pitem,pitem+1);\n\t//\t//(pitem+i)->r = 0;\n\t//\t(pitem + i)->g = 0;\n\t//\t(pitem + i)->b = 0;\n\t//}\n\n\t//灰度化\n\tint gray;\n\t/*for (size_t i = 0; i < pixelCounts; i++)\n\t{\n\t\tgray = ((pitem + i)->r * 299 + (pitem + i)->g * 587 + (pitem + i)->b * 114 + 500) / 1000;\n\t\t(pitem + i)->r = gray;\n\t\t(pitem + i)->g = gray;\n\t\t(pitem + i)->b = gray;\n\t}*/\n\n\t//灰度图反色\n\tfor (size_t i = 0; i < pixelCounts; i++)\n\t{\n\t\tgray = ((pitem + i)->r * 299 + (pitem + i)->g * 587 + (pitem + i)->b * 114 + 500) / 1000;\n\t\t(pitem + i)->r = 255 - gray;\n\t\t(pitem + i)->g = 255 - gray;\n\t\t(pitem + i)->b = 255 - gray;\n\t}\n\n\tchar * result = \"result.bmp\";\n\tFILE * rp = fopen(result, \"wb\");\n\tif (rp == NULL)\n\t{\n\t\treturn;\n\t}\n\tfwrite(&header, 14, 1, rp);\n\tfwrite(&info, sizeof(INFOHEADER), 1, rp);\n\tfseek(rp, offset, 0);\n\t//fwrite(prgbquad, sizeof(RGBQUAD), info.colorUsed, rp);\n\t//fwrite(pitem, sizeof(RGBITEM), info.sizeImage / 3, rp)\n\n\tfor (size_t i = 0; i < info.height; i++)\n\t{\n\t\tfwrite(pitem+i*rowPixelNumber, sizeof(RGBITEM), rowPixelNumber, rp);\n\t\tfwrite(garbage, remanentByteOfRow, 1, rp);\n\t};\n\tprintf(\"Output singleColor.bmp  successfully!\\n\");\n\tfclose(fp);\n\tfclose(rp);\n}\n```\n\n\n\n## 总结\n\n\n\n\n\n","slug":"bitmap-resolver-rectify","published":1,"updated":"2022-01-06T04:09:12.129Z","_id":"cksq5v7lz0007n0pu1v1xh6na","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note default\"><p>所见所观，皆为虚幻。</p>\n</div>\n\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><a href=\"bitmap-resolver.html\">BMP文件处理（C语言实现）</a>这篇文章中说到了两个不足之处：</p>\n<ul>\n<li>文件头的字节对齐问题</li>\n<li>BMP文件的特殊宽度处理问题</li>\n</ul>\n<p>对于字节对齐，可以查看<a href=\"byte-alignment.html\">计算机的字节对齐</a>这篇文章。本篇文章主要写对BMP文件的特殊宽度处理。</p>\n<h2 id=\"文件头的字节对齐问题\"><a href=\"#文件头的字节对齐问题\" class=\"headerlink\" title=\"文件头的字节对齐问题\"></a>文件头的字节对齐问题</h2><p>上次文章中写到的BMP文件头的结构体是下文中代码块这样的，结合字节对齐规则，<strong>“K大小的基本数据类型的地址必须是K的倍数”，“对于结构体，结构体的地址是结构体内最大元素字节大小的整数倍，结构体的大小是结构体内最大元素字节大小的整数倍”。</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">bitmapFileHeader</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> type[<span class=\"number\">2</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> size;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> resvered1[<span class=\"number\">2</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> reserved2[<span class=\"number\">2</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> offset;</span><br><span class=\"line\">&#125; BMFILEHEADER;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>但是，实际要求BMP文件头大小必须是14，而针对以上结构体进行<code>sizeof()</code>运算得到的数值是<strong>16</strong>。结果显然是错误的，错误原因如下所示：</p>\n<ol>\n<li>结构体大小必须是结构体内最大元素字节大小的整数倍（最大的是unsigned，4字节）（<em>所以肯定不是</em>14）。</li>\n<li>结构体的地址是结构体内最大元素字节大小的整数倍，在此假设一个结构体首地址是0</li>\n</ol>\n<p>下图便是划分图：</p>\n<p><img data-src=\"bitmap-resolver-rectify/1552183022513.png\" alt=\"1552183022513\"></p>\n<p>对于char数组而言，并无特殊字节对齐要求，但是对于unsigned类型，需要首地址为4的倍数。因此在type字段后面的两个字节需要填充。</p>\n<p>这样，结构体的大小为最大元素大小4的倍数，结构体的地址是最大元素字节的整数倍。所以结果总大小为16。</p>\n<p>那么应该怎么写呢？需要14个字节的大小的BMP文件头。为了简单起见，我是这么写的：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">bitmapFileHeader</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> type[<span class=\"number\">2</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> size[<span class=\"number\">4</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> resvered1[<span class=\"number\">2</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> reserved2[<span class=\"number\">2</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> offset[<span class=\"number\">4</span>];</span><br><span class=\"line\">&#125; BMFILEHEADER;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>因为都是元素都是char类型的，所以不需要刻意的字节对齐。但是虽然简单了，数据访问是个问题。比如想访问offset这个应该为int类型的字段应该如何访问？在此感谢<a href=\"https://github.com/Blameying\">XBlame</a>的指导。写法是这样的：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*(<span class=\"keyword\">int</span> *)offset;</span><br></pre></td></tr></table></figure>\n\n<p>首先将<code>char*</code>类型转换为<code>int*</code>，然后通过<code>*</code>来索引，得到的就是一个int值。</p>\n<p>相对应的，你想获取size字段，就需要使用：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*(<span class=\"keyword\">int</span> *)size;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"BMP文件的特殊宽度处理\"><a href=\"#BMP文件的特殊宽度处理\" class=\"headerlink\" title=\"BMP文件的特殊宽度处理\"></a>BMP文件的特殊宽度处理</h2><p><a href=\"bitmap-resolver.html\">BMP文件处理（C语言实现）</a>这篇文章中说到BMP的宽度字节数规定必须为4的倍数，文章中的代码读取BMP宽度字节数为非4倍数并且不为3的倍数时（是3倍但不是4倍时，不会造成像素偏移），会造成像素偏移问题，效果如下：</p>\n<blockquote>\n<p>大图没有保留，只剩小的测试图了，不过效果就是有线条（RGB像素字节错位所致）</p>\n</blockquote>\n<p><img data-src=\"bitmap-resolver-rectify/n4xout.png\"></p>\n<p>根据测试，BMP的宽度字节数不是4的倍数时，也有特别情况，这种情况下我的程序也能处理。为什么呢？</p>\n<p>BMP的宽度字节规定必须为4的倍数，在宽度字节数不为4的倍数时，就需要补齐。这说明补齐字节数有可能是0、1、2、3这几个数中的一个（0的时候宽度字节数是4的倍数）。如果需要补齐的字节数为3，这就是特殊情况，每行补齐三个字节数，顺序读取并没有导致RGB的字节错位。相反的，如果补齐字节数为1或者2，这样每一行都会多于1个或者2个字节，顺序读取就会造成RGB字节错位，而且是周期性的（补齐字节为1或2，则3行显示一行正确像素），所以显示图片能够看出原来的样子，但是有线条。如果字节全部错乱就完全不像原图了。</p>\n<p>那么解决方法是什么？</p>\n<blockquote>\n<p>遇到补齐的字节跳过。</p>\n</blockquote>\n<p>那么问题来了，如何知道每行补齐的字节数和实际？</p>\n<p>获取信息头里面的sizeImage字段（指的是图像实际用到的字节数，包含补齐），用它除以高度得到的是每行的字节数realWidth（包含补齐字节）。用realWidth整除每个像素所含字节数3，得到实际像素数；realWidth对3取余，得到补齐字节数。</p>\n<p>在读取的时候每行只需要跳过最终的补齐字节，输出时输出补齐字节即可。</p>\n<p>代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">unsigned</span> offset = *(<span class=\"keyword\">int</span> *)(header.offset);</span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> realWidth = info.sizeImage / info.height;</span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> rowPixelNumber = realWidth / <span class=\"keyword\">sizeof</span>(RGBITEM);</span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> remanentByteOfRow = realWidth % <span class=\"keyword\">sizeof</span>(RGBITEM);</span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> pixelCounts = rowPixelNumber * info.height;</span><br><span class=\"line\">fseek(fp, offset, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">RGBITEM *pitem = (RGBITEM *)<span class=\"built_in\">malloc</span>(pixelCounts*<span class=\"keyword\">sizeof</span>(RGBITEM));</span><br><span class=\"line\"><span class=\"comment\">//char *garbage = (char *)malloc(remanentByteOfRow);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; info.height; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    RGBITEM * currentAddr = pitem + i * rowPixelNumber;</span><br><span class=\"line\">    fread(currentAddr, <span class=\"keyword\">sizeof</span>(RGBITEM), rowPixelNumber, fp);</span><br><span class=\"line\">    <span class=\"comment\">//fread(garbage, remanentByteOfRow, 1, fp);</span></span><br><span class=\"line\">    fseek(fp, remanentByteOfRow, SEEK_CUR);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"转为8位灰度图\"><a href=\"#转为8位灰度图\" class=\"headerlink\" title=\"转为8位灰度图\"></a>转为8位灰度图</h2><p>在上篇文章中展示的灰度图是用24位真彩色位图模拟的，就是将RGB三个字节都设为通过RGB求得的一个灰度值，这样无疑就每3个字节浪费2个字节，结果是输出的位图8位灰度图大小比24模拟灰度图会小$\\frac{2}{3}$。</p>\n<p>那么将24位真彩色（RGB）位图转换为8位灰度图需要修改那些属性呢？</p>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><ol>\n<li>图像数据$RGB24位真彩色\\to8位灰度$</li>\n<li>调色板数据添加，每个单位1个字节</li>\n<li>文件头<ol>\n<li>文件大小</li>\n<li>偏移量</li>\n</ol>\n</li>\n<li>信息头<ol start=\"2\">\n<li>颜色位数</li>\n<li>图像实际所用字节数</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">BMP24To8Gray</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * from, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * to)</span> </span>&#123;</span><br><span class=\"line\">\tBMFILEHEADER fromHeader;</span><br><span class=\"line\">\tINFOHEADER fromInfo;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tRGBITEM ** fromData = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(RGBITEM*));</span><br><span class=\"line\">\tRGBQUAD ** fromPalette = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(RGBQUAD*));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> fromPixelNumber = BMPReader(from, &amp;fromHeader, &amp;fromInfo, fromPalette, fromData);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tBMFILEHEADER toHeader = fromHeader;</span><br><span class=\"line\">\tINFOHEADER toInfo = fromInfo;</span><br><span class=\"line\">\t<span class=\"comment\">// set info</span></span><br><span class=\"line\">\ttoInfo.colorCount = <span class=\"number\">8</span>;</span><br><span class=\"line\">\ttoInfo.infoHeaderSize = <span class=\"number\">40</span>;</span><br><span class=\"line\">\ttoInfo.planes = <span class=\"number\">1</span>;</span><br><span class=\"line\">\ttoInfo.sizeImage = (toInfo.width+<span class=\"number\">3</span>)/<span class=\"number\">4</span>*<span class=\"number\">4</span>*toInfo.height;</span><br><span class=\"line\">\ttoInfo.colorUsed = <span class=\"number\">256</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tRGBQUAD ** toPalette = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(RGBQUAD*));</span><br><span class=\"line\">\t*toPalette = <span class=\"built_in\">malloc</span>(<span class=\"number\">256</span> * <span class=\"keyword\">sizeof</span>(RGBQUAD));</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">256</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t((*toPalette) + i)-&gt;r = ((*toPalette) + i)-&gt;b = ((*toPalette) + i)-&gt;g = i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> **toData = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *));</span><br><span class=\"line\">\t*toData = <span class=\"built_in\">malloc</span>(fromPixelNumber);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; fromPixelNumber; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t*(*toData+i)= ((*fromData + i)-&gt;r * <span class=\"number\">299</span> + (*fromData + i)-&gt;g * <span class=\"number\">587</span> + (*fromData + i)-&gt;b * <span class=\"number\">114</span> + <span class=\"number\">500</span>) / <span class=\"number\">1000</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t*(<span class=\"keyword\">unsigned</span> *)toHeader.offset = <span class=\"keyword\">sizeof</span>(toHeader) + <span class=\"keyword\">sizeof</span>(toInfo) + <span class=\"number\">256</span> * <span class=\"keyword\">sizeof</span>(RGBQUAD);</span><br><span class=\"line\">\t*(<span class=\"keyword\">unsigned</span> *)toHeader.size = toHeader.offset + toInfo.sizeImage;</span><br><span class=\"line\"></span><br><span class=\"line\">\tBMPWriter8(to, &amp;toHeader, &amp;toInfo, toPalette, toData);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><div class=\"note primary\"><p><strong>全部代码请查看[GitHub](<a href=\"https://github.com/ScarboroughCoral/DIPModule\">https://github.com/ScarboroughCoral/DIPModule</a></strong></p>\n</div>\n\n\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;BMP.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> <span class=\"meta-keyword\">warning</span>(disable : 4996)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">BMPResolver</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tFILE * fp = fopen(<span class=\"string\">&quot;width.bmp&quot;</span>, <span class=\"string\">&quot;rb&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (fp == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tgetchar();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tBMFILEHEADER header;</span><br><span class=\"line\">\tINFOHEADER info;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tfread(&amp;header, <span class=\"number\">14</span>, <span class=\"number\">1</span>, fp);</span><br><span class=\"line\">\tfread(&amp;info, <span class=\"keyword\">sizeof</span>(INFOHEADER), <span class=\"number\">1</span>, fp);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//RGBQUAD * prgbquad = (RGBQUAD *)malloc(info.colorUsed * sizeof(RGBQUAD));</span></span><br><span class=\"line\">\t<span class=\"comment\">//fread(prgbquad, sizeof(RGBQUAD), info.colorUsed, fp);</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> offset = *(<span class=\"keyword\">int</span> *)(header.offset);</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> realWidth = info.sizeImage / info.height;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> rowPixelNumber = realWidth / <span class=\"keyword\">sizeof</span>(RGBITEM);</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> remanentByteOfRow = realWidth % <span class=\"keyword\">sizeof</span>(RGBITEM);</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> pixelCounts = rowPixelNumber * info.height;</span><br><span class=\"line\">\tfseek(fp, offset, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tRGBITEM *pitem = (RGBITEM *)<span class=\"built_in\">malloc</span>(pixelCounts*<span class=\"keyword\">sizeof</span>(RGBITEM));</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *garbage = (<span class=\"keyword\">char</span> *)<span class=\"built_in\">malloc</span>(remanentByteOfRow);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; info.height; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tRGBITEM * currentAddr = pitem + i * rowPixelNumber;</span><br><span class=\"line\">\t\tfread(currentAddr, <span class=\"keyword\">sizeof</span>(RGBITEM), rowPixelNumber, fp);</span><br><span class=\"line\">\t\tfread(garbage, remanentByteOfRow, <span class=\"number\">1</span>, fp);</span><br><span class=\"line\">\t\t<span class=\"comment\">//fseek(fp, remanentByteOfRow, SEEK_CUR);</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//修改单色</span></span><br><span class=\"line\">\t<span class=\"comment\">//for (size_t i = 0; i &lt; pixelCounts; i++)</span></span><br><span class=\"line\">\t<span class=\"comment\">//&#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\t//printf(&quot;%p-%p\\n&quot;, pitem,pitem+1);</span></span><br><span class=\"line\">\t<span class=\"comment\">//\t//(pitem+i)-&gt;r = 0;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\t(pitem + i)-&gt;g = 0;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\t(pitem + i)-&gt;b = 0;</span></span><br><span class=\"line\">\t<span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//灰度化</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> gray;</span><br><span class=\"line\">\t<span class=\"comment\">/*for (size_t i = 0; i &lt; pixelCounts; i++)</span></span><br><span class=\"line\"><span class=\"comment\">\t&#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tgray = ((pitem + i)-&gt;r * 299 + (pitem + i)-&gt;g * 587 + (pitem + i)-&gt;b * 114 + 500) / 1000;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t(pitem + i)-&gt;r = gray;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t(pitem + i)-&gt;g = gray;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t(pitem + i)-&gt;b = gray;</span></span><br><span class=\"line\"><span class=\"comment\">\t&#125;*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//灰度图反色</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; pixelCounts; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tgray = ((pitem + i)-&gt;r * <span class=\"number\">299</span> + (pitem + i)-&gt;g * <span class=\"number\">587</span> + (pitem + i)-&gt;b * <span class=\"number\">114</span> + <span class=\"number\">500</span>) / <span class=\"number\">1000</span>;</span><br><span class=\"line\">\t\t(pitem + i)-&gt;r = <span class=\"number\">255</span> - gray;</span><br><span class=\"line\">\t\t(pitem + i)-&gt;g = <span class=\"number\">255</span> - gray;</span><br><span class=\"line\">\t\t(pitem + i)-&gt;b = <span class=\"number\">255</span> - gray;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> * result = <span class=\"string\">&quot;result.bmp&quot;</span>;</span><br><span class=\"line\">\tFILE * rp = fopen(result, <span class=\"string\">&quot;wb&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (rp == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfwrite(&amp;header, <span class=\"number\">14</span>, <span class=\"number\">1</span>, rp);</span><br><span class=\"line\">\tfwrite(&amp;info, <span class=\"keyword\">sizeof</span>(INFOHEADER), <span class=\"number\">1</span>, rp);</span><br><span class=\"line\">\tfseek(rp, offset, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//fwrite(prgbquad, sizeof(RGBQUAD), info.colorUsed, rp);</span></span><br><span class=\"line\">\t<span class=\"comment\">//fwrite(pitem, sizeof(RGBITEM), info.sizeImage / 3, rp)</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; info.height; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tfwrite(pitem+i*rowPixelNumber, <span class=\"keyword\">sizeof</span>(RGBITEM), rowPixelNumber, rp);</span><br><span class=\"line\">\t\tfwrite(garbage, remanentByteOfRow, <span class=\"number\">1</span>, rp);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Output singleColor.bmp  successfully!\\n&quot;</span>);</span><br><span class=\"line\">\tfclose(fp);</span><br><span class=\"line\">\tfclose(rp);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2>","site":{"data":{}},"excerpt":"<div class=\"note default\"><p>所见所观，皆为虚幻。</p>\n</div>","more":"<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><a href=\"bitmap-resolver.html\">BMP文件处理（C语言实现）</a>这篇文章中说到了两个不足之处：</p>\n<ul>\n<li>文件头的字节对齐问题</li>\n<li>BMP文件的特殊宽度处理问题</li>\n</ul>\n<p>对于字节对齐，可以查看<a href=\"byte-alignment.html\">计算机的字节对齐</a>这篇文章。本篇文章主要写对BMP文件的特殊宽度处理。</p>\n<h2 id=\"文件头的字节对齐问题\"><a href=\"#文件头的字节对齐问题\" class=\"headerlink\" title=\"文件头的字节对齐问题\"></a>文件头的字节对齐问题</h2><p>上次文章中写到的BMP文件头的结构体是下文中代码块这样的，结合字节对齐规则，<strong>“K大小的基本数据类型的地址必须是K的倍数”，“对于结构体，结构体的地址是结构体内最大元素字节大小的整数倍，结构体的大小是结构体内最大元素字节大小的整数倍”。</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">bitmapFileHeader</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> type[<span class=\"number\">2</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> size;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> resvered1[<span class=\"number\">2</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> reserved2[<span class=\"number\">2</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> offset;</span><br><span class=\"line\">&#125; BMFILEHEADER;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>但是，实际要求BMP文件头大小必须是14，而针对以上结构体进行<code>sizeof()</code>运算得到的数值是<strong>16</strong>。结果显然是错误的，错误原因如下所示：</p>\n<ol>\n<li>结构体大小必须是结构体内最大元素字节大小的整数倍（最大的是unsigned，4字节）（<em>所以肯定不是</em>14）。</li>\n<li>结构体的地址是结构体内最大元素字节大小的整数倍，在此假设一个结构体首地址是0</li>\n</ol>\n<p>下图便是划分图：</p>\n<p><img data-src=\"bitmap-resolver-rectify/1552183022513.png\" alt=\"1552183022513\"></p>\n<p>对于char数组而言，并无特殊字节对齐要求，但是对于unsigned类型，需要首地址为4的倍数。因此在type字段后面的两个字节需要填充。</p>\n<p>这样，结构体的大小为最大元素大小4的倍数，结构体的地址是最大元素字节的整数倍。所以结果总大小为16。</p>\n<p>那么应该怎么写呢？需要14个字节的大小的BMP文件头。为了简单起见，我是这么写的：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">bitmapFileHeader</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> type[<span class=\"number\">2</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> size[<span class=\"number\">4</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> resvered1[<span class=\"number\">2</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> reserved2[<span class=\"number\">2</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> offset[<span class=\"number\">4</span>];</span><br><span class=\"line\">&#125; BMFILEHEADER;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>因为都是元素都是char类型的，所以不需要刻意的字节对齐。但是虽然简单了，数据访问是个问题。比如想访问offset这个应该为int类型的字段应该如何访问？在此感谢<a href=\"https://github.com/Blameying\">XBlame</a>的指导。写法是这样的：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*(<span class=\"keyword\">int</span> *)offset;</span><br></pre></td></tr></table></figure>\n\n<p>首先将<code>char*</code>类型转换为<code>int*</code>，然后通过<code>*</code>来索引，得到的就是一个int值。</p>\n<p>相对应的，你想获取size字段，就需要使用：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*(<span class=\"keyword\">int</span> *)size;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"BMP文件的特殊宽度处理\"><a href=\"#BMP文件的特殊宽度处理\" class=\"headerlink\" title=\"BMP文件的特殊宽度处理\"></a>BMP文件的特殊宽度处理</h2><p><a href=\"bitmap-resolver.html\">BMP文件处理（C语言实现）</a>这篇文章中说到BMP的宽度字节数规定必须为4的倍数，文章中的代码读取BMP宽度字节数为非4倍数并且不为3的倍数时（是3倍但不是4倍时，不会造成像素偏移），会造成像素偏移问题，效果如下：</p>\n<blockquote>\n<p>大图没有保留，只剩小的测试图了，不过效果就是有线条（RGB像素字节错位所致）</p>\n</blockquote>\n<p><img data-src=\"bitmap-resolver-rectify/n4xout.png\"></p>\n<p>根据测试，BMP的宽度字节数不是4的倍数时，也有特别情况，这种情况下我的程序也能处理。为什么呢？</p>\n<p>BMP的宽度字节规定必须为4的倍数，在宽度字节数不为4的倍数时，就需要补齐。这说明补齐字节数有可能是0、1、2、3这几个数中的一个（0的时候宽度字节数是4的倍数）。如果需要补齐的字节数为3，这就是特殊情况，每行补齐三个字节数，顺序读取并没有导致RGB的字节错位。相反的，如果补齐字节数为1或者2，这样每一行都会多于1个或者2个字节，顺序读取就会造成RGB字节错位，而且是周期性的（补齐字节为1或2，则3行显示一行正确像素），所以显示图片能够看出原来的样子，但是有线条。如果字节全部错乱就完全不像原图了。</p>\n<p>那么解决方法是什么？</p>\n<blockquote>\n<p>遇到补齐的字节跳过。</p>\n</blockquote>\n<p>那么问题来了，如何知道每行补齐的字节数和实际？</p>\n<p>获取信息头里面的sizeImage字段（指的是图像实际用到的字节数，包含补齐），用它除以高度得到的是每行的字节数realWidth（包含补齐字节）。用realWidth整除每个像素所含字节数3，得到实际像素数；realWidth对3取余，得到补齐字节数。</p>\n<p>在读取的时候每行只需要跳过最终的补齐字节，输出时输出补齐字节即可。</p>\n<p>代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">unsigned</span> offset = *(<span class=\"keyword\">int</span> *)(header.offset);</span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> realWidth = info.sizeImage / info.height;</span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> rowPixelNumber = realWidth / <span class=\"keyword\">sizeof</span>(RGBITEM);</span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> remanentByteOfRow = realWidth % <span class=\"keyword\">sizeof</span>(RGBITEM);</span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> pixelCounts = rowPixelNumber * info.height;</span><br><span class=\"line\">fseek(fp, offset, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">RGBITEM *pitem = (RGBITEM *)<span class=\"built_in\">malloc</span>(pixelCounts*<span class=\"keyword\">sizeof</span>(RGBITEM));</span><br><span class=\"line\"><span class=\"comment\">//char *garbage = (char *)malloc(remanentByteOfRow);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; info.height; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    RGBITEM * currentAddr = pitem + i * rowPixelNumber;</span><br><span class=\"line\">    fread(currentAddr, <span class=\"keyword\">sizeof</span>(RGBITEM), rowPixelNumber, fp);</span><br><span class=\"line\">    <span class=\"comment\">//fread(garbage, remanentByteOfRow, 1, fp);</span></span><br><span class=\"line\">    fseek(fp, remanentByteOfRow, SEEK_CUR);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"转为8位灰度图\"><a href=\"#转为8位灰度图\" class=\"headerlink\" title=\"转为8位灰度图\"></a>转为8位灰度图</h2><p>在上篇文章中展示的灰度图是用24位真彩色位图模拟的，就是将RGB三个字节都设为通过RGB求得的一个灰度值，这样无疑就每3个字节浪费2个字节，结果是输出的位图8位灰度图大小比24模拟灰度图会小$\\frac{2}{3}$。</p>\n<p>那么将24位真彩色（RGB）位图转换为8位灰度图需要修改那些属性呢？</p>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><ol>\n<li>图像数据$RGB24位真彩色\\to8位灰度$</li>\n<li>调色板数据添加，每个单位1个字节</li>\n<li>文件头<ol>\n<li>文件大小</li>\n<li>偏移量</li>\n</ol>\n</li>\n<li>信息头<ol start=\"2\">\n<li>颜色位数</li>\n<li>图像实际所用字节数</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">BMP24To8Gray</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * from, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * to)</span> </span>&#123;</span><br><span class=\"line\">\tBMFILEHEADER fromHeader;</span><br><span class=\"line\">\tINFOHEADER fromInfo;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tRGBITEM ** fromData = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(RGBITEM*));</span><br><span class=\"line\">\tRGBQUAD ** fromPalette = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(RGBQUAD*));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> fromPixelNumber = BMPReader(from, &amp;fromHeader, &amp;fromInfo, fromPalette, fromData);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tBMFILEHEADER toHeader = fromHeader;</span><br><span class=\"line\">\tINFOHEADER toInfo = fromInfo;</span><br><span class=\"line\">\t<span class=\"comment\">// set info</span></span><br><span class=\"line\">\ttoInfo.colorCount = <span class=\"number\">8</span>;</span><br><span class=\"line\">\ttoInfo.infoHeaderSize = <span class=\"number\">40</span>;</span><br><span class=\"line\">\ttoInfo.planes = <span class=\"number\">1</span>;</span><br><span class=\"line\">\ttoInfo.sizeImage = (toInfo.width+<span class=\"number\">3</span>)/<span class=\"number\">4</span>*<span class=\"number\">4</span>*toInfo.height;</span><br><span class=\"line\">\ttoInfo.colorUsed = <span class=\"number\">256</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tRGBQUAD ** toPalette = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(RGBQUAD*));</span><br><span class=\"line\">\t*toPalette = <span class=\"built_in\">malloc</span>(<span class=\"number\">256</span> * <span class=\"keyword\">sizeof</span>(RGBQUAD));</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">256</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t((*toPalette) + i)-&gt;r = ((*toPalette) + i)-&gt;b = ((*toPalette) + i)-&gt;g = i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> **toData = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *));</span><br><span class=\"line\">\t*toData = <span class=\"built_in\">malloc</span>(fromPixelNumber);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; fromPixelNumber; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t*(*toData+i)= ((*fromData + i)-&gt;r * <span class=\"number\">299</span> + (*fromData + i)-&gt;g * <span class=\"number\">587</span> + (*fromData + i)-&gt;b * <span class=\"number\">114</span> + <span class=\"number\">500</span>) / <span class=\"number\">1000</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t*(<span class=\"keyword\">unsigned</span> *)toHeader.offset = <span class=\"keyword\">sizeof</span>(toHeader) + <span class=\"keyword\">sizeof</span>(toInfo) + <span class=\"number\">256</span> * <span class=\"keyword\">sizeof</span>(RGBQUAD);</span><br><span class=\"line\">\t*(<span class=\"keyword\">unsigned</span> *)toHeader.size = toHeader.offset + toInfo.sizeImage;</span><br><span class=\"line\"></span><br><span class=\"line\">\tBMPWriter8(to, &amp;toHeader, &amp;toInfo, toPalette, toData);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><div class=\"note primary\"><p><strong>全部代码请查看[GitHub](<a href=\"https://github.com/ScarboroughCoral/DIPModule\">https://github.com/ScarboroughCoral/DIPModule</a></strong></p>\n</div>\n\n\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;BMP.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> <span class=\"meta-keyword\">warning</span>(disable : 4996)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">BMPResolver</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tFILE * fp = fopen(<span class=\"string\">&quot;width.bmp&quot;</span>, <span class=\"string\">&quot;rb&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (fp == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tgetchar();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tBMFILEHEADER header;</span><br><span class=\"line\">\tINFOHEADER info;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tfread(&amp;header, <span class=\"number\">14</span>, <span class=\"number\">1</span>, fp);</span><br><span class=\"line\">\tfread(&amp;info, <span class=\"keyword\">sizeof</span>(INFOHEADER), <span class=\"number\">1</span>, fp);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//RGBQUAD * prgbquad = (RGBQUAD *)malloc(info.colorUsed * sizeof(RGBQUAD));</span></span><br><span class=\"line\">\t<span class=\"comment\">//fread(prgbquad, sizeof(RGBQUAD), info.colorUsed, fp);</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> offset = *(<span class=\"keyword\">int</span> *)(header.offset);</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> realWidth = info.sizeImage / info.height;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> rowPixelNumber = realWidth / <span class=\"keyword\">sizeof</span>(RGBITEM);</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> remanentByteOfRow = realWidth % <span class=\"keyword\">sizeof</span>(RGBITEM);</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> pixelCounts = rowPixelNumber * info.height;</span><br><span class=\"line\">\tfseek(fp, offset, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tRGBITEM *pitem = (RGBITEM *)<span class=\"built_in\">malloc</span>(pixelCounts*<span class=\"keyword\">sizeof</span>(RGBITEM));</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *garbage = (<span class=\"keyword\">char</span> *)<span class=\"built_in\">malloc</span>(remanentByteOfRow);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; info.height; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tRGBITEM * currentAddr = pitem + i * rowPixelNumber;</span><br><span class=\"line\">\t\tfread(currentAddr, <span class=\"keyword\">sizeof</span>(RGBITEM), rowPixelNumber, fp);</span><br><span class=\"line\">\t\tfread(garbage, remanentByteOfRow, <span class=\"number\">1</span>, fp);</span><br><span class=\"line\">\t\t<span class=\"comment\">//fseek(fp, remanentByteOfRow, SEEK_CUR);</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//修改单色</span></span><br><span class=\"line\">\t<span class=\"comment\">//for (size_t i = 0; i &lt; pixelCounts; i++)</span></span><br><span class=\"line\">\t<span class=\"comment\">//&#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\t//printf(&quot;%p-%p\\n&quot;, pitem,pitem+1);</span></span><br><span class=\"line\">\t<span class=\"comment\">//\t//(pitem+i)-&gt;r = 0;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\t(pitem + i)-&gt;g = 0;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\t(pitem + i)-&gt;b = 0;</span></span><br><span class=\"line\">\t<span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//灰度化</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> gray;</span><br><span class=\"line\">\t<span class=\"comment\">/*for (size_t i = 0; i &lt; pixelCounts; i++)</span></span><br><span class=\"line\"><span class=\"comment\">\t&#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tgray = ((pitem + i)-&gt;r * 299 + (pitem + i)-&gt;g * 587 + (pitem + i)-&gt;b * 114 + 500) / 1000;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t(pitem + i)-&gt;r = gray;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t(pitem + i)-&gt;g = gray;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t(pitem + i)-&gt;b = gray;</span></span><br><span class=\"line\"><span class=\"comment\">\t&#125;*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//灰度图反色</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; pixelCounts; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tgray = ((pitem + i)-&gt;r * <span class=\"number\">299</span> + (pitem + i)-&gt;g * <span class=\"number\">587</span> + (pitem + i)-&gt;b * <span class=\"number\">114</span> + <span class=\"number\">500</span>) / <span class=\"number\">1000</span>;</span><br><span class=\"line\">\t\t(pitem + i)-&gt;r = <span class=\"number\">255</span> - gray;</span><br><span class=\"line\">\t\t(pitem + i)-&gt;g = <span class=\"number\">255</span> - gray;</span><br><span class=\"line\">\t\t(pitem + i)-&gt;b = <span class=\"number\">255</span> - gray;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> * result = <span class=\"string\">&quot;result.bmp&quot;</span>;</span><br><span class=\"line\">\tFILE * rp = fopen(result, <span class=\"string\">&quot;wb&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (rp == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfwrite(&amp;header, <span class=\"number\">14</span>, <span class=\"number\">1</span>, rp);</span><br><span class=\"line\">\tfwrite(&amp;info, <span class=\"keyword\">sizeof</span>(INFOHEADER), <span class=\"number\">1</span>, rp);</span><br><span class=\"line\">\tfseek(rp, offset, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//fwrite(prgbquad, sizeof(RGBQUAD), info.colorUsed, rp);</span></span><br><span class=\"line\">\t<span class=\"comment\">//fwrite(pitem, sizeof(RGBITEM), info.sizeImage / 3, rp)</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; info.height; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tfwrite(pitem+i*rowPixelNumber, <span class=\"keyword\">sizeof</span>(RGBITEM), rowPixelNumber, rp);</span><br><span class=\"line\">\t\tfwrite(garbage, remanentByteOfRow, <span class=\"number\">1</span>, rp);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Output singleColor.bmp  successfully!\\n&quot;</span>);</span><br><span class=\"line\">\tfclose(fp);</span><br><span class=\"line\">\tfclose(rp);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2>"},{"title":"BMP文件处理（C语言实现）","mathjax":true,"copyright":true,"comment":true,"date":"2019-03-06T10:19:56.000Z","_content":"\n{% note default %}\n模拟信号到数字信号是一个神奇的过程。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n\n\n## 前言\n\n本系列文章（DIP，Digital Image Processing），用于记录总结数字图像处理课程的实验内容。目录请参考[DIP系列文章](/tags/DIP/)\n\n\n## 题目要求\n\n1. 24位图像对R,G,B三个分量进行分离，产生3幅新的图像\n2. 24位彩色图像灰度化\n3. 对8位灰度图进行反色\n\n\n\n## 原图（测试图像）\n\n找了一个便于观察的图像：\n\n![](bitmap-resolver/origin.png)\n\n\n\n\n## 思路与步骤\n\n整体思路如下：\n\n1. 读取图像文件属性与图形数据内容\n2. 图像文件属性与图形数据处理\n   1. 对R,G,B三个分量进行分离，需要将无关分量置0\n   2. 灰度化需要利用RGB转灰度公式进行转换\n   3. 对灰度图进行255求补运算\n3. 将处理后的数据输出到目标图像文件\n\n\n## BMP图像文件格式\n\nBMP图像文件由四部分构成：\n1. 位图文件头\n2. 位图信息头\n3. 调色板\n4. 实际位图数据\n\n以下是各部分的详细属性：\n\n### 位图文件头\n\n|     属性含义（按读取顺序描述）     | 所占空间大小（单位字节，byte） |\n| :--------------------------------: | :----------------------------: |\n|        文件类型，必须是“BM”        |               2                |\n|     文件大小，包含文件头的大小     |               4                |\n|               保留字               |               2                |\n|               保留字               |               2                |\n| 从文件头到实际位图数据的偏移字节数 |               4                |\n\n\n\n### 位图信息头\n\n|                  属性含义（按读取顺序描述）                  | 所占空间大小（单位字节，byte） |\n| :----------------------------------------------------------: | :----------------------------: |\n|                      该结构的长度，为40                      |               4                |\n|                           图像宽度                           |               4                |\n|                           图像高度                           |               4                |\n|                      位平面数，必须为1                       |               2                |\n|       颜色位数：1为二值，4为16色，8为256色，24为真彩色       |               2                |\n| 是否压缩：指定位图是否压缩，有效的值为BI_RGB，BI_RLE8，BI_RLE4，BI_BITFIELDS(都是一些Windows定义好的常量)。要说明的是，Windows位图可以采用RLE4，和RLE8的压缩格式，但用的不多。我们今后所讨论的只有第一种不压缩的情况，即biCompression为BI_RGB的情况。 |               4                |\n| 实际位图数据占用的字节数：【实际位图数据占用的字节数】=【图像宽度】’ × 【图像高度】。上述公式中的【图像宽度】’必须是4的整倍数(所以不是【图像宽度】，而是【图像宽度】’，表示大于或等于【图像宽度】的，最接近4的整倍数。举个例子，如果【图像宽度】=240，则【图像宽度】’=240；如果【图像宽度】=241，【图像宽度】’=244)。 |               4                |\n|                      目标设备水平分辨率                      |               4                |\n|                      目标设备垂直分辨率                      |               4                |\n| 实际使用的颜色数：如果该值为零，则用到的颜色数为2的【颜色位数】次方种。 |               4                |\n|                      图像中重要的颜色数                      |               4                |\n\n\n\n### 调色板\n\n可选项，只在需要调色板的情况下出现。\n\n调色板实际上是一个数组， 共有【实际使用的颜色数】个元素。数组中每个元素的类型是一个如下的结构，每个占4个字节，其定义如下：\n\n| 属性含义（按读取顺序描述） | 所占空间大小（单位字节，byte） |\n| :------------------------: | :----------------------------: |\n|      该颜色的蓝色分量      |               1                |\n|      该颜色的绿色分量      |               1                |\n|      该颜色的红色分量      |               1                |\n|           保留值           |               1                |\n\n\n\n### 实际位图数据\n\n共有位图信息头中所示属性中的【实际位图数据占用的字节数】个字节，每3个字节构成一组RGB真彩色像素，所以共有$【实际位图数据占用的字节数/3】$个字节。\n\n\n\n## 详细实现思路\n\n### RGB分离\n\n- 实现\n\n只需要将每个RGB像素中的不同分量置0即可，如下代码就是得到分离R分量的方法，最终输出图片只有红色分量：\n\n```c\nfor (size_t i = 0; i < itemCounts; i++)//itemCounts：像素总数\n{\n\t(pitem + i)->g = 0;//pitem：某个像素\n\t(pitem + i)->b = 0;\n}\n```\n\n- 结果\n\n![](bitmap-resolver/rdivision.png)\n\n\n\n### RGB转灰色图\n\n- 实现\n\n采用如下公式转换：\n$$\nGray = R\\times0.299 + G\\times0.587 + B\\times0.114\n$$\n如下代码实现：\n\n```c\nfor (size_t i = 0; i < itemCounts; i++)\n{\n\tgray = ((pitem + i)->r * 299 + (pitem + i)->g * 587 + (pitem + i)->b * 114 + 500) / 1000;\n\t(pitem + i)->r = gray;\n\t(pitem + i)->g = gray;\n\t(pitem + i)->b = gray;\n}\n```\n\n\n\n- 结果\n\n![](bitmap-resolver/grey.png)\n\n\n\n### 灰度图反色\n\n- 实现\n\n将灰度对255求补即可，如下代码：\n\n```c\nfor (size_t i = 0; i < itemCounts; i++)\n{\n\tgray = ((pitem + i)->r * 299 + (pitem + i)->g * 587 + (pitem + i)->b * 114 + 500) / 1000;\n\t(pitem + i)->r = 255-gray;\n\t(pitem + i)->g = 255-gray;\n\t(pitem + i)->b = 255-gray;\n}\n```\n\n- 结果\n\n![](bitmap-resolver/degrey.png)\n\n## 代码\n\n\n\n{% note primary%}\n\n**全部代码请查看[GitHub](https://github.com/ScarboroughCoral/DIPModule**\n\n{% endnote %}\n\n\n\n{% note warning %}\n\n### 纠正\n\n本程序是不完全版本，或者说是错误版本。有以下两点不足：\n\n- 未对图像宽度非4倍数进行特殊处理。\n- 本文只对灰度图只做了24位模拟，没有转化为8位灰度图。\n- 文件头的字节对齐问题，相关文章[计算机的字节对齐](byte-alignment.html)\n\n修正版本请查看[BMP文件的特殊宽度处理及字节对齐问题](bitmap-resolver-rectify.html)\n\n{% endnote %}\n\n所有代码如下：\n\n{% note info %}\n\n### Main.c\n\n{% endnote %}\n\n```c\n//Main.c\n\n#include <stdio.h>\n#include <stdlib.h>\n#include \"BMP.h\"\n//#include <Windows.h>\n#pragma warning(disable : 4996)\n\n\n\nint main(){\n\n\tFILE * fp = fopen(\"test.bmp\",\"rb\");\n\tif (fp==NULL)\n\t{\n\t\tgetchar();\n\t\treturn;\n\t}\n\tBMFILEHEADER header;\n\tINFOHEADER info;\n\tfread(&header, sizeof(header),1,fp);\n\tfread(&info, sizeof(info), 1, fp);\n\tRGBQUAD * prgbquad = (RGBQUAD *)malloc(info.colorUsed*sizeof(RGBQUAD));\n\tfread(prgbquad, sizeof(RGBQUAD), info.colorUsed, fp);\n\t//fseek(fp, header.offset, 0);\n\tRGBITEM *pitem = (RGBITEM *)malloc(info.sizeImage);\n\t\n\tunsigned itemCounts = info.sizeImage / (unsigned)3;\n\tfread(pitem, sizeof(RGBITEM), itemCounts, fp);\n\n\n\t//修改单色\n\t//for (size_t i = 0; i < itemCounts; i++)\n\t//{\n\t//\t//printf(\"%d\\n\", pitem->r);\n\t//\t(pitem+i)->r = 0;\n\t//\t//(pitem+i)->g = 0;\n\t//\t(pitem + i)->b = 0;\n\t//}\n\n\t//灰度化\n\tint gray;\n\tfor (size_t i = 0; i < itemCounts; i++)\n\t{\n\t\tgray = ((pitem + i)->r * 299 + (pitem + i)->g * 587 + (pitem + i)->b * 114 + 500) / 1000;\n\t\t(pitem + i)->r = gray;\n\t\t(pitem + i)->g = gray;\n\t\t(pitem + i)->b = gray;\n\t}\n\t\n\t//灰度图反色\n\t/*for (size_t i = 0; i < itemCounts; i++)\n\t{\n\t\tgray = ((pitem + i)->r * 299 + (pitem + i)->g * 587 + (pitem + i)->b * 114 + 500) / 1000;\n\t\t(pitem + i)->r = 255-gray;\n\t\t(pitem + i)->g = 255-gray;\n\t\t(pitem + i)->b = 255-gray;\n\t}*/\n\n\tchar * result = \"singleColor.bmp\";\n\tFILE * rp = fopen(result, \"wb\");\n\tif (rp==NULL)\n\t{\n\t\treturn;\n\t}\n\tfwrite(&header, sizeof(header), 1, rp);\n\tfwrite(&info, sizeof(info), 1, rp);\n\t//fseek(rp, header.offset, 0);\n\tfwrite(prgbquad, sizeof(RGBQUAD), info.colorUsed, rp);\n\tfwrite(pitem, sizeof(RGBITEM), info.sizeImage / 3, rp);\n\tprintf(\"Output singleColor.bmp  successfully!\\n\");\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n\n\n{% note info %}\n\n### BMP.h\n\n{% endnote %}\n\n```c\n//BMP.h\n\n#pragma once\n\n\ntypedef struct bitmapFileHeader {\n\tunsigned char type[2];\n\tunsigned size;\n\tunsigned char resvered1[2];\n\tunsigned char reserved2[2];\n\tunsigned offset;\n} BMFILEHEADER;\n\ntypedef struct rgb {\n\tunsigned char r;\n\tunsigned char b;\n\tunsigned char g;\n}RGBITEM;\n\n\ntypedef struct bitMapInfoHeader {\n\tunsigned infoHeaderSize;\n\tunsigned long width;\n\tunsigned long height;\n\tunsigned short planes;\n\tunsigned short colorCount;\n\tunsigned isCompressed;\n\tunsigned sizeImage;\n\tunsigned long xPelsPerMeter;\n\tunsigned long yPelsPerMeter;\n\tunsigned colorUsed;\n\tunsigned colorImportant;\n}INFOHEADER;\n\ntypedef struct RGBQUAD {\n\tunsigned char b;\n\tunsigned char g;\n\tunsigned char r;\n\tunsigned char reserved;\n\n}RGBQUAD ;\n```\n\n\n\n## 总结\n\n代码简单，关键在于知识点的掌握。请继续关注[DIP，数字图像处理系列文章](/tags/DIP/)！","source":"_posts/bitmap-resolver.md","raw":"---\ntitle: BMP文件处理（C语言实现）\nmathjax: true\ncopyright: true\ncomment: true\ndate: 2019-03-06 18:19:56\ntags:\n- Computer Graphics\n- DIP\ncategories: \n- Computer Science\n- Computer Graphics\n\n---\n\n{% note default %}\n模拟信号到数字信号是一个神奇的过程。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n\n\n## 前言\n\n本系列文章（DIP，Digital Image Processing），用于记录总结数字图像处理课程的实验内容。目录请参考[DIP系列文章](/tags/DIP/)\n\n\n## 题目要求\n\n1. 24位图像对R,G,B三个分量进行分离，产生3幅新的图像\n2. 24位彩色图像灰度化\n3. 对8位灰度图进行反色\n\n\n\n## 原图（测试图像）\n\n找了一个便于观察的图像：\n\n![](bitmap-resolver/origin.png)\n\n\n\n\n## 思路与步骤\n\n整体思路如下：\n\n1. 读取图像文件属性与图形数据内容\n2. 图像文件属性与图形数据处理\n   1. 对R,G,B三个分量进行分离，需要将无关分量置0\n   2. 灰度化需要利用RGB转灰度公式进行转换\n   3. 对灰度图进行255求补运算\n3. 将处理后的数据输出到目标图像文件\n\n\n## BMP图像文件格式\n\nBMP图像文件由四部分构成：\n1. 位图文件头\n2. 位图信息头\n3. 调色板\n4. 实际位图数据\n\n以下是各部分的详细属性：\n\n### 位图文件头\n\n|     属性含义（按读取顺序描述）     | 所占空间大小（单位字节，byte） |\n| :--------------------------------: | :----------------------------: |\n|        文件类型，必须是“BM”        |               2                |\n|     文件大小，包含文件头的大小     |               4                |\n|               保留字               |               2                |\n|               保留字               |               2                |\n| 从文件头到实际位图数据的偏移字节数 |               4                |\n\n\n\n### 位图信息头\n\n|                  属性含义（按读取顺序描述）                  | 所占空间大小（单位字节，byte） |\n| :----------------------------------------------------------: | :----------------------------: |\n|                      该结构的长度，为40                      |               4                |\n|                           图像宽度                           |               4                |\n|                           图像高度                           |               4                |\n|                      位平面数，必须为1                       |               2                |\n|       颜色位数：1为二值，4为16色，8为256色，24为真彩色       |               2                |\n| 是否压缩：指定位图是否压缩，有效的值为BI_RGB，BI_RLE8，BI_RLE4，BI_BITFIELDS(都是一些Windows定义好的常量)。要说明的是，Windows位图可以采用RLE4，和RLE8的压缩格式，但用的不多。我们今后所讨论的只有第一种不压缩的情况，即biCompression为BI_RGB的情况。 |               4                |\n| 实际位图数据占用的字节数：【实际位图数据占用的字节数】=【图像宽度】’ × 【图像高度】。上述公式中的【图像宽度】’必须是4的整倍数(所以不是【图像宽度】，而是【图像宽度】’，表示大于或等于【图像宽度】的，最接近4的整倍数。举个例子，如果【图像宽度】=240，则【图像宽度】’=240；如果【图像宽度】=241，【图像宽度】’=244)。 |               4                |\n|                      目标设备水平分辨率                      |               4                |\n|                      目标设备垂直分辨率                      |               4                |\n| 实际使用的颜色数：如果该值为零，则用到的颜色数为2的【颜色位数】次方种。 |               4                |\n|                      图像中重要的颜色数                      |               4                |\n\n\n\n### 调色板\n\n可选项，只在需要调色板的情况下出现。\n\n调色板实际上是一个数组， 共有【实际使用的颜色数】个元素。数组中每个元素的类型是一个如下的结构，每个占4个字节，其定义如下：\n\n| 属性含义（按读取顺序描述） | 所占空间大小（单位字节，byte） |\n| :------------------------: | :----------------------------: |\n|      该颜色的蓝色分量      |               1                |\n|      该颜色的绿色分量      |               1                |\n|      该颜色的红色分量      |               1                |\n|           保留值           |               1                |\n\n\n\n### 实际位图数据\n\n共有位图信息头中所示属性中的【实际位图数据占用的字节数】个字节，每3个字节构成一组RGB真彩色像素，所以共有$【实际位图数据占用的字节数/3】$个字节。\n\n\n\n## 详细实现思路\n\n### RGB分离\n\n- 实现\n\n只需要将每个RGB像素中的不同分量置0即可，如下代码就是得到分离R分量的方法，最终输出图片只有红色分量：\n\n```c\nfor (size_t i = 0; i < itemCounts; i++)//itemCounts：像素总数\n{\n\t(pitem + i)->g = 0;//pitem：某个像素\n\t(pitem + i)->b = 0;\n}\n```\n\n- 结果\n\n![](bitmap-resolver/rdivision.png)\n\n\n\n### RGB转灰色图\n\n- 实现\n\n采用如下公式转换：\n$$\nGray = R\\times0.299 + G\\times0.587 + B\\times0.114\n$$\n如下代码实现：\n\n```c\nfor (size_t i = 0; i < itemCounts; i++)\n{\n\tgray = ((pitem + i)->r * 299 + (pitem + i)->g * 587 + (pitem + i)->b * 114 + 500) / 1000;\n\t(pitem + i)->r = gray;\n\t(pitem + i)->g = gray;\n\t(pitem + i)->b = gray;\n}\n```\n\n\n\n- 结果\n\n![](bitmap-resolver/grey.png)\n\n\n\n### 灰度图反色\n\n- 实现\n\n将灰度对255求补即可，如下代码：\n\n```c\nfor (size_t i = 0; i < itemCounts; i++)\n{\n\tgray = ((pitem + i)->r * 299 + (pitem + i)->g * 587 + (pitem + i)->b * 114 + 500) / 1000;\n\t(pitem + i)->r = 255-gray;\n\t(pitem + i)->g = 255-gray;\n\t(pitem + i)->b = 255-gray;\n}\n```\n\n- 结果\n\n![](bitmap-resolver/degrey.png)\n\n## 代码\n\n\n\n{% note primary%}\n\n**全部代码请查看[GitHub](https://github.com/ScarboroughCoral/DIPModule**\n\n{% endnote %}\n\n\n\n{% note warning %}\n\n### 纠正\n\n本程序是不完全版本，或者说是错误版本。有以下两点不足：\n\n- 未对图像宽度非4倍数进行特殊处理。\n- 本文只对灰度图只做了24位模拟，没有转化为8位灰度图。\n- 文件头的字节对齐问题，相关文章[计算机的字节对齐](byte-alignment.html)\n\n修正版本请查看[BMP文件的特殊宽度处理及字节对齐问题](bitmap-resolver-rectify.html)\n\n{% endnote %}\n\n所有代码如下：\n\n{% note info %}\n\n### Main.c\n\n{% endnote %}\n\n```c\n//Main.c\n\n#include <stdio.h>\n#include <stdlib.h>\n#include \"BMP.h\"\n//#include <Windows.h>\n#pragma warning(disable : 4996)\n\n\n\nint main(){\n\n\tFILE * fp = fopen(\"test.bmp\",\"rb\");\n\tif (fp==NULL)\n\t{\n\t\tgetchar();\n\t\treturn;\n\t}\n\tBMFILEHEADER header;\n\tINFOHEADER info;\n\tfread(&header, sizeof(header),1,fp);\n\tfread(&info, sizeof(info), 1, fp);\n\tRGBQUAD * prgbquad = (RGBQUAD *)malloc(info.colorUsed*sizeof(RGBQUAD));\n\tfread(prgbquad, sizeof(RGBQUAD), info.colorUsed, fp);\n\t//fseek(fp, header.offset, 0);\n\tRGBITEM *pitem = (RGBITEM *)malloc(info.sizeImage);\n\t\n\tunsigned itemCounts = info.sizeImage / (unsigned)3;\n\tfread(pitem, sizeof(RGBITEM), itemCounts, fp);\n\n\n\t//修改单色\n\t//for (size_t i = 0; i < itemCounts; i++)\n\t//{\n\t//\t//printf(\"%d\\n\", pitem->r);\n\t//\t(pitem+i)->r = 0;\n\t//\t//(pitem+i)->g = 0;\n\t//\t(pitem + i)->b = 0;\n\t//}\n\n\t//灰度化\n\tint gray;\n\tfor (size_t i = 0; i < itemCounts; i++)\n\t{\n\t\tgray = ((pitem + i)->r * 299 + (pitem + i)->g * 587 + (pitem + i)->b * 114 + 500) / 1000;\n\t\t(pitem + i)->r = gray;\n\t\t(pitem + i)->g = gray;\n\t\t(pitem + i)->b = gray;\n\t}\n\t\n\t//灰度图反色\n\t/*for (size_t i = 0; i < itemCounts; i++)\n\t{\n\t\tgray = ((pitem + i)->r * 299 + (pitem + i)->g * 587 + (pitem + i)->b * 114 + 500) / 1000;\n\t\t(pitem + i)->r = 255-gray;\n\t\t(pitem + i)->g = 255-gray;\n\t\t(pitem + i)->b = 255-gray;\n\t}*/\n\n\tchar * result = \"singleColor.bmp\";\n\tFILE * rp = fopen(result, \"wb\");\n\tif (rp==NULL)\n\t{\n\t\treturn;\n\t}\n\tfwrite(&header, sizeof(header), 1, rp);\n\tfwrite(&info, sizeof(info), 1, rp);\n\t//fseek(rp, header.offset, 0);\n\tfwrite(prgbquad, sizeof(RGBQUAD), info.colorUsed, rp);\n\tfwrite(pitem, sizeof(RGBITEM), info.sizeImage / 3, rp);\n\tprintf(\"Output singleColor.bmp  successfully!\\n\");\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n\n\n{% note info %}\n\n### BMP.h\n\n{% endnote %}\n\n```c\n//BMP.h\n\n#pragma once\n\n\ntypedef struct bitmapFileHeader {\n\tunsigned char type[2];\n\tunsigned size;\n\tunsigned char resvered1[2];\n\tunsigned char reserved2[2];\n\tunsigned offset;\n} BMFILEHEADER;\n\ntypedef struct rgb {\n\tunsigned char r;\n\tunsigned char b;\n\tunsigned char g;\n}RGBITEM;\n\n\ntypedef struct bitMapInfoHeader {\n\tunsigned infoHeaderSize;\n\tunsigned long width;\n\tunsigned long height;\n\tunsigned short planes;\n\tunsigned short colorCount;\n\tunsigned isCompressed;\n\tunsigned sizeImage;\n\tunsigned long xPelsPerMeter;\n\tunsigned long yPelsPerMeter;\n\tunsigned colorUsed;\n\tunsigned colorImportant;\n}INFOHEADER;\n\ntypedef struct RGBQUAD {\n\tunsigned char b;\n\tunsigned char g;\n\tunsigned char r;\n\tunsigned char reserved;\n\n}RGBQUAD ;\n```\n\n\n\n## 总结\n\n代码简单，关键在于知识点的掌握。请继续关注[DIP，数字图像处理系列文章](/tags/DIP/)！","slug":"bitmap-resolver","published":1,"updated":"2022-01-06T04:09:12.130Z","_id":"cksq5v7m00008n0pu2zp12533","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note default\"><p>模拟信号到数字信号是一个神奇的过程。</p>\n</div>\n\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本系列文章（DIP，Digital Image Processing），用于记录总结数字图像处理课程的实验内容。目录请参考<a href=\"/tags/DIP/\">DIP系列文章</a></p>\n<h2 id=\"题目要求\"><a href=\"#题目要求\" class=\"headerlink\" title=\"题目要求\"></a>题目要求</h2><ol>\n<li>24位图像对R,G,B三个分量进行分离，产生3幅新的图像</li>\n<li>24位彩色图像灰度化</li>\n<li>对8位灰度图进行反色</li>\n</ol>\n<h2 id=\"原图（测试图像）\"><a href=\"#原图（测试图像）\" class=\"headerlink\" title=\"原图（测试图像）\"></a>原图（测试图像）</h2><p>找了一个便于观察的图像：</p>\n<p><img data-src=\"bitmap-resolver/origin.png\"></p>\n<h2 id=\"思路与步骤\"><a href=\"#思路与步骤\" class=\"headerlink\" title=\"思路与步骤\"></a>思路与步骤</h2><p>整体思路如下：</p>\n<ol>\n<li>读取图像文件属性与图形数据内容</li>\n<li>图像文件属性与图形数据处理<ol>\n<li>对R,G,B三个分量进行分离，需要将无关分量置0</li>\n<li>灰度化需要利用RGB转灰度公式进行转换</li>\n<li>对灰度图进行255求补运算</li>\n</ol>\n</li>\n<li>将处理后的数据输出到目标图像文件</li>\n</ol>\n<h2 id=\"BMP图像文件格式\"><a href=\"#BMP图像文件格式\" class=\"headerlink\" title=\"BMP图像文件格式\"></a>BMP图像文件格式</h2><p>BMP图像文件由四部分构成：</p>\n<ol>\n<li>位图文件头</li>\n<li>位图信息头</li>\n<li>调色板</li>\n<li>实际位图数据</li>\n</ol>\n<p>以下是各部分的详细属性：</p>\n<h3 id=\"位图文件头\"><a href=\"#位图文件头\" class=\"headerlink\" title=\"位图文件头\"></a>位图文件头</h3><table>\n<thead>\n<tr>\n<th align=\"center\">属性含义（按读取顺序描述）</th>\n<th align=\"center\">所占空间大小（单位字节，byte）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">文件类型，必须是“BM”</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td align=\"center\">文件大小，包含文件头的大小</td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td align=\"center\">保留字</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td align=\"center\">保留字</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td align=\"center\">从文件头到实际位图数据的偏移字节数</td>\n<td align=\"center\">4</td>\n</tr>\n</tbody></table>\n<h3 id=\"位图信息头\"><a href=\"#位图信息头\" class=\"headerlink\" title=\"位图信息头\"></a>位图信息头</h3><table>\n<thead>\n<tr>\n<th align=\"center\">属性含义（按读取顺序描述）</th>\n<th align=\"center\">所占空间大小（单位字节，byte）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">该结构的长度，为40</td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td align=\"center\">图像宽度</td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td align=\"center\">图像高度</td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td align=\"center\">位平面数，必须为1</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td align=\"center\">颜色位数：1为二值，4为16色，8为256色，24为真彩色</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td align=\"center\">是否压缩：指定位图是否压缩，有效的值为BI_RGB，BI_RLE8，BI_RLE4，BI_BITFIELDS(都是一些Windows定义好的常量)。要说明的是，Windows位图可以采用RLE4，和RLE8的压缩格式，但用的不多。我们今后所讨论的只有第一种不压缩的情况，即biCompression为BI_RGB的情况。</td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td align=\"center\">实际位图数据占用的字节数：【实际位图数据占用的字节数】=【图像宽度】’ × 【图像高度】。上述公式中的【图像宽度】’必须是4的整倍数(所以不是【图像宽度】，而是【图像宽度】’，表示大于或等于【图像宽度】的，最接近4的整倍数。举个例子，如果【图像宽度】=240，则【图像宽度】’=240；如果【图像宽度】=241，【图像宽度】’=244)。</td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td align=\"center\">目标设备水平分辨率</td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td align=\"center\">目标设备垂直分辨率</td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td align=\"center\">实际使用的颜色数：如果该值为零，则用到的颜色数为2的【颜色位数】次方种。</td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td align=\"center\">图像中重要的颜色数</td>\n<td align=\"center\">4</td>\n</tr>\n</tbody></table>\n<h3 id=\"调色板\"><a href=\"#调色板\" class=\"headerlink\" title=\"调色板\"></a>调色板</h3><p>可选项，只在需要调色板的情况下出现。</p>\n<p>调色板实际上是一个数组， 共有【实际使用的颜色数】个元素。数组中每个元素的类型是一个如下的结构，每个占4个字节，其定义如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">属性含义（按读取顺序描述）</th>\n<th align=\"center\">所占空间大小（单位字节，byte）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">该颜色的蓝色分量</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">该颜色的绿色分量</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">该颜色的红色分量</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">保留值</td>\n<td align=\"center\">1</td>\n</tr>\n</tbody></table>\n<h3 id=\"实际位图数据\"><a href=\"#实际位图数据\" class=\"headerlink\" title=\"实际位图数据\"></a>实际位图数据</h3><p>共有位图信息头中所示属性中的【实际位图数据占用的字节数】个字节，每3个字节构成一组RGB真彩色像素，所以共有$【实际位图数据占用的字节数/3】$个字节。</p>\n<h2 id=\"详细实现思路\"><a href=\"#详细实现思路\" class=\"headerlink\" title=\"详细实现思路\"></a>详细实现思路</h2><h3 id=\"RGB分离\"><a href=\"#RGB分离\" class=\"headerlink\" title=\"RGB分离\"></a>RGB分离</h3><ul>\n<li>实现</li>\n</ul>\n<p>只需要将每个RGB像素中的不同分量置0即可，如下代码就是得到分离R分量的方法，最终输出图片只有红色分量：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; itemCounts; i++)<span class=\"comment\">//itemCounts：像素总数</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t(pitem + i)-&gt;g = <span class=\"number\">0</span>;<span class=\"comment\">//pitem：某个像素</span></span><br><span class=\"line\">\t(pitem + i)-&gt;b = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>结果</li>\n</ul>\n<p><img data-src=\"bitmap-resolver/rdivision.png\"></p>\n<h3 id=\"RGB转灰色图\"><a href=\"#RGB转灰色图\" class=\"headerlink\" title=\"RGB转灰色图\"></a>RGB转灰色图</h3><ul>\n<li>实现</li>\n</ul>\n<p>采用如下公式转换：<br>$$<br>Gray = R\\times0.299 + G\\times0.587 + B\\times0.114<br>$$<br>如下代码实现：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; itemCounts; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tgray = ((pitem + i)-&gt;r * <span class=\"number\">299</span> + (pitem + i)-&gt;g * <span class=\"number\">587</span> + (pitem + i)-&gt;b * <span class=\"number\">114</span> + <span class=\"number\">500</span>) / <span class=\"number\">1000</span>;</span><br><span class=\"line\">\t(pitem + i)-&gt;r = gray;</span><br><span class=\"line\">\t(pitem + i)-&gt;g = gray;</span><br><span class=\"line\">\t(pitem + i)-&gt;b = gray;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>结果</li>\n</ul>\n<p><img data-src=\"bitmap-resolver/grey.png\"></p>\n<h3 id=\"灰度图反色\"><a href=\"#灰度图反色\" class=\"headerlink\" title=\"灰度图反色\"></a>灰度图反色</h3><ul>\n<li>实现</li>\n</ul>\n<p>将灰度对255求补即可，如下代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; itemCounts; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tgray = ((pitem + i)-&gt;r * <span class=\"number\">299</span> + (pitem + i)-&gt;g * <span class=\"number\">587</span> + (pitem + i)-&gt;b * <span class=\"number\">114</span> + <span class=\"number\">500</span>) / <span class=\"number\">1000</span>;</span><br><span class=\"line\">\t(pitem + i)-&gt;r = <span class=\"number\">255</span>-gray;</span><br><span class=\"line\">\t(pitem + i)-&gt;g = <span class=\"number\">255</span>-gray;</span><br><span class=\"line\">\t(pitem + i)-&gt;b = <span class=\"number\">255</span>-gray;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>结果</li>\n</ul>\n<p><img data-src=\"bitmap-resolver/degrey.png\"></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><div class=\"note primary\"><p><strong>全部代码请查看[GitHub](<a href=\"https://github.com/ScarboroughCoral/DIPModule\">https://github.com/ScarboroughCoral/DIPModule</a></strong></p>\n</div>\n\n\n\n<div class=\"note warning\"><h3 id=\"纠正\"><a href=\"#纠正\" class=\"headerlink\" title=\"纠正\"></a>纠正</h3><p>本程序是不完全版本，或者说是错误版本。有以下两点不足：</p>\n<ul>\n<li>未对图像宽度非4倍数进行特殊处理。</li>\n<li>本文只对灰度图只做了24位模拟，没有转化为8位灰度图。</li>\n<li>文件头的字节对齐问题，相关文章<a href=\"byte-alignment.html\">计算机的字节对齐</a></li>\n</ul>\n<p>修正版本请查看<a href=\"bitmap-resolver-rectify.html\">BMP文件的特殊宽度处理及字节对齐问题</a></p>\n</div>\n\n<p>所有代码如下：</p>\n<div class=\"note info\"><h3 id=\"Main-c\"><a href=\"#Main-c\" class=\"headerlink\" title=\"Main.c\"></a>Main.c</h3></div>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Main.c</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;BMP.h&quot;</span></span></span><br><span class=\"line\"><span class=\"comment\">//#include &lt;Windows.h&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> <span class=\"meta-keyword\">warning</span>(disable : 4996)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tFILE * fp = fopen(<span class=\"string\">&quot;test.bmp&quot;</span>,<span class=\"string\">&quot;rb&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (fp==<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tgetchar();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tBMFILEHEADER header;</span><br><span class=\"line\">\tINFOHEADER info;</span><br><span class=\"line\">\tfread(&amp;header, <span class=\"keyword\">sizeof</span>(header),<span class=\"number\">1</span>,fp);</span><br><span class=\"line\">\tfread(&amp;info, <span class=\"keyword\">sizeof</span>(info), <span class=\"number\">1</span>, fp);</span><br><span class=\"line\">\tRGBQUAD * prgbquad = (RGBQUAD *)<span class=\"built_in\">malloc</span>(info.colorUsed*<span class=\"keyword\">sizeof</span>(RGBQUAD));</span><br><span class=\"line\">\tfread(prgbquad, <span class=\"keyword\">sizeof</span>(RGBQUAD), info.colorUsed, fp);</span><br><span class=\"line\">\t<span class=\"comment\">//fseek(fp, header.offset, 0);</span></span><br><span class=\"line\">\tRGBITEM *pitem = (RGBITEM *)<span class=\"built_in\">malloc</span>(info.sizeImage);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> itemCounts = info.sizeImage / (<span class=\"keyword\">unsigned</span>)<span class=\"number\">3</span>;</span><br><span class=\"line\">\tfread(pitem, <span class=\"keyword\">sizeof</span>(RGBITEM), itemCounts, fp);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//修改单色</span></span><br><span class=\"line\">\t<span class=\"comment\">//for (size_t i = 0; i &lt; itemCounts; i++)</span></span><br><span class=\"line\">\t<span class=\"comment\">//&#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\t//printf(&quot;%d\\n&quot;, pitem-&gt;r);</span></span><br><span class=\"line\">\t<span class=\"comment\">//\t(pitem+i)-&gt;r = 0;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\t//(pitem+i)-&gt;g = 0;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\t(pitem + i)-&gt;b = 0;</span></span><br><span class=\"line\">\t<span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//灰度化</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> gray;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; itemCounts; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tgray = ((pitem + i)-&gt;r * <span class=\"number\">299</span> + (pitem + i)-&gt;g * <span class=\"number\">587</span> + (pitem + i)-&gt;b * <span class=\"number\">114</span> + <span class=\"number\">500</span>) / <span class=\"number\">1000</span>;</span><br><span class=\"line\">\t\t(pitem + i)-&gt;r = gray;</span><br><span class=\"line\">\t\t(pitem + i)-&gt;g = gray;</span><br><span class=\"line\">\t\t(pitem + i)-&gt;b = gray;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//灰度图反色</span></span><br><span class=\"line\">\t<span class=\"comment\">/*for (size_t i = 0; i &lt; itemCounts; i++)</span></span><br><span class=\"line\"><span class=\"comment\">\t&#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tgray = ((pitem + i)-&gt;r * 299 + (pitem + i)-&gt;g * 587 + (pitem + i)-&gt;b * 114 + 500) / 1000;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t(pitem + i)-&gt;r = 255-gray;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t(pitem + i)-&gt;g = 255-gray;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t(pitem + i)-&gt;b = 255-gray;</span></span><br><span class=\"line\"><span class=\"comment\">\t&#125;*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> * result = <span class=\"string\">&quot;singleColor.bmp&quot;</span>;</span><br><span class=\"line\">\tFILE * rp = fopen(result, <span class=\"string\">&quot;wb&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (rp==<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfwrite(&amp;header, <span class=\"keyword\">sizeof</span>(header), <span class=\"number\">1</span>, rp);</span><br><span class=\"line\">\tfwrite(&amp;info, <span class=\"keyword\">sizeof</span>(info), <span class=\"number\">1</span>, rp);</span><br><span class=\"line\">\t<span class=\"comment\">//fseek(rp, header.offset, 0);</span></span><br><span class=\"line\">\tfwrite(prgbquad, <span class=\"keyword\">sizeof</span>(RGBQUAD), info.colorUsed, rp);</span><br><span class=\"line\">\tfwrite(pitem, <span class=\"keyword\">sizeof</span>(RGBITEM), info.sizeImage / <span class=\"number\">3</span>, rp);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Output singleColor.bmp  successfully!\\n&quot;</span>);</span><br><span class=\"line\">\tsystem(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<div class=\"note info\"><h3 id=\"BMP-h\"><a href=\"#BMP-h\" class=\"headerlink\" title=\"BMP.h\"></a>BMP.h</h3></div>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//BMP.h</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> once</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">bitmapFileHeader</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> type[<span class=\"number\">2</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> size;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> resvered1[<span class=\"number\">2</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> reserved2[<span class=\"number\">2</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> offset;</span><br><span class=\"line\">&#125; BMFILEHEADER;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">rgb</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> r;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> b;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> g;</span><br><span class=\"line\">&#125;RGBITEM;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">bitMapInfoHeader</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> infoHeaderSize;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> width;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> height;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span> planes;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span> colorCount;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> isCompressed;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> sizeImage;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> xPelsPerMeter;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> yPelsPerMeter;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> colorUsed;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> colorImportant;</span><br><span class=\"line\">&#125;INFOHEADER;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">RGBQUAD</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> b;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> g;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> r;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> reserved;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;RGBQUAD ;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>代码简单，关键在于知识点的掌握。请继续关注<a href=\"/tags/DIP/\">DIP，数字图像处理系列文章</a>！</p>\n","site":{"data":{}},"excerpt":"<div class=\"note default\"><p>模拟信号到数字信号是一个神奇的过程。</p>\n</div>","more":"<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本系列文章（DIP，Digital Image Processing），用于记录总结数字图像处理课程的实验内容。目录请参考<a href=\"/tags/DIP/\">DIP系列文章</a></p>\n<h2 id=\"题目要求\"><a href=\"#题目要求\" class=\"headerlink\" title=\"题目要求\"></a>题目要求</h2><ol>\n<li>24位图像对R,G,B三个分量进行分离，产生3幅新的图像</li>\n<li>24位彩色图像灰度化</li>\n<li>对8位灰度图进行反色</li>\n</ol>\n<h2 id=\"原图（测试图像）\"><a href=\"#原图（测试图像）\" class=\"headerlink\" title=\"原图（测试图像）\"></a>原图（测试图像）</h2><p>找了一个便于观察的图像：</p>\n<p><img data-src=\"bitmap-resolver/origin.png\"></p>\n<h2 id=\"思路与步骤\"><a href=\"#思路与步骤\" class=\"headerlink\" title=\"思路与步骤\"></a>思路与步骤</h2><p>整体思路如下：</p>\n<ol>\n<li>读取图像文件属性与图形数据内容</li>\n<li>图像文件属性与图形数据处理<ol>\n<li>对R,G,B三个分量进行分离，需要将无关分量置0</li>\n<li>灰度化需要利用RGB转灰度公式进行转换</li>\n<li>对灰度图进行255求补运算</li>\n</ol>\n</li>\n<li>将处理后的数据输出到目标图像文件</li>\n</ol>\n<h2 id=\"BMP图像文件格式\"><a href=\"#BMP图像文件格式\" class=\"headerlink\" title=\"BMP图像文件格式\"></a>BMP图像文件格式</h2><p>BMP图像文件由四部分构成：</p>\n<ol>\n<li>位图文件头</li>\n<li>位图信息头</li>\n<li>调色板</li>\n<li>实际位图数据</li>\n</ol>\n<p>以下是各部分的详细属性：</p>\n<h3 id=\"位图文件头\"><a href=\"#位图文件头\" class=\"headerlink\" title=\"位图文件头\"></a>位图文件头</h3><table>\n<thead>\n<tr>\n<th align=\"center\">属性含义（按读取顺序描述）</th>\n<th align=\"center\">所占空间大小（单位字节，byte）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">文件类型，必须是“BM”</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td align=\"center\">文件大小，包含文件头的大小</td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td align=\"center\">保留字</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td align=\"center\">保留字</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td align=\"center\">从文件头到实际位图数据的偏移字节数</td>\n<td align=\"center\">4</td>\n</tr>\n</tbody></table>\n<h3 id=\"位图信息头\"><a href=\"#位图信息头\" class=\"headerlink\" title=\"位图信息头\"></a>位图信息头</h3><table>\n<thead>\n<tr>\n<th align=\"center\">属性含义（按读取顺序描述）</th>\n<th align=\"center\">所占空间大小（单位字节，byte）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">该结构的长度，为40</td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td align=\"center\">图像宽度</td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td align=\"center\">图像高度</td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td align=\"center\">位平面数，必须为1</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td align=\"center\">颜色位数：1为二值，4为16色，8为256色，24为真彩色</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td align=\"center\">是否压缩：指定位图是否压缩，有效的值为BI_RGB，BI_RLE8，BI_RLE4，BI_BITFIELDS(都是一些Windows定义好的常量)。要说明的是，Windows位图可以采用RLE4，和RLE8的压缩格式，但用的不多。我们今后所讨论的只有第一种不压缩的情况，即biCompression为BI_RGB的情况。</td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td align=\"center\">实际位图数据占用的字节数：【实际位图数据占用的字节数】=【图像宽度】’ × 【图像高度】。上述公式中的【图像宽度】’必须是4的整倍数(所以不是【图像宽度】，而是【图像宽度】’，表示大于或等于【图像宽度】的，最接近4的整倍数。举个例子，如果【图像宽度】=240，则【图像宽度】’=240；如果【图像宽度】=241，【图像宽度】’=244)。</td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td align=\"center\">目标设备水平分辨率</td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td align=\"center\">目标设备垂直分辨率</td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td align=\"center\">实际使用的颜色数：如果该值为零，则用到的颜色数为2的【颜色位数】次方种。</td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td align=\"center\">图像中重要的颜色数</td>\n<td align=\"center\">4</td>\n</tr>\n</tbody></table>\n<h3 id=\"调色板\"><a href=\"#调色板\" class=\"headerlink\" title=\"调色板\"></a>调色板</h3><p>可选项，只在需要调色板的情况下出现。</p>\n<p>调色板实际上是一个数组， 共有【实际使用的颜色数】个元素。数组中每个元素的类型是一个如下的结构，每个占4个字节，其定义如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">属性含义（按读取顺序描述）</th>\n<th align=\"center\">所占空间大小（单位字节，byte）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">该颜色的蓝色分量</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">该颜色的绿色分量</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">该颜色的红色分量</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">保留值</td>\n<td align=\"center\">1</td>\n</tr>\n</tbody></table>\n<h3 id=\"实际位图数据\"><a href=\"#实际位图数据\" class=\"headerlink\" title=\"实际位图数据\"></a>实际位图数据</h3><p>共有位图信息头中所示属性中的【实际位图数据占用的字节数】个字节，每3个字节构成一组RGB真彩色像素，所以共有$【实际位图数据占用的字节数/3】$个字节。</p>\n<h2 id=\"详细实现思路\"><a href=\"#详细实现思路\" class=\"headerlink\" title=\"详细实现思路\"></a>详细实现思路</h2><h3 id=\"RGB分离\"><a href=\"#RGB分离\" class=\"headerlink\" title=\"RGB分离\"></a>RGB分离</h3><ul>\n<li>实现</li>\n</ul>\n<p>只需要将每个RGB像素中的不同分量置0即可，如下代码就是得到分离R分量的方法，最终输出图片只有红色分量：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; itemCounts; i++)<span class=\"comment\">//itemCounts：像素总数</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t(pitem + i)-&gt;g = <span class=\"number\">0</span>;<span class=\"comment\">//pitem：某个像素</span></span><br><span class=\"line\">\t(pitem + i)-&gt;b = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>结果</li>\n</ul>\n<p><img data-src=\"bitmap-resolver/rdivision.png\"></p>\n<h3 id=\"RGB转灰色图\"><a href=\"#RGB转灰色图\" class=\"headerlink\" title=\"RGB转灰色图\"></a>RGB转灰色图</h3><ul>\n<li>实现</li>\n</ul>\n<p>采用如下公式转换：<br>$$<br>Gray = R\\times0.299 + G\\times0.587 + B\\times0.114<br>$$<br>如下代码实现：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; itemCounts; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tgray = ((pitem + i)-&gt;r * <span class=\"number\">299</span> + (pitem + i)-&gt;g * <span class=\"number\">587</span> + (pitem + i)-&gt;b * <span class=\"number\">114</span> + <span class=\"number\">500</span>) / <span class=\"number\">1000</span>;</span><br><span class=\"line\">\t(pitem + i)-&gt;r = gray;</span><br><span class=\"line\">\t(pitem + i)-&gt;g = gray;</span><br><span class=\"line\">\t(pitem + i)-&gt;b = gray;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>结果</li>\n</ul>\n<p><img data-src=\"bitmap-resolver/grey.png\"></p>\n<h3 id=\"灰度图反色\"><a href=\"#灰度图反色\" class=\"headerlink\" title=\"灰度图反色\"></a>灰度图反色</h3><ul>\n<li>实现</li>\n</ul>\n<p>将灰度对255求补即可，如下代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; itemCounts; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tgray = ((pitem + i)-&gt;r * <span class=\"number\">299</span> + (pitem + i)-&gt;g * <span class=\"number\">587</span> + (pitem + i)-&gt;b * <span class=\"number\">114</span> + <span class=\"number\">500</span>) / <span class=\"number\">1000</span>;</span><br><span class=\"line\">\t(pitem + i)-&gt;r = <span class=\"number\">255</span>-gray;</span><br><span class=\"line\">\t(pitem + i)-&gt;g = <span class=\"number\">255</span>-gray;</span><br><span class=\"line\">\t(pitem + i)-&gt;b = <span class=\"number\">255</span>-gray;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>结果</li>\n</ul>\n<p><img data-src=\"bitmap-resolver/degrey.png\"></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><div class=\"note primary\"><p><strong>全部代码请查看[GitHub](<a href=\"https://github.com/ScarboroughCoral/DIPModule\">https://github.com/ScarboroughCoral/DIPModule</a></strong></p>\n</div>\n\n\n\n<div class=\"note warning\"><h3 id=\"纠正\"><a href=\"#纠正\" class=\"headerlink\" title=\"纠正\"></a>纠正</h3><p>本程序是不完全版本，或者说是错误版本。有以下两点不足：</p>\n<ul>\n<li>未对图像宽度非4倍数进行特殊处理。</li>\n<li>本文只对灰度图只做了24位模拟，没有转化为8位灰度图。</li>\n<li>文件头的字节对齐问题，相关文章<a href=\"byte-alignment.html\">计算机的字节对齐</a></li>\n</ul>\n<p>修正版本请查看<a href=\"bitmap-resolver-rectify.html\">BMP文件的特殊宽度处理及字节对齐问题</a></p>\n</div>\n\n<p>所有代码如下：</p>\n<div class=\"note info\"><h3 id=\"Main-c\"><a href=\"#Main-c\" class=\"headerlink\" title=\"Main.c\"></a>Main.c</h3></div>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Main.c</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;BMP.h&quot;</span></span></span><br><span class=\"line\"><span class=\"comment\">//#include &lt;Windows.h&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> <span class=\"meta-keyword\">warning</span>(disable : 4996)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tFILE * fp = fopen(<span class=\"string\">&quot;test.bmp&quot;</span>,<span class=\"string\">&quot;rb&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (fp==<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tgetchar();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tBMFILEHEADER header;</span><br><span class=\"line\">\tINFOHEADER info;</span><br><span class=\"line\">\tfread(&amp;header, <span class=\"keyword\">sizeof</span>(header),<span class=\"number\">1</span>,fp);</span><br><span class=\"line\">\tfread(&amp;info, <span class=\"keyword\">sizeof</span>(info), <span class=\"number\">1</span>, fp);</span><br><span class=\"line\">\tRGBQUAD * prgbquad = (RGBQUAD *)<span class=\"built_in\">malloc</span>(info.colorUsed*<span class=\"keyword\">sizeof</span>(RGBQUAD));</span><br><span class=\"line\">\tfread(prgbquad, <span class=\"keyword\">sizeof</span>(RGBQUAD), info.colorUsed, fp);</span><br><span class=\"line\">\t<span class=\"comment\">//fseek(fp, header.offset, 0);</span></span><br><span class=\"line\">\tRGBITEM *pitem = (RGBITEM *)<span class=\"built_in\">malloc</span>(info.sizeImage);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> itemCounts = info.sizeImage / (<span class=\"keyword\">unsigned</span>)<span class=\"number\">3</span>;</span><br><span class=\"line\">\tfread(pitem, <span class=\"keyword\">sizeof</span>(RGBITEM), itemCounts, fp);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//修改单色</span></span><br><span class=\"line\">\t<span class=\"comment\">//for (size_t i = 0; i &lt; itemCounts; i++)</span></span><br><span class=\"line\">\t<span class=\"comment\">//&#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\t//printf(&quot;%d\\n&quot;, pitem-&gt;r);</span></span><br><span class=\"line\">\t<span class=\"comment\">//\t(pitem+i)-&gt;r = 0;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\t//(pitem+i)-&gt;g = 0;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\t(pitem + i)-&gt;b = 0;</span></span><br><span class=\"line\">\t<span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//灰度化</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> gray;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; itemCounts; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tgray = ((pitem + i)-&gt;r * <span class=\"number\">299</span> + (pitem + i)-&gt;g * <span class=\"number\">587</span> + (pitem + i)-&gt;b * <span class=\"number\">114</span> + <span class=\"number\">500</span>) / <span class=\"number\">1000</span>;</span><br><span class=\"line\">\t\t(pitem + i)-&gt;r = gray;</span><br><span class=\"line\">\t\t(pitem + i)-&gt;g = gray;</span><br><span class=\"line\">\t\t(pitem + i)-&gt;b = gray;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//灰度图反色</span></span><br><span class=\"line\">\t<span class=\"comment\">/*for (size_t i = 0; i &lt; itemCounts; i++)</span></span><br><span class=\"line\"><span class=\"comment\">\t&#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tgray = ((pitem + i)-&gt;r * 299 + (pitem + i)-&gt;g * 587 + (pitem + i)-&gt;b * 114 + 500) / 1000;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t(pitem + i)-&gt;r = 255-gray;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t(pitem + i)-&gt;g = 255-gray;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t(pitem + i)-&gt;b = 255-gray;</span></span><br><span class=\"line\"><span class=\"comment\">\t&#125;*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> * result = <span class=\"string\">&quot;singleColor.bmp&quot;</span>;</span><br><span class=\"line\">\tFILE * rp = fopen(result, <span class=\"string\">&quot;wb&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (rp==<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfwrite(&amp;header, <span class=\"keyword\">sizeof</span>(header), <span class=\"number\">1</span>, rp);</span><br><span class=\"line\">\tfwrite(&amp;info, <span class=\"keyword\">sizeof</span>(info), <span class=\"number\">1</span>, rp);</span><br><span class=\"line\">\t<span class=\"comment\">//fseek(rp, header.offset, 0);</span></span><br><span class=\"line\">\tfwrite(prgbquad, <span class=\"keyword\">sizeof</span>(RGBQUAD), info.colorUsed, rp);</span><br><span class=\"line\">\tfwrite(pitem, <span class=\"keyword\">sizeof</span>(RGBITEM), info.sizeImage / <span class=\"number\">3</span>, rp);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Output singleColor.bmp  successfully!\\n&quot;</span>);</span><br><span class=\"line\">\tsystem(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<div class=\"note info\"><h3 id=\"BMP-h\"><a href=\"#BMP-h\" class=\"headerlink\" title=\"BMP.h\"></a>BMP.h</h3></div>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//BMP.h</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> once</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">bitmapFileHeader</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> type[<span class=\"number\">2</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> size;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> resvered1[<span class=\"number\">2</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> reserved2[<span class=\"number\">2</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> offset;</span><br><span class=\"line\">&#125; BMFILEHEADER;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">rgb</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> r;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> b;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> g;</span><br><span class=\"line\">&#125;RGBITEM;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">bitMapInfoHeader</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> infoHeaderSize;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> width;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> height;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span> planes;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span> colorCount;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> isCompressed;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> sizeImage;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> xPelsPerMeter;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> yPelsPerMeter;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> colorUsed;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> colorImportant;</span><br><span class=\"line\">&#125;INFOHEADER;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">RGBQUAD</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> b;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> g;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> r;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> reserved;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;RGBQUAD ;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>代码简单，关键在于知识点的掌握。请继续关注<a href=\"/tags/DIP/\">DIP，数字图像处理系列文章</a>！</p>"},{"title":"边缘检测","mathjax":true,"copyright":true,"comment":true,"date":"2019-05-14T02:28:14.000Z","_content":"\n{% note primary %}\n变化的变化率，用于描述变化的变化速度和方向。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## Forword\n\n很长时间不写博客了，图像处理实验开始整体验收了，这两天爆肝，在做实验的同时认真写博客总结。确实感觉这门课学得不好（实际上感觉大学所有的课都学的不好，逃……），主要是因为数学知识不够牢固，而且一般的数学证明思维也忘得差不多了。\n\n\n本系列文章（DIP，Digital Image Processing），用于记录总结数字图像处理课程的实验内容。目录请参考[DIP系列文章](/tags/DIP/)。\n\n{% note warning no-icon %}\n\n**本次不展示代码，全部代码请查看[GitHub](https://github.com/ScarboroughCoral/DIPModule)**\n\n{% endnote %}\n\n\n\n## 实验内容\n\n这次实验内容是边缘检测，一开始的时候做了一部分了，是针对`prewitt`算子和`sobel`算子的，剩下`log`和`canny`方法还没做，canny选做。\n\n- 使用Prewitt算子实现边缘检测\n- 使用Sobel算子实现边缘检测\n- 使用LOG算子实现边缘检测\n\n## 实验过程\n\n\n\n> 用于检测图像中一些物体边缘的地方。比如无人机、自动驾驶障碍物检测等会使用到。\n\n主要方法有以下几种：\n\n### Prewitt\n\n> 引入了平均因素，对噪声有抑制作用；操作简便。\n\n- 垂直边缘检测算子\n\n\n$$\n     \\begin{bmatrix}\n       -1&0&1\\\\\\\\\n       -1&0&1\\\\\\\\\n       -1&0&1 \n     \\end{bmatrix}\n$$\n\n- 水平边缘检测算子\n\n$$\n       \\begin{bmatrix}\n         -1&-1&-1\\\\\\\\\n         0&0&0\\\\\\\\\n         1&1&1 \n       \\end{bmatrix}\n$$\n\n### Sobel\n\n> 引入了平均因素，增强了最近像素的影像，噪声抑制效果比Prewitt好。\n\n- 垂直边缘检测算子\n\n$$\n        \\begin{bmatrix}\n         -1&0&1\\\\\\\\\n         -2&0&2\\\\\\\\\n         -1&0&1 \n       \\end{bmatrix}\n$$\n\n- 水平边缘检测算子\n\n$$\n        \\begin{bmatrix}\n         -1&-2&-1\\\\\\\\\n         0&0&0\\\\\\\\\n         1&2&1 \n       \\end{bmatrix}\n$$\n\n### LOG\n\n> 该算子首先用高斯函数对图像作平滑滤波处理，然后才使用Laplacian算子检测边缘，因此克服了Laplacian算子抗噪声能力比较差的缺点，但是在抑制噪声的同时也可能将原有的比较尖锐的边缘也平滑掉了，造成这些尖锐边缘无法检被测到。\n\n$$\n\\begin{bmatrix}\n    0&0&-1&0&0\\\\\\\\\n    0&-1&-2&-1&0\\\\\\\\\n    -1&-2&16&-2&-1\\\\\\\\\n    0&-1&-2&-1&0\\\\\\\\\n    0&0&-1&0&0\n\\end{bmatrix}\n$$\n\n## 实验结果\n\n- 原图\n\n![3-3](bmp-edge-dection/3-3.png)\n\n- Prewitt横纵叠加\n\n![3-prewit](bmp-edge-dection/3-prewit.png)\n\n- Sobel纵横叠加\n\n![3-sobel](bmp-edge-dection/3-sobel.png)\n\n- Log算子\n\n![3-log](bmp-edge-dection/3-log.png)","source":"_posts/bmp-edge-dection.md","raw":"---\ntitle: 边缘检测\nmathjax: true\ncopyright: true\ncomment: true\ndate: 2019-05-14 10:28:14\ntags:\n- Computer Graphics\n- DIP\ncategories:\n- Computer Science\n- Computer Graphics\n\n---\n\n{% note primary %}\n变化的变化率，用于描述变化的变化速度和方向。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## Forword\n\n很长时间不写博客了，图像处理实验开始整体验收了，这两天爆肝，在做实验的同时认真写博客总结。确实感觉这门课学得不好（实际上感觉大学所有的课都学的不好，逃……），主要是因为数学知识不够牢固，而且一般的数学证明思维也忘得差不多了。\n\n\n本系列文章（DIP，Digital Image Processing），用于记录总结数字图像处理课程的实验内容。目录请参考[DIP系列文章](/tags/DIP/)。\n\n{% note warning no-icon %}\n\n**本次不展示代码，全部代码请查看[GitHub](https://github.com/ScarboroughCoral/DIPModule)**\n\n{% endnote %}\n\n\n\n## 实验内容\n\n这次实验内容是边缘检测，一开始的时候做了一部分了，是针对`prewitt`算子和`sobel`算子的，剩下`log`和`canny`方法还没做，canny选做。\n\n- 使用Prewitt算子实现边缘检测\n- 使用Sobel算子实现边缘检测\n- 使用LOG算子实现边缘检测\n\n## 实验过程\n\n\n\n> 用于检测图像中一些物体边缘的地方。比如无人机、自动驾驶障碍物检测等会使用到。\n\n主要方法有以下几种：\n\n### Prewitt\n\n> 引入了平均因素，对噪声有抑制作用；操作简便。\n\n- 垂直边缘检测算子\n\n\n$$\n     \\begin{bmatrix}\n       -1&0&1\\\\\\\\\n       -1&0&1\\\\\\\\\n       -1&0&1 \n     \\end{bmatrix}\n$$\n\n- 水平边缘检测算子\n\n$$\n       \\begin{bmatrix}\n         -1&-1&-1\\\\\\\\\n         0&0&0\\\\\\\\\n         1&1&1 \n       \\end{bmatrix}\n$$\n\n### Sobel\n\n> 引入了平均因素，增强了最近像素的影像，噪声抑制效果比Prewitt好。\n\n- 垂直边缘检测算子\n\n$$\n        \\begin{bmatrix}\n         -1&0&1\\\\\\\\\n         -2&0&2\\\\\\\\\n         -1&0&1 \n       \\end{bmatrix}\n$$\n\n- 水平边缘检测算子\n\n$$\n        \\begin{bmatrix}\n         -1&-2&-1\\\\\\\\\n         0&0&0\\\\\\\\\n         1&2&1 \n       \\end{bmatrix}\n$$\n\n### LOG\n\n> 该算子首先用高斯函数对图像作平滑滤波处理，然后才使用Laplacian算子检测边缘，因此克服了Laplacian算子抗噪声能力比较差的缺点，但是在抑制噪声的同时也可能将原有的比较尖锐的边缘也平滑掉了，造成这些尖锐边缘无法检被测到。\n\n$$\n\\begin{bmatrix}\n    0&0&-1&0&0\\\\\\\\\n    0&-1&-2&-1&0\\\\\\\\\n    -1&-2&16&-2&-1\\\\\\\\\n    0&-1&-2&-1&0\\\\\\\\\n    0&0&-1&0&0\n\\end{bmatrix}\n$$\n\n## 实验结果\n\n- 原图\n\n![3-3](bmp-edge-dection/3-3.png)\n\n- Prewitt横纵叠加\n\n![3-prewit](bmp-edge-dection/3-prewit.png)\n\n- Sobel纵横叠加\n\n![3-sobel](bmp-edge-dection/3-sobel.png)\n\n- Log算子\n\n![3-log](bmp-edge-dection/3-log.png)","slug":"bmp-edge-dection","published":1,"updated":"2022-01-06T04:09:12.136Z","_id":"cksq5v7m00009n0pugrvl2u98","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note primary\"><p>变化的变化率，用于描述变化的变化速度和方向。</p>\n</div>\n\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"Forword\"><a href=\"#Forword\" class=\"headerlink\" title=\"Forword\"></a>Forword</h2><p>很长时间不写博客了，图像处理实验开始整体验收了，这两天爆肝，在做实验的同时认真写博客总结。确实感觉这门课学得不好（实际上感觉大学所有的课都学的不好，逃……），主要是因为数学知识不够牢固，而且一般的数学证明思维也忘得差不多了。</p>\n<p>本系列文章（DIP，Digital Image Processing），用于记录总结数字图像处理课程的实验内容。目录请参考<a href=\"/tags/DIP/\">DIP系列文章</a>。</p>\n<div class=\"note warning no-icon\"><p><strong>本次不展示代码，全部代码请查看<a href=\"https://github.com/ScarboroughCoral/DIPModule\">GitHub</a></strong></p>\n</div>\n\n\n\n<h2 id=\"实验内容\"><a href=\"#实验内容\" class=\"headerlink\" title=\"实验内容\"></a>实验内容</h2><p>这次实验内容是边缘检测，一开始的时候做了一部分了，是针对<code>prewitt</code>算子和<code>sobel</code>算子的，剩下<code>log</code>和<code>canny</code>方法还没做，canny选做。</p>\n<ul>\n<li>使用Prewitt算子实现边缘检测</li>\n<li>使用Sobel算子实现边缘检测</li>\n<li>使用LOG算子实现边缘检测</li>\n</ul>\n<h2 id=\"实验过程\"><a href=\"#实验过程\" class=\"headerlink\" title=\"实验过程\"></a>实验过程</h2><blockquote>\n<p>用于检测图像中一些物体边缘的地方。比如无人机、自动驾驶障碍物检测等会使用到。</p>\n</blockquote>\n<p>主要方法有以下几种：</p>\n<h3 id=\"Prewitt\"><a href=\"#Prewitt\" class=\"headerlink\" title=\"Prewitt\"></a>Prewitt</h3><blockquote>\n<p>引入了平均因素，对噪声有抑制作用；操作简便。</p>\n</blockquote>\n<ul>\n<li>垂直边缘检测算子</li>\n</ul>\n<p>$$<br>     \\begin{bmatrix}<br>       -1&amp;0&amp;1\\\\<br>       -1&amp;0&amp;1\\\\<br>       -1&amp;0&amp;1<br>     \\end{bmatrix}<br>$$</p>\n<ul>\n<li>水平边缘检测算子</li>\n</ul>\n<p>$$<br>       \\begin{bmatrix}<br>         -1&amp;-1&amp;-1\\\\<br>         0&amp;0&amp;0\\\\<br>         1&amp;1&amp;1<br>       \\end{bmatrix}<br>$$</p>\n<h3 id=\"Sobel\"><a href=\"#Sobel\" class=\"headerlink\" title=\"Sobel\"></a>Sobel</h3><blockquote>\n<p>引入了平均因素，增强了最近像素的影像，噪声抑制效果比Prewitt好。</p>\n</blockquote>\n<ul>\n<li>垂直边缘检测算子</li>\n</ul>\n<p>$$<br>        \\begin{bmatrix}<br>         -1&amp;0&amp;1\\\\<br>         -2&amp;0&amp;2\\\\<br>         -1&amp;0&amp;1<br>       \\end{bmatrix}<br>$$</p>\n<ul>\n<li>水平边缘检测算子</li>\n</ul>\n<p>$$<br>        \\begin{bmatrix}<br>         -1&amp;-2&amp;-1\\\\<br>         0&amp;0&amp;0\\\\<br>         1&amp;2&amp;1<br>       \\end{bmatrix}<br>$$</p>\n<h3 id=\"LOG\"><a href=\"#LOG\" class=\"headerlink\" title=\"LOG\"></a>LOG</h3><blockquote>\n<p>该算子首先用高斯函数对图像作平滑滤波处理，然后才使用Laplacian算子检测边缘，因此克服了Laplacian算子抗噪声能力比较差的缺点，但是在抑制噪声的同时也可能将原有的比较尖锐的边缘也平滑掉了，造成这些尖锐边缘无法检被测到。</p>\n</blockquote>\n<p>$$<br>\\begin{bmatrix}<br>    0&amp;0&amp;-1&amp;0&amp;0\\\\<br>    0&amp;-1&amp;-2&amp;-1&amp;0\\\\<br>    -1&amp;-2&amp;16&amp;-2&amp;-1\\\\<br>    0&amp;-1&amp;-2&amp;-1&amp;0\\\\<br>    0&amp;0&amp;-1&amp;0&amp;0<br>\\end{bmatrix}<br>$$</p>\n<h2 id=\"实验结果\"><a href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h2><ul>\n<li>原图</li>\n</ul>\n<p><img data-src=\"bmp-edge-dection/3-3.png\" alt=\"3-3\"></p>\n<ul>\n<li>Prewitt横纵叠加</li>\n</ul>\n<p><img data-src=\"bmp-edge-dection/3-prewit.png\" alt=\"3-prewit\"></p>\n<ul>\n<li>Sobel纵横叠加</li>\n</ul>\n<p><img data-src=\"bmp-edge-dection/3-sobel.png\" alt=\"3-sobel\"></p>\n<ul>\n<li>Log算子</li>\n</ul>\n<p><img data-src=\"bmp-edge-dection/3-log.png\" alt=\"3-log\"></p>\n","site":{"data":{}},"excerpt":"<div class=\"note primary\"><p>变化的变化率，用于描述变化的变化速度和方向。</p>\n</div>","more":"<hr>\n<h2 id=\"Forword\"><a href=\"#Forword\" class=\"headerlink\" title=\"Forword\"></a>Forword</h2><p>很长时间不写博客了，图像处理实验开始整体验收了，这两天爆肝，在做实验的同时认真写博客总结。确实感觉这门课学得不好（实际上感觉大学所有的课都学的不好，逃……），主要是因为数学知识不够牢固，而且一般的数学证明思维也忘得差不多了。</p>\n<p>本系列文章（DIP，Digital Image Processing），用于记录总结数字图像处理课程的实验内容。目录请参考<a href=\"/tags/DIP/\">DIP系列文章</a>。</p>\n<div class=\"note warning no-icon\"><p><strong>本次不展示代码，全部代码请查看<a href=\"https://github.com/ScarboroughCoral/DIPModule\">GitHub</a></strong></p>\n</div>\n\n\n\n<h2 id=\"实验内容\"><a href=\"#实验内容\" class=\"headerlink\" title=\"实验内容\"></a>实验内容</h2><p>这次实验内容是边缘检测，一开始的时候做了一部分了，是针对<code>prewitt</code>算子和<code>sobel</code>算子的，剩下<code>log</code>和<code>canny</code>方法还没做，canny选做。</p>\n<ul>\n<li>使用Prewitt算子实现边缘检测</li>\n<li>使用Sobel算子实现边缘检测</li>\n<li>使用LOG算子实现边缘检测</li>\n</ul>\n<h2 id=\"实验过程\"><a href=\"#实验过程\" class=\"headerlink\" title=\"实验过程\"></a>实验过程</h2><blockquote>\n<p>用于检测图像中一些物体边缘的地方。比如无人机、自动驾驶障碍物检测等会使用到。</p>\n</blockquote>\n<p>主要方法有以下几种：</p>\n<h3 id=\"Prewitt\"><a href=\"#Prewitt\" class=\"headerlink\" title=\"Prewitt\"></a>Prewitt</h3><blockquote>\n<p>引入了平均因素，对噪声有抑制作用；操作简便。</p>\n</blockquote>\n<ul>\n<li>垂直边缘检测算子</li>\n</ul>\n<p>$$<br>     \\begin{bmatrix}<br>       -1&amp;0&amp;1\\\\<br>       -1&amp;0&amp;1\\\\<br>       -1&amp;0&amp;1<br>     \\end{bmatrix}<br>$$</p>\n<ul>\n<li>水平边缘检测算子</li>\n</ul>\n<p>$$<br>       \\begin{bmatrix}<br>         -1&amp;-1&amp;-1\\\\<br>         0&amp;0&amp;0\\\\<br>         1&amp;1&amp;1<br>       \\end{bmatrix}<br>$$</p>\n<h3 id=\"Sobel\"><a href=\"#Sobel\" class=\"headerlink\" title=\"Sobel\"></a>Sobel</h3><blockquote>\n<p>引入了平均因素，增强了最近像素的影像，噪声抑制效果比Prewitt好。</p>\n</blockquote>\n<ul>\n<li>垂直边缘检测算子</li>\n</ul>\n<p>$$<br>        \\begin{bmatrix}<br>         -1&amp;0&amp;1\\\\<br>         -2&amp;0&amp;2\\\\<br>         -1&amp;0&amp;1<br>       \\end{bmatrix}<br>$$</p>\n<ul>\n<li>水平边缘检测算子</li>\n</ul>\n<p>$$<br>        \\begin{bmatrix}<br>         -1&amp;-2&amp;-1\\\\<br>         0&amp;0&amp;0\\\\<br>         1&amp;2&amp;1<br>       \\end{bmatrix}<br>$$</p>\n<h3 id=\"LOG\"><a href=\"#LOG\" class=\"headerlink\" title=\"LOG\"></a>LOG</h3><blockquote>\n<p>该算子首先用高斯函数对图像作平滑滤波处理，然后才使用Laplacian算子检测边缘，因此克服了Laplacian算子抗噪声能力比较差的缺点，但是在抑制噪声的同时也可能将原有的比较尖锐的边缘也平滑掉了，造成这些尖锐边缘无法检被测到。</p>\n</blockquote>\n<p>$$<br>\\begin{bmatrix}<br>    0&amp;0&amp;-1&amp;0&amp;0\\\\<br>    0&amp;-1&amp;-2&amp;-1&amp;0\\\\<br>    -1&amp;-2&amp;16&amp;-2&amp;-1\\\\<br>    0&amp;-1&amp;-2&amp;-1&amp;0\\\\<br>    0&amp;0&amp;-1&amp;0&amp;0<br>\\end{bmatrix}<br>$$</p>\n<h2 id=\"实验结果\"><a href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h2><ul>\n<li>原图</li>\n</ul>\n<p><img data-src=\"bmp-edge-dection/3-3.png\" alt=\"3-3\"></p>\n<ul>\n<li>Prewitt横纵叠加</li>\n</ul>\n<p><img data-src=\"bmp-edge-dection/3-prewit.png\" alt=\"3-prewit\"></p>\n<ul>\n<li>Sobel纵横叠加</li>\n</ul>\n<p><img data-src=\"bmp-edge-dection/3-sobel.png\" alt=\"3-sobel\"></p>\n<ul>\n<li>Log算子</li>\n</ul>\n<p><img data-src=\"bmp-edge-dection/3-log.png\" alt=\"3-log\"></p>"},{"title":"计算机的字节对齐","mathjax":true,"copyright":true,"comment":true,"date":"2019-03-08T00:17:24.000Z","_content":"\n{% note default %}\n\n凡事皆有因，刨根问底，追求极致。\n\n{% endnote %}\n\n<!-- more -->\n\n---\n\n\n## 前言\n\n在[BMP文件处理（C语言实现）](bitmap-resolver.html)一文中说到文件头的自定义结构体会引起“字节对齐效应”，进而造成文件读取属性错位，严重造成读取错误。这篇文章主要回顾总结一下字节对齐问题。内容总结自《深入理解计算机系统》。\n\n## 什么是字节对齐\n\n许多计算机系统对基本数据类型的合法地址做了一些限制，要求某种类型对象的地址必须是某个值K（通常是2，4，8）的倍数。\n\n{%note info%}\n***无论是否对齐，x86-64硬件都能正常工作。不过Intel还是建议要对齐数据以提高内存系统的性能。***\n{%endnote%}\n\n## 字节对齐有什么好处\n\n字节对齐有一些隐含的好处：\n\n- 简化形成处理器和内存系统之间的硬件设计。\n- 提高内存系统的效率\n  - 例如一个处理器总是从内存中读取8个字节，那么地址必须为8的倍数。比如说double类型，如果地址为8的倍数只需要读取1次就能获得，否则可能需要执行两次内存访问，因为数据放到了两个8字节内存块中。\n\n\n\n## 字节对齐原则\n\n{%note primary%}\n***任何K字节大小的基本对象的地址必须是K的倍数。，“对于结构体，结构体的地址是结构体内最大元素大小的整数倍，结构体的大小是结构体内最大元素字节大小的整数倍”。***\n{%endnote%}\n\n### 一些基础数据类型的对齐方式\n\n一些常见的基本类型根据字节对齐原则获得的对齐地址方式如下：\n\n|  K   |       类型        |\n| :--: | :---------------: |\n|  1   |       char        |\n|  2   |       short       |\n|  4   |     int,float     |\n|  8   | long,double,char* |\n\n> 注意：这些类型都是在x86-64位某些特定机下的64位模式运行时对齐方式。\n\n\n\n确保每种数据类型都是按照指定方式来组织和分配，即每种类型的对象都满足它的对齐限制，就可保证实施对齐。\n\n\n\n比如我的电脑是x86-64位机，但是针对VS有x86和x64两种模式。这有不同的结果：\n\n\n\n1. **x86**\n\n   ![](byte-alignment/x86-size.png)\n\n2. **x64**\n\n![](byte-alignment/x64-size.png)\n\n\n\n{%note danger%}\n于是类型所占字节大小不同，所以K值不同。不管类型大小为多少个字节，只要根据字节对齐原则就可以了。\n{%endnote%}\n\n\n\n## 一些例子\n\n\n\n### 汇编命令\n\n编译器在汇编代码中放入命令，指明全局数据所需的对齐。\n\n```assembly\n.align 8\n```\n\n> 该命令保证了它后面的变量的起始地址是8的倍数。\n\n\n\n### 结构体的字节对齐\n\n1. eg-1\n\n编译器会对包含结构体的代码内部需要的字段插入间隙，以满足对其要求。\n\n```c\nstruct S1 {\n    int i;\n    char c;\n    int j;\n};\n```\n\nint和char的大小分别是4个字节、1个字节。假设编译器用最小的9字节分配，画出来是这样的：\n\n![1552037289894](byte-alignment/1552037289894.png)\n\n> 这样int变量i和j是无法同时满足对齐原则的。\n\n\n\n取而代之，编译器在字段c和j之间插入一个3字节的间隙（蓝色部分）。\n\n![1552037549973](byte-alignment/1552037549973.png)\n\n{%note danger%}\n此外，编译器必须保证任何 `Struct S1 *` 类型的指针p都满足4字节对齐。这样保证了首元素（变量i）是4字节对齐，而且内部变量也都是4字节对齐了。\n{%endnote%}\n\n\n\n2. eg-2\n\n对于结构体数组，编译器可能会在结构体末尾进行填充来满足其对齐要求。\n\n\n```c\nstruct S2{\n    int i;\n    int j;\n    char c;\n};\n```\n\n如果用最小的9字节分配，很明显只要保证结构体初始地址是4字节倍数就可满足对齐要求。\n\n但是针对结构数组，有连续的元素，9字节分配就无法保证字节对齐要求了，如下声明：\n\n```c\nstruct S2 d[4];\n```\n\n\n\n这就需要编译器对结构体末尾进行填充。当然最后3个字节是浪费的空间。如下图：\n\n![1552038354295](byte-alignment/1552038354295.png)\n\n\n\n## 强制对齐\n\n如果数据没有对齐，某些型号的Intel和AMD处理器对于有些实现多媒体操作的SSE指令，就无法正确执行。\n\n{%note primary%}\n任何针对x68-64处理器的编译器和运行时系统都必须保证分配用来保存可能会被SSE寄存器读或写的数据结构的内存，都必须满足16字节对齐。\n{%endnote%}\n\n这个要求的后果：\n\n1. 任何内存分配函数（alloca、malloc、calloc或realloc）生成的块的起始地址都必须是16的倍数。\n2. 大多数函数栈帧的边界都必须是16的倍数。\n\n\n不过较近版本的x86-64处理器实现了AVX多媒体指令。除了提供SSE指令的超集，支持AVX的指令并没有强制性的对齐要求。\n\n## 如何避免字节对齐引发的问题\n\n另谈！待续……\n\n## 总结\n\n面向位级的理解是很有必要的，比如这次BMP文件的读写，读写文件头自定义数据结构而没有用Windows.h里的宏定义，这引发的问题就是对字节对齐这个概念还不够敏感。所以基础不牢，地动山摇；原理不解，实践何解？","source":"_posts/byte-alignment.md","raw":"---\ntitle: 计算机的字节对齐\nmathjax: true\ncopyright: true\ncomment: true\ndate: 2019-03-08 08:17:24\ntags:\n- Computer Science\n- CSAPP\ncategories:\n- Computer Science\n\n---\n\n{% note default %}\n\n凡事皆有因，刨根问底，追求极致。\n\n{% endnote %}\n\n<!-- more -->\n\n---\n\n\n## 前言\n\n在[BMP文件处理（C语言实现）](bitmap-resolver.html)一文中说到文件头的自定义结构体会引起“字节对齐效应”，进而造成文件读取属性错位，严重造成读取错误。这篇文章主要回顾总结一下字节对齐问题。内容总结自《深入理解计算机系统》。\n\n## 什么是字节对齐\n\n许多计算机系统对基本数据类型的合法地址做了一些限制，要求某种类型对象的地址必须是某个值K（通常是2，4，8）的倍数。\n\n{%note info%}\n***无论是否对齐，x86-64硬件都能正常工作。不过Intel还是建议要对齐数据以提高内存系统的性能。***\n{%endnote%}\n\n## 字节对齐有什么好处\n\n字节对齐有一些隐含的好处：\n\n- 简化形成处理器和内存系统之间的硬件设计。\n- 提高内存系统的效率\n  - 例如一个处理器总是从内存中读取8个字节，那么地址必须为8的倍数。比如说double类型，如果地址为8的倍数只需要读取1次就能获得，否则可能需要执行两次内存访问，因为数据放到了两个8字节内存块中。\n\n\n\n## 字节对齐原则\n\n{%note primary%}\n***任何K字节大小的基本对象的地址必须是K的倍数。，“对于结构体，结构体的地址是结构体内最大元素大小的整数倍，结构体的大小是结构体内最大元素字节大小的整数倍”。***\n{%endnote%}\n\n### 一些基础数据类型的对齐方式\n\n一些常见的基本类型根据字节对齐原则获得的对齐地址方式如下：\n\n|  K   |       类型        |\n| :--: | :---------------: |\n|  1   |       char        |\n|  2   |       short       |\n|  4   |     int,float     |\n|  8   | long,double,char* |\n\n> 注意：这些类型都是在x86-64位某些特定机下的64位模式运行时对齐方式。\n\n\n\n确保每种数据类型都是按照指定方式来组织和分配，即每种类型的对象都满足它的对齐限制，就可保证实施对齐。\n\n\n\n比如我的电脑是x86-64位机，但是针对VS有x86和x64两种模式。这有不同的结果：\n\n\n\n1. **x86**\n\n   ![](byte-alignment/x86-size.png)\n\n2. **x64**\n\n![](byte-alignment/x64-size.png)\n\n\n\n{%note danger%}\n于是类型所占字节大小不同，所以K值不同。不管类型大小为多少个字节，只要根据字节对齐原则就可以了。\n{%endnote%}\n\n\n\n## 一些例子\n\n\n\n### 汇编命令\n\n编译器在汇编代码中放入命令，指明全局数据所需的对齐。\n\n```assembly\n.align 8\n```\n\n> 该命令保证了它后面的变量的起始地址是8的倍数。\n\n\n\n### 结构体的字节对齐\n\n1. eg-1\n\n编译器会对包含结构体的代码内部需要的字段插入间隙，以满足对其要求。\n\n```c\nstruct S1 {\n    int i;\n    char c;\n    int j;\n};\n```\n\nint和char的大小分别是4个字节、1个字节。假设编译器用最小的9字节分配，画出来是这样的：\n\n![1552037289894](byte-alignment/1552037289894.png)\n\n> 这样int变量i和j是无法同时满足对齐原则的。\n\n\n\n取而代之，编译器在字段c和j之间插入一个3字节的间隙（蓝色部分）。\n\n![1552037549973](byte-alignment/1552037549973.png)\n\n{%note danger%}\n此外，编译器必须保证任何 `Struct S1 *` 类型的指针p都满足4字节对齐。这样保证了首元素（变量i）是4字节对齐，而且内部变量也都是4字节对齐了。\n{%endnote%}\n\n\n\n2. eg-2\n\n对于结构体数组，编译器可能会在结构体末尾进行填充来满足其对齐要求。\n\n\n```c\nstruct S2{\n    int i;\n    int j;\n    char c;\n};\n```\n\n如果用最小的9字节分配，很明显只要保证结构体初始地址是4字节倍数就可满足对齐要求。\n\n但是针对结构数组，有连续的元素，9字节分配就无法保证字节对齐要求了，如下声明：\n\n```c\nstruct S2 d[4];\n```\n\n\n\n这就需要编译器对结构体末尾进行填充。当然最后3个字节是浪费的空间。如下图：\n\n![1552038354295](byte-alignment/1552038354295.png)\n\n\n\n## 强制对齐\n\n如果数据没有对齐，某些型号的Intel和AMD处理器对于有些实现多媒体操作的SSE指令，就无法正确执行。\n\n{%note primary%}\n任何针对x68-64处理器的编译器和运行时系统都必须保证分配用来保存可能会被SSE寄存器读或写的数据结构的内存，都必须满足16字节对齐。\n{%endnote%}\n\n这个要求的后果：\n\n1. 任何内存分配函数（alloca、malloc、calloc或realloc）生成的块的起始地址都必须是16的倍数。\n2. 大多数函数栈帧的边界都必须是16的倍数。\n\n\n不过较近版本的x86-64处理器实现了AVX多媒体指令。除了提供SSE指令的超集，支持AVX的指令并没有强制性的对齐要求。\n\n## 如何避免字节对齐引发的问题\n\n另谈！待续……\n\n## 总结\n\n面向位级的理解是很有必要的，比如这次BMP文件的读写，读写文件头自定义数据结构而没有用Windows.h里的宏定义，这引发的问题就是对字节对齐这个概念还不够敏感。所以基础不牢，地动山摇；原理不解，实践何解？","slug":"byte-alignment","published":1,"updated":"2022-01-06T04:09:12.142Z","_id":"cksq5v7m1000cn0pu8w9d5mj7","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note default\"><p>凡事皆有因，刨根问底，追求极致。</p>\n</div>\n\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在<a href=\"bitmap-resolver.html\">BMP文件处理（C语言实现）</a>一文中说到文件头的自定义结构体会引起“字节对齐效应”，进而造成文件读取属性错位，严重造成读取错误。这篇文章主要回顾总结一下字节对齐问题。内容总结自《深入理解计算机系统》。</p>\n<h2 id=\"什么是字节对齐\"><a href=\"#什么是字节对齐\" class=\"headerlink\" title=\"什么是字节对齐\"></a>什么是字节对齐</h2><p>许多计算机系统对基本数据类型的合法地址做了一些限制，要求某种类型对象的地址必须是某个值K（通常是2，4，8）的倍数。</p>\n<div class=\"note info\"><p><em><strong>无论是否对齐，x86-64硬件都能正常工作。不过Intel还是建议要对齐数据以提高内存系统的性能。</strong></em></p>\n</div>\n\n<h2 id=\"字节对齐有什么好处\"><a href=\"#字节对齐有什么好处\" class=\"headerlink\" title=\"字节对齐有什么好处\"></a>字节对齐有什么好处</h2><p>字节对齐有一些隐含的好处：</p>\n<ul>\n<li>简化形成处理器和内存系统之间的硬件设计。</li>\n<li>提高内存系统的效率<ul>\n<li>例如一个处理器总是从内存中读取8个字节，那么地址必须为8的倍数。比如说double类型，如果地址为8的倍数只需要读取1次就能获得，否则可能需要执行两次内存访问，因为数据放到了两个8字节内存块中。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"字节对齐原则\"><a href=\"#字节对齐原则\" class=\"headerlink\" title=\"字节对齐原则\"></a>字节对齐原则</h2><div class=\"note primary\"><p><em><strong>任何K字节大小的基本对象的地址必须是K的倍数。，“对于结构体，结构体的地址是结构体内最大元素大小的整数倍，结构体的大小是结构体内最大元素字节大小的整数倍”。</strong></em></p>\n</div>\n\n<h3 id=\"一些基础数据类型的对齐方式\"><a href=\"#一些基础数据类型的对齐方式\" class=\"headerlink\" title=\"一些基础数据类型的对齐方式\"></a>一些基础数据类型的对齐方式</h3><p>一些常见的基本类型根据字节对齐原则获得的对齐地址方式如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">K</th>\n<th align=\"center\">类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1</td>\n<td align=\"center\">char</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\">short</td>\n</tr>\n<tr>\n<td align=\"center\">4</td>\n<td align=\"center\">int,float</td>\n</tr>\n<tr>\n<td align=\"center\">8</td>\n<td align=\"center\">long,double,char*</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>注意：这些类型都是在x86-64位某些特定机下的64位模式运行时对齐方式。</p>\n</blockquote>\n<p>确保每种数据类型都是按照指定方式来组织和分配，即每种类型的对象都满足它的对齐限制，就可保证实施对齐。</p>\n<p>比如我的电脑是x86-64位机，但是针对VS有x86和x64两种模式。这有不同的结果：</p>\n<ol>\n<li><p><strong>x86</strong></p>\n<p><img data-src=\"byte-alignment/x86-size.png\"></p>\n</li>\n<li><p><strong>x64</strong></p>\n</li>\n</ol>\n<p><img data-src=\"byte-alignment/x64-size.png\"></p>\n<div class=\"note danger\"><p>于是类型所占字节大小不同，所以K值不同。不管类型大小为多少个字节，只要根据字节对齐原则就可以了。</p>\n</div>\n\n\n\n<h2 id=\"一些例子\"><a href=\"#一些例子\" class=\"headerlink\" title=\"一些例子\"></a>一些例子</h2><h3 id=\"汇编命令\"><a href=\"#汇编命令\" class=\"headerlink\" title=\"汇编命令\"></a>汇编命令</h3><p>编译器在汇编代码中放入命令，指明全局数据所需的对齐。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.align 8</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>该命令保证了它后面的变量的起始地址是8的倍数。</p>\n</blockquote>\n<h3 id=\"结构体的字节对齐\"><a href=\"#结构体的字节对齐\" class=\"headerlink\" title=\"结构体的字节对齐\"></a>结构体的字节对齐</h3><ol>\n<li>eg-1</li>\n</ol>\n<p>编译器会对包含结构体的代码内部需要的字段插入间隙，以满足对其要求。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">S1</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> c;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>int和char的大小分别是4个字节、1个字节。假设编译器用最小的9字节分配，画出来是这样的：</p>\n<p><img data-src=\"byte-alignment/1552037289894.png\" alt=\"1552037289894\"></p>\n<blockquote>\n<p>这样int变量i和j是无法同时满足对齐原则的。</p>\n</blockquote>\n<p>取而代之，编译器在字段c和j之间插入一个3字节的间隙（蓝色部分）。</p>\n<p><img data-src=\"byte-alignment/1552037549973.png\" alt=\"1552037549973\"></p>\n<div class=\"note danger\"><p>此外，编译器必须保证任何 <code>Struct S1 *</code> 类型的指针p都满足4字节对齐。这样保证了首元素（变量i）是4字节对齐，而且内部变量也都是4字节对齐了。</p>\n</div>\n\n\n\n<ol start=\"2\">\n<li>eg-2</li>\n</ol>\n<p>对于结构体数组，编译器可能会在结构体末尾进行填充来满足其对齐要求。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">S2</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> c;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>如果用最小的9字节分配，很明显只要保证结构体初始地址是4字节倍数就可满足对齐要求。</p>\n<p>但是针对结构数组，有连续的元素，9字节分配就无法保证字节对齐要求了，如下声明：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">S2</span> <span class=\"title\">d</span>[4];</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>这就需要编译器对结构体末尾进行填充。当然最后3个字节是浪费的空间。如下图：</p>\n<p><img data-src=\"byte-alignment/1552038354295.png\" alt=\"1552038354295\"></p>\n<h2 id=\"强制对齐\"><a href=\"#强制对齐\" class=\"headerlink\" title=\"强制对齐\"></a>强制对齐</h2><p>如果数据没有对齐，某些型号的Intel和AMD处理器对于有些实现多媒体操作的SSE指令，就无法正确执行。</p>\n<div class=\"note primary\"><p>任何针对x68-64处理器的编译器和运行时系统都必须保证分配用来保存可能会被SSE寄存器读或写的数据结构的内存，都必须满足16字节对齐。</p>\n</div>\n\n<p>这个要求的后果：</p>\n<ol>\n<li>任何内存分配函数（alloca、malloc、calloc或realloc）生成的块的起始地址都必须是16的倍数。</li>\n<li>大多数函数栈帧的边界都必须是16的倍数。</li>\n</ol>\n<p>不过较近版本的x86-64处理器实现了AVX多媒体指令。除了提供SSE指令的超集，支持AVX的指令并没有强制性的对齐要求。</p>\n<h2 id=\"如何避免字节对齐引发的问题\"><a href=\"#如何避免字节对齐引发的问题\" class=\"headerlink\" title=\"如何避免字节对齐引发的问题\"></a>如何避免字节对齐引发的问题</h2><p>另谈！待续……</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>面向位级的理解是很有必要的，比如这次BMP文件的读写，读写文件头自定义数据结构而没有用Windows.h里的宏定义，这引发的问题就是对字节对齐这个概念还不够敏感。所以基础不牢，地动山摇；原理不解，实践何解？</p>\n","site":{"data":{}},"excerpt":"<div class=\"note default\"><p>凡事皆有因，刨根问底，追求极致。</p>\n</div>","more":"<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在<a href=\"bitmap-resolver.html\">BMP文件处理（C语言实现）</a>一文中说到文件头的自定义结构体会引起“字节对齐效应”，进而造成文件读取属性错位，严重造成读取错误。这篇文章主要回顾总结一下字节对齐问题。内容总结自《深入理解计算机系统》。</p>\n<h2 id=\"什么是字节对齐\"><a href=\"#什么是字节对齐\" class=\"headerlink\" title=\"什么是字节对齐\"></a>什么是字节对齐</h2><p>许多计算机系统对基本数据类型的合法地址做了一些限制，要求某种类型对象的地址必须是某个值K（通常是2，4，8）的倍数。</p>\n<div class=\"note info\"><p><em><strong>无论是否对齐，x86-64硬件都能正常工作。不过Intel还是建议要对齐数据以提高内存系统的性能。</strong></em></p>\n</div>\n\n<h2 id=\"字节对齐有什么好处\"><a href=\"#字节对齐有什么好处\" class=\"headerlink\" title=\"字节对齐有什么好处\"></a>字节对齐有什么好处</h2><p>字节对齐有一些隐含的好处：</p>\n<ul>\n<li>简化形成处理器和内存系统之间的硬件设计。</li>\n<li>提高内存系统的效率<ul>\n<li>例如一个处理器总是从内存中读取8个字节，那么地址必须为8的倍数。比如说double类型，如果地址为8的倍数只需要读取1次就能获得，否则可能需要执行两次内存访问，因为数据放到了两个8字节内存块中。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"字节对齐原则\"><a href=\"#字节对齐原则\" class=\"headerlink\" title=\"字节对齐原则\"></a>字节对齐原则</h2><div class=\"note primary\"><p><em><strong>任何K字节大小的基本对象的地址必须是K的倍数。，“对于结构体，结构体的地址是结构体内最大元素大小的整数倍，结构体的大小是结构体内最大元素字节大小的整数倍”。</strong></em></p>\n</div>\n\n<h3 id=\"一些基础数据类型的对齐方式\"><a href=\"#一些基础数据类型的对齐方式\" class=\"headerlink\" title=\"一些基础数据类型的对齐方式\"></a>一些基础数据类型的对齐方式</h3><p>一些常见的基本类型根据字节对齐原则获得的对齐地址方式如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">K</th>\n<th align=\"center\">类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1</td>\n<td align=\"center\">char</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\">short</td>\n</tr>\n<tr>\n<td align=\"center\">4</td>\n<td align=\"center\">int,float</td>\n</tr>\n<tr>\n<td align=\"center\">8</td>\n<td align=\"center\">long,double,char*</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>注意：这些类型都是在x86-64位某些特定机下的64位模式运行时对齐方式。</p>\n</blockquote>\n<p>确保每种数据类型都是按照指定方式来组织和分配，即每种类型的对象都满足它的对齐限制，就可保证实施对齐。</p>\n<p>比如我的电脑是x86-64位机，但是针对VS有x86和x64两种模式。这有不同的结果：</p>\n<ol>\n<li><p><strong>x86</strong></p>\n<p><img data-src=\"byte-alignment/x86-size.png\"></p>\n</li>\n<li><p><strong>x64</strong></p>\n</li>\n</ol>\n<p><img data-src=\"byte-alignment/x64-size.png\"></p>\n<div class=\"note danger\"><p>于是类型所占字节大小不同，所以K值不同。不管类型大小为多少个字节，只要根据字节对齐原则就可以了。</p>\n</div>\n\n\n\n<h2 id=\"一些例子\"><a href=\"#一些例子\" class=\"headerlink\" title=\"一些例子\"></a>一些例子</h2><h3 id=\"汇编命令\"><a href=\"#汇编命令\" class=\"headerlink\" title=\"汇编命令\"></a>汇编命令</h3><p>编译器在汇编代码中放入命令，指明全局数据所需的对齐。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.align 8</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>该命令保证了它后面的变量的起始地址是8的倍数。</p>\n</blockquote>\n<h3 id=\"结构体的字节对齐\"><a href=\"#结构体的字节对齐\" class=\"headerlink\" title=\"结构体的字节对齐\"></a>结构体的字节对齐</h3><ol>\n<li>eg-1</li>\n</ol>\n<p>编译器会对包含结构体的代码内部需要的字段插入间隙，以满足对其要求。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">S1</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> c;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>int和char的大小分别是4个字节、1个字节。假设编译器用最小的9字节分配，画出来是这样的：</p>\n<p><img data-src=\"byte-alignment/1552037289894.png\" alt=\"1552037289894\"></p>\n<blockquote>\n<p>这样int变量i和j是无法同时满足对齐原则的。</p>\n</blockquote>\n<p>取而代之，编译器在字段c和j之间插入一个3字节的间隙（蓝色部分）。</p>\n<p><img data-src=\"byte-alignment/1552037549973.png\" alt=\"1552037549973\"></p>\n<div class=\"note danger\"><p>此外，编译器必须保证任何 <code>Struct S1 *</code> 类型的指针p都满足4字节对齐。这样保证了首元素（变量i）是4字节对齐，而且内部变量也都是4字节对齐了。</p>\n</div>\n\n\n\n<ol start=\"2\">\n<li>eg-2</li>\n</ol>\n<p>对于结构体数组，编译器可能会在结构体末尾进行填充来满足其对齐要求。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">S2</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> c;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>如果用最小的9字节分配，很明显只要保证结构体初始地址是4字节倍数就可满足对齐要求。</p>\n<p>但是针对结构数组，有连续的元素，9字节分配就无法保证字节对齐要求了，如下声明：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">S2</span> <span class=\"title\">d</span>[4];</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>这就需要编译器对结构体末尾进行填充。当然最后3个字节是浪费的空间。如下图：</p>\n<p><img data-src=\"byte-alignment/1552038354295.png\" alt=\"1552038354295\"></p>\n<h2 id=\"强制对齐\"><a href=\"#强制对齐\" class=\"headerlink\" title=\"强制对齐\"></a>强制对齐</h2><p>如果数据没有对齐，某些型号的Intel和AMD处理器对于有些实现多媒体操作的SSE指令，就无法正确执行。</p>\n<div class=\"note primary\"><p>任何针对x68-64处理器的编译器和运行时系统都必须保证分配用来保存可能会被SSE寄存器读或写的数据结构的内存，都必须满足16字节对齐。</p>\n</div>\n\n<p>这个要求的后果：</p>\n<ol>\n<li>任何内存分配函数（alloca、malloc、calloc或realloc）生成的块的起始地址都必须是16的倍数。</li>\n<li>大多数函数栈帧的边界都必须是16的倍数。</li>\n</ol>\n<p>不过较近版本的x86-64处理器实现了AVX多媒体指令。除了提供SSE指令的超集，支持AVX的指令并没有强制性的对齐要求。</p>\n<h2 id=\"如何避免字节对齐引发的问题\"><a href=\"#如何避免字节对齐引发的问题\" class=\"headerlink\" title=\"如何避免字节对齐引发的问题\"></a>如何避免字节对齐引发的问题</h2><p>另谈！待续……</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>面向位级的理解是很有必要的，比如这次BMP文件的读写，读写文件头自定义数据结构而没有用Windows.h里的宏定义，这引发的问题就是对字节对齐这个概念还不够敏感。所以基础不牢，地动山摇；原理不解，实践何解？</p>"},{"title":"About function pointer in C","mathjax":false,"copyright":true,"comment":true,"date":"2019-04-06T01:55:45.000Z","_content":"\n{% note primary %}\n\"About C function pointer in C\" expressed in English.\n{% endnote %}\n\n<!-- more -->\n\n---\n\n\n## Forword\n\nI have coded by using the functional programming in JavaScript and Java.I also have learned the C function pointer which can also be used to program functionally.However,I have seldom or never used it.The article will be writen to interpret the function pointer in C.\n\n## Music\n\n> ***Not dyed*** by **He Tu**\n\n<iframe frameborder=\"no\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=533181327&auto=1&height=66\"></iframe>\n\n## Body\n\nThere are two main themes in the part:\n\n- C function pointer\n- *left-value* & *right-value*\n\n### How to use C function pointer\n\nThe function pointer can be declared in this way:\n\n```c\ntypedef int (*func_ptr)(int,int);\n```\n\nIn this way,we can declare a function pointer which points to a  class of functions using two *int* parameters and *int* return-values.\n\nWhile in JavaScript,We need not be careful about it.\n\nIn the underlying architecture,the reasons why a function pointer can only point to a class functions which have the same parameters and return-value are as the following:\n\n- the compiler need to ensure the number and type of parameters to allocate the memory space for it,and to perform the correct operation.\n- the compiler need to know the return-value type of the function.\n\nThus,the function pointer must be designated the return-value type and the parameter type.It's the same as the data pointer which has definite specification.\n\n### An example\n\nWe declare the function pointer which is as follows:\n\n```c\ntypedef int(*func_ptr)(int,int);\n```\n\n\nThen we define a function named *maximum*:\n\n```c\nint maximum(int a,int b){\n    return a>b?a:b;\n}\n```\n\nThen in the main-function,we use the function pointer in this way:\n\n```c\n\nint main(){\n    func_ptr p=&maximum;// '&' can be ignored.\n    //func_ptr p=max;\n    int a=1,b=2,c=3,d=4;\n    printf(\"Maximum of four numbers is %d!\\n\",p(a,p(b,p(c,d))));\n    return 0;\n}\n\n// As what you think,the result is 4.\n\n```\n\n### Write callback function by using functional programming in C\n\nYou maybe have used the callback function in C GUI programming such as ***Win32 API*** and ***MFC***.But how does it make it? \n\n***Callback*** can be implemented by using function pointer.And function pointer is always used as callback function.\n\nWe have declared the function pointer `func_ptr` before,and `maximum` function.Then we declare another function and implement a callback function:\n\n```c\ntypedef int(*func_ptr)(int,int);\n\nint maximum(int a,int b){\n    return a>b?a:b;\n}\n\nint minimum(int a,int b){\n    return a<b?a:b;\n}\n\nint max_min(int a,int b,int c,int d,func_ptr max_min_func_ptr){\n\n    //Do something here!\n\n    //As the following: revoke the callback function.\n    return max_min_func_ptr(a,max_min_func_ptr(b,max_min_func_ptr(c,d)));\n}\n\nint main(){\n    func_ptr pmax = maximum;\n    func_ptr pmin = minimum;\n    int a=1,b=2,c=3,d=4;\n    printf(\"Maximum of four numbers is %d!\\n\",max_min(a,b,c,d,pmax));\n    printf(\"Minimum of four numbers is %d!\\n\",max_min(a,b,c,d,pmin));\n}\n\n```\n\n**Result:**\n```dos\nMaximum of four numbers is 4!\nMinimum of four numbers is 1!\nPress any key to continue . . .\n```\n\nIn this way,we use these two functions named `maximum` and `minimum` as the callback functions.\n\n### What is *left-value* and *right-value*\n\nThe crucial different between both in ***C++***:\n\n{% note primary no-icon %}\n- left-value: Can get its address in the memory.\n> int a,int a[2],char a,struct {} a,function a...\n- right-value: Cannot get its address.\n> 2,3.1...\n{% endnote %}\n\n**Instead of being assignable or not**\n\nAs before,we can conclude that **the function designator**(function name) is a *left-value*.Of course,that is a *left-value* in C++.\nWhile in C,it's neither a *left-value* nor a *right-value*.\n\n## Conclusion\n\nIn this article,we are familiar with *c function point*,*callback* and *lr values*.\n\nThat's all for the time being.Thanks for your reading!\n\nSee you later.","source":"_posts/c-function-pointer.md","raw":"---\ntitle: About function pointer in C\nmathjax: false\ncopyright: true\ncomment: true\ndate: 2019-04-06 09:55:45\ntags:\n- C\n- Functional Programming\n- Express in English\ncategories: \n- Back-End Development\n- C\n\n---\n\n{% note primary %}\n\"About C function pointer in C\" expressed in English.\n{% endnote %}\n\n<!-- more -->\n\n---\n\n\n## Forword\n\nI have coded by using the functional programming in JavaScript and Java.I also have learned the C function pointer which can also be used to program functionally.However,I have seldom or never used it.The article will be writen to interpret the function pointer in C.\n\n## Music\n\n> ***Not dyed*** by **He Tu**\n\n<iframe frameborder=\"no\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=533181327&auto=1&height=66\"></iframe>\n\n## Body\n\nThere are two main themes in the part:\n\n- C function pointer\n- *left-value* & *right-value*\n\n### How to use C function pointer\n\nThe function pointer can be declared in this way:\n\n```c\ntypedef int (*func_ptr)(int,int);\n```\n\nIn this way,we can declare a function pointer which points to a  class of functions using two *int* parameters and *int* return-values.\n\nWhile in JavaScript,We need not be careful about it.\n\nIn the underlying architecture,the reasons why a function pointer can only point to a class functions which have the same parameters and return-value are as the following:\n\n- the compiler need to ensure the number and type of parameters to allocate the memory space for it,and to perform the correct operation.\n- the compiler need to know the return-value type of the function.\n\nThus,the function pointer must be designated the return-value type and the parameter type.It's the same as the data pointer which has definite specification.\n\n### An example\n\nWe declare the function pointer which is as follows:\n\n```c\ntypedef int(*func_ptr)(int,int);\n```\n\n\nThen we define a function named *maximum*:\n\n```c\nint maximum(int a,int b){\n    return a>b?a:b;\n}\n```\n\nThen in the main-function,we use the function pointer in this way:\n\n```c\n\nint main(){\n    func_ptr p=&maximum;// '&' can be ignored.\n    //func_ptr p=max;\n    int a=1,b=2,c=3,d=4;\n    printf(\"Maximum of four numbers is %d!\\n\",p(a,p(b,p(c,d))));\n    return 0;\n}\n\n// As what you think,the result is 4.\n\n```\n\n### Write callback function by using functional programming in C\n\nYou maybe have used the callback function in C GUI programming such as ***Win32 API*** and ***MFC***.But how does it make it? \n\n***Callback*** can be implemented by using function pointer.And function pointer is always used as callback function.\n\nWe have declared the function pointer `func_ptr` before,and `maximum` function.Then we declare another function and implement a callback function:\n\n```c\ntypedef int(*func_ptr)(int,int);\n\nint maximum(int a,int b){\n    return a>b?a:b;\n}\n\nint minimum(int a,int b){\n    return a<b?a:b;\n}\n\nint max_min(int a,int b,int c,int d,func_ptr max_min_func_ptr){\n\n    //Do something here!\n\n    //As the following: revoke the callback function.\n    return max_min_func_ptr(a,max_min_func_ptr(b,max_min_func_ptr(c,d)));\n}\n\nint main(){\n    func_ptr pmax = maximum;\n    func_ptr pmin = minimum;\n    int a=1,b=2,c=3,d=4;\n    printf(\"Maximum of four numbers is %d!\\n\",max_min(a,b,c,d,pmax));\n    printf(\"Minimum of four numbers is %d!\\n\",max_min(a,b,c,d,pmin));\n}\n\n```\n\n**Result:**\n```dos\nMaximum of four numbers is 4!\nMinimum of four numbers is 1!\nPress any key to continue . . .\n```\n\nIn this way,we use these two functions named `maximum` and `minimum` as the callback functions.\n\n### What is *left-value* and *right-value*\n\nThe crucial different between both in ***C++***:\n\n{% note primary no-icon %}\n- left-value: Can get its address in the memory.\n> int a,int a[2],char a,struct {} a,function a...\n- right-value: Cannot get its address.\n> 2,3.1...\n{% endnote %}\n\n**Instead of being assignable or not**\n\nAs before,we can conclude that **the function designator**(function name) is a *left-value*.Of course,that is a *left-value* in C++.\nWhile in C,it's neither a *left-value* nor a *right-value*.\n\n## Conclusion\n\nIn this article,we are familiar with *c function point*,*callback* and *lr values*.\n\nThat's all for the time being.Thanks for your reading!\n\nSee you later.","slug":"c-function-pointer","published":1,"updated":"2022-01-06T04:09:12.143Z","_id":"cksq5v7m2000dn0pu8e8372l3","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note primary\"><p>“About C function pointer in C” expressed in English.</p>\n</div>\n\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"Forword\"><a href=\"#Forword\" class=\"headerlink\" title=\"Forword\"></a>Forword</h2><p>I have coded by using the functional programming in JavaScript and Java.I also have learned the C function pointer which can also be used to program functionally.However,I have seldom or never used it.The article will be writen to interpret the function pointer in C.</p>\n<h2 id=\"Music\"><a href=\"#Music\" class=\"headerlink\" title=\"Music\"></a>Music</h2><blockquote>\n<p><em><strong>Not dyed</strong></em> by <strong>He Tu</strong></p>\n</blockquote>\n<iframe frameborder=\"no\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=533181327&auto=1&height=66\"></iframe>\n\n<h2 id=\"Body\"><a href=\"#Body\" class=\"headerlink\" title=\"Body\"></a>Body</h2><p>There are two main themes in the part:</p>\n<ul>\n<li>C function pointer</li>\n<li><em>left-value</em> &amp; <em>right-value</em></li>\n</ul>\n<h3 id=\"How-to-use-C-function-pointer\"><a href=\"#How-to-use-C-function-pointer\" class=\"headerlink\" title=\"How to use C function pointer\"></a>How to use C function pointer</h3><p>The function pointer can be declared in this way:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">int</span> <span class=\"params\">(*func_ptr)</span><span class=\"params\">(<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>In this way,we can declare a function pointer which points to a  class of functions using two <em>int</em> parameters and <em>int</em> return-values.</p>\n<p>While in JavaScript,We need not be careful about it.</p>\n<p>In the underlying architecture,the reasons why a function pointer can only point to a class functions which have the same parameters and return-value are as the following:</p>\n<ul>\n<li>the compiler need to ensure the number and type of parameters to allocate the memory space for it,and to perform the correct operation.</li>\n<li>the compiler need to know the return-value type of the function.</li>\n</ul>\n<p>Thus,the function pointer must be designated the return-value type and the parameter type.It’s the same as the data pointer which has definite specification.</p>\n<h3 id=\"An-example\"><a href=\"#An-example\" class=\"headerlink\" title=\"An example\"></a>An example</h3><p>We declare the function pointer which is as follows:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">int</span><span class=\"params\">(*func_ptr)</span><span class=\"params\">(<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>)</span></span>;</span><br></pre></td></tr></table></figure>\n\n\n<p>Then we define a function named <em>maximum</em>:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maximum</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a&gt;b?a:b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Then in the main-function,we use the function pointer in this way:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    func_ptr p=&amp;maximum;<span class=\"comment\">// &#x27;&amp;&#x27; can be ignored.</span></span><br><span class=\"line\">    <span class=\"comment\">//func_ptr p=max;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a=<span class=\"number\">1</span>,b=<span class=\"number\">2</span>,c=<span class=\"number\">3</span>,d=<span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Maximum of four numbers is %d!\\n&quot;</span>,p(a,p(b,p(c,d))));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// As what you think,the result is 4.</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Write-callback-function-by-using-functional-programming-in-C\"><a href=\"#Write-callback-function-by-using-functional-programming-in-C\" class=\"headerlink\" title=\"Write callback function by using functional programming in C\"></a>Write callback function by using functional programming in C</h3><p>You maybe have used the callback function in C GUI programming such as <em><strong>Win32 API</strong></em> and <em><strong>MFC</strong></em>.But how does it make it? </p>\n<p><em><strong>Callback</strong></em> can be implemented by using function pointer.And function pointer is always used as callback function.</p>\n<p>We have declared the function pointer <code>func_ptr</code> before,and <code>maximum</code> function.Then we declare another function and implement a callback function:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">int</span><span class=\"params\">(*func_ptr)</span><span class=\"params\">(<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maximum</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a&gt;b?a:b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">minimum</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a&lt;b?a:b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">max_min</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b,<span class=\"keyword\">int</span> c,<span class=\"keyword\">int</span> d,func_ptr max_min_func_ptr)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Do something here!</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//As the following: revoke the callback function.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> max_min_func_ptr(a,max_min_func_ptr(b,max_min_func_ptr(c,d)));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    func_ptr pmax = maximum;</span><br><span class=\"line\">    func_ptr pmin = minimum;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a=<span class=\"number\">1</span>,b=<span class=\"number\">2</span>,c=<span class=\"number\">3</span>,d=<span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Maximum of four numbers is %d!\\n&quot;</span>,max_min(a,b,c,d,pmax));</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Minimum of four numbers is %d!\\n&quot;</span>,max_min(a,b,c,d,pmin));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>Result:</strong></p>\n<figure class=\"highlight dos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Maximum of four numbers is <span class=\"number\">4</span>!</span><br><span class=\"line\">Minimum of four numbers is <span class=\"number\">1</span>!</span><br><span class=\"line\">Press any key to continue . . .</span><br></pre></td></tr></table></figure>\n\n<p>In this way,we use these two functions named <code>maximum</code> and <code>minimum</code> as the callback functions.</p>\n<h3 id=\"What-is-left-value-and-right-value\"><a href=\"#What-is-left-value-and-right-value\" class=\"headerlink\" title=\"What is left-value and right-value\"></a>What is <em>left-value</em> and <em>right-value</em></h3><p>The crucial different between both in <em><strong>C++</strong></em>:</p>\n<div class=\"note primary no-icon\"><ul>\n<li>left-value: Can get its address in the memory.<blockquote>\n<p>int a,int a[2],char a,struct {} a,function a…</p>\n</blockquote>\n</li>\n<li>right-value: Cannot get its address.<blockquote>\n<p>2,3.1…</p>\n</blockquote>\n</li>\n</ul>\n</div>\n\n<p><strong>Instead of being assignable or not</strong></p>\n<p>As before,we can conclude that <strong>the function designator</strong>(function name) is a <em>left-value</em>.Of course,that is a <em>left-value</em> in C++.<br>While in C,it’s neither a <em>left-value</em> nor a <em>right-value</em>.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>In this article,we are familiar with <em>c function point</em>,<em>callback</em> and <em>lr values</em>.</p>\n<p>That’s all for the time being.Thanks for your reading!</p>\n<p>See you later.</p>\n","site":{"data":{}},"excerpt":"<div class=\"note primary\"><p>“About C function pointer in C” expressed in English.</p>\n</div>","more":"<hr>\n<h2 id=\"Forword\"><a href=\"#Forword\" class=\"headerlink\" title=\"Forword\"></a>Forword</h2><p>I have coded by using the functional programming in JavaScript and Java.I also have learned the C function pointer which can also be used to program functionally.However,I have seldom or never used it.The article will be writen to interpret the function pointer in C.</p>\n<h2 id=\"Music\"><a href=\"#Music\" class=\"headerlink\" title=\"Music\"></a>Music</h2><blockquote>\n<p><em><strong>Not dyed</strong></em> by <strong>He Tu</strong></p>\n</blockquote>\n<iframe frameborder=\"no\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=533181327&auto=1&height=66\"></iframe>\n\n<h2 id=\"Body\"><a href=\"#Body\" class=\"headerlink\" title=\"Body\"></a>Body</h2><p>There are two main themes in the part:</p>\n<ul>\n<li>C function pointer</li>\n<li><em>left-value</em> &amp; <em>right-value</em></li>\n</ul>\n<h3 id=\"How-to-use-C-function-pointer\"><a href=\"#How-to-use-C-function-pointer\" class=\"headerlink\" title=\"How to use C function pointer\"></a>How to use C function pointer</h3><p>The function pointer can be declared in this way:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">int</span> <span class=\"params\">(*func_ptr)</span><span class=\"params\">(<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>In this way,we can declare a function pointer which points to a  class of functions using two <em>int</em> parameters and <em>int</em> return-values.</p>\n<p>While in JavaScript,We need not be careful about it.</p>\n<p>In the underlying architecture,the reasons why a function pointer can only point to a class functions which have the same parameters and return-value are as the following:</p>\n<ul>\n<li>the compiler need to ensure the number and type of parameters to allocate the memory space for it,and to perform the correct operation.</li>\n<li>the compiler need to know the return-value type of the function.</li>\n</ul>\n<p>Thus,the function pointer must be designated the return-value type and the parameter type.It’s the same as the data pointer which has definite specification.</p>\n<h3 id=\"An-example\"><a href=\"#An-example\" class=\"headerlink\" title=\"An example\"></a>An example</h3><p>We declare the function pointer which is as follows:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">int</span><span class=\"params\">(*func_ptr)</span><span class=\"params\">(<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>)</span></span>;</span><br></pre></td></tr></table></figure>\n\n\n<p>Then we define a function named <em>maximum</em>:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maximum</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a&gt;b?a:b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Then in the main-function,we use the function pointer in this way:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    func_ptr p=&amp;maximum;<span class=\"comment\">// &#x27;&amp;&#x27; can be ignored.</span></span><br><span class=\"line\">    <span class=\"comment\">//func_ptr p=max;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a=<span class=\"number\">1</span>,b=<span class=\"number\">2</span>,c=<span class=\"number\">3</span>,d=<span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Maximum of four numbers is %d!\\n&quot;</span>,p(a,p(b,p(c,d))));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// As what you think,the result is 4.</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Write-callback-function-by-using-functional-programming-in-C\"><a href=\"#Write-callback-function-by-using-functional-programming-in-C\" class=\"headerlink\" title=\"Write callback function by using functional programming in C\"></a>Write callback function by using functional programming in C</h3><p>You maybe have used the callback function in C GUI programming such as <em><strong>Win32 API</strong></em> and <em><strong>MFC</strong></em>.But how does it make it? </p>\n<p><em><strong>Callback</strong></em> can be implemented by using function pointer.And function pointer is always used as callback function.</p>\n<p>We have declared the function pointer <code>func_ptr</code> before,and <code>maximum</code> function.Then we declare another function and implement a callback function:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">int</span><span class=\"params\">(*func_ptr)</span><span class=\"params\">(<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maximum</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a&gt;b?a:b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">minimum</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a&lt;b?a:b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">max_min</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b,<span class=\"keyword\">int</span> c,<span class=\"keyword\">int</span> d,func_ptr max_min_func_ptr)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Do something here!</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//As the following: revoke the callback function.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> max_min_func_ptr(a,max_min_func_ptr(b,max_min_func_ptr(c,d)));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    func_ptr pmax = maximum;</span><br><span class=\"line\">    func_ptr pmin = minimum;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a=<span class=\"number\">1</span>,b=<span class=\"number\">2</span>,c=<span class=\"number\">3</span>,d=<span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Maximum of four numbers is %d!\\n&quot;</span>,max_min(a,b,c,d,pmax));</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Minimum of four numbers is %d!\\n&quot;</span>,max_min(a,b,c,d,pmin));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>Result:</strong></p>\n<figure class=\"highlight dos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Maximum of four numbers is <span class=\"number\">4</span>!</span><br><span class=\"line\">Minimum of four numbers is <span class=\"number\">1</span>!</span><br><span class=\"line\">Press any key to continue . . .</span><br></pre></td></tr></table></figure>\n\n<p>In this way,we use these two functions named <code>maximum</code> and <code>minimum</code> as the callback functions.</p>\n<h3 id=\"What-is-left-value-and-right-value\"><a href=\"#What-is-left-value-and-right-value\" class=\"headerlink\" title=\"What is left-value and right-value\"></a>What is <em>left-value</em> and <em>right-value</em></h3><p>The crucial different between both in <em><strong>C++</strong></em>:</p>\n<div class=\"note primary no-icon\"><ul>\n<li>left-value: Can get its address in the memory.<blockquote>\n<p>int a,int a[2],char a,struct {} a,function a…</p>\n</blockquote>\n</li>\n<li>right-value: Cannot get its address.<blockquote>\n<p>2,3.1…</p>\n</blockquote>\n</li>\n</ul>\n</div>\n\n<p><strong>Instead of being assignable or not</strong></p>\n<p>As before,we can conclude that <strong>the function designator</strong>(function name) is a <em>left-value</em>.Of course,that is a <em>left-value</em> in C++.<br>While in C,it’s neither a <em>left-value</em> nor a <em>right-value</em>.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>In this article,we are familiar with <em>c function point</em>,<em>callback</em> and <em>lr values</em>.</p>\n<p>That’s all for the time being.Thanks for your reading!</p>\n<p>See you later.</p>"},{"title":"并发和并行的概念与应用","mathjax":false,"copyright":true,"comment":true,"date":"2019-03-18T14:10:55.000Z","_content":"\n{% note primary %}\n一句话说并发的目的：我们想让计算机做的更多，运行的更快。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 前言\n\n如果你对以下概念存有疑惑，那么你很适合读这篇总结性文章：\n\n- 并发、并行\n- 处理器、CPU、核\n- 线程级并发、指令级并行、单指令&多指令并行\n\n整理的可能不够详细，若想进一步了解，请参考CSAPP3.0 P17-P19。\n\n## 概念\n\n> 驱动数字计算机进步的两个需求是**想要计算机做得更多**、**想让计算机运行的更快**，相关的两个术语便是*并行*和*并发*。（这两个术语有好几种说法，不过是一个代称而已，理解真正的意思就好了。）\n\n{% note success no-icon %}\n\n### 并发\n\n是一个通用的概念，指一个同时具有多个活动的系统具有的特性。\n\n{% endnote %}\n\n{% note success no-icon %}\n\n### 并行\n\n指的是用并发来使系统运行得更快。\n\n{% endnote %}\n\n\n## 线程级并发\n\n> 构建在进程的抽象上。\n\n### 处理器分类\n\n![](concurrency-parallelism/solver-class.png)\n\n#### 单处理器\n{% note info no-icon %}\n\n真正的单CPU、单线程，处理器同一时刻只能执行一个线程。它的并发是模拟出来的，是通过进程间快速切换实现的。\n\n- 不惜切换上下文浪费资源来实现模拟并发是为了缩短前台程序响应时间，能够同时运行多个程序，提高用户体验。\n\n{% endnote %}\n\n#### 多处理器\n> 多处理器包含***多核处理器***和***超线程处理器***。\n\n{% note info  %}\n\n随着多核处理器和超线程的出现，使得多处理器变得常见。\n\n{% endnote %}\n\n##### 0x01 多核处理器\n\n> **“核”正是指的CPU**。\n\n{% note info no-icon %}\n\n多核处理器是将多个CPU（称为“核”）集成到一个集成电路芯片上。\n\n> 以下是一个典型的多核处理器\n\n- 每一个CPU（即“核”）可以执行一个线程\n- 每个核都有自己的L1和L2级Cache\n- L1级Cache分为两个部分，一个保存最近取到的指令，一个存放数据\n- 所有核共享L3级Cache\n\n![](concurrency-parallelism/multikernel.png)\n\n{% endnote %}\n\n##### 0x02 超线程处理器\n\n{% note info no-icon %}\n\n有时称为**同时多线程**，是一项允许一个CPU多个控制流（线程）的技术。\n\n- 涉及CPU某些硬件的多个备份，比如程序计数器（PC或IP）和寄存器文件\n- 常规处理器需要20000个时钟周期做不同线程间的转换，而超线程处理器可以在单个线程决定执行哪个线程（当一个线程处于“慢”状态，比如等待数据从内存装到Cache中时，可以选择处于“快”状态的线程先执行）\n\n{% endnote %}\n\n##### 0x03 Intel Core i7 的四核八线程指什么？\n\n{% note info no-icon %}\n\n即将4个CPU（也就是“核”）集成到一个集成电路芯片上，每个CPU允许控制2个控制流（线程）\n\n{% endnote %}\n\n## 指令级并行\n> 构建在较低的抽象层次上。\n\n{% note info  %}\n\n现代处理器可以同时执行多条指令的属性称为指令级并行。\n\n- 1978年Intel8086，需要多个（通常是3~10个）时钟周期来执行一条指令。\n- 现代处理器可以达到每个时钟周期处理2~4条指令，但每个指令周转时间需要20个时钟周期或更长。主要是因为处理器使用了一些技巧可以同时处理多达100条指令。\n\n{% endnote %}\n\n## 单指令、多数据并行\n> 构建在最低层次上。\n\n{% note info  %}\n\n许多现代处理器拥有特殊的硬件，允许一条指令产生多个可以并行的操作，这种方式称为单指令、多数据，即SIMD并行（Single Instruction Multiple Data）\n\n- 例如，较新的几代Intel和AMD处理器都具有并行地对8位点精度浮点数（C语言的float）做加法的指令\n\n{% endnote %}\n\n\n## 总结\n\n本篇文章用于回顾（retrospect）和总结，避免遗忘。\n","source":"_posts/concurrency-parallelism.md","raw":"---\ntitle: 并发和并行的概念与应用\nmathjax: false\ncopyright: true\ncomment: true\ndate: 2019-03-18 22:10:55\ntags:\n- Operating System\n- CSAPP\ncategories:\n- Computer Science\n- Operating System\n\n---\n\n{% note primary %}\n一句话说并发的目的：我们想让计算机做的更多，运行的更快。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 前言\n\n如果你对以下概念存有疑惑，那么你很适合读这篇总结性文章：\n\n- 并发、并行\n- 处理器、CPU、核\n- 线程级并发、指令级并行、单指令&多指令并行\n\n整理的可能不够详细，若想进一步了解，请参考CSAPP3.0 P17-P19。\n\n## 概念\n\n> 驱动数字计算机进步的两个需求是**想要计算机做得更多**、**想让计算机运行的更快**，相关的两个术语便是*并行*和*并发*。（这两个术语有好几种说法，不过是一个代称而已，理解真正的意思就好了。）\n\n{% note success no-icon %}\n\n### 并发\n\n是一个通用的概念，指一个同时具有多个活动的系统具有的特性。\n\n{% endnote %}\n\n{% note success no-icon %}\n\n### 并行\n\n指的是用并发来使系统运行得更快。\n\n{% endnote %}\n\n\n## 线程级并发\n\n> 构建在进程的抽象上。\n\n### 处理器分类\n\n![](concurrency-parallelism/solver-class.png)\n\n#### 单处理器\n{% note info no-icon %}\n\n真正的单CPU、单线程，处理器同一时刻只能执行一个线程。它的并发是模拟出来的，是通过进程间快速切换实现的。\n\n- 不惜切换上下文浪费资源来实现模拟并发是为了缩短前台程序响应时间，能够同时运行多个程序，提高用户体验。\n\n{% endnote %}\n\n#### 多处理器\n> 多处理器包含***多核处理器***和***超线程处理器***。\n\n{% note info  %}\n\n随着多核处理器和超线程的出现，使得多处理器变得常见。\n\n{% endnote %}\n\n##### 0x01 多核处理器\n\n> **“核”正是指的CPU**。\n\n{% note info no-icon %}\n\n多核处理器是将多个CPU（称为“核”）集成到一个集成电路芯片上。\n\n> 以下是一个典型的多核处理器\n\n- 每一个CPU（即“核”）可以执行一个线程\n- 每个核都有自己的L1和L2级Cache\n- L1级Cache分为两个部分，一个保存最近取到的指令，一个存放数据\n- 所有核共享L3级Cache\n\n![](concurrency-parallelism/multikernel.png)\n\n{% endnote %}\n\n##### 0x02 超线程处理器\n\n{% note info no-icon %}\n\n有时称为**同时多线程**，是一项允许一个CPU多个控制流（线程）的技术。\n\n- 涉及CPU某些硬件的多个备份，比如程序计数器（PC或IP）和寄存器文件\n- 常规处理器需要20000个时钟周期做不同线程间的转换，而超线程处理器可以在单个线程决定执行哪个线程（当一个线程处于“慢”状态，比如等待数据从内存装到Cache中时，可以选择处于“快”状态的线程先执行）\n\n{% endnote %}\n\n##### 0x03 Intel Core i7 的四核八线程指什么？\n\n{% note info no-icon %}\n\n即将4个CPU（也就是“核”）集成到一个集成电路芯片上，每个CPU允许控制2个控制流（线程）\n\n{% endnote %}\n\n## 指令级并行\n> 构建在较低的抽象层次上。\n\n{% note info  %}\n\n现代处理器可以同时执行多条指令的属性称为指令级并行。\n\n- 1978年Intel8086，需要多个（通常是3~10个）时钟周期来执行一条指令。\n- 现代处理器可以达到每个时钟周期处理2~4条指令，但每个指令周转时间需要20个时钟周期或更长。主要是因为处理器使用了一些技巧可以同时处理多达100条指令。\n\n{% endnote %}\n\n## 单指令、多数据并行\n> 构建在最低层次上。\n\n{% note info  %}\n\n许多现代处理器拥有特殊的硬件，允许一条指令产生多个可以并行的操作，这种方式称为单指令、多数据，即SIMD并行（Single Instruction Multiple Data）\n\n- 例如，较新的几代Intel和AMD处理器都具有并行地对8位点精度浮点数（C语言的float）做加法的指令\n\n{% endnote %}\n\n\n## 总结\n\n本篇文章用于回顾（retrospect）和总结，避免遗忘。\n","slug":"concurrency-parallelism","published":1,"updated":"2022-01-06T04:09:12.175Z","_id":"cksq5v7m4000hn0pua9hi1q3k","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note primary\"><p>一句话说并发的目的：我们想让计算机做的更多，运行的更快。</p>\n</div>\n\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>如果你对以下概念存有疑惑，那么你很适合读这篇总结性文章：</p>\n<ul>\n<li>并发、并行</li>\n<li>处理器、CPU、核</li>\n<li>线程级并发、指令级并行、单指令&amp;多指令并行</li>\n</ul>\n<p>整理的可能不够详细，若想进一步了解，请参考CSAPP3.0 P17-P19。</p>\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><blockquote>\n<p>驱动数字计算机进步的两个需求是<strong>想要计算机做得更多</strong>、<strong>想让计算机运行的更快</strong>，相关的两个术语便是<em>并行</em>和<em>并发</em>。（这两个术语有好几种说法，不过是一个代称而已，理解真正的意思就好了。）</p>\n</blockquote>\n<div class=\"note success no-icon\"><h3 id=\"并发\"><a href=\"#并发\" class=\"headerlink\" title=\"并发\"></a>并发</h3><p>是一个通用的概念，指一个同时具有多个活动的系统具有的特性。</p>\n</div>\n\n<div class=\"note success no-icon\"><h3 id=\"并行\"><a href=\"#并行\" class=\"headerlink\" title=\"并行\"></a>并行</h3><p>指的是用并发来使系统运行得更快。</p>\n</div>\n\n\n<h2 id=\"线程级并发\"><a href=\"#线程级并发\" class=\"headerlink\" title=\"线程级并发\"></a>线程级并发</h2><blockquote>\n<p>构建在进程的抽象上。</p>\n</blockquote>\n<h3 id=\"处理器分类\"><a href=\"#处理器分类\" class=\"headerlink\" title=\"处理器分类\"></a>处理器分类</h3><p><img data-src=\"concurrency-parallelism/solver-class.png\"></p>\n<h4 id=\"单处理器\"><a href=\"#单处理器\" class=\"headerlink\" title=\"单处理器\"></a>单处理器</h4><div class=\"note info no-icon\"><p>真正的单CPU、单线程，处理器同一时刻只能执行一个线程。它的并发是模拟出来的，是通过进程间快速切换实现的。</p>\n<ul>\n<li>不惜切换上下文浪费资源来实现模拟并发是为了缩短前台程序响应时间，能够同时运行多个程序，提高用户体验。</li>\n</ul>\n</div>\n\n<h4 id=\"多处理器\"><a href=\"#多处理器\" class=\"headerlink\" title=\"多处理器\"></a>多处理器</h4><blockquote>\n<p>多处理器包含<em><strong>多核处理器</strong></em>和<em><strong>超线程处理器</strong></em>。</p>\n</blockquote>\n<div class=\"note info\"><p>随着多核处理器和超线程的出现，使得多处理器变得常见。</p>\n</div>\n\n<h5 id=\"0x01-多核处理器\"><a href=\"#0x01-多核处理器\" class=\"headerlink\" title=\"0x01 多核处理器\"></a>0x01 多核处理器</h5><blockquote>\n<p><strong>“核”正是指的CPU</strong>。</p>\n</blockquote>\n<div class=\"note info no-icon\"><p>多核处理器是将多个CPU（称为“核”）集成到一个集成电路芯片上。</p>\n<blockquote>\n<p>以下是一个典型的多核处理器</p>\n</blockquote>\n<ul>\n<li>每一个CPU（即“核”）可以执行一个线程</li>\n<li>每个核都有自己的L1和L2级Cache</li>\n<li>L1级Cache分为两个部分，一个保存最近取到的指令，一个存放数据</li>\n<li>所有核共享L3级Cache</li>\n</ul>\n<p><img data-src=\"concurrency-parallelism/multikernel.png\"></p>\n</div>\n\n<h5 id=\"0x02-超线程处理器\"><a href=\"#0x02-超线程处理器\" class=\"headerlink\" title=\"0x02 超线程处理器\"></a>0x02 超线程处理器</h5><div class=\"note info no-icon\"><p>有时称为<strong>同时多线程</strong>，是一项允许一个CPU多个控制流（线程）的技术。</p>\n<ul>\n<li>涉及CPU某些硬件的多个备份，比如程序计数器（PC或IP）和寄存器文件</li>\n<li>常规处理器需要20000个时钟周期做不同线程间的转换，而超线程处理器可以在单个线程决定执行哪个线程（当一个线程处于“慢”状态，比如等待数据从内存装到Cache中时，可以选择处于“快”状态的线程先执行）</li>\n</ul>\n</div>\n\n<h5 id=\"0x03-Intel-Core-i7-的四核八线程指什么？\"><a href=\"#0x03-Intel-Core-i7-的四核八线程指什么？\" class=\"headerlink\" title=\"0x03 Intel Core i7 的四核八线程指什么？\"></a>0x03 Intel Core i7 的四核八线程指什么？</h5><div class=\"note info no-icon\"><p>即将4个CPU（也就是“核”）集成到一个集成电路芯片上，每个CPU允许控制2个控制流（线程）</p>\n</div>\n\n<h2 id=\"指令级并行\"><a href=\"#指令级并行\" class=\"headerlink\" title=\"指令级并行\"></a>指令级并行</h2><blockquote>\n<p>构建在较低的抽象层次上。</p>\n</blockquote>\n<div class=\"note info\"><p>现代处理器可以同时执行多条指令的属性称为指令级并行。</p>\n<ul>\n<li>1978年Intel8086，需要多个（通常是3~10个）时钟周期来执行一条指令。</li>\n<li>现代处理器可以达到每个时钟周期处理2~4条指令，但每个指令周转时间需要20个时钟周期或更长。主要是因为处理器使用了一些技巧可以同时处理多达100条指令。</li>\n</ul>\n</div>\n\n<h2 id=\"单指令、多数据并行\"><a href=\"#单指令、多数据并行\" class=\"headerlink\" title=\"单指令、多数据并行\"></a>单指令、多数据并行</h2><blockquote>\n<p>构建在最低层次上。</p>\n</blockquote>\n<div class=\"note info\"><p>许多现代处理器拥有特殊的硬件，允许一条指令产生多个可以并行的操作，这种方式称为单指令、多数据，即SIMD并行（Single Instruction Multiple Data）</p>\n<ul>\n<li>例如，较新的几代Intel和AMD处理器都具有并行地对8位点精度浮点数（C语言的float）做加法的指令</li>\n</ul>\n</div>\n\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本篇文章用于回顾（retrospect）和总结，避免遗忘。</p>\n","site":{"data":{}},"excerpt":"<div class=\"note primary\"><p>一句话说并发的目的：我们想让计算机做的更多，运行的更快。</p>\n</div>","more":"<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>如果你对以下概念存有疑惑，那么你很适合读这篇总结性文章：</p>\n<ul>\n<li>并发、并行</li>\n<li>处理器、CPU、核</li>\n<li>线程级并发、指令级并行、单指令&amp;多指令并行</li>\n</ul>\n<p>整理的可能不够详细，若想进一步了解，请参考CSAPP3.0 P17-P19。</p>\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><blockquote>\n<p>驱动数字计算机进步的两个需求是<strong>想要计算机做得更多</strong>、<strong>想让计算机运行的更快</strong>，相关的两个术语便是<em>并行</em>和<em>并发</em>。（这两个术语有好几种说法，不过是一个代称而已，理解真正的意思就好了。）</p>\n</blockquote>\n<div class=\"note success no-icon\"><h3 id=\"并发\"><a href=\"#并发\" class=\"headerlink\" title=\"并发\"></a>并发</h3><p>是一个通用的概念，指一个同时具有多个活动的系统具有的特性。</p>\n</div>\n\n<div class=\"note success no-icon\"><h3 id=\"并行\"><a href=\"#并行\" class=\"headerlink\" title=\"并行\"></a>并行</h3><p>指的是用并发来使系统运行得更快。</p>\n</div>\n\n\n<h2 id=\"线程级并发\"><a href=\"#线程级并发\" class=\"headerlink\" title=\"线程级并发\"></a>线程级并发</h2><blockquote>\n<p>构建在进程的抽象上。</p>\n</blockquote>\n<h3 id=\"处理器分类\"><a href=\"#处理器分类\" class=\"headerlink\" title=\"处理器分类\"></a>处理器分类</h3><p><img data-src=\"concurrency-parallelism/solver-class.png\"></p>\n<h4 id=\"单处理器\"><a href=\"#单处理器\" class=\"headerlink\" title=\"单处理器\"></a>单处理器</h4><div class=\"note info no-icon\"><p>真正的单CPU、单线程，处理器同一时刻只能执行一个线程。它的并发是模拟出来的，是通过进程间快速切换实现的。</p>\n<ul>\n<li>不惜切换上下文浪费资源来实现模拟并发是为了缩短前台程序响应时间，能够同时运行多个程序，提高用户体验。</li>\n</ul>\n</div>\n\n<h4 id=\"多处理器\"><a href=\"#多处理器\" class=\"headerlink\" title=\"多处理器\"></a>多处理器</h4><blockquote>\n<p>多处理器包含<em><strong>多核处理器</strong></em>和<em><strong>超线程处理器</strong></em>。</p>\n</blockquote>\n<div class=\"note info\"><p>随着多核处理器和超线程的出现，使得多处理器变得常见。</p>\n</div>\n\n<h5 id=\"0x01-多核处理器\"><a href=\"#0x01-多核处理器\" class=\"headerlink\" title=\"0x01 多核处理器\"></a>0x01 多核处理器</h5><blockquote>\n<p><strong>“核”正是指的CPU</strong>。</p>\n</blockquote>\n<div class=\"note info no-icon\"><p>多核处理器是将多个CPU（称为“核”）集成到一个集成电路芯片上。</p>\n<blockquote>\n<p>以下是一个典型的多核处理器</p>\n</blockquote>\n<ul>\n<li>每一个CPU（即“核”）可以执行一个线程</li>\n<li>每个核都有自己的L1和L2级Cache</li>\n<li>L1级Cache分为两个部分，一个保存最近取到的指令，一个存放数据</li>\n<li>所有核共享L3级Cache</li>\n</ul>\n<p><img data-src=\"concurrency-parallelism/multikernel.png\"></p>\n</div>\n\n<h5 id=\"0x02-超线程处理器\"><a href=\"#0x02-超线程处理器\" class=\"headerlink\" title=\"0x02 超线程处理器\"></a>0x02 超线程处理器</h5><div class=\"note info no-icon\"><p>有时称为<strong>同时多线程</strong>，是一项允许一个CPU多个控制流（线程）的技术。</p>\n<ul>\n<li>涉及CPU某些硬件的多个备份，比如程序计数器（PC或IP）和寄存器文件</li>\n<li>常规处理器需要20000个时钟周期做不同线程间的转换，而超线程处理器可以在单个线程决定执行哪个线程（当一个线程处于“慢”状态，比如等待数据从内存装到Cache中时，可以选择处于“快”状态的线程先执行）</li>\n</ul>\n</div>\n\n<h5 id=\"0x03-Intel-Core-i7-的四核八线程指什么？\"><a href=\"#0x03-Intel-Core-i7-的四核八线程指什么？\" class=\"headerlink\" title=\"0x03 Intel Core i7 的四核八线程指什么？\"></a>0x03 Intel Core i7 的四核八线程指什么？</h5><div class=\"note info no-icon\"><p>即将4个CPU（也就是“核”）集成到一个集成电路芯片上，每个CPU允许控制2个控制流（线程）</p>\n</div>\n\n<h2 id=\"指令级并行\"><a href=\"#指令级并行\" class=\"headerlink\" title=\"指令级并行\"></a>指令级并行</h2><blockquote>\n<p>构建在较低的抽象层次上。</p>\n</blockquote>\n<div class=\"note info\"><p>现代处理器可以同时执行多条指令的属性称为指令级并行。</p>\n<ul>\n<li>1978年Intel8086，需要多个（通常是3~10个）时钟周期来执行一条指令。</li>\n<li>现代处理器可以达到每个时钟周期处理2~4条指令，但每个指令周转时间需要20个时钟周期或更长。主要是因为处理器使用了一些技巧可以同时处理多达100条指令。</li>\n</ul>\n</div>\n\n<h2 id=\"单指令、多数据并行\"><a href=\"#单指令、多数据并行\" class=\"headerlink\" title=\"单指令、多数据并行\"></a>单指令、多数据并行</h2><blockquote>\n<p>构建在最低层次上。</p>\n</blockquote>\n<div class=\"note info\"><p>许多现代处理器拥有特殊的硬件，允许一条指令产生多个可以并行的操作，这种方式称为单指令、多数据，即SIMD并行（Single Instruction Multiple Data）</p>\n<ul>\n<li>例如，较新的几代Intel和AMD处理器都具有并行地对8位点精度浮点数（C语言的float）做加法的指令</li>\n</ul>\n</div>\n\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本篇文章用于回顾（retrospect）和总结，避免遗忘。</p>"},{"title":"Reference & Pointer in C(PP)","mathjax":false,"copyright":true,"comment":true,"date":"2019-04-08T08:59:40.000Z","_content":"\n{% note info %}\n\n\"Reference & Pointer in C\" expressed in English.\n\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## Forword\n\nThe reason why I write this blog article is just to understand the reference and pointer completely.Let's have a look the underlying implementation of the reference and pointer.\n\n## Music\n> ***天净沙*** By **骆集益/周志华**\n\n<iframe frameborder=\"no\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=26344079&auto=1&height=66\"></iframe>\n\n## In one word\n\n{% note primary %}\n\nReference is the same as pointer in essence.Both are the address,and the differences between both are the using rules.\n\n{% endnote %}\n\n## Body\n\nThere are some situations:\n\n- Basic data type reference\n- Struct type reference\n- Class type reference\n- Class type pointer\n- About the segment\n\nWe will talk it in the above way.\n\n\n### 0x01 Basic data type reference\n\nThere are two programs in this situation.\n\n- Let's see the reference and pointer in underlying assembly code :-)\n\n![](c-reference-pointer/reference.png)\n\nIn this program,we can conclude these results:\n\n1. The local variables is saved in the address begining with `%rbp-0x24`(to increasing direction.).The `int` type variables cover 4 bytes and the `address` type variables cover 8 bytes.\n   1. Variable `a` is saved at `%rbp-0x24`\n   2. Variable `b` is saved at `%rbp-0x20`\n   3. Variable `c` is saved at `%rbp-0x18`\n   4. Variable `d` is saved at `%rbp-0x10` \n\n2. **The reference and the pointer both are address.**\n\n- Let's see the instance of reference in calling functions.\n\n![](c-reference-pointer/reference2.png)\n\nWe can conclude these results:\n\n1. Call-by-reference relays the parameters by their address.\n2. We have known that we can call by value.Of course,the address is also a value.Thus,we can think that there is only call-by-value.\n\n### 0x02 Struct type reference\n\nLet's talk about reference in struct type variables.\n\n![](c-reference-pointer/reference-struct.png)\n\nIn this program,we can conclude that:\n\n1. The variables defined in the way - `T a;` - are all saved in the stack frame.\n2. The reference of struct-type variables is also an address.\n\n### 0x03 Class type reference\n\nThe class-type instance is the same as the struct.\n\nIt's easy! You can jump it!\n\n![](c-reference-pointer/reference-class.png)\n\n### 0x04 Class type pointer\n\nLet's have a look at the instance defined by `new`:\n\n![](c-reference-pointer/reference-class-new.png)\n\nWe can conclude that the pointer is just the address points to the heap somewhere.Of course,the address in the heap is undefined,because it's dynamic and the assembly code is `objdump` by `gcc -c(Compile and assemble, but do not link)`\n\n### 0x05 About the segment\nIn the situation,I want to have a look at the global variables,but I don't find it in the assembly code.It's in the **data segment**!\n\n![](c-reference-pointer/reference.png)\n\nLet's retrospect the segment partition:\n\n![](c-reference-pointer/segment.jpg)\n\n\n\n## Conclusion\n\nIn the article,we explore the underlying assembly code of reference and pointer,and we review the segment partition.Hope you can get a lot.\n\nHave a nice day.\nBye!\n-:)\n\n","source":"_posts/c-reference-pointer.md","raw":"---\ntitle: Reference & Pointer in C(PP)\nmathjax: false\ncopyright: true\ncomment: true\ndate: 2019-04-08 16:59:40\ntags:\n- C\n- Express in English\ncategories:  \n- Back-End Development\n- C\n\n---\n\n{% note info %}\n\n\"Reference & Pointer in C\" expressed in English.\n\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## Forword\n\nThe reason why I write this blog article is just to understand the reference and pointer completely.Let's have a look the underlying implementation of the reference and pointer.\n\n## Music\n> ***天净沙*** By **骆集益/周志华**\n\n<iframe frameborder=\"no\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=26344079&auto=1&height=66\"></iframe>\n\n## In one word\n\n{% note primary %}\n\nReference is the same as pointer in essence.Both are the address,and the differences between both are the using rules.\n\n{% endnote %}\n\n## Body\n\nThere are some situations:\n\n- Basic data type reference\n- Struct type reference\n- Class type reference\n- Class type pointer\n- About the segment\n\nWe will talk it in the above way.\n\n\n### 0x01 Basic data type reference\n\nThere are two programs in this situation.\n\n- Let's see the reference and pointer in underlying assembly code :-)\n\n![](c-reference-pointer/reference.png)\n\nIn this program,we can conclude these results:\n\n1. The local variables is saved in the address begining with `%rbp-0x24`(to increasing direction.).The `int` type variables cover 4 bytes and the `address` type variables cover 8 bytes.\n   1. Variable `a` is saved at `%rbp-0x24`\n   2. Variable `b` is saved at `%rbp-0x20`\n   3. Variable `c` is saved at `%rbp-0x18`\n   4. Variable `d` is saved at `%rbp-0x10` \n\n2. **The reference and the pointer both are address.**\n\n- Let's see the instance of reference in calling functions.\n\n![](c-reference-pointer/reference2.png)\n\nWe can conclude these results:\n\n1. Call-by-reference relays the parameters by their address.\n2. We have known that we can call by value.Of course,the address is also a value.Thus,we can think that there is only call-by-value.\n\n### 0x02 Struct type reference\n\nLet's talk about reference in struct type variables.\n\n![](c-reference-pointer/reference-struct.png)\n\nIn this program,we can conclude that:\n\n1. The variables defined in the way - `T a;` - are all saved in the stack frame.\n2. The reference of struct-type variables is also an address.\n\n### 0x03 Class type reference\n\nThe class-type instance is the same as the struct.\n\nIt's easy! You can jump it!\n\n![](c-reference-pointer/reference-class.png)\n\n### 0x04 Class type pointer\n\nLet's have a look at the instance defined by `new`:\n\n![](c-reference-pointer/reference-class-new.png)\n\nWe can conclude that the pointer is just the address points to the heap somewhere.Of course,the address in the heap is undefined,because it's dynamic and the assembly code is `objdump` by `gcc -c(Compile and assemble, but do not link)`\n\n### 0x05 About the segment\nIn the situation,I want to have a look at the global variables,but I don't find it in the assembly code.It's in the **data segment**!\n\n![](c-reference-pointer/reference.png)\n\nLet's retrospect the segment partition:\n\n![](c-reference-pointer/segment.jpg)\n\n\n\n## Conclusion\n\nIn the article,we explore the underlying assembly code of reference and pointer,and we review the segment partition.Hope you can get a lot.\n\nHave a nice day.\nBye!\n-:)\n\n","slug":"c-reference-pointer","published":1,"updated":"2022-01-06T04:09:12.147Z","_id":"cksq5v7m4000jn0pu23545m9e","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note info\"><p>“Reference &amp; Pointer in C” expressed in English.</p>\n</div>\n\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"Forword\"><a href=\"#Forword\" class=\"headerlink\" title=\"Forword\"></a>Forword</h2><p>The reason why I write this blog article is just to understand the reference and pointer completely.Let’s have a look the underlying implementation of the reference and pointer.</p>\n<h2 id=\"Music\"><a href=\"#Music\" class=\"headerlink\" title=\"Music\"></a>Music</h2><blockquote>\n<p><em><strong>天净沙</strong></em> By <strong>骆集益/周志华</strong></p>\n</blockquote>\n<iframe frameborder=\"no\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=26344079&auto=1&height=66\"></iframe>\n\n<h2 id=\"In-one-word\"><a href=\"#In-one-word\" class=\"headerlink\" title=\"In one word\"></a>In one word</h2><div class=\"note primary\"><p>Reference is the same as pointer in essence.Both are the address,and the differences between both are the using rules.</p>\n</div>\n\n<h2 id=\"Body\"><a href=\"#Body\" class=\"headerlink\" title=\"Body\"></a>Body</h2><p>There are some situations:</p>\n<ul>\n<li>Basic data type reference</li>\n<li>Struct type reference</li>\n<li>Class type reference</li>\n<li>Class type pointer</li>\n<li>About the segment</li>\n</ul>\n<p>We will talk it in the above way.</p>\n<h3 id=\"0x01-Basic-data-type-reference\"><a href=\"#0x01-Basic-data-type-reference\" class=\"headerlink\" title=\"0x01 Basic data type reference\"></a>0x01 Basic data type reference</h3><p>There are two programs in this situation.</p>\n<ul>\n<li>Let’s see the reference and pointer in underlying assembly code :-)</li>\n</ul>\n<p><img data-src=\"c-reference-pointer/reference.png\"></p>\n<p>In this program,we can conclude these results:</p>\n<ol>\n<li><p>The local variables is saved in the address begining with <code>%rbp-0x24</code>(to increasing direction.).The <code>int</code> type variables cover 4 bytes and the <code>address</code> type variables cover 8 bytes.</p>\n<ol>\n<li>Variable <code>a</code> is saved at <code>%rbp-0x24</code></li>\n<li>Variable <code>b</code> is saved at <code>%rbp-0x20</code></li>\n<li>Variable <code>c</code> is saved at <code>%rbp-0x18</code></li>\n<li>Variable <code>d</code> is saved at <code>%rbp-0x10</code> </li>\n</ol>\n</li>\n<li><p><strong>The reference and the pointer both are address.</strong></p>\n</li>\n</ol>\n<ul>\n<li>Let’s see the instance of reference in calling functions.</li>\n</ul>\n<p><img data-src=\"c-reference-pointer/reference2.png\"></p>\n<p>We can conclude these results:</p>\n<ol>\n<li>Call-by-reference relays the parameters by their address.</li>\n<li>We have known that we can call by value.Of course,the address is also a value.Thus,we can think that there is only call-by-value.</li>\n</ol>\n<h3 id=\"0x02-Struct-type-reference\"><a href=\"#0x02-Struct-type-reference\" class=\"headerlink\" title=\"0x02 Struct type reference\"></a>0x02 Struct type reference</h3><p>Let’s talk about reference in struct type variables.</p>\n<p><img data-src=\"c-reference-pointer/reference-struct.png\"></p>\n<p>In this program,we can conclude that:</p>\n<ol>\n<li>The variables defined in the way - <code>T a;</code> - are all saved in the stack frame.</li>\n<li>The reference of struct-type variables is also an address.</li>\n</ol>\n<h3 id=\"0x03-Class-type-reference\"><a href=\"#0x03-Class-type-reference\" class=\"headerlink\" title=\"0x03 Class type reference\"></a>0x03 Class type reference</h3><p>The class-type instance is the same as the struct.</p>\n<p>It’s easy! You can jump it!</p>\n<p><img data-src=\"c-reference-pointer/reference-class.png\"></p>\n<h3 id=\"0x04-Class-type-pointer\"><a href=\"#0x04-Class-type-pointer\" class=\"headerlink\" title=\"0x04 Class type pointer\"></a>0x04 Class type pointer</h3><p>Let’s have a look at the instance defined by <code>new</code>:</p>\n<p><img data-src=\"c-reference-pointer/reference-class-new.png\"></p>\n<p>We can conclude that the pointer is just the address points to the heap somewhere.Of course,the address in the heap is undefined,because it’s dynamic and the assembly code is <code>objdump</code> by <code>gcc -c(Compile and assemble, but do not link)</code></p>\n<h3 id=\"0x05-About-the-segment\"><a href=\"#0x05-About-the-segment\" class=\"headerlink\" title=\"0x05 About the segment\"></a>0x05 About the segment</h3><p>In the situation,I want to have a look at the global variables,but I don’t find it in the assembly code.It’s in the <strong>data segment</strong>!</p>\n<p><img data-src=\"c-reference-pointer/reference.png\"></p>\n<p>Let’s retrospect the segment partition:</p>\n<p><img data-src=\"c-reference-pointer/segment.jpg\"></p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>In the article,we explore the underlying assembly code of reference and pointer,and we review the segment partition.Hope you can get a lot.</p>\n<p>Have a nice day.<br>Bye!<br>-:)</p>\n","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>“Reference &amp; Pointer in C” expressed in English.</p>\n</div>","more":"<hr>\n<h2 id=\"Forword\"><a href=\"#Forword\" class=\"headerlink\" title=\"Forword\"></a>Forword</h2><p>The reason why I write this blog article is just to understand the reference and pointer completely.Let’s have a look the underlying implementation of the reference and pointer.</p>\n<h2 id=\"Music\"><a href=\"#Music\" class=\"headerlink\" title=\"Music\"></a>Music</h2><blockquote>\n<p><em><strong>天净沙</strong></em> By <strong>骆集益/周志华</strong></p>\n</blockquote>\n<iframe frameborder=\"no\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=26344079&auto=1&height=66\"></iframe>\n\n<h2 id=\"In-one-word\"><a href=\"#In-one-word\" class=\"headerlink\" title=\"In one word\"></a>In one word</h2><div class=\"note primary\"><p>Reference is the same as pointer in essence.Both are the address,and the differences between both are the using rules.</p>\n</div>\n\n<h2 id=\"Body\"><a href=\"#Body\" class=\"headerlink\" title=\"Body\"></a>Body</h2><p>There are some situations:</p>\n<ul>\n<li>Basic data type reference</li>\n<li>Struct type reference</li>\n<li>Class type reference</li>\n<li>Class type pointer</li>\n<li>About the segment</li>\n</ul>\n<p>We will talk it in the above way.</p>\n<h3 id=\"0x01-Basic-data-type-reference\"><a href=\"#0x01-Basic-data-type-reference\" class=\"headerlink\" title=\"0x01 Basic data type reference\"></a>0x01 Basic data type reference</h3><p>There are two programs in this situation.</p>\n<ul>\n<li>Let’s see the reference and pointer in underlying assembly code :-)</li>\n</ul>\n<p><img data-src=\"c-reference-pointer/reference.png\"></p>\n<p>In this program,we can conclude these results:</p>\n<ol>\n<li><p>The local variables is saved in the address begining with <code>%rbp-0x24</code>(to increasing direction.).The <code>int</code> type variables cover 4 bytes and the <code>address</code> type variables cover 8 bytes.</p>\n<ol>\n<li>Variable <code>a</code> is saved at <code>%rbp-0x24</code></li>\n<li>Variable <code>b</code> is saved at <code>%rbp-0x20</code></li>\n<li>Variable <code>c</code> is saved at <code>%rbp-0x18</code></li>\n<li>Variable <code>d</code> is saved at <code>%rbp-0x10</code> </li>\n</ol>\n</li>\n<li><p><strong>The reference and the pointer both are address.</strong></p>\n</li>\n</ol>\n<ul>\n<li>Let’s see the instance of reference in calling functions.</li>\n</ul>\n<p><img data-src=\"c-reference-pointer/reference2.png\"></p>\n<p>We can conclude these results:</p>\n<ol>\n<li>Call-by-reference relays the parameters by their address.</li>\n<li>We have known that we can call by value.Of course,the address is also a value.Thus,we can think that there is only call-by-value.</li>\n</ol>\n<h3 id=\"0x02-Struct-type-reference\"><a href=\"#0x02-Struct-type-reference\" class=\"headerlink\" title=\"0x02 Struct type reference\"></a>0x02 Struct type reference</h3><p>Let’s talk about reference in struct type variables.</p>\n<p><img data-src=\"c-reference-pointer/reference-struct.png\"></p>\n<p>In this program,we can conclude that:</p>\n<ol>\n<li>The variables defined in the way - <code>T a;</code> - are all saved in the stack frame.</li>\n<li>The reference of struct-type variables is also an address.</li>\n</ol>\n<h3 id=\"0x03-Class-type-reference\"><a href=\"#0x03-Class-type-reference\" class=\"headerlink\" title=\"0x03 Class type reference\"></a>0x03 Class type reference</h3><p>The class-type instance is the same as the struct.</p>\n<p>It’s easy! You can jump it!</p>\n<p><img data-src=\"c-reference-pointer/reference-class.png\"></p>\n<h3 id=\"0x04-Class-type-pointer\"><a href=\"#0x04-Class-type-pointer\" class=\"headerlink\" title=\"0x04 Class type pointer\"></a>0x04 Class type pointer</h3><p>Let’s have a look at the instance defined by <code>new</code>:</p>\n<p><img data-src=\"c-reference-pointer/reference-class-new.png\"></p>\n<p>We can conclude that the pointer is just the address points to the heap somewhere.Of course,the address in the heap is undefined,because it’s dynamic and the assembly code is <code>objdump</code> by <code>gcc -c(Compile and assemble, but do not link)</code></p>\n<h3 id=\"0x05-About-the-segment\"><a href=\"#0x05-About-the-segment\" class=\"headerlink\" title=\"0x05 About the segment\"></a>0x05 About the segment</h3><p>In the situation,I want to have a look at the global variables,but I don’t find it in the assembly code.It’s in the <strong>data segment</strong>!</p>\n<p><img data-src=\"c-reference-pointer/reference.png\"></p>\n<p>Let’s retrospect the segment partition:</p>\n<p><img data-src=\"c-reference-pointer/segment.jpg\"></p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>In the article,we explore the underlying assembly code of reference and pointer,and we review the segment partition.Hope you can get a lot.</p>\n<p>Have a nice day.<br>Bye!<br>-:)</p>"},{"title":"CSAPP 之 Attack Lab","mathjax":false,"copyright":true,"comment":true,"date":"2019-03-26T13:09:14.000Z","_content":"\n{% note primary %}\n《深入理解计算机系统》之Attack Lab。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 前言\n\n开始第三个实验——Attack Lab了！本次试验还是基于第三章《程序的机器级表示》。\n\n## 先来首歌Relax一下\n\n比较好听的一首古风歌，与《霓裳羽衣曲》一字之差。唐朝诗人白居易在元和年间见到当时宫廷里表演的《霓裳羽衣曲》时，舞者“不著人家俗衣服。虹裳霞帔步摇冠，钿缨累累佩珊珊。”此曲此词皆有其意境。\n\n<iframe frameborder=\"no\"  marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=1295233186&auto=1&height=66\"></iframe>\n\n## CSAPP 实验记录\n\n{% note info %}\n\n**[本系列文章](/tags/CSAPP-Lab/)主要记录 CSAPP 3.0 的实验过程，所有实验记录文章请查看[这儿](/tags/CSAPP-Lab/)**\n{% endnote %}\n\n\n快速开始请访问 `CSAPP` [Lab](http://csapp.cs.cmu.edu/3e/labs.html) 官网，本次实验记录是基于 CSAPP 3.0，实验日期始于：`2019-3-25`\n\n\n## 实验开始前的归纳\n\n\n## Attack Lab\n\nAttack分为两个部分，代码注入攻击和ROP（Return-Oriented Program）攻击，分别要对**Ctarget**程序和**Rtarget**程序进行攻击。\n\n### Ctarget\n\n针对于Ctarget程序的攻击，思路都是一样的：利用buffer溢出。首先利用buffer溢出修改callee的ret的返回位置，然后在ret位置可以注入代码进行操作，说的时髦一点就是攻击。\n\n#### 如何操作\n\n每做一个实验就需要熟悉具体的操作流程，虽然比较浪费时间，但是这确实能够增加我们的视野，而且能让我们了解许多知识，比如：\n\n- 字节序，intel的字节序是小端法\n- 代码注入不能为输入字符串的ASCII码，而是需要通过hex2raw方法输入原始字节序列\n\n方式：\n1. 通过**objdump**或者**gdb**确定一些需要的值，比如说**rsp**的值或者是某个函数的位置。\n2. 编写注入代码，并用**gcc**汇编，用**objdump**获取指令及其编码\n3. 将这些编码通过**hex2raw**输出为原始字节序\n\n#### # Phase1\n\n{% note primary %}\n**目标：注入代码调用touch1函数。**\n{% endnote %}\n\n第一个，只是练手的，take it easy...\n\n![](csapp-lab-3/phrase1.png)\n\n根据给出的test函数和touch1函数的代码，我们可以看出test函数并没有调用touch1函数，而是只调用了一个getbuf函数，这个函数就是获取输入的内容的，而getbuf函数允许最大输入0x28（十进制40）个字节。那么思路很明显了，只需要利用buffer溢出，修改ret的值就好了（因为栈内buffer的下面就是ret的返回地址了）。也就是说只需要输入40个字节任意字符+touch1的地址就好了。\n\n结果如下：\n![](csapp-lab-3/phrase1-success.png)\n\n#### # Phase2\n\n\n{% note primary %}\n**目标：注入代码传参并调用touch2函数。**\n{% endnote %}\n\n这个相对于第一个来说复杂了一点，要求你将cookie.txt文件里面的数值0x59b997fa作为参数调用touch2函数。\n\n对于第一个phrase只需要直接输入字符串就行了，而第二个需要注入原始字节序代码了。\n\n先说一下思路，因为需要传递参数，只需要传递一个，那就需要修改 **%rdi**寄存器的值，要想修改就必须用指令实现。我们需要做的就是写代码，注入，让程序跳转到我们注入代码的地方。\n\n具体一点，思路如下：\n\n因为一开始获取输入的都是getbuf函数，这一点和phrase1相同，这说明buffersize没变。所以我们还需要输入40个字节的字符和返回地址。我们要做的就是将返回地址修改为我们注入代码的地方，记为**addr**，我们需要将注入的代码放到哪里呢？buffer里完全够用，如果放到其他地方反而有可能造成segmentfault。从buffer首地址，也就是caller——getbuf函数一开始的rsp值开始注入我们的代码，这个rsp值也是我们需要跳转的值**addr**。\n\n我们注入的代码有什么用？\n- 修改 **%rdi**的值为0x59b997fa\n- 控制交给touch2，因为不能用jmp和call，所以只能用ret来实现。\n\n\n\n\n注入代码如下：\n\n![](csapp-lab-3/phrase2-insert.png)\n\n然后需要做的事就是将这段汇编代码用`gcc -c xxx`来汇编，并用`objdump -d xxx`来查看汇编指令对应的字节序列了（如上图）。\n得到字节序列之后还需要将他和buffer的其他部分还有我们注入代码的首地址放入。然后通过hex2raw程序将其按照原始字节序列输入。\n\n结束！运行结果如下：\n\n![](csapp-lab-3/phrase2-success.png)\n\n\n\n#### # Phase3\n\n{% note primary %}\n**目标：注入固定字符串ASCII码序列并传首地址作为参数然后调用touch3函数。**\n{% endnote %}\n\n第三个和第二个差不多，只不过多了一点坑，同样是传递参数，只不过需要传一个字符串，而字符串需要自己保存，而且还有可能函数调用的过程中被其他数据覆盖。\n\n我们先来思考一下需要哪些数据吧：\n\n- cookie十六进制数的ASCII码值\n- getbuf申请内存后的rsp值\n- 要存取ASCII码序列的地址\n- touch3地址\n\n其他的都好确定，存取ASCII码序列的地址无法确定，有可能你第一次尝试是错误的。主要是因为touch函数调用了hexmatch函数，而这个函数对缓冲区进行了修改。\n\n截了一下图。\n\n\n\n**执行hexmatch函数前：**\n\n![](csapp-lab-3/phrase3-rsp-old.png)\n\n**执行hexmatch函数后：**\n\n![](csapp-lab-3/phrase3-rsp-new.png)\n\n\n\n我们发现第三行（0x5561dc98）之前的大多数都被修改了，所以我们要把数据继续放到栈的更底部位置。也就是从0x5561dca4之后的位置开始。那就简单了。\n\n\n\n展示一下栈结构：\n\n![1553868529136](csapp-lab-3\\1553868529136.png)\n\n\n\n完事！\n\n![](csapp-lab-3/phrase3-success.png)\n\n\n\n### Rtarget\n\n下面开始ROP攻击，虽然需要利用buffer溢出来攻击，但是和代码注入攻击不同的是栈内的数据会不能当做指令来执行。所以需要使用一些程序中已经存在的代码区域的gadgets小工具来拼凑自己想要的指令序列。\n\n#### # Phase4\n\n第一弹，还是执行完getbuf函数就去执行touch2而不返回test函数。\n\n\n\n{% note primary %}\n**目标：利用gadget传参并调用touch2函数。**\n{% endnote %}\n\n​\t\n\n因为无法执行栈中的指令，所以只能通过已有代码来拼凑，那要拼凑成什么，首先还是看数据：\n\n- cookie值\n\n- touch2地址\n\n\n\n  我们需要将cookie值传入rdi寄存器中，而cookie值只能通过输入保存到栈中，所以可以通过gadget根据指令编码找到一个pop命令pop到rdi中。但是遗憾的是farm前半部分并没有找到这个命令，所以我们只能另寻他法。最后我们可以通过pop先pop到rax中，然后使用mov命令将rax的值传入rdi中。\n\n\n\n  我用到的是这两个gadget：一个包含`pop %rax`命令，一个包含`mov %rax,%rdi`命令。\n\n  ![1553869869465](csapp-lab-3\\1553869869465.png)\n\n\n\n  好了rdi中已经存储的cookie值了，下一步就是跳转到touch2了。\n\n  怎么跳转？很简单，如果此时栈顶的元素是touch2的地址，并且接下来执行一条ret指令就OK了。\n\n所以说很简单了，栈结构如下：\n\n因为无法执行栈内代码，所以buffer合法部分已经没用了。\n\n![1553870526705](csapp-lab-3\\1553870526705.png)\n\n\n\n\n\n#### # Phase5\n\n选做等于不做，好吧，是自己太菜了。到此为止95′已经到手，没必要争这5′了。了解一下内存栈的模型和这两种攻击手段就好了。\n\n## 总结\n\n本次实验整体提升不是很大，不过了解了两种攻击手段。\n\n### 所感\n\n- 自己还有些浮躁，有时静不下心来。\n- 自己不应该有太多空闲时间，不然无所事事。\n- 英语专业阅读水平有了一定的提高\n\n### 所得\n\n- 进一步了解了栈帧结构\n- 了解了代码注入和ROP两种攻击手段，虽然现在已经很难适用了。\n\n### 下一步\n\n- 养成阅读英语书籍和文档的习惯\n- 做好日常规划\n\n","source":"_posts/csapp-lab-3.md","raw":"---\ntitle: CSAPP 之 Attack Lab\nmathjax: false\ncopyright: true\ncomment: true\ndate: 2019-03-26 21:09:14\ntags:\n- Operating System\n- CSAPP\n- CSAPP Lab\ncategories:\n- Computer Science\n- Operating System\n\n---\n\n{% note primary %}\n《深入理解计算机系统》之Attack Lab。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 前言\n\n开始第三个实验——Attack Lab了！本次试验还是基于第三章《程序的机器级表示》。\n\n## 先来首歌Relax一下\n\n比较好听的一首古风歌，与《霓裳羽衣曲》一字之差。唐朝诗人白居易在元和年间见到当时宫廷里表演的《霓裳羽衣曲》时，舞者“不著人家俗衣服。虹裳霞帔步摇冠，钿缨累累佩珊珊。”此曲此词皆有其意境。\n\n<iframe frameborder=\"no\"  marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=1295233186&auto=1&height=66\"></iframe>\n\n## CSAPP 实验记录\n\n{% note info %}\n\n**[本系列文章](/tags/CSAPP-Lab/)主要记录 CSAPP 3.0 的实验过程，所有实验记录文章请查看[这儿](/tags/CSAPP-Lab/)**\n{% endnote %}\n\n\n快速开始请访问 `CSAPP` [Lab](http://csapp.cs.cmu.edu/3e/labs.html) 官网，本次实验记录是基于 CSAPP 3.0，实验日期始于：`2019-3-25`\n\n\n## 实验开始前的归纳\n\n\n## Attack Lab\n\nAttack分为两个部分，代码注入攻击和ROP（Return-Oriented Program）攻击，分别要对**Ctarget**程序和**Rtarget**程序进行攻击。\n\n### Ctarget\n\n针对于Ctarget程序的攻击，思路都是一样的：利用buffer溢出。首先利用buffer溢出修改callee的ret的返回位置，然后在ret位置可以注入代码进行操作，说的时髦一点就是攻击。\n\n#### 如何操作\n\n每做一个实验就需要熟悉具体的操作流程，虽然比较浪费时间，但是这确实能够增加我们的视野，而且能让我们了解许多知识，比如：\n\n- 字节序，intel的字节序是小端法\n- 代码注入不能为输入字符串的ASCII码，而是需要通过hex2raw方法输入原始字节序列\n\n方式：\n1. 通过**objdump**或者**gdb**确定一些需要的值，比如说**rsp**的值或者是某个函数的位置。\n2. 编写注入代码，并用**gcc**汇编，用**objdump**获取指令及其编码\n3. 将这些编码通过**hex2raw**输出为原始字节序\n\n#### # Phase1\n\n{% note primary %}\n**目标：注入代码调用touch1函数。**\n{% endnote %}\n\n第一个，只是练手的，take it easy...\n\n![](csapp-lab-3/phrase1.png)\n\n根据给出的test函数和touch1函数的代码，我们可以看出test函数并没有调用touch1函数，而是只调用了一个getbuf函数，这个函数就是获取输入的内容的，而getbuf函数允许最大输入0x28（十进制40）个字节。那么思路很明显了，只需要利用buffer溢出，修改ret的值就好了（因为栈内buffer的下面就是ret的返回地址了）。也就是说只需要输入40个字节任意字符+touch1的地址就好了。\n\n结果如下：\n![](csapp-lab-3/phrase1-success.png)\n\n#### # Phase2\n\n\n{% note primary %}\n**目标：注入代码传参并调用touch2函数。**\n{% endnote %}\n\n这个相对于第一个来说复杂了一点，要求你将cookie.txt文件里面的数值0x59b997fa作为参数调用touch2函数。\n\n对于第一个phrase只需要直接输入字符串就行了，而第二个需要注入原始字节序代码了。\n\n先说一下思路，因为需要传递参数，只需要传递一个，那就需要修改 **%rdi**寄存器的值，要想修改就必须用指令实现。我们需要做的就是写代码，注入，让程序跳转到我们注入代码的地方。\n\n具体一点，思路如下：\n\n因为一开始获取输入的都是getbuf函数，这一点和phrase1相同，这说明buffersize没变。所以我们还需要输入40个字节的字符和返回地址。我们要做的就是将返回地址修改为我们注入代码的地方，记为**addr**，我们需要将注入的代码放到哪里呢？buffer里完全够用，如果放到其他地方反而有可能造成segmentfault。从buffer首地址，也就是caller——getbuf函数一开始的rsp值开始注入我们的代码，这个rsp值也是我们需要跳转的值**addr**。\n\n我们注入的代码有什么用？\n- 修改 **%rdi**的值为0x59b997fa\n- 控制交给touch2，因为不能用jmp和call，所以只能用ret来实现。\n\n\n\n\n注入代码如下：\n\n![](csapp-lab-3/phrase2-insert.png)\n\n然后需要做的事就是将这段汇编代码用`gcc -c xxx`来汇编，并用`objdump -d xxx`来查看汇编指令对应的字节序列了（如上图）。\n得到字节序列之后还需要将他和buffer的其他部分还有我们注入代码的首地址放入。然后通过hex2raw程序将其按照原始字节序列输入。\n\n结束！运行结果如下：\n\n![](csapp-lab-3/phrase2-success.png)\n\n\n\n#### # Phase3\n\n{% note primary %}\n**目标：注入固定字符串ASCII码序列并传首地址作为参数然后调用touch3函数。**\n{% endnote %}\n\n第三个和第二个差不多，只不过多了一点坑，同样是传递参数，只不过需要传一个字符串，而字符串需要自己保存，而且还有可能函数调用的过程中被其他数据覆盖。\n\n我们先来思考一下需要哪些数据吧：\n\n- cookie十六进制数的ASCII码值\n- getbuf申请内存后的rsp值\n- 要存取ASCII码序列的地址\n- touch3地址\n\n其他的都好确定，存取ASCII码序列的地址无法确定，有可能你第一次尝试是错误的。主要是因为touch函数调用了hexmatch函数，而这个函数对缓冲区进行了修改。\n\n截了一下图。\n\n\n\n**执行hexmatch函数前：**\n\n![](csapp-lab-3/phrase3-rsp-old.png)\n\n**执行hexmatch函数后：**\n\n![](csapp-lab-3/phrase3-rsp-new.png)\n\n\n\n我们发现第三行（0x5561dc98）之前的大多数都被修改了，所以我们要把数据继续放到栈的更底部位置。也就是从0x5561dca4之后的位置开始。那就简单了。\n\n\n\n展示一下栈结构：\n\n![1553868529136](csapp-lab-3\\1553868529136.png)\n\n\n\n完事！\n\n![](csapp-lab-3/phrase3-success.png)\n\n\n\n### Rtarget\n\n下面开始ROP攻击，虽然需要利用buffer溢出来攻击，但是和代码注入攻击不同的是栈内的数据会不能当做指令来执行。所以需要使用一些程序中已经存在的代码区域的gadgets小工具来拼凑自己想要的指令序列。\n\n#### # Phase4\n\n第一弹，还是执行完getbuf函数就去执行touch2而不返回test函数。\n\n\n\n{% note primary %}\n**目标：利用gadget传参并调用touch2函数。**\n{% endnote %}\n\n​\t\n\n因为无法执行栈中的指令，所以只能通过已有代码来拼凑，那要拼凑成什么，首先还是看数据：\n\n- cookie值\n\n- touch2地址\n\n\n\n  我们需要将cookie值传入rdi寄存器中，而cookie值只能通过输入保存到栈中，所以可以通过gadget根据指令编码找到一个pop命令pop到rdi中。但是遗憾的是farm前半部分并没有找到这个命令，所以我们只能另寻他法。最后我们可以通过pop先pop到rax中，然后使用mov命令将rax的值传入rdi中。\n\n\n\n  我用到的是这两个gadget：一个包含`pop %rax`命令，一个包含`mov %rax,%rdi`命令。\n\n  ![1553869869465](csapp-lab-3\\1553869869465.png)\n\n\n\n  好了rdi中已经存储的cookie值了，下一步就是跳转到touch2了。\n\n  怎么跳转？很简单，如果此时栈顶的元素是touch2的地址，并且接下来执行一条ret指令就OK了。\n\n所以说很简单了，栈结构如下：\n\n因为无法执行栈内代码，所以buffer合法部分已经没用了。\n\n![1553870526705](csapp-lab-3\\1553870526705.png)\n\n\n\n\n\n#### # Phase5\n\n选做等于不做，好吧，是自己太菜了。到此为止95′已经到手，没必要争这5′了。了解一下内存栈的模型和这两种攻击手段就好了。\n\n## 总结\n\n本次实验整体提升不是很大，不过了解了两种攻击手段。\n\n### 所感\n\n- 自己还有些浮躁，有时静不下心来。\n- 自己不应该有太多空闲时间，不然无所事事。\n- 英语专业阅读水平有了一定的提高\n\n### 所得\n\n- 进一步了解了栈帧结构\n- 了解了代码注入和ROP两种攻击手段，虽然现在已经很难适用了。\n\n### 下一步\n\n- 养成阅读英语书籍和文档的习惯\n- 做好日常规划\n\n","slug":"csapp-lab-3","published":1,"updated":"2022-01-06T04:09:12.214Z","_id":"cksq5v7m6000on0pu929c7htr","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note primary\"><p>《深入理解计算机系统》之Attack Lab。</p>\n</div>\n\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>开始第三个实验——Attack Lab了！本次试验还是基于第三章《程序的机器级表示》。</p>\n<h2 id=\"先来首歌Relax一下\"><a href=\"#先来首歌Relax一下\" class=\"headerlink\" title=\"先来首歌Relax一下\"></a>先来首歌Relax一下</h2><p>比较好听的一首古风歌，与《霓裳羽衣曲》一字之差。唐朝诗人白居易在元和年间见到当时宫廷里表演的《霓裳羽衣曲》时，舞者“不著人家俗衣服。虹裳霞帔步摇冠，钿缨累累佩珊珊。”此曲此词皆有其意境。</p>\n<iframe frameborder=\"no\"  marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=1295233186&auto=1&height=66\"></iframe>\n\n<h2 id=\"CSAPP-实验记录\"><a href=\"#CSAPP-实验记录\" class=\"headerlink\" title=\"CSAPP 实验记录\"></a>CSAPP 实验记录</h2><div class=\"note info\"><p><strong><a href=\"/tags/CSAPP-Lab/\">本系列文章</a>主要记录 CSAPP 3.0 的实验过程，所有实验记录文章请查看<a href=\"/tags/CSAPP-Lab/\">这儿</a></strong></p>\n</div>\n\n\n<p>快速开始请访问 <code>CSAPP</code> <a href=\"http://csapp.cs.cmu.edu/3e/labs.html\">Lab</a> 官网，本次实验记录是基于 CSAPP 3.0，实验日期始于：<code>2019-3-25</code></p>\n<h2 id=\"实验开始前的归纳\"><a href=\"#实验开始前的归纳\" class=\"headerlink\" title=\"实验开始前的归纳\"></a>实验开始前的归纳</h2><h2 id=\"Attack-Lab\"><a href=\"#Attack-Lab\" class=\"headerlink\" title=\"Attack Lab\"></a>Attack Lab</h2><p>Attack分为两个部分，代码注入攻击和ROP（Return-Oriented Program）攻击，分别要对<strong>Ctarget</strong>程序和<strong>Rtarget</strong>程序进行攻击。</p>\n<h3 id=\"Ctarget\"><a href=\"#Ctarget\" class=\"headerlink\" title=\"Ctarget\"></a>Ctarget</h3><p>针对于Ctarget程序的攻击，思路都是一样的：利用buffer溢出。首先利用buffer溢出修改callee的ret的返回位置，然后在ret位置可以注入代码进行操作，说的时髦一点就是攻击。</p>\n<h4 id=\"如何操作\"><a href=\"#如何操作\" class=\"headerlink\" title=\"如何操作\"></a>如何操作</h4><p>每做一个实验就需要熟悉具体的操作流程，虽然比较浪费时间，但是这确实能够增加我们的视野，而且能让我们了解许多知识，比如：</p>\n<ul>\n<li>字节序，intel的字节序是小端法</li>\n<li>代码注入不能为输入字符串的ASCII码，而是需要通过hex2raw方法输入原始字节序列</li>\n</ul>\n<p>方式：</p>\n<ol>\n<li>通过<strong>objdump</strong>或者<strong>gdb</strong>确定一些需要的值，比如说<strong>rsp</strong>的值或者是某个函数的位置。</li>\n<li>编写注入代码，并用<strong>gcc</strong>汇编，用<strong>objdump</strong>获取指令及其编码</li>\n<li>将这些编码通过<strong>hex2raw</strong>输出为原始字节序</li>\n</ol>\n<h4 id=\"Phase1\"><a href=\"#Phase1\" class=\"headerlink\" title=\"# Phase1\"></a># Phase1</h4><div class=\"note primary\"><p><strong>目标：注入代码调用touch1函数。</strong></p>\n</div>\n\n<p>第一个，只是练手的，take it easy…</p>\n<p><img data-src=\"csapp-lab-3/phrase1.png\"></p>\n<p>根据给出的test函数和touch1函数的代码，我们可以看出test函数并没有调用touch1函数，而是只调用了一个getbuf函数，这个函数就是获取输入的内容的，而getbuf函数允许最大输入0x28（十进制40）个字节。那么思路很明显了，只需要利用buffer溢出，修改ret的值就好了（因为栈内buffer的下面就是ret的返回地址了）。也就是说只需要输入40个字节任意字符+touch1的地址就好了。</p>\n<p>结果如下：<br><img data-src=\"csapp-lab-3/phrase1-success.png\"></p>\n<h4 id=\"Phase2\"><a href=\"#Phase2\" class=\"headerlink\" title=\"# Phase2\"></a># Phase2</h4><div class=\"note primary\"><p><strong>目标：注入代码传参并调用touch2函数。</strong></p>\n</div>\n\n<p>这个相对于第一个来说复杂了一点，要求你将cookie.txt文件里面的数值0x59b997fa作为参数调用touch2函数。</p>\n<p>对于第一个phrase只需要直接输入字符串就行了，而第二个需要注入原始字节序代码了。</p>\n<p>先说一下思路，因为需要传递参数，只需要传递一个，那就需要修改 <strong>%rdi</strong>寄存器的值，要想修改就必须用指令实现。我们需要做的就是写代码，注入，让程序跳转到我们注入代码的地方。</p>\n<p>具体一点，思路如下：</p>\n<p>因为一开始获取输入的都是getbuf函数，这一点和phrase1相同，这说明buffersize没变。所以我们还需要输入40个字节的字符和返回地址。我们要做的就是将返回地址修改为我们注入代码的地方，记为<strong>addr</strong>，我们需要将注入的代码放到哪里呢？buffer里完全够用，如果放到其他地方反而有可能造成segmentfault。从buffer首地址，也就是caller——getbuf函数一开始的rsp值开始注入我们的代码，这个rsp值也是我们需要跳转的值<strong>addr</strong>。</p>\n<p>我们注入的代码有什么用？</p>\n<ul>\n<li>修改 <strong>%rdi</strong>的值为0x59b997fa</li>\n<li>控制交给touch2，因为不能用jmp和call，所以只能用ret来实现。</li>\n</ul>\n<p>注入代码如下：</p>\n<p><img data-src=\"csapp-lab-3/phrase2-insert.png\"></p>\n<p>然后需要做的事就是将这段汇编代码用<code>gcc -c xxx</code>来汇编，并用<code>objdump -d xxx</code>来查看汇编指令对应的字节序列了（如上图）。<br>得到字节序列之后还需要将他和buffer的其他部分还有我们注入代码的首地址放入。然后通过hex2raw程序将其按照原始字节序列输入。</p>\n<p>结束！运行结果如下：</p>\n<p><img data-src=\"csapp-lab-3/phrase2-success.png\"></p>\n<h4 id=\"Phase3\"><a href=\"#Phase3\" class=\"headerlink\" title=\"# Phase3\"></a># Phase3</h4><div class=\"note primary\"><p><strong>目标：注入固定字符串ASCII码序列并传首地址作为参数然后调用touch3函数。</strong></p>\n</div>\n\n<p>第三个和第二个差不多，只不过多了一点坑，同样是传递参数，只不过需要传一个字符串，而字符串需要自己保存，而且还有可能函数调用的过程中被其他数据覆盖。</p>\n<p>我们先来思考一下需要哪些数据吧：</p>\n<ul>\n<li>cookie十六进制数的ASCII码值</li>\n<li>getbuf申请内存后的rsp值</li>\n<li>要存取ASCII码序列的地址</li>\n<li>touch3地址</li>\n</ul>\n<p>其他的都好确定，存取ASCII码序列的地址无法确定，有可能你第一次尝试是错误的。主要是因为touch函数调用了hexmatch函数，而这个函数对缓冲区进行了修改。</p>\n<p>截了一下图。</p>\n<p><strong>执行hexmatch函数前：</strong></p>\n<p><img data-src=\"csapp-lab-3/phrase3-rsp-old.png\"></p>\n<p><strong>执行hexmatch函数后：</strong></p>\n<p><img data-src=\"csapp-lab-3/phrase3-rsp-new.png\"></p>\n<p>我们发现第三行（0x5561dc98）之前的大多数都被修改了，所以我们要把数据继续放到栈的更底部位置。也就是从0x5561dca4之后的位置开始。那就简单了。</p>\n<p>展示一下栈结构：</p>\n<p><img data-src=\"csapp-lab-3%5C1553868529136.png\" alt=\"1553868529136\"></p>\n<p>完事！</p>\n<p><img data-src=\"csapp-lab-3/phrase3-success.png\"></p>\n<h3 id=\"Rtarget\"><a href=\"#Rtarget\" class=\"headerlink\" title=\"Rtarget\"></a>Rtarget</h3><p>下面开始ROP攻击，虽然需要利用buffer溢出来攻击，但是和代码注入攻击不同的是栈内的数据会不能当做指令来执行。所以需要使用一些程序中已经存在的代码区域的gadgets小工具来拼凑自己想要的指令序列。</p>\n<h4 id=\"Phase4\"><a href=\"#Phase4\" class=\"headerlink\" title=\"# Phase4\"></a># Phase4</h4><p>第一弹，还是执行完getbuf函数就去执行touch2而不返回test函数。</p>\n<div class=\"note primary\"><p><strong>目标：利用gadget传参并调用touch2函数。</strong></p>\n</div>\n\n<p>​    </p>\n<p>因为无法执行栈中的指令，所以只能通过已有代码来拼凑，那要拼凑成什么，首先还是看数据：</p>\n<ul>\n<li><p>cookie值</p>\n</li>\n<li><p>touch2地址</p>\n</li>\n</ul>\n<p>  我们需要将cookie值传入rdi寄存器中，而cookie值只能通过输入保存到栈中，所以可以通过gadget根据指令编码找到一个pop命令pop到rdi中。但是遗憾的是farm前半部分并没有找到这个命令，所以我们只能另寻他法。最后我们可以通过pop先pop到rax中，然后使用mov命令将rax的值传入rdi中。</p>\n<p>  我用到的是这两个gadget：一个包含<code>pop %rax</code>命令，一个包含<code>mov %rax,%rdi</code>命令。</p>\n<p>  <img data-src=\"csapp-lab-3%5C1553869869465.png\" alt=\"1553869869465\"></p>\n<p>  好了rdi中已经存储的cookie值了，下一步就是跳转到touch2了。</p>\n<p>  怎么跳转？很简单，如果此时栈顶的元素是touch2的地址，并且接下来执行一条ret指令就OK了。</p>\n<p>所以说很简单了，栈结构如下：</p>\n<p>因为无法执行栈内代码，所以buffer合法部分已经没用了。</p>\n<p><img data-src=\"csapp-lab-3%5C1553870526705.png\" alt=\"1553870526705\"></p>\n<h4 id=\"Phase5\"><a href=\"#Phase5\" class=\"headerlink\" title=\"# Phase5\"></a># Phase5</h4><p>选做等于不做，好吧，是自己太菜了。到此为止95′已经到手，没必要争这5′了。了解一下内存栈的模型和这两种攻击手段就好了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本次实验整体提升不是很大，不过了解了两种攻击手段。</p>\n<h3 id=\"所感\"><a href=\"#所感\" class=\"headerlink\" title=\"所感\"></a>所感</h3><ul>\n<li>自己还有些浮躁，有时静不下心来。</li>\n<li>自己不应该有太多空闲时间，不然无所事事。</li>\n<li>英语专业阅读水平有了一定的提高</li>\n</ul>\n<h3 id=\"所得\"><a href=\"#所得\" class=\"headerlink\" title=\"所得\"></a>所得</h3><ul>\n<li>进一步了解了栈帧结构</li>\n<li>了解了代码注入和ROP两种攻击手段，虽然现在已经很难适用了。</li>\n</ul>\n<h3 id=\"下一步\"><a href=\"#下一步\" class=\"headerlink\" title=\"下一步\"></a>下一步</h3><ul>\n<li>养成阅读英语书籍和文档的习惯</li>\n<li>做好日常规划</li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note primary\"><p>《深入理解计算机系统》之Attack Lab。</p>\n</div>","more":"<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>开始第三个实验——Attack Lab了！本次试验还是基于第三章《程序的机器级表示》。</p>\n<h2 id=\"先来首歌Relax一下\"><a href=\"#先来首歌Relax一下\" class=\"headerlink\" title=\"先来首歌Relax一下\"></a>先来首歌Relax一下</h2><p>比较好听的一首古风歌，与《霓裳羽衣曲》一字之差。唐朝诗人白居易在元和年间见到当时宫廷里表演的《霓裳羽衣曲》时，舞者“不著人家俗衣服。虹裳霞帔步摇冠，钿缨累累佩珊珊。”此曲此词皆有其意境。</p>\n<iframe frameborder=\"no\"  marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=1295233186&auto=1&height=66\"></iframe>\n\n<h2 id=\"CSAPP-实验记录\"><a href=\"#CSAPP-实验记录\" class=\"headerlink\" title=\"CSAPP 实验记录\"></a>CSAPP 实验记录</h2><div class=\"note info\"><p><strong><a href=\"/tags/CSAPP-Lab/\">本系列文章</a>主要记录 CSAPP 3.0 的实验过程，所有实验记录文章请查看<a href=\"/tags/CSAPP-Lab/\">这儿</a></strong></p>\n</div>\n\n\n<p>快速开始请访问 <code>CSAPP</code> <a href=\"http://csapp.cs.cmu.edu/3e/labs.html\">Lab</a> 官网，本次实验记录是基于 CSAPP 3.0，实验日期始于：<code>2019-3-25</code></p>\n<h2 id=\"实验开始前的归纳\"><a href=\"#实验开始前的归纳\" class=\"headerlink\" title=\"实验开始前的归纳\"></a>实验开始前的归纳</h2><h2 id=\"Attack-Lab\"><a href=\"#Attack-Lab\" class=\"headerlink\" title=\"Attack Lab\"></a>Attack Lab</h2><p>Attack分为两个部分，代码注入攻击和ROP（Return-Oriented Program）攻击，分别要对<strong>Ctarget</strong>程序和<strong>Rtarget</strong>程序进行攻击。</p>\n<h3 id=\"Ctarget\"><a href=\"#Ctarget\" class=\"headerlink\" title=\"Ctarget\"></a>Ctarget</h3><p>针对于Ctarget程序的攻击，思路都是一样的：利用buffer溢出。首先利用buffer溢出修改callee的ret的返回位置，然后在ret位置可以注入代码进行操作，说的时髦一点就是攻击。</p>\n<h4 id=\"如何操作\"><a href=\"#如何操作\" class=\"headerlink\" title=\"如何操作\"></a>如何操作</h4><p>每做一个实验就需要熟悉具体的操作流程，虽然比较浪费时间，但是这确实能够增加我们的视野，而且能让我们了解许多知识，比如：</p>\n<ul>\n<li>字节序，intel的字节序是小端法</li>\n<li>代码注入不能为输入字符串的ASCII码，而是需要通过hex2raw方法输入原始字节序列</li>\n</ul>\n<p>方式：</p>\n<ol>\n<li>通过<strong>objdump</strong>或者<strong>gdb</strong>确定一些需要的值，比如说<strong>rsp</strong>的值或者是某个函数的位置。</li>\n<li>编写注入代码，并用<strong>gcc</strong>汇编，用<strong>objdump</strong>获取指令及其编码</li>\n<li>将这些编码通过<strong>hex2raw</strong>输出为原始字节序</li>\n</ol>\n<h4 id=\"Phase1\"><a href=\"#Phase1\" class=\"headerlink\" title=\"# Phase1\"></a># Phase1</h4><div class=\"note primary\"><p><strong>目标：注入代码调用touch1函数。</strong></p>\n</div>\n\n<p>第一个，只是练手的，take it easy…</p>\n<p><img data-src=\"csapp-lab-3/phrase1.png\"></p>\n<p>根据给出的test函数和touch1函数的代码，我们可以看出test函数并没有调用touch1函数，而是只调用了一个getbuf函数，这个函数就是获取输入的内容的，而getbuf函数允许最大输入0x28（十进制40）个字节。那么思路很明显了，只需要利用buffer溢出，修改ret的值就好了（因为栈内buffer的下面就是ret的返回地址了）。也就是说只需要输入40个字节任意字符+touch1的地址就好了。</p>\n<p>结果如下：<br><img data-src=\"csapp-lab-3/phrase1-success.png\"></p>\n<h4 id=\"Phase2\"><a href=\"#Phase2\" class=\"headerlink\" title=\"# Phase2\"></a># Phase2</h4><div class=\"note primary\"><p><strong>目标：注入代码传参并调用touch2函数。</strong></p>\n</div>\n\n<p>这个相对于第一个来说复杂了一点，要求你将cookie.txt文件里面的数值0x59b997fa作为参数调用touch2函数。</p>\n<p>对于第一个phrase只需要直接输入字符串就行了，而第二个需要注入原始字节序代码了。</p>\n<p>先说一下思路，因为需要传递参数，只需要传递一个，那就需要修改 <strong>%rdi</strong>寄存器的值，要想修改就必须用指令实现。我们需要做的就是写代码，注入，让程序跳转到我们注入代码的地方。</p>\n<p>具体一点，思路如下：</p>\n<p>因为一开始获取输入的都是getbuf函数，这一点和phrase1相同，这说明buffersize没变。所以我们还需要输入40个字节的字符和返回地址。我们要做的就是将返回地址修改为我们注入代码的地方，记为<strong>addr</strong>，我们需要将注入的代码放到哪里呢？buffer里完全够用，如果放到其他地方反而有可能造成segmentfault。从buffer首地址，也就是caller——getbuf函数一开始的rsp值开始注入我们的代码，这个rsp值也是我们需要跳转的值<strong>addr</strong>。</p>\n<p>我们注入的代码有什么用？</p>\n<ul>\n<li>修改 <strong>%rdi</strong>的值为0x59b997fa</li>\n<li>控制交给touch2，因为不能用jmp和call，所以只能用ret来实现。</li>\n</ul>\n<p>注入代码如下：</p>\n<p><img data-src=\"csapp-lab-3/phrase2-insert.png\"></p>\n<p>然后需要做的事就是将这段汇编代码用<code>gcc -c xxx</code>来汇编，并用<code>objdump -d xxx</code>来查看汇编指令对应的字节序列了（如上图）。<br>得到字节序列之后还需要将他和buffer的其他部分还有我们注入代码的首地址放入。然后通过hex2raw程序将其按照原始字节序列输入。</p>\n<p>结束！运行结果如下：</p>\n<p><img data-src=\"csapp-lab-3/phrase2-success.png\"></p>\n<h4 id=\"Phase3\"><a href=\"#Phase3\" class=\"headerlink\" title=\"# Phase3\"></a># Phase3</h4><div class=\"note primary\"><p><strong>目标：注入固定字符串ASCII码序列并传首地址作为参数然后调用touch3函数。</strong></p>\n</div>\n\n<p>第三个和第二个差不多，只不过多了一点坑，同样是传递参数，只不过需要传一个字符串，而字符串需要自己保存，而且还有可能函数调用的过程中被其他数据覆盖。</p>\n<p>我们先来思考一下需要哪些数据吧：</p>\n<ul>\n<li>cookie十六进制数的ASCII码值</li>\n<li>getbuf申请内存后的rsp值</li>\n<li>要存取ASCII码序列的地址</li>\n<li>touch3地址</li>\n</ul>\n<p>其他的都好确定，存取ASCII码序列的地址无法确定，有可能你第一次尝试是错误的。主要是因为touch函数调用了hexmatch函数，而这个函数对缓冲区进行了修改。</p>\n<p>截了一下图。</p>\n<p><strong>执行hexmatch函数前：</strong></p>\n<p><img data-src=\"csapp-lab-3/phrase3-rsp-old.png\"></p>\n<p><strong>执行hexmatch函数后：</strong></p>\n<p><img data-src=\"csapp-lab-3/phrase3-rsp-new.png\"></p>\n<p>我们发现第三行（0x5561dc98）之前的大多数都被修改了，所以我们要把数据继续放到栈的更底部位置。也就是从0x5561dca4之后的位置开始。那就简单了。</p>\n<p>展示一下栈结构：</p>\n<p><img data-src=\"csapp-lab-3%5C1553868529136.png\" alt=\"1553868529136\"></p>\n<p>完事！</p>\n<p><img data-src=\"csapp-lab-3/phrase3-success.png\"></p>\n<h3 id=\"Rtarget\"><a href=\"#Rtarget\" class=\"headerlink\" title=\"Rtarget\"></a>Rtarget</h3><p>下面开始ROP攻击，虽然需要利用buffer溢出来攻击，但是和代码注入攻击不同的是栈内的数据会不能当做指令来执行。所以需要使用一些程序中已经存在的代码区域的gadgets小工具来拼凑自己想要的指令序列。</p>\n<h4 id=\"Phase4\"><a href=\"#Phase4\" class=\"headerlink\" title=\"# Phase4\"></a># Phase4</h4><p>第一弹，还是执行完getbuf函数就去执行touch2而不返回test函数。</p>\n<div class=\"note primary\"><p><strong>目标：利用gadget传参并调用touch2函数。</strong></p>\n</div>\n\n<p>​    </p>\n<p>因为无法执行栈中的指令，所以只能通过已有代码来拼凑，那要拼凑成什么，首先还是看数据：</p>\n<ul>\n<li><p>cookie值</p>\n</li>\n<li><p>touch2地址</p>\n</li>\n</ul>\n<p>  我们需要将cookie值传入rdi寄存器中，而cookie值只能通过输入保存到栈中，所以可以通过gadget根据指令编码找到一个pop命令pop到rdi中。但是遗憾的是farm前半部分并没有找到这个命令，所以我们只能另寻他法。最后我们可以通过pop先pop到rax中，然后使用mov命令将rax的值传入rdi中。</p>\n<p>  我用到的是这两个gadget：一个包含<code>pop %rax</code>命令，一个包含<code>mov %rax,%rdi</code>命令。</p>\n<p>  <img data-src=\"csapp-lab-3%5C1553869869465.png\" alt=\"1553869869465\"></p>\n<p>  好了rdi中已经存储的cookie值了，下一步就是跳转到touch2了。</p>\n<p>  怎么跳转？很简单，如果此时栈顶的元素是touch2的地址，并且接下来执行一条ret指令就OK了。</p>\n<p>所以说很简单了，栈结构如下：</p>\n<p>因为无法执行栈内代码，所以buffer合法部分已经没用了。</p>\n<p><img data-src=\"csapp-lab-3%5C1553870526705.png\" alt=\"1553870526705\"></p>\n<h4 id=\"Phase5\"><a href=\"#Phase5\" class=\"headerlink\" title=\"# Phase5\"></a># Phase5</h4><p>选做等于不做，好吧，是自己太菜了。到此为止95′已经到手，没必要争这5′了。了解一下内存栈的模型和这两种攻击手段就好了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本次实验整体提升不是很大，不过了解了两种攻击手段。</p>\n<h3 id=\"所感\"><a href=\"#所感\" class=\"headerlink\" title=\"所感\"></a>所感</h3><ul>\n<li>自己还有些浮躁，有时静不下心来。</li>\n<li>自己不应该有太多空闲时间，不然无所事事。</li>\n<li>英语专业阅读水平有了一定的提高</li>\n</ul>\n<h3 id=\"所得\"><a href=\"#所得\" class=\"headerlink\" title=\"所得\"></a>所得</h3><ul>\n<li>进一步了解了栈帧结构</li>\n<li>了解了代码注入和ROP两种攻击手段，虽然现在已经很难适用了。</li>\n</ul>\n<h3 id=\"下一步\"><a href=\"#下一步\" class=\"headerlink\" title=\"下一步\"></a>下一步</h3><ul>\n<li>养成阅读英语书籍和文档的习惯</li>\n<li>做好日常规划</li>\n</ul>"},{"title":"CSAPP 之 Bomb Lab","mathjax":false,"copyright":true,"comment":true,"date":"2019-03-18T08:31:05.000Z","_content":"\n{% note default %}\n脑越用越灵，手越用越巧。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n\n## 前言\n\n没想到这BombLab果然有趣。一开始实验的时候还是有点困难的，主要是对GDB调试和一些知识点不够熟悉。虽然前面两个问题都有借鉴别人的方法。但是后面四个难度最大的真的是独立完成，完成的瞬间成就感不言而喻，达到climax。可能主要是对汇编有一点底子所以实验相对比较容易。\n\n\n## CSAPP 实验记录\n\n{% note info %}\n\n**[本系列文章](/tags/CSAPP-Lab/)主要记录 CSAPP 3.0 的实验过程，所有实验记录文章请查看[这儿](/tags/CSAPP-Lab/)**\n{% endnote %}\n\n\n快速开始请访问 `CSAPP` [Lab](http://csapp.cs.cmu.edu/3e/labs.html) 官网，本次实验记录是基于 CSAPP 3.0，实验日期始于：`2019-3-18`\n\n\n## 实验开始前的归纳\n\n{% note primary %} \n\n这个实验首先要求对汇编有一定的掌握，所以在此就不列举汇编的相关内容了。个人感觉用到最重要也是想要入手必须要具备的知识：**一是学会使用反汇编及调试工具，二是了解函数调用的栈帧**。\n\n{% endnote %}\n\n### 栈帧\n\n想要了解栈帧的结构？我们还是先来回顾（review）以下有哪些和函数栈相关的寄存器吧。（这儿并没有包含浮点寄存器）\n\n![](csapp-lab-2/registers.png)\n\n- 所谓调用者保存，就是可以让被调用者（自身不作为另一个调用者）随意使用，也是为了自己用到的数据不被覆盖。\n- 所谓被调用者保存，恰恰与调用者保存相反。\n- 函数调用一般参数传递（非浮点）前6个参数存于寄存器，剩下的参数**按照函数定义从右向左压栈**。\n- 栈指针指向函数栈栈顶。\n- {% label primary@%rax%}用于保存函数调用返回值。\n\n\n了解了这些寄存器，我们再来看看栈帧的结构\n\n\n![](csapp-lab-2/stackframe.png)\n\n就拿函数P的栈帧来说，从栈底到栈顶的方向分别存储以下内容：\n\n- 被保存的寄存器\n- 局部变量（`sub $0x18,%rsp `）\n- 如果调用其他函数参数多于6，便有参数构造区\n- 调用其他函数时需要将返回地址压栈\n\n### 工具使用方法\n\n#### CGDB\n\n跟随[孟佬](https://zhuanlan.zhihu.com/p/31269514)用的CGDB，[官网](https://cgdb.github.io/)及[gdb使用方式](http://csapp.cs.cmu.edu/3e/docs/gdbnotes-x86-64.pdf)，以下是CGDB运行缺省截图。\n\n![](csapp-lab-2/cgdb.png)\n\n\n\n\n\n## Bomb Lab\n\n\nBombLab家喻户晓，个人感觉之所以这个实验这么有名，主要有三点：\n\n- 一是作为配套实验能够真正的训练学到的程序机器级表示的内容；\n- 二是必不可少的一部分——实验的有趣性；\n- 三是能够加强我们的调试程序的能力，终身受益（前提你是程序员:smile:）。\n\n\n### 一开始\n\n好了开始真正的实验部分了。\n\n首先我们使用如下命令来开始调试`bomb`可执行程序：\n\n```bash\ncgdb bomb\n```\n\n就会看到如下界面：\n\n![](csapp-lab-2/bomb.png)\n\n这是给我们的主程序，里面主要是炸弹程序的初始化，以及这些炸弹的输入以及输入检测。\n\n在CGDB模式下我们可以使用`:set disasm`命令将主程序以汇编形式展示，当然使用`:set nodisasm`就会返回原来的样子。\n\n\n\n### 思路\n\n{% note success no-icon%}\n\n所有炸弹拆除的思路都很简单，就是设断点，并一步步调试，找到跳转到`explode_bomb`的跳转命令，结合逻辑和寄存器的值进行判断如何避免跳转引发爆炸。\n\n{% endnote %}\n\n#### 运行\n\n在GDB模式下，使用`run`命令开启调试。通过输入重定向的方法避免多次输入：`run < in.txt`\n\n#### 设断点\n\n在GDB模式下，使用`break 行号`打断点\n\n#### 调试\n\n设置断点后，具体参照GDB手册进行调试。\n\n#### Example\n\n比如想要破解Phrase1这个炸弹，需要执行以下步骤：\n\n- 设置调用函数断点（`phrase_1(input)`处）\n- 运行至断点处并调试（`stepi`+`nexti`+`finish`+`continue`等命令）\n- 进入函数内部进一步观察（使用`print`+`x`等命令）\n- 分析代码得出答案\n\n### #Phrase Before\n\n如果你是第一次做实验的话，这一步你一定要知道：\n\n![](csapp-lab-2/phrase1-input.png)\n\n这六个炸弹都是都是通过一个`read_line`函数从输入流（不管是标准输入还是文件输入重定向）中读取的，返回值为`input`，对应于`%rax`寄存器（存放的一个输入字符串的首地址）。我们看到将`%rax`寄存器的内容转移到`%rdi`寄存器里了，我们知道寄存器`%rdi`用于存放调用函数时的第一个参数。接下来就调用炸弹函数了。\n\n\n\n**再强调一遍，所有的炸弹函数的第一个参数`%rdi`都是我们输入的字符串的首地址。**\n\n\n\n### #Phrase 1\n\n第一个炸弹的汇编代码如下所示：\n\n![](csapp-lab-2/phrase1.png)\n\n第一个算是一个入门的，主要是想让你熟悉一下BombLab的流程。\n\n我们输入的字符串首地址在`%rdi`中；\n\n②行申请了8个字节的栈空间；\n\n③行将一个立即数（一看就是一个地址）存放到`%esi`寄存器（这是第二个参数）\n\n④行调用了一个函数，如果你想快速通过的话不用看内部实现，是比较两个字符串是否相同。（内部比较就不说了，一个一个比较字符而已）\n\n\n⑤行使用test命令（同`and`命令，不修改目标对象的值）来测试`%eax`中的值是否为0，如果为0则跳过引爆炸弹的函数。\n\n\n\n很简单了，使用`x/s 0x402400`按字符串输出这个地址存储的内容（这个可能是我在比较字符串的函数内输出的 :smile: ）：\n\n![](csapp-lab-2/phrase1-inputstr.png)\n\n第一弹，拆除完毕！\n\n### #Phrase 2\n\n第二弹，来吧勇士！（好吧，感觉有点中二。）\n\n![](csapp-lab-2/phrase2.png)\n\n\n\n嗯，映入我们眼前的是一个`<read_six_numbers>`函数，一猜也是让我们输入6个数字:\n\n\n\n\n\n![](csapp-lab-2/phrase2-readnum.png)\n\n然后我们查看一下这个函数内部，发现里面又调用了`sscanf`这个函数（功能是从一个字符串中读取一定格式的数据，和`scanf`一样，除了`scanf`是从标准输入流中读取）。参数顺序分别是，待读取内容的字符串、用于格式读取的格式化字符串，还有各个变量读取后存放的地址。\n\n```c\nint sscanf( const char *buffer, const char *format [, argument ] ... );\n```\n\n我们查看`<read_six_number>`中参数构造如下：\n\n- `%rdi`，输入传入的字符串首地址\n- `%rsi`，由`0x4025c3`地址的字符串决定，不出意料果然是`%d %d %d %d %d %d`\n- `%rdx`，由`%rsi`给出，`%rsi`又由`phrase2`的`%rsp`给出，所以`phrase2`中的`%rsp`地址处存放`sscanf`中第一个输入的值\n- `%rcx`，`phrase2`中的`%rsp+0x4`处存放第二个值\n- `%r8`，`phrase2`中的`%rsp+0x8`存放第三个值\n- `%r9`，`phrase2`中的`%rsp+0xc`存放第四个值\n- 第五个、第六个值所在的地址需要通过压栈传参，由栈帧压栈顺序是从右向左压栈，可知，`phrase2`中的`%rsp+0x10`存放第五个值、`phrase2`中的`%rsp+0x14`存放第六个值。\n\n好了，知道输入的值都到哪儿去了，这样就简单了许多了，然后再看`phrase2`函数：\n\n![](csapp-lab-2/phrase2.png)\n\n首先看**<+14>**处，第一个数必须是1，不是炸弹就爆炸。\n\n不是就跳到**<+52>**处，然后**<+27>**到**<+52>**构成一个循环，意思是比较后一个数必须是前一个数的两倍。\n\n那答案就出来了：`1 2 4 8 16 32`\n\n### #Phrase 3\n\n好了，兄嘚，第三炮！\n\n![](csapp-lab-2/phrase3.png)\n\n\n\n输入还是`sscanf`函数，同理，`%rdi`是我们输入的，`%rsi`是`format`打印一下看是`%d %d`，需要两个地址存放，分别是`%rdx`和`%rcx`，对应于`%rsp+0x8`和`%rsp+0xc`。输入完成后，查看返回值`%eax`必须大于1，两个输入必然是最满足要求的。满足之后，我们来到了**<+39>**的位置，我们比较第一个输入值`x`和7，如果第一个`x`大于7则爆炸，所以`x`是<=7的。\n\n接下来将x值放入`%eax`寄存器，然后通过间接跳转跳转到`0x402470+8*%eax`地址所存储的地址。我们可以看到这个跳转目标和输入有关的。然后我们可以输出相应的地址，发现跳转的地址刚好是修改`%eax`的地方，最终`%eax`都要和第二个数`y`（`%rsp+0xc`地址存储的值）相等。\n\n\n\n就比如说x为0，则跳转到`0x402470`的地址中存储的地址（**<+57>**的位置），将`%eax`修改为0xcf（十进制207），然后跳转到**<+123>**处比较0xcf和`y`值，相等才不会爆炸。所以结果可以输入`0 207`。\n\n答案还有好几个，不一一列举了！\n\n\n\n### #Phrase 4\n\n第四弹！\n\n主要考察递归函数调用（当然你也可以避过这个问题！）\n\n先看主要部分代码：\n\n![](csapp-lab-2/phrase4.png)\n\n通过这个程序我们可以分析出，除了输入函数和爆炸函数之外，还调用了一个`func4` 函数。输入的是两个数字，存于`%rsp+0x8`和`%rsp+0xc`处。我们还可以分析出，**调用这个函数之后返回值`%eax`必须为0，而且第二个输入的数必须为0。**\n\n我们再看传入的参数：\n\n- `%rdi`：第一个数，记作x\n- `%rsi`：0\n- `%rdx`：0xe，即14\n- `%rcx`：第二个数，记作y。不确定会不会用到，看到下面的代码很显然没用使用到，直接被覆盖了。\n\n![](csapp-lab-2/phrase4-func.png)\n\n查看代码，如果你进入了递归是太恶心了，不过也可以分析，好像要求输入x值必须满足是一个数列的元素。那么如何避免递归，看**<+22>**行，可以分析出此时`%ecx`的值为7，如果`%edi`也就是x值如果>=7的话，那就会跳转到**<+36>**，此时将`%eax`置位0（满足返回值为0），然后再比较刚比较的`%edi`和`%ecx`，如果`%edi`<=7的话就结束。所以最终x=7满足条件。\n\n\n\n所以很简单的答案，`7 0`。递归的值没仔细考虑，实在是递归太难调试了，可能是自己没掌握到方法。很遗憾。\n\n### #Phrase 5\n\n第五发！\n\n这个也比较有趣，主要是涉及到了ASCII码，感觉真的是在破译代码，解除炸弹！\n\n下面就是代码：\n\n![](csapp-lab-2/phrase5.png)\n\n\n\n首先我们看到了`%fs`寄存器，这是用于存储`当前活动线程的TEB结构`地址的一个寄存器，和解题无关，可以不用在意。\n\n首先输入的字符串地址在`%rdi`中，然后调用`string_length`函数，可以看电脑返回值`%eax`必须为6，也就是输入的字符串长度必须为6。\n\n接下来的一段程序主要是以下作用：\n\n- 取6个ASCII码低4位，记作`low4[i]`。\n- 将`low4[i]`作为偏移量和常量A（0x4024b0）相加作为地址取得改地址存储的字符`character[i]`\n- 将这一系列字符`character`分别存于`%rsp+0x10`到`%rsp+0x15`\n- 调用`strings_not_equal`比较这些字符和存于**0x40245e**的字符串（flyers）是否相等，相等则结束\n\n那么很简单了！\n\n常量A地址开始存储的是什么字符？（忘了截图了……），是`maduiersnfotvbyl`共16个。我们找到`flyers`这六个字符的相对偏移地址用16进制表示分别为`9fe567`，然后据此查找ASCII码查看低四位相同的字符（答案不固定，我找到的是`ionufg`）。\n\n完事！\n\n\n\n\n\n### #Phrase 6\n\n最后一弹，是有点难度的，一定要找一个比较好的环境做，需要大约2个小时的时间。争取一次性完成。\n\n这一弹主要是考察循环了，循环炒鸡多有木有！另外还需要知道链表的结构。\n\n由于代码太多，就不一一写了，主要是写一下代码的作用。\n\n代码如下：\n\n首先是第一部分：\n\n![](csapp-lab-2/phrase6-1.png)\n\n首先读入了6个数字，分别放入了`%rsp+0x0、%rsp+0x4、%rsp+0x8、%rsp+0xc、%rsp+0x10、%rsp+0x14`\n\n这是第一个大循环，**<+32>**到**<+93>**行，内嵌一个小循环**<+65>**到**<+87>**行。大循环中部分的作用是确定每个数必须<=6；小循环的作用是确定第`i`个数不和第`i+1`~第`6`个数相同（也就是输入的所有数字不能有相同的）。\n\n接下来再看剩下的部分：\n\n![2](csapp-lab-2/phrase6-2.png)\n\n首先有个循环**<+103>**到**<+121>**，主要作用就是令`a[i]=7-a[i],i=1,2,3,4,5,6`，就是将存于栈中的数（也是你输入的数）进行对7求补并保存回原位置。\n\n接下来又有一个大循环**<+130>**到**<+181>**部分，里面嵌入了一个小循环**<+130>**到**<+139>**。主要作用是访问一个链表，链表的首地址为`0x6032d0`，针对输入的第`i`个数，按照`a[i]`的值获取链表第`a[i]`个节点，并把节点首地址放入`%rsp+0x20+0x0`~到`%rsp+0x20+0x28`刚好是6个节点。\n\n\n\n然后下面一段代码，又是一个循环**<+235>**到**<+257>**，主要是说明`%rsp+0x20+0x0`~到`%rsp+0x20+0x28`存储的链表节点值必须是递减的。\n\n下面打印的是这六个节点的值和指向下一个节点的地址。\n\n![](csapp-lab-2/phrase6-linklist.png)\n\n找到了各节点的值，我们就可以排序得到节点标号的排序，节点标号的排序恰恰是输入6个数字对7求补的值，然后再对7求补即可得到结果`4 3 2 1 6 5`。\n\n\n\n## 结果\n\n完成的一瞬家很爽！秀一下结果！\n\n![](csapp-lab-2/success.png)\n\n\n\n\n\n\n## 总结\n\n这次实验真的是收货颇丰，一是完成了大名鼎鼎的bomblab，二是切切实实的学到了新东西。\n\n### 所感\n\n- 相对于上次实验，感觉动手能力变强了\n- 自己有一些浮躁\n- 实验时有时走神，（主要是没有草稿时是这样的，没草稿直接看是很难看出答案的。。我太菜。）\n\n### 所得\n\n- 学会了GDB的使用方法，对调试又有了一定的认识\n- 彻底理解了栈帧的设计\n- 熟悉了一些常用寄存器的用途\n- 熟悉了AT&T x86-64汇编指令\n\n### 下一步\n\n1. 实验时要草稿纸，好记性不如烂笔头\n2. 静下心来，莫浮躁，循序渐进。\n3. 阅读英文书籍，增强英语环境下的学习能力","source":"_posts/csapp-lab-2.md","raw":"---\n\ntitle: CSAPP 之 Bomb Lab\nmathjax: false\ncopyright: true\ncomment: true\ndate: 2019-03-18 16:31:05\ntags:\n- Operating System\n- CSAPP\n- CSAPP Lab\ncategories:\n- Computer Science\n- Operating System\n\n---\n\n{% note default %}\n脑越用越灵，手越用越巧。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n\n## 前言\n\n没想到这BombLab果然有趣。一开始实验的时候还是有点困难的，主要是对GDB调试和一些知识点不够熟悉。虽然前面两个问题都有借鉴别人的方法。但是后面四个难度最大的真的是独立完成，完成的瞬间成就感不言而喻，达到climax。可能主要是对汇编有一点底子所以实验相对比较容易。\n\n\n## CSAPP 实验记录\n\n{% note info %}\n\n**[本系列文章](/tags/CSAPP-Lab/)主要记录 CSAPP 3.0 的实验过程，所有实验记录文章请查看[这儿](/tags/CSAPP-Lab/)**\n{% endnote %}\n\n\n快速开始请访问 `CSAPP` [Lab](http://csapp.cs.cmu.edu/3e/labs.html) 官网，本次实验记录是基于 CSAPP 3.0，实验日期始于：`2019-3-18`\n\n\n## 实验开始前的归纳\n\n{% note primary %} \n\n这个实验首先要求对汇编有一定的掌握，所以在此就不列举汇编的相关内容了。个人感觉用到最重要也是想要入手必须要具备的知识：**一是学会使用反汇编及调试工具，二是了解函数调用的栈帧**。\n\n{% endnote %}\n\n### 栈帧\n\n想要了解栈帧的结构？我们还是先来回顾（review）以下有哪些和函数栈相关的寄存器吧。（这儿并没有包含浮点寄存器）\n\n![](csapp-lab-2/registers.png)\n\n- 所谓调用者保存，就是可以让被调用者（自身不作为另一个调用者）随意使用，也是为了自己用到的数据不被覆盖。\n- 所谓被调用者保存，恰恰与调用者保存相反。\n- 函数调用一般参数传递（非浮点）前6个参数存于寄存器，剩下的参数**按照函数定义从右向左压栈**。\n- 栈指针指向函数栈栈顶。\n- {% label primary@%rax%}用于保存函数调用返回值。\n\n\n了解了这些寄存器，我们再来看看栈帧的结构\n\n\n![](csapp-lab-2/stackframe.png)\n\n就拿函数P的栈帧来说，从栈底到栈顶的方向分别存储以下内容：\n\n- 被保存的寄存器\n- 局部变量（`sub $0x18,%rsp `）\n- 如果调用其他函数参数多于6，便有参数构造区\n- 调用其他函数时需要将返回地址压栈\n\n### 工具使用方法\n\n#### CGDB\n\n跟随[孟佬](https://zhuanlan.zhihu.com/p/31269514)用的CGDB，[官网](https://cgdb.github.io/)及[gdb使用方式](http://csapp.cs.cmu.edu/3e/docs/gdbnotes-x86-64.pdf)，以下是CGDB运行缺省截图。\n\n![](csapp-lab-2/cgdb.png)\n\n\n\n\n\n## Bomb Lab\n\n\nBombLab家喻户晓，个人感觉之所以这个实验这么有名，主要有三点：\n\n- 一是作为配套实验能够真正的训练学到的程序机器级表示的内容；\n- 二是必不可少的一部分——实验的有趣性；\n- 三是能够加强我们的调试程序的能力，终身受益（前提你是程序员:smile:）。\n\n\n### 一开始\n\n好了开始真正的实验部分了。\n\n首先我们使用如下命令来开始调试`bomb`可执行程序：\n\n```bash\ncgdb bomb\n```\n\n就会看到如下界面：\n\n![](csapp-lab-2/bomb.png)\n\n这是给我们的主程序，里面主要是炸弹程序的初始化，以及这些炸弹的输入以及输入检测。\n\n在CGDB模式下我们可以使用`:set disasm`命令将主程序以汇编形式展示，当然使用`:set nodisasm`就会返回原来的样子。\n\n\n\n### 思路\n\n{% note success no-icon%}\n\n所有炸弹拆除的思路都很简单，就是设断点，并一步步调试，找到跳转到`explode_bomb`的跳转命令，结合逻辑和寄存器的值进行判断如何避免跳转引发爆炸。\n\n{% endnote %}\n\n#### 运行\n\n在GDB模式下，使用`run`命令开启调试。通过输入重定向的方法避免多次输入：`run < in.txt`\n\n#### 设断点\n\n在GDB模式下，使用`break 行号`打断点\n\n#### 调试\n\n设置断点后，具体参照GDB手册进行调试。\n\n#### Example\n\n比如想要破解Phrase1这个炸弹，需要执行以下步骤：\n\n- 设置调用函数断点（`phrase_1(input)`处）\n- 运行至断点处并调试（`stepi`+`nexti`+`finish`+`continue`等命令）\n- 进入函数内部进一步观察（使用`print`+`x`等命令）\n- 分析代码得出答案\n\n### #Phrase Before\n\n如果你是第一次做实验的话，这一步你一定要知道：\n\n![](csapp-lab-2/phrase1-input.png)\n\n这六个炸弹都是都是通过一个`read_line`函数从输入流（不管是标准输入还是文件输入重定向）中读取的，返回值为`input`，对应于`%rax`寄存器（存放的一个输入字符串的首地址）。我们看到将`%rax`寄存器的内容转移到`%rdi`寄存器里了，我们知道寄存器`%rdi`用于存放调用函数时的第一个参数。接下来就调用炸弹函数了。\n\n\n\n**再强调一遍，所有的炸弹函数的第一个参数`%rdi`都是我们输入的字符串的首地址。**\n\n\n\n### #Phrase 1\n\n第一个炸弹的汇编代码如下所示：\n\n![](csapp-lab-2/phrase1.png)\n\n第一个算是一个入门的，主要是想让你熟悉一下BombLab的流程。\n\n我们输入的字符串首地址在`%rdi`中；\n\n②行申请了8个字节的栈空间；\n\n③行将一个立即数（一看就是一个地址）存放到`%esi`寄存器（这是第二个参数）\n\n④行调用了一个函数，如果你想快速通过的话不用看内部实现，是比较两个字符串是否相同。（内部比较就不说了，一个一个比较字符而已）\n\n\n⑤行使用test命令（同`and`命令，不修改目标对象的值）来测试`%eax`中的值是否为0，如果为0则跳过引爆炸弹的函数。\n\n\n\n很简单了，使用`x/s 0x402400`按字符串输出这个地址存储的内容（这个可能是我在比较字符串的函数内输出的 :smile: ）：\n\n![](csapp-lab-2/phrase1-inputstr.png)\n\n第一弹，拆除完毕！\n\n### #Phrase 2\n\n第二弹，来吧勇士！（好吧，感觉有点中二。）\n\n![](csapp-lab-2/phrase2.png)\n\n\n\n嗯，映入我们眼前的是一个`<read_six_numbers>`函数，一猜也是让我们输入6个数字:\n\n\n\n\n\n![](csapp-lab-2/phrase2-readnum.png)\n\n然后我们查看一下这个函数内部，发现里面又调用了`sscanf`这个函数（功能是从一个字符串中读取一定格式的数据，和`scanf`一样，除了`scanf`是从标准输入流中读取）。参数顺序分别是，待读取内容的字符串、用于格式读取的格式化字符串，还有各个变量读取后存放的地址。\n\n```c\nint sscanf( const char *buffer, const char *format [, argument ] ... );\n```\n\n我们查看`<read_six_number>`中参数构造如下：\n\n- `%rdi`，输入传入的字符串首地址\n- `%rsi`，由`0x4025c3`地址的字符串决定，不出意料果然是`%d %d %d %d %d %d`\n- `%rdx`，由`%rsi`给出，`%rsi`又由`phrase2`的`%rsp`给出，所以`phrase2`中的`%rsp`地址处存放`sscanf`中第一个输入的值\n- `%rcx`，`phrase2`中的`%rsp+0x4`处存放第二个值\n- `%r8`，`phrase2`中的`%rsp+0x8`存放第三个值\n- `%r9`，`phrase2`中的`%rsp+0xc`存放第四个值\n- 第五个、第六个值所在的地址需要通过压栈传参，由栈帧压栈顺序是从右向左压栈，可知，`phrase2`中的`%rsp+0x10`存放第五个值、`phrase2`中的`%rsp+0x14`存放第六个值。\n\n好了，知道输入的值都到哪儿去了，这样就简单了许多了，然后再看`phrase2`函数：\n\n![](csapp-lab-2/phrase2.png)\n\n首先看**<+14>**处，第一个数必须是1，不是炸弹就爆炸。\n\n不是就跳到**<+52>**处，然后**<+27>**到**<+52>**构成一个循环，意思是比较后一个数必须是前一个数的两倍。\n\n那答案就出来了：`1 2 4 8 16 32`\n\n### #Phrase 3\n\n好了，兄嘚，第三炮！\n\n![](csapp-lab-2/phrase3.png)\n\n\n\n输入还是`sscanf`函数，同理，`%rdi`是我们输入的，`%rsi`是`format`打印一下看是`%d %d`，需要两个地址存放，分别是`%rdx`和`%rcx`，对应于`%rsp+0x8`和`%rsp+0xc`。输入完成后，查看返回值`%eax`必须大于1，两个输入必然是最满足要求的。满足之后，我们来到了**<+39>**的位置，我们比较第一个输入值`x`和7，如果第一个`x`大于7则爆炸，所以`x`是<=7的。\n\n接下来将x值放入`%eax`寄存器，然后通过间接跳转跳转到`0x402470+8*%eax`地址所存储的地址。我们可以看到这个跳转目标和输入有关的。然后我们可以输出相应的地址，发现跳转的地址刚好是修改`%eax`的地方，最终`%eax`都要和第二个数`y`（`%rsp+0xc`地址存储的值）相等。\n\n\n\n就比如说x为0，则跳转到`0x402470`的地址中存储的地址（**<+57>**的位置），将`%eax`修改为0xcf（十进制207），然后跳转到**<+123>**处比较0xcf和`y`值，相等才不会爆炸。所以结果可以输入`0 207`。\n\n答案还有好几个，不一一列举了！\n\n\n\n### #Phrase 4\n\n第四弹！\n\n主要考察递归函数调用（当然你也可以避过这个问题！）\n\n先看主要部分代码：\n\n![](csapp-lab-2/phrase4.png)\n\n通过这个程序我们可以分析出，除了输入函数和爆炸函数之外，还调用了一个`func4` 函数。输入的是两个数字，存于`%rsp+0x8`和`%rsp+0xc`处。我们还可以分析出，**调用这个函数之后返回值`%eax`必须为0，而且第二个输入的数必须为0。**\n\n我们再看传入的参数：\n\n- `%rdi`：第一个数，记作x\n- `%rsi`：0\n- `%rdx`：0xe，即14\n- `%rcx`：第二个数，记作y。不确定会不会用到，看到下面的代码很显然没用使用到，直接被覆盖了。\n\n![](csapp-lab-2/phrase4-func.png)\n\n查看代码，如果你进入了递归是太恶心了，不过也可以分析，好像要求输入x值必须满足是一个数列的元素。那么如何避免递归，看**<+22>**行，可以分析出此时`%ecx`的值为7，如果`%edi`也就是x值如果>=7的话，那就会跳转到**<+36>**，此时将`%eax`置位0（满足返回值为0），然后再比较刚比较的`%edi`和`%ecx`，如果`%edi`<=7的话就结束。所以最终x=7满足条件。\n\n\n\n所以很简单的答案，`7 0`。递归的值没仔细考虑，实在是递归太难调试了，可能是自己没掌握到方法。很遗憾。\n\n### #Phrase 5\n\n第五发！\n\n这个也比较有趣，主要是涉及到了ASCII码，感觉真的是在破译代码，解除炸弹！\n\n下面就是代码：\n\n![](csapp-lab-2/phrase5.png)\n\n\n\n首先我们看到了`%fs`寄存器，这是用于存储`当前活动线程的TEB结构`地址的一个寄存器，和解题无关，可以不用在意。\n\n首先输入的字符串地址在`%rdi`中，然后调用`string_length`函数，可以看电脑返回值`%eax`必须为6，也就是输入的字符串长度必须为6。\n\n接下来的一段程序主要是以下作用：\n\n- 取6个ASCII码低4位，记作`low4[i]`。\n- 将`low4[i]`作为偏移量和常量A（0x4024b0）相加作为地址取得改地址存储的字符`character[i]`\n- 将这一系列字符`character`分别存于`%rsp+0x10`到`%rsp+0x15`\n- 调用`strings_not_equal`比较这些字符和存于**0x40245e**的字符串（flyers）是否相等，相等则结束\n\n那么很简单了！\n\n常量A地址开始存储的是什么字符？（忘了截图了……），是`maduiersnfotvbyl`共16个。我们找到`flyers`这六个字符的相对偏移地址用16进制表示分别为`9fe567`，然后据此查找ASCII码查看低四位相同的字符（答案不固定，我找到的是`ionufg`）。\n\n完事！\n\n\n\n\n\n### #Phrase 6\n\n最后一弹，是有点难度的，一定要找一个比较好的环境做，需要大约2个小时的时间。争取一次性完成。\n\n这一弹主要是考察循环了，循环炒鸡多有木有！另外还需要知道链表的结构。\n\n由于代码太多，就不一一写了，主要是写一下代码的作用。\n\n代码如下：\n\n首先是第一部分：\n\n![](csapp-lab-2/phrase6-1.png)\n\n首先读入了6个数字，分别放入了`%rsp+0x0、%rsp+0x4、%rsp+0x8、%rsp+0xc、%rsp+0x10、%rsp+0x14`\n\n这是第一个大循环，**<+32>**到**<+93>**行，内嵌一个小循环**<+65>**到**<+87>**行。大循环中部分的作用是确定每个数必须<=6；小循环的作用是确定第`i`个数不和第`i+1`~第`6`个数相同（也就是输入的所有数字不能有相同的）。\n\n接下来再看剩下的部分：\n\n![2](csapp-lab-2/phrase6-2.png)\n\n首先有个循环**<+103>**到**<+121>**，主要作用就是令`a[i]=7-a[i],i=1,2,3,4,5,6`，就是将存于栈中的数（也是你输入的数）进行对7求补并保存回原位置。\n\n接下来又有一个大循环**<+130>**到**<+181>**部分，里面嵌入了一个小循环**<+130>**到**<+139>**。主要作用是访问一个链表，链表的首地址为`0x6032d0`，针对输入的第`i`个数，按照`a[i]`的值获取链表第`a[i]`个节点，并把节点首地址放入`%rsp+0x20+0x0`~到`%rsp+0x20+0x28`刚好是6个节点。\n\n\n\n然后下面一段代码，又是一个循环**<+235>**到**<+257>**，主要是说明`%rsp+0x20+0x0`~到`%rsp+0x20+0x28`存储的链表节点值必须是递减的。\n\n下面打印的是这六个节点的值和指向下一个节点的地址。\n\n![](csapp-lab-2/phrase6-linklist.png)\n\n找到了各节点的值，我们就可以排序得到节点标号的排序，节点标号的排序恰恰是输入6个数字对7求补的值，然后再对7求补即可得到结果`4 3 2 1 6 5`。\n\n\n\n## 结果\n\n完成的一瞬家很爽！秀一下结果！\n\n![](csapp-lab-2/success.png)\n\n\n\n\n\n\n## 总结\n\n这次实验真的是收货颇丰，一是完成了大名鼎鼎的bomblab，二是切切实实的学到了新东西。\n\n### 所感\n\n- 相对于上次实验，感觉动手能力变强了\n- 自己有一些浮躁\n- 实验时有时走神，（主要是没有草稿时是这样的，没草稿直接看是很难看出答案的。。我太菜。）\n\n### 所得\n\n- 学会了GDB的使用方法，对调试又有了一定的认识\n- 彻底理解了栈帧的设计\n- 熟悉了一些常用寄存器的用途\n- 熟悉了AT&T x86-64汇编指令\n\n### 下一步\n\n1. 实验时要草稿纸，好记性不如烂笔头\n2. 静下心来，莫浮躁，循序渐进。\n3. 阅读英文书籍，增强英语环境下的学习能力","slug":"csapp-lab-2","published":1,"updated":"2022-01-06T04:09:12.183Z","_id":"cksq5v7m7000qn0pu2zv630dj","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note default\"><p>脑越用越灵，手越用越巧。</p>\n</div>\n\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>没想到这BombLab果然有趣。一开始实验的时候还是有点困难的，主要是对GDB调试和一些知识点不够熟悉。虽然前面两个问题都有借鉴别人的方法。但是后面四个难度最大的真的是独立完成，完成的瞬间成就感不言而喻，达到climax。可能主要是对汇编有一点底子所以实验相对比较容易。</p>\n<h2 id=\"CSAPP-实验记录\"><a href=\"#CSAPP-实验记录\" class=\"headerlink\" title=\"CSAPP 实验记录\"></a>CSAPP 实验记录</h2><div class=\"note info\"><p><strong><a href=\"/tags/CSAPP-Lab/\">本系列文章</a>主要记录 CSAPP 3.0 的实验过程，所有实验记录文章请查看<a href=\"/tags/CSAPP-Lab/\">这儿</a></strong></p>\n</div>\n\n\n<p>快速开始请访问 <code>CSAPP</code> <a href=\"http://csapp.cs.cmu.edu/3e/labs.html\">Lab</a> 官网，本次实验记录是基于 CSAPP 3.0，实验日期始于：<code>2019-3-18</code></p>\n<h2 id=\"实验开始前的归纳\"><a href=\"#实验开始前的归纳\" class=\"headerlink\" title=\"实验开始前的归纳\"></a>实验开始前的归纳</h2><div class=\"note primary\"><p>这个实验首先要求对汇编有一定的掌握，所以在此就不列举汇编的相关内容了。个人感觉用到最重要也是想要入手必须要具备的知识：<strong>一是学会使用反汇编及调试工具，二是了解函数调用的栈帧</strong>。</p>\n</div>\n\n<h3 id=\"栈帧\"><a href=\"#栈帧\" class=\"headerlink\" title=\"栈帧\"></a>栈帧</h3><p>想要了解栈帧的结构？我们还是先来回顾（review）以下有哪些和函数栈相关的寄存器吧。（这儿并没有包含浮点寄存器）</p>\n<p><img data-src=\"csapp-lab-2/registers.png\"></p>\n<ul>\n<li>所谓调用者保存，就是可以让被调用者（自身不作为另一个调用者）随意使用，也是为了自己用到的数据不被覆盖。</li>\n<li>所谓被调用者保存，恰恰与调用者保存相反。</li>\n<li>函数调用一般参数传递（非浮点）前6个参数存于寄存器，剩下的参数<strong>按照函数定义从右向左压栈</strong>。</li>\n<li>栈指针指向函数栈栈顶。</li>\n<li><mark class=\"label primary\">%rax</mark>用于保存函数调用返回值。</li>\n</ul>\n<p>了解了这些寄存器，我们再来看看栈帧的结构</p>\n<p><img data-src=\"csapp-lab-2/stackframe.png\"></p>\n<p>就拿函数P的栈帧来说，从栈底到栈顶的方向分别存储以下内容：</p>\n<ul>\n<li>被保存的寄存器</li>\n<li>局部变量（<code>sub $0x18,%rsp </code>）</li>\n<li>如果调用其他函数参数多于6，便有参数构造区</li>\n<li>调用其他函数时需要将返回地址压栈</li>\n</ul>\n<h3 id=\"工具使用方法\"><a href=\"#工具使用方法\" class=\"headerlink\" title=\"工具使用方法\"></a>工具使用方法</h3><h4 id=\"CGDB\"><a href=\"#CGDB\" class=\"headerlink\" title=\"CGDB\"></a>CGDB</h4><p>跟随<a href=\"https://zhuanlan.zhihu.com/p/31269514\">孟佬</a>用的CGDB，<a href=\"https://cgdb.github.io/\">官网</a>及<a href=\"http://csapp.cs.cmu.edu/3e/docs/gdbnotes-x86-64.pdf\">gdb使用方式</a>，以下是CGDB运行缺省截图。</p>\n<p><img data-src=\"csapp-lab-2/cgdb.png\"></p>\n<h2 id=\"Bomb-Lab\"><a href=\"#Bomb-Lab\" class=\"headerlink\" title=\"Bomb Lab\"></a>Bomb Lab</h2><p>BombLab家喻户晓，个人感觉之所以这个实验这么有名，主要有三点：</p>\n<ul>\n<li>一是作为配套实验能够真正的训练学到的程序机器级表示的内容；</li>\n<li>二是必不可少的一部分——实验的有趣性；</li>\n<li>三是能够加强我们的调试程序的能力，终身受益（前提你是程序员:smile:）。</li>\n</ul>\n<h3 id=\"一开始\"><a href=\"#一开始\" class=\"headerlink\" title=\"一开始\"></a>一开始</h3><p>好了开始真正的实验部分了。</p>\n<p>首先我们使用如下命令来开始调试<code>bomb</code>可执行程序：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cgdb bomb</span><br></pre></td></tr></table></figure>\n\n<p>就会看到如下界面：</p>\n<p><img data-src=\"csapp-lab-2/bomb.png\"></p>\n<p>这是给我们的主程序，里面主要是炸弹程序的初始化，以及这些炸弹的输入以及输入检测。</p>\n<p>在CGDB模式下我们可以使用<code>:set disasm</code>命令将主程序以汇编形式展示，当然使用<code>:set nodisasm</code>就会返回原来的样子。</p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><div class=\"note success no-icon\"><p>所有炸弹拆除的思路都很简单，就是设断点，并一步步调试，找到跳转到<code>explode_bomb</code>的跳转命令，结合逻辑和寄存器的值进行判断如何避免跳转引发爆炸。</p>\n</div>\n\n<h4 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h4><p>在GDB模式下，使用<code>run</code>命令开启调试。通过输入重定向的方法避免多次输入：<code>run &lt; in.txt</code></p>\n<h4 id=\"设断点\"><a href=\"#设断点\" class=\"headerlink\" title=\"设断点\"></a>设断点</h4><p>在GDB模式下，使用<code>break 行号</code>打断点</p>\n<h4 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h4><p>设置断点后，具体参照GDB手册进行调试。</p>\n<h4 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h4><p>比如想要破解Phrase1这个炸弹，需要执行以下步骤：</p>\n<ul>\n<li>设置调用函数断点（<code>phrase_1(input)</code>处）</li>\n<li>运行至断点处并调试（<code>stepi</code>+<code>nexti</code>+<code>finish</code>+<code>continue</code>等命令）</li>\n<li>进入函数内部进一步观察（使用<code>print</code>+<code>x</code>等命令）</li>\n<li>分析代码得出答案</li>\n</ul>\n<h3 id=\"Phrase-Before\"><a href=\"#Phrase-Before\" class=\"headerlink\" title=\"#Phrase Before\"></a>#Phrase Before</h3><p>如果你是第一次做实验的话，这一步你一定要知道：</p>\n<p><img data-src=\"csapp-lab-2/phrase1-input.png\"></p>\n<p>这六个炸弹都是都是通过一个<code>read_line</code>函数从输入流（不管是标准输入还是文件输入重定向）中读取的，返回值为<code>input</code>，对应于<code>%rax</code>寄存器（存放的一个输入字符串的首地址）。我们看到将<code>%rax</code>寄存器的内容转移到<code>%rdi</code>寄存器里了，我们知道寄存器<code>%rdi</code>用于存放调用函数时的第一个参数。接下来就调用炸弹函数了。</p>\n<p><strong>再强调一遍，所有的炸弹函数的第一个参数<code>%rdi</code>都是我们输入的字符串的首地址。</strong></p>\n<h3 id=\"Phrase-1\"><a href=\"#Phrase-1\" class=\"headerlink\" title=\"#Phrase 1\"></a>#Phrase 1</h3><p>第一个炸弹的汇编代码如下所示：</p>\n<p><img data-src=\"csapp-lab-2/phrase1.png\"></p>\n<p>第一个算是一个入门的，主要是想让你熟悉一下BombLab的流程。</p>\n<p>我们输入的字符串首地址在<code>%rdi</code>中；</p>\n<p>②行申请了8个字节的栈空间；</p>\n<p>③行将一个立即数（一看就是一个地址）存放到<code>%esi</code>寄存器（这是第二个参数）</p>\n<p>④行调用了一个函数，如果你想快速通过的话不用看内部实现，是比较两个字符串是否相同。（内部比较就不说了，一个一个比较字符而已）</p>\n<p>⑤行使用test命令（同<code>and</code>命令，不修改目标对象的值）来测试<code>%eax</code>中的值是否为0，如果为0则跳过引爆炸弹的函数。</p>\n<p>很简单了，使用<code>x/s 0x402400</code>按字符串输出这个地址存储的内容（这个可能是我在比较字符串的函数内输出的 :smile: ）：</p>\n<p><img data-src=\"csapp-lab-2/phrase1-inputstr.png\"></p>\n<p>第一弹，拆除完毕！</p>\n<h3 id=\"Phrase-2\"><a href=\"#Phrase-2\" class=\"headerlink\" title=\"#Phrase 2\"></a>#Phrase 2</h3><p>第二弹，来吧勇士！（好吧，感觉有点中二。）</p>\n<p><img data-src=\"csapp-lab-2/phrase2.png\"></p>\n<p>嗯，映入我们眼前的是一个<code>&lt;read_six_numbers&gt;</code>函数，一猜也是让我们输入6个数字:</p>\n<p><img data-src=\"csapp-lab-2/phrase2-readnum.png\"></p>\n<p>然后我们查看一下这个函数内部，发现里面又调用了<code>sscanf</code>这个函数（功能是从一个字符串中读取一定格式的数据，和<code>scanf</code>一样，除了<code>scanf</code>是从标准输入流中读取）。参数顺序分别是，待读取内容的字符串、用于格式读取的格式化字符串，还有各个变量读取后存放的地址。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sscanf</span><span class=\"params\">( <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *buffer, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *format [, argument ] ... )</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>我们查看<code>&lt;read_six_number&gt;</code>中参数构造如下：</p>\n<ul>\n<li><code>%rdi</code>，输入传入的字符串首地址</li>\n<li><code>%rsi</code>，由<code>0x4025c3</code>地址的字符串决定，不出意料果然是<code>%d %d %d %d %d %d</code></li>\n<li><code>%rdx</code>，由<code>%rsi</code>给出，<code>%rsi</code>又由<code>phrase2</code>的<code>%rsp</code>给出，所以<code>phrase2</code>中的<code>%rsp</code>地址处存放<code>sscanf</code>中第一个输入的值</li>\n<li><code>%rcx</code>，<code>phrase2</code>中的<code>%rsp+0x4</code>处存放第二个值</li>\n<li><code>%r8</code>，<code>phrase2</code>中的<code>%rsp+0x8</code>存放第三个值</li>\n<li><code>%r9</code>，<code>phrase2</code>中的<code>%rsp+0xc</code>存放第四个值</li>\n<li>第五个、第六个值所在的地址需要通过压栈传参，由栈帧压栈顺序是从右向左压栈，可知，<code>phrase2</code>中的<code>%rsp+0x10</code>存放第五个值、<code>phrase2</code>中的<code>%rsp+0x14</code>存放第六个值。</li>\n</ul>\n<p>好了，知道输入的值都到哪儿去了，这样就简单了许多了，然后再看<code>phrase2</code>函数：</p>\n<p><img data-src=\"csapp-lab-2/phrase2.png\"></p>\n<p>首先看**&lt;+14&gt;**处，第一个数必须是1，不是炸弹就爆炸。</p>\n<p>不是就跳到**&lt;+52&gt;<strong>处，然后</strong>&lt;+27&gt;<strong>到</strong>&lt;+52&gt;**构成一个循环，意思是比较后一个数必须是前一个数的两倍。</p>\n<p>那答案就出来了：<code>1 2 4 8 16 32</code></p>\n<h3 id=\"Phrase-3\"><a href=\"#Phrase-3\" class=\"headerlink\" title=\"#Phrase 3\"></a>#Phrase 3</h3><p>好了，兄嘚，第三炮！</p>\n<p><img data-src=\"csapp-lab-2/phrase3.png\"></p>\n<p>输入还是<code>sscanf</code>函数，同理，<code>%rdi</code>是我们输入的，<code>%rsi</code>是<code>format</code>打印一下看是<code>%d %d</code>，需要两个地址存放，分别是<code>%rdx</code>和<code>%rcx</code>，对应于<code>%rsp+0x8</code>和<code>%rsp+0xc</code>。输入完成后，查看返回值<code>%eax</code>必须大于1，两个输入必然是最满足要求的。满足之后，我们来到了**&lt;+39&gt;**的位置，我们比较第一个输入值<code>x</code>和7，如果第一个<code>x</code>大于7则爆炸，所以<code>x</code>是&lt;=7的。</p>\n<p>接下来将x值放入<code>%eax</code>寄存器，然后通过间接跳转跳转到<code>0x402470+8*%eax</code>地址所存储的地址。我们可以看到这个跳转目标和输入有关的。然后我们可以输出相应的地址，发现跳转的地址刚好是修改<code>%eax</code>的地方，最终<code>%eax</code>都要和第二个数<code>y</code>（<code>%rsp+0xc</code>地址存储的值）相等。</p>\n<p>就比如说x为0，则跳转到<code>0x402470</code>的地址中存储的地址（**&lt;+57&gt;<strong>的位置），将<code>%eax</code>修改为0xcf（十进制207），然后跳转到</strong>&lt;+123&gt;**处比较0xcf和<code>y</code>值，相等才不会爆炸。所以结果可以输入<code>0 207</code>。</p>\n<p>答案还有好几个，不一一列举了！</p>\n<h3 id=\"Phrase-4\"><a href=\"#Phrase-4\" class=\"headerlink\" title=\"#Phrase 4\"></a>#Phrase 4</h3><p>第四弹！</p>\n<p>主要考察递归函数调用（当然你也可以避过这个问题！）</p>\n<p>先看主要部分代码：</p>\n<p><img data-src=\"csapp-lab-2/phrase4.png\"></p>\n<p>通过这个程序我们可以分析出，除了输入函数和爆炸函数之外，还调用了一个<code>func4</code> 函数。输入的是两个数字，存于<code>%rsp+0x8</code>和<code>%rsp+0xc</code>处。我们还可以分析出，<strong>调用这个函数之后返回值<code>%eax</code>必须为0，而且第二个输入的数必须为0。</strong></p>\n<p>我们再看传入的参数：</p>\n<ul>\n<li><code>%rdi</code>：第一个数，记作x</li>\n<li><code>%rsi</code>：0</li>\n<li><code>%rdx</code>：0xe，即14</li>\n<li><code>%rcx</code>：第二个数，记作y。不确定会不会用到，看到下面的代码很显然没用使用到，直接被覆盖了。</li>\n</ul>\n<p><img data-src=\"csapp-lab-2/phrase4-func.png\"></p>\n<p>查看代码，如果你进入了递归是太恶心了，不过也可以分析，好像要求输入x值必须满足是一个数列的元素。那么如何避免递归，看**&lt;+22&gt;<strong>行，可以分析出此时<code>%ecx</code>的值为7，如果<code>%edi</code>也就是x值如果&gt;=7的话，那就会跳转到</strong>&lt;+36&gt;**，此时将<code>%eax</code>置位0（满足返回值为0），然后再比较刚比较的<code>%edi</code>和<code>%ecx</code>，如果<code>%edi</code>&lt;=7的话就结束。所以最终x=7满足条件。</p>\n<p>所以很简单的答案，<code>7 0</code>。递归的值没仔细考虑，实在是递归太难调试了，可能是自己没掌握到方法。很遗憾。</p>\n<h3 id=\"Phrase-5\"><a href=\"#Phrase-5\" class=\"headerlink\" title=\"#Phrase 5\"></a>#Phrase 5</h3><p>第五发！</p>\n<p>这个也比较有趣，主要是涉及到了ASCII码，感觉真的是在破译代码，解除炸弹！</p>\n<p>下面就是代码：</p>\n<p><img data-src=\"csapp-lab-2/phrase5.png\"></p>\n<p>首先我们看到了<code>%fs</code>寄存器，这是用于存储<code>当前活动线程的TEB结构</code>地址的一个寄存器，和解题无关，可以不用在意。</p>\n<p>首先输入的字符串地址在<code>%rdi</code>中，然后调用<code>string_length</code>函数，可以看电脑返回值<code>%eax</code>必须为6，也就是输入的字符串长度必须为6。</p>\n<p>接下来的一段程序主要是以下作用：</p>\n<ul>\n<li>取6个ASCII码低4位，记作<code>low4[i]</code>。</li>\n<li>将<code>low4[i]</code>作为偏移量和常量A（0x4024b0）相加作为地址取得改地址存储的字符<code>character[i]</code></li>\n<li>将这一系列字符<code>character</code>分别存于<code>%rsp+0x10</code>到<code>%rsp+0x15</code></li>\n<li>调用<code>strings_not_equal</code>比较这些字符和存于<strong>0x40245e</strong>的字符串（flyers）是否相等，相等则结束</li>\n</ul>\n<p>那么很简单了！</p>\n<p>常量A地址开始存储的是什么字符？（忘了截图了……），是<code>maduiersnfotvbyl</code>共16个。我们找到<code>flyers</code>这六个字符的相对偏移地址用16进制表示分别为<code>9fe567</code>，然后据此查找ASCII码查看低四位相同的字符（答案不固定，我找到的是<code>ionufg</code>）。</p>\n<p>完事！</p>\n<h3 id=\"Phrase-6\"><a href=\"#Phrase-6\" class=\"headerlink\" title=\"#Phrase 6\"></a>#Phrase 6</h3><p>最后一弹，是有点难度的，一定要找一个比较好的环境做，需要大约2个小时的时间。争取一次性完成。</p>\n<p>这一弹主要是考察循环了，循环炒鸡多有木有！另外还需要知道链表的结构。</p>\n<p>由于代码太多，就不一一写了，主要是写一下代码的作用。</p>\n<p>代码如下：</p>\n<p>首先是第一部分：</p>\n<p><img data-src=\"csapp-lab-2/phrase6-1.png\"></p>\n<p>首先读入了6个数字，分别放入了<code>%rsp+0x0、%rsp+0x4、%rsp+0x8、%rsp+0xc、%rsp+0x10、%rsp+0x14</code></p>\n<p>这是第一个大循环，**&lt;+32&gt;<strong>到</strong>&lt;+93&gt;<strong>行，内嵌一个小循环</strong>&lt;+65&gt;<strong>到</strong>&lt;+87&gt;**行。大循环中部分的作用是确定每个数必须&lt;=6；小循环的作用是确定第<code>i</code>个数不和第<code>i+1</code>~第<code>6</code>个数相同（也就是输入的所有数字不能有相同的）。</p>\n<p>接下来再看剩下的部分：</p>\n<p><img data-src=\"csapp-lab-2/phrase6-2.png\" alt=\"2\"></p>\n<p>首先有个循环**&lt;+103&gt;<strong>到</strong>&lt;+121&gt;**，主要作用就是令<code>a[i]=7-a[i],i=1,2,3,4,5,6</code>，就是将存于栈中的数（也是你输入的数）进行对7求补并保存回原位置。</p>\n<p>接下来又有一个大循环**&lt;+130&gt;<strong>到</strong>&lt;+181&gt;<strong>部分，里面嵌入了一个小循环</strong>&lt;+130&gt;<strong>到</strong>&lt;+139&gt;**。主要作用是访问一个链表，链表的首地址为<code>0x6032d0</code>，针对输入的第<code>i</code>个数，按照<code>a[i]</code>的值获取链表第<code>a[i]</code>个节点，并把节点首地址放入<code>%rsp+0x20+0x0</code>~到<code>%rsp+0x20+0x28</code>刚好是6个节点。</p>\n<p>然后下面一段代码，又是一个循环**&lt;+235&gt;<strong>到</strong>&lt;+257&gt;**，主要是说明<code>%rsp+0x20+0x0</code>~到<code>%rsp+0x20+0x28</code>存储的链表节点值必须是递减的。</p>\n<p>下面打印的是这六个节点的值和指向下一个节点的地址。</p>\n<p><img data-src=\"csapp-lab-2/phrase6-linklist.png\"></p>\n<p>找到了各节点的值，我们就可以排序得到节点标号的排序，节点标号的排序恰恰是输入6个数字对7求补的值，然后再对7求补即可得到结果<code>4 3 2 1 6 5</code>。</p>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p>完成的一瞬家很爽！秀一下结果！</p>\n<p><img data-src=\"csapp-lab-2/success.png\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这次实验真的是收货颇丰，一是完成了大名鼎鼎的bomblab，二是切切实实的学到了新东西。</p>\n<h3 id=\"所感\"><a href=\"#所感\" class=\"headerlink\" title=\"所感\"></a>所感</h3><ul>\n<li>相对于上次实验，感觉动手能力变强了</li>\n<li>自己有一些浮躁</li>\n<li>实验时有时走神，（主要是没有草稿时是这样的，没草稿直接看是很难看出答案的。。我太菜。）</li>\n</ul>\n<h3 id=\"所得\"><a href=\"#所得\" class=\"headerlink\" title=\"所得\"></a>所得</h3><ul>\n<li>学会了GDB的使用方法，对调试又有了一定的认识</li>\n<li>彻底理解了栈帧的设计</li>\n<li>熟悉了一些常用寄存器的用途</li>\n<li>熟悉了AT&amp;T x86-64汇编指令</li>\n</ul>\n<h3 id=\"下一步\"><a href=\"#下一步\" class=\"headerlink\" title=\"下一步\"></a>下一步</h3><ol>\n<li>实验时要草稿纸，好记性不如烂笔头</li>\n<li>静下心来，莫浮躁，循序渐进。</li>\n<li>阅读英文书籍，增强英语环境下的学习能力</li>\n</ol>\n","site":{"data":{}},"excerpt":"<div class=\"note default\"><p>脑越用越灵，手越用越巧。</p>\n</div>","more":"<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>没想到这BombLab果然有趣。一开始实验的时候还是有点困难的，主要是对GDB调试和一些知识点不够熟悉。虽然前面两个问题都有借鉴别人的方法。但是后面四个难度最大的真的是独立完成，完成的瞬间成就感不言而喻，达到climax。可能主要是对汇编有一点底子所以实验相对比较容易。</p>\n<h2 id=\"CSAPP-实验记录\"><a href=\"#CSAPP-实验记录\" class=\"headerlink\" title=\"CSAPP 实验记录\"></a>CSAPP 实验记录</h2><div class=\"note info\"><p><strong><a href=\"/tags/CSAPP-Lab/\">本系列文章</a>主要记录 CSAPP 3.0 的实验过程，所有实验记录文章请查看<a href=\"/tags/CSAPP-Lab/\">这儿</a></strong></p>\n</div>\n\n\n<p>快速开始请访问 <code>CSAPP</code> <a href=\"http://csapp.cs.cmu.edu/3e/labs.html\">Lab</a> 官网，本次实验记录是基于 CSAPP 3.0，实验日期始于：<code>2019-3-18</code></p>\n<h2 id=\"实验开始前的归纳\"><a href=\"#实验开始前的归纳\" class=\"headerlink\" title=\"实验开始前的归纳\"></a>实验开始前的归纳</h2><div class=\"note primary\"><p>这个实验首先要求对汇编有一定的掌握，所以在此就不列举汇编的相关内容了。个人感觉用到最重要也是想要入手必须要具备的知识：<strong>一是学会使用反汇编及调试工具，二是了解函数调用的栈帧</strong>。</p>\n</div>\n\n<h3 id=\"栈帧\"><a href=\"#栈帧\" class=\"headerlink\" title=\"栈帧\"></a>栈帧</h3><p>想要了解栈帧的结构？我们还是先来回顾（review）以下有哪些和函数栈相关的寄存器吧。（这儿并没有包含浮点寄存器）</p>\n<p><img data-src=\"csapp-lab-2/registers.png\"></p>\n<ul>\n<li>所谓调用者保存，就是可以让被调用者（自身不作为另一个调用者）随意使用，也是为了自己用到的数据不被覆盖。</li>\n<li>所谓被调用者保存，恰恰与调用者保存相反。</li>\n<li>函数调用一般参数传递（非浮点）前6个参数存于寄存器，剩下的参数<strong>按照函数定义从右向左压栈</strong>。</li>\n<li>栈指针指向函数栈栈顶。</li>\n<li><mark class=\"label primary\">%rax</mark>用于保存函数调用返回值。</li>\n</ul>\n<p>了解了这些寄存器，我们再来看看栈帧的结构</p>\n<p><img data-src=\"csapp-lab-2/stackframe.png\"></p>\n<p>就拿函数P的栈帧来说，从栈底到栈顶的方向分别存储以下内容：</p>\n<ul>\n<li>被保存的寄存器</li>\n<li>局部变量（<code>sub $0x18,%rsp </code>）</li>\n<li>如果调用其他函数参数多于6，便有参数构造区</li>\n<li>调用其他函数时需要将返回地址压栈</li>\n</ul>\n<h3 id=\"工具使用方法\"><a href=\"#工具使用方法\" class=\"headerlink\" title=\"工具使用方法\"></a>工具使用方法</h3><h4 id=\"CGDB\"><a href=\"#CGDB\" class=\"headerlink\" title=\"CGDB\"></a>CGDB</h4><p>跟随<a href=\"https://zhuanlan.zhihu.com/p/31269514\">孟佬</a>用的CGDB，<a href=\"https://cgdb.github.io/\">官网</a>及<a href=\"http://csapp.cs.cmu.edu/3e/docs/gdbnotes-x86-64.pdf\">gdb使用方式</a>，以下是CGDB运行缺省截图。</p>\n<p><img data-src=\"csapp-lab-2/cgdb.png\"></p>\n<h2 id=\"Bomb-Lab\"><a href=\"#Bomb-Lab\" class=\"headerlink\" title=\"Bomb Lab\"></a>Bomb Lab</h2><p>BombLab家喻户晓，个人感觉之所以这个实验这么有名，主要有三点：</p>\n<ul>\n<li>一是作为配套实验能够真正的训练学到的程序机器级表示的内容；</li>\n<li>二是必不可少的一部分——实验的有趣性；</li>\n<li>三是能够加强我们的调试程序的能力，终身受益（前提你是程序员:smile:）。</li>\n</ul>\n<h3 id=\"一开始\"><a href=\"#一开始\" class=\"headerlink\" title=\"一开始\"></a>一开始</h3><p>好了开始真正的实验部分了。</p>\n<p>首先我们使用如下命令来开始调试<code>bomb</code>可执行程序：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cgdb bomb</span><br></pre></td></tr></table></figure>\n\n<p>就会看到如下界面：</p>\n<p><img data-src=\"csapp-lab-2/bomb.png\"></p>\n<p>这是给我们的主程序，里面主要是炸弹程序的初始化，以及这些炸弹的输入以及输入检测。</p>\n<p>在CGDB模式下我们可以使用<code>:set disasm</code>命令将主程序以汇编形式展示，当然使用<code>:set nodisasm</code>就会返回原来的样子。</p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><div class=\"note success no-icon\"><p>所有炸弹拆除的思路都很简单，就是设断点，并一步步调试，找到跳转到<code>explode_bomb</code>的跳转命令，结合逻辑和寄存器的值进行判断如何避免跳转引发爆炸。</p>\n</div>\n\n<h4 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h4><p>在GDB模式下，使用<code>run</code>命令开启调试。通过输入重定向的方法避免多次输入：<code>run &lt; in.txt</code></p>\n<h4 id=\"设断点\"><a href=\"#设断点\" class=\"headerlink\" title=\"设断点\"></a>设断点</h4><p>在GDB模式下，使用<code>break 行号</code>打断点</p>\n<h4 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h4><p>设置断点后，具体参照GDB手册进行调试。</p>\n<h4 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h4><p>比如想要破解Phrase1这个炸弹，需要执行以下步骤：</p>\n<ul>\n<li>设置调用函数断点（<code>phrase_1(input)</code>处）</li>\n<li>运行至断点处并调试（<code>stepi</code>+<code>nexti</code>+<code>finish</code>+<code>continue</code>等命令）</li>\n<li>进入函数内部进一步观察（使用<code>print</code>+<code>x</code>等命令）</li>\n<li>分析代码得出答案</li>\n</ul>\n<h3 id=\"Phrase-Before\"><a href=\"#Phrase-Before\" class=\"headerlink\" title=\"#Phrase Before\"></a>#Phrase Before</h3><p>如果你是第一次做实验的话，这一步你一定要知道：</p>\n<p><img data-src=\"csapp-lab-2/phrase1-input.png\"></p>\n<p>这六个炸弹都是都是通过一个<code>read_line</code>函数从输入流（不管是标准输入还是文件输入重定向）中读取的，返回值为<code>input</code>，对应于<code>%rax</code>寄存器（存放的一个输入字符串的首地址）。我们看到将<code>%rax</code>寄存器的内容转移到<code>%rdi</code>寄存器里了，我们知道寄存器<code>%rdi</code>用于存放调用函数时的第一个参数。接下来就调用炸弹函数了。</p>\n<p><strong>再强调一遍，所有的炸弹函数的第一个参数<code>%rdi</code>都是我们输入的字符串的首地址。</strong></p>\n<h3 id=\"Phrase-1\"><a href=\"#Phrase-1\" class=\"headerlink\" title=\"#Phrase 1\"></a>#Phrase 1</h3><p>第一个炸弹的汇编代码如下所示：</p>\n<p><img data-src=\"csapp-lab-2/phrase1.png\"></p>\n<p>第一个算是一个入门的，主要是想让你熟悉一下BombLab的流程。</p>\n<p>我们输入的字符串首地址在<code>%rdi</code>中；</p>\n<p>②行申请了8个字节的栈空间；</p>\n<p>③行将一个立即数（一看就是一个地址）存放到<code>%esi</code>寄存器（这是第二个参数）</p>\n<p>④行调用了一个函数，如果你想快速通过的话不用看内部实现，是比较两个字符串是否相同。（内部比较就不说了，一个一个比较字符而已）</p>\n<p>⑤行使用test命令（同<code>and</code>命令，不修改目标对象的值）来测试<code>%eax</code>中的值是否为0，如果为0则跳过引爆炸弹的函数。</p>\n<p>很简单了，使用<code>x/s 0x402400</code>按字符串输出这个地址存储的内容（这个可能是我在比较字符串的函数内输出的 :smile: ）：</p>\n<p><img data-src=\"csapp-lab-2/phrase1-inputstr.png\"></p>\n<p>第一弹，拆除完毕！</p>\n<h3 id=\"Phrase-2\"><a href=\"#Phrase-2\" class=\"headerlink\" title=\"#Phrase 2\"></a>#Phrase 2</h3><p>第二弹，来吧勇士！（好吧，感觉有点中二。）</p>\n<p><img data-src=\"csapp-lab-2/phrase2.png\"></p>\n<p>嗯，映入我们眼前的是一个<code>&lt;read_six_numbers&gt;</code>函数，一猜也是让我们输入6个数字:</p>\n<p><img data-src=\"csapp-lab-2/phrase2-readnum.png\"></p>\n<p>然后我们查看一下这个函数内部，发现里面又调用了<code>sscanf</code>这个函数（功能是从一个字符串中读取一定格式的数据，和<code>scanf</code>一样，除了<code>scanf</code>是从标准输入流中读取）。参数顺序分别是，待读取内容的字符串、用于格式读取的格式化字符串，还有各个变量读取后存放的地址。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sscanf</span><span class=\"params\">( <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *buffer, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *format [, argument ] ... )</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>我们查看<code>&lt;read_six_number&gt;</code>中参数构造如下：</p>\n<ul>\n<li><code>%rdi</code>，输入传入的字符串首地址</li>\n<li><code>%rsi</code>，由<code>0x4025c3</code>地址的字符串决定，不出意料果然是<code>%d %d %d %d %d %d</code></li>\n<li><code>%rdx</code>，由<code>%rsi</code>给出，<code>%rsi</code>又由<code>phrase2</code>的<code>%rsp</code>给出，所以<code>phrase2</code>中的<code>%rsp</code>地址处存放<code>sscanf</code>中第一个输入的值</li>\n<li><code>%rcx</code>，<code>phrase2</code>中的<code>%rsp+0x4</code>处存放第二个值</li>\n<li><code>%r8</code>，<code>phrase2</code>中的<code>%rsp+0x8</code>存放第三个值</li>\n<li><code>%r9</code>，<code>phrase2</code>中的<code>%rsp+0xc</code>存放第四个值</li>\n<li>第五个、第六个值所在的地址需要通过压栈传参，由栈帧压栈顺序是从右向左压栈，可知，<code>phrase2</code>中的<code>%rsp+0x10</code>存放第五个值、<code>phrase2</code>中的<code>%rsp+0x14</code>存放第六个值。</li>\n</ul>\n<p>好了，知道输入的值都到哪儿去了，这样就简单了许多了，然后再看<code>phrase2</code>函数：</p>\n<p><img data-src=\"csapp-lab-2/phrase2.png\"></p>\n<p>首先看**&lt;+14&gt;**处，第一个数必须是1，不是炸弹就爆炸。</p>\n<p>不是就跳到**&lt;+52&gt;<strong>处，然后</strong>&lt;+27&gt;<strong>到</strong>&lt;+52&gt;**构成一个循环，意思是比较后一个数必须是前一个数的两倍。</p>\n<p>那答案就出来了：<code>1 2 4 8 16 32</code></p>\n<h3 id=\"Phrase-3\"><a href=\"#Phrase-3\" class=\"headerlink\" title=\"#Phrase 3\"></a>#Phrase 3</h3><p>好了，兄嘚，第三炮！</p>\n<p><img data-src=\"csapp-lab-2/phrase3.png\"></p>\n<p>输入还是<code>sscanf</code>函数，同理，<code>%rdi</code>是我们输入的，<code>%rsi</code>是<code>format</code>打印一下看是<code>%d %d</code>，需要两个地址存放，分别是<code>%rdx</code>和<code>%rcx</code>，对应于<code>%rsp+0x8</code>和<code>%rsp+0xc</code>。输入完成后，查看返回值<code>%eax</code>必须大于1，两个输入必然是最满足要求的。满足之后，我们来到了**&lt;+39&gt;**的位置，我们比较第一个输入值<code>x</code>和7，如果第一个<code>x</code>大于7则爆炸，所以<code>x</code>是&lt;=7的。</p>\n<p>接下来将x值放入<code>%eax</code>寄存器，然后通过间接跳转跳转到<code>0x402470+8*%eax</code>地址所存储的地址。我们可以看到这个跳转目标和输入有关的。然后我们可以输出相应的地址，发现跳转的地址刚好是修改<code>%eax</code>的地方，最终<code>%eax</code>都要和第二个数<code>y</code>（<code>%rsp+0xc</code>地址存储的值）相等。</p>\n<p>就比如说x为0，则跳转到<code>0x402470</code>的地址中存储的地址（**&lt;+57&gt;<strong>的位置），将<code>%eax</code>修改为0xcf（十进制207），然后跳转到</strong>&lt;+123&gt;**处比较0xcf和<code>y</code>值，相等才不会爆炸。所以结果可以输入<code>0 207</code>。</p>\n<p>答案还有好几个，不一一列举了！</p>\n<h3 id=\"Phrase-4\"><a href=\"#Phrase-4\" class=\"headerlink\" title=\"#Phrase 4\"></a>#Phrase 4</h3><p>第四弹！</p>\n<p>主要考察递归函数调用（当然你也可以避过这个问题！）</p>\n<p>先看主要部分代码：</p>\n<p><img data-src=\"csapp-lab-2/phrase4.png\"></p>\n<p>通过这个程序我们可以分析出，除了输入函数和爆炸函数之外，还调用了一个<code>func4</code> 函数。输入的是两个数字，存于<code>%rsp+0x8</code>和<code>%rsp+0xc</code>处。我们还可以分析出，<strong>调用这个函数之后返回值<code>%eax</code>必须为0，而且第二个输入的数必须为0。</strong></p>\n<p>我们再看传入的参数：</p>\n<ul>\n<li><code>%rdi</code>：第一个数，记作x</li>\n<li><code>%rsi</code>：0</li>\n<li><code>%rdx</code>：0xe，即14</li>\n<li><code>%rcx</code>：第二个数，记作y。不确定会不会用到，看到下面的代码很显然没用使用到，直接被覆盖了。</li>\n</ul>\n<p><img data-src=\"csapp-lab-2/phrase4-func.png\"></p>\n<p>查看代码，如果你进入了递归是太恶心了，不过也可以分析，好像要求输入x值必须满足是一个数列的元素。那么如何避免递归，看**&lt;+22&gt;<strong>行，可以分析出此时<code>%ecx</code>的值为7，如果<code>%edi</code>也就是x值如果&gt;=7的话，那就会跳转到</strong>&lt;+36&gt;**，此时将<code>%eax</code>置位0（满足返回值为0），然后再比较刚比较的<code>%edi</code>和<code>%ecx</code>，如果<code>%edi</code>&lt;=7的话就结束。所以最终x=7满足条件。</p>\n<p>所以很简单的答案，<code>7 0</code>。递归的值没仔细考虑，实在是递归太难调试了，可能是自己没掌握到方法。很遗憾。</p>\n<h3 id=\"Phrase-5\"><a href=\"#Phrase-5\" class=\"headerlink\" title=\"#Phrase 5\"></a>#Phrase 5</h3><p>第五发！</p>\n<p>这个也比较有趣，主要是涉及到了ASCII码，感觉真的是在破译代码，解除炸弹！</p>\n<p>下面就是代码：</p>\n<p><img data-src=\"csapp-lab-2/phrase5.png\"></p>\n<p>首先我们看到了<code>%fs</code>寄存器，这是用于存储<code>当前活动线程的TEB结构</code>地址的一个寄存器，和解题无关，可以不用在意。</p>\n<p>首先输入的字符串地址在<code>%rdi</code>中，然后调用<code>string_length</code>函数，可以看电脑返回值<code>%eax</code>必须为6，也就是输入的字符串长度必须为6。</p>\n<p>接下来的一段程序主要是以下作用：</p>\n<ul>\n<li>取6个ASCII码低4位，记作<code>low4[i]</code>。</li>\n<li>将<code>low4[i]</code>作为偏移量和常量A（0x4024b0）相加作为地址取得改地址存储的字符<code>character[i]</code></li>\n<li>将这一系列字符<code>character</code>分别存于<code>%rsp+0x10</code>到<code>%rsp+0x15</code></li>\n<li>调用<code>strings_not_equal</code>比较这些字符和存于<strong>0x40245e</strong>的字符串（flyers）是否相等，相等则结束</li>\n</ul>\n<p>那么很简单了！</p>\n<p>常量A地址开始存储的是什么字符？（忘了截图了……），是<code>maduiersnfotvbyl</code>共16个。我们找到<code>flyers</code>这六个字符的相对偏移地址用16进制表示分别为<code>9fe567</code>，然后据此查找ASCII码查看低四位相同的字符（答案不固定，我找到的是<code>ionufg</code>）。</p>\n<p>完事！</p>\n<h3 id=\"Phrase-6\"><a href=\"#Phrase-6\" class=\"headerlink\" title=\"#Phrase 6\"></a>#Phrase 6</h3><p>最后一弹，是有点难度的，一定要找一个比较好的环境做，需要大约2个小时的时间。争取一次性完成。</p>\n<p>这一弹主要是考察循环了，循环炒鸡多有木有！另外还需要知道链表的结构。</p>\n<p>由于代码太多，就不一一写了，主要是写一下代码的作用。</p>\n<p>代码如下：</p>\n<p>首先是第一部分：</p>\n<p><img data-src=\"csapp-lab-2/phrase6-1.png\"></p>\n<p>首先读入了6个数字，分别放入了<code>%rsp+0x0、%rsp+0x4、%rsp+0x8、%rsp+0xc、%rsp+0x10、%rsp+0x14</code></p>\n<p>这是第一个大循环，**&lt;+32&gt;<strong>到</strong>&lt;+93&gt;<strong>行，内嵌一个小循环</strong>&lt;+65&gt;<strong>到</strong>&lt;+87&gt;**行。大循环中部分的作用是确定每个数必须&lt;=6；小循环的作用是确定第<code>i</code>个数不和第<code>i+1</code>~第<code>6</code>个数相同（也就是输入的所有数字不能有相同的）。</p>\n<p>接下来再看剩下的部分：</p>\n<p><img data-src=\"csapp-lab-2/phrase6-2.png\" alt=\"2\"></p>\n<p>首先有个循环**&lt;+103&gt;<strong>到</strong>&lt;+121&gt;**，主要作用就是令<code>a[i]=7-a[i],i=1,2,3,4,5,6</code>，就是将存于栈中的数（也是你输入的数）进行对7求补并保存回原位置。</p>\n<p>接下来又有一个大循环**&lt;+130&gt;<strong>到</strong>&lt;+181&gt;<strong>部分，里面嵌入了一个小循环</strong>&lt;+130&gt;<strong>到</strong>&lt;+139&gt;**。主要作用是访问一个链表，链表的首地址为<code>0x6032d0</code>，针对输入的第<code>i</code>个数，按照<code>a[i]</code>的值获取链表第<code>a[i]</code>个节点，并把节点首地址放入<code>%rsp+0x20+0x0</code>~到<code>%rsp+0x20+0x28</code>刚好是6个节点。</p>\n<p>然后下面一段代码，又是一个循环**&lt;+235&gt;<strong>到</strong>&lt;+257&gt;**，主要是说明<code>%rsp+0x20+0x0</code>~到<code>%rsp+0x20+0x28</code>存储的链表节点值必须是递减的。</p>\n<p>下面打印的是这六个节点的值和指向下一个节点的地址。</p>\n<p><img data-src=\"csapp-lab-2/phrase6-linklist.png\"></p>\n<p>找到了各节点的值，我们就可以排序得到节点标号的排序，节点标号的排序恰恰是输入6个数字对7求补的值，然后再对7求补即可得到结果<code>4 3 2 1 6 5</code>。</p>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p>完成的一瞬家很爽！秀一下结果！</p>\n<p><img data-src=\"csapp-lab-2/success.png\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这次实验真的是收货颇丰，一是完成了大名鼎鼎的bomblab，二是切切实实的学到了新东西。</p>\n<h3 id=\"所感\"><a href=\"#所感\" class=\"headerlink\" title=\"所感\"></a>所感</h3><ul>\n<li>相对于上次实验，感觉动手能力变强了</li>\n<li>自己有一些浮躁</li>\n<li>实验时有时走神，（主要是没有草稿时是这样的，没草稿直接看是很难看出答案的。。我太菜。）</li>\n</ul>\n<h3 id=\"所得\"><a href=\"#所得\" class=\"headerlink\" title=\"所得\"></a>所得</h3><ul>\n<li>学会了GDB的使用方法，对调试又有了一定的认识</li>\n<li>彻底理解了栈帧的设计</li>\n<li>熟悉了一些常用寄存器的用途</li>\n<li>熟悉了AT&amp;T x86-64汇编指令</li>\n</ul>\n<h3 id=\"下一步\"><a href=\"#下一步\" class=\"headerlink\" title=\"下一步\"></a>下一步</h3><ol>\n<li>实验时要草稿纸，好记性不如烂笔头</li>\n<li>静下心来，莫浮躁，循序渐进。</li>\n<li>阅读英文书籍，增强英语环境下的学习能力</li>\n</ol>"},{"title":"CSS系列：对齐","mathjax":false,"copyright":true,"comment":true,"date":"2019-11-18T05:56:37.000Z","_content":"\n{% note primary %}\n水平居中、垂直居中、右对齐。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 前言\n\n元素居中是实际前端开发中常用的一种操作。元素居中分为垂直居中和水平居中，为了以后方便重查，本篇文章总结一下一些常见的对齐方式。\n\n**样例代码如下，查看时请参考下面的代码。**\n\n\n<p class=\"codepen\" data-height=\"800\" data-theme-id=\"dark\" data-default-tab=\"css,result\" data-user=\"scarboroughcoral\" data-slug-hash=\"oNNmbMV\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Centering with CSS Part 1\">\n  <span>See the Pen <a href=\"https://codepen.io/scarboroughcoral/pen/oNNmbMV\">\n  Centering with CSS Part 1</a> by 李明岳 (<a href=\"https://codepen.io/scarboroughcoral\">@scarboroughcoral</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n### 水平居中\n\n#### 文本水平居中\n\n- `text-align`属性\n\n#### div水平居中\n\n- **蓝色盒子**，将父容器设为`text-align:center`，div设为`display:inline-block`，适用于多个div水平居中。\n- 【推荐】**黄色盒子**，使用`margin:auto`属性设置（需要设置宽度）\n- 【推荐，常用于响应式开发，注意脱离文档流带来的问题】**绿色盒子**，父容器`position:relative`，div设置`position:absolute`和`left:50%`和`transform:translateX(-50%)`\n- **绿色盒子**，父容器`position:relative`，div设置`position:absolute`和`left:50%`和`margin-left:(-width/2)`\n- 【极度推荐,响应式，无需计算margin】**粉色盒子**，父容器`display:flex`并`flex-direction:row`（默认），然后`justify-content:center`（要看主轴的方向）\n\n### 右对齐\n\n#### 文本右对齐\n\n- 使用`text-align:right`\n\n#### div右对齐\n\n- 使用`position:absolute`和`right:0`实现\n- 【推荐】使用`flex`布局\n- （十分奇妙）使用`margin-left:auto`，需要设置宽度\n- 使用`float`，注意脱离文档流带来的问题（eg：如果高度大于父容器，则需要设置父容器`overflow:auto`）\n- 将父容器设为`text-align:right`，div设为`display:inline-block`\n\n\n### 垂直居中\n\n垂直居中不太好演示，代码直接在这里写了。\n\n#### 文本垂直居中\n\n- 《不推荐》使用`padding`\n- 【推荐】使用`height`和`line-height`设置，考虑文本多行\n```css\n.center {\n  line-height: 200px;\n  height: 200px;\n  border: 3px solid green;\n  text-align: center;\n}\n\n/* If the text has multiple lines, add the following: */\n.center p {\n  line-height: 1.5;\n  display: inline-block;\n  vertical-align: middle;\n}\n  ```\n\n#### div垂直居中\n\n- 父容器设置`line-height`和`height`等高，div设置为`display:inline-block`和`vertical-align:middle`\n```css\n.parent{\n  height:200px;\n  line-height:200px;\n}\n.child{\n  display:inline-block;\n  vertical-align:middle;\n}\n```\n- 父容器`position:relative`，div设置`position:absolute`和`top:50%`和`margin-top:(-height/2)`\n- 【推荐,响应式】父容器`position:relative`，div设置`position:absolute`和`top:50%`和`transform:translateY(-50%)`\n```css\n.parent{\n  position:relative;\n}\n.child{\n  position:absolute;\n  top:50%;\n  transform:translateY(-50%);\n}\n```\n\n- 【极度推荐,响应式，无需计算margin】使用`flex`\n```css\n.parent{\n  display:flex;\n  align-items:center;\n}\n.child{\n  width:100px;\n  height:100px;\n}\n```\n\n## 总结\n\n大致就是如此，后续发现其他方法继续补充。\n\n\n## Reference\n\n- [CSS Layout - Horizontal & Vertical Align](https://www.w3schools.com/css/css_align.asp)\n- [How to center things with style in CSS](https://www.freecodecamp.org/news/how-to-center-things-with-style-in-css-dc87b7542689)","source":"_posts/css-align-center.md","raw":"---\ntitle: CSS系列：对齐\nmathjax: false\ncopyright: true\ncomment: true\ndate: 2019-11-18 13:56:37\ntags:\n- CSS\ncategories:\n- Front-End Development\n- CSS\n\n---\n\n{% note primary %}\n水平居中、垂直居中、右对齐。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 前言\n\n元素居中是实际前端开发中常用的一种操作。元素居中分为垂直居中和水平居中，为了以后方便重查，本篇文章总结一下一些常见的对齐方式。\n\n**样例代码如下，查看时请参考下面的代码。**\n\n\n<p class=\"codepen\" data-height=\"800\" data-theme-id=\"dark\" data-default-tab=\"css,result\" data-user=\"scarboroughcoral\" data-slug-hash=\"oNNmbMV\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Centering with CSS Part 1\">\n  <span>See the Pen <a href=\"https://codepen.io/scarboroughcoral/pen/oNNmbMV\">\n  Centering with CSS Part 1</a> by 李明岳 (<a href=\"https://codepen.io/scarboroughcoral\">@scarboroughcoral</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n### 水平居中\n\n#### 文本水平居中\n\n- `text-align`属性\n\n#### div水平居中\n\n- **蓝色盒子**，将父容器设为`text-align:center`，div设为`display:inline-block`，适用于多个div水平居中。\n- 【推荐】**黄色盒子**，使用`margin:auto`属性设置（需要设置宽度）\n- 【推荐，常用于响应式开发，注意脱离文档流带来的问题】**绿色盒子**，父容器`position:relative`，div设置`position:absolute`和`left:50%`和`transform:translateX(-50%)`\n- **绿色盒子**，父容器`position:relative`，div设置`position:absolute`和`left:50%`和`margin-left:(-width/2)`\n- 【极度推荐,响应式，无需计算margin】**粉色盒子**，父容器`display:flex`并`flex-direction:row`（默认），然后`justify-content:center`（要看主轴的方向）\n\n### 右对齐\n\n#### 文本右对齐\n\n- 使用`text-align:right`\n\n#### div右对齐\n\n- 使用`position:absolute`和`right:0`实现\n- 【推荐】使用`flex`布局\n- （十分奇妙）使用`margin-left:auto`，需要设置宽度\n- 使用`float`，注意脱离文档流带来的问题（eg：如果高度大于父容器，则需要设置父容器`overflow:auto`）\n- 将父容器设为`text-align:right`，div设为`display:inline-block`\n\n\n### 垂直居中\n\n垂直居中不太好演示，代码直接在这里写了。\n\n#### 文本垂直居中\n\n- 《不推荐》使用`padding`\n- 【推荐】使用`height`和`line-height`设置，考虑文本多行\n```css\n.center {\n  line-height: 200px;\n  height: 200px;\n  border: 3px solid green;\n  text-align: center;\n}\n\n/* If the text has multiple lines, add the following: */\n.center p {\n  line-height: 1.5;\n  display: inline-block;\n  vertical-align: middle;\n}\n  ```\n\n#### div垂直居中\n\n- 父容器设置`line-height`和`height`等高，div设置为`display:inline-block`和`vertical-align:middle`\n```css\n.parent{\n  height:200px;\n  line-height:200px;\n}\n.child{\n  display:inline-block;\n  vertical-align:middle;\n}\n```\n- 父容器`position:relative`，div设置`position:absolute`和`top:50%`和`margin-top:(-height/2)`\n- 【推荐,响应式】父容器`position:relative`，div设置`position:absolute`和`top:50%`和`transform:translateY(-50%)`\n```css\n.parent{\n  position:relative;\n}\n.child{\n  position:absolute;\n  top:50%;\n  transform:translateY(-50%);\n}\n```\n\n- 【极度推荐,响应式，无需计算margin】使用`flex`\n```css\n.parent{\n  display:flex;\n  align-items:center;\n}\n.child{\n  width:100px;\n  height:100px;\n}\n```\n\n## 总结\n\n大致就是如此，后续发现其他方法继续补充。\n\n\n## Reference\n\n- [CSS Layout - Horizontal & Vertical Align](https://www.w3schools.com/css/css_align.asp)\n- [How to center things with style in CSS](https://www.freecodecamp.org/news/how-to-center-things-with-style-in-css-dc87b7542689)","slug":"css-align-center","published":1,"updated":"2022-01-06T04:09:12.281Z","_id":"cksq5v7m8000tn0pu0argcofo","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note primary\"><p>水平居中、垂直居中、右对齐。</p>\n</div>\n\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>元素居中是实际前端开发中常用的一种操作。元素居中分为垂直居中和水平居中，为了以后方便重查，本篇文章总结一下一些常见的对齐方式。</p>\n<p><strong>样例代码如下，查看时请参考下面的代码。</strong></p>\n<p class=\"codepen\" data-height=\"800\" data-theme-id=\"dark\" data-default-tab=\"css,result\" data-user=\"scarboroughcoral\" data-slug-hash=\"oNNmbMV\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Centering with CSS Part 1\">\n  <span>See the Pen <a href=\"https://codepen.io/scarboroughcoral/pen/oNNmbMV\">\n  Centering with CSS Part 1</a> by 李明岳 (<a href=\"https://codepen.io/scarboroughcoral\">@scarboroughcoral</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n<h3 id=\"水平居中\"><a href=\"#水平居中\" class=\"headerlink\" title=\"水平居中\"></a>水平居中</h3><h4 id=\"文本水平居中\"><a href=\"#文本水平居中\" class=\"headerlink\" title=\"文本水平居中\"></a>文本水平居中</h4><ul>\n<li><code>text-align</code>属性</li>\n</ul>\n<h4 id=\"div水平居中\"><a href=\"#div水平居中\" class=\"headerlink\" title=\"div水平居中\"></a>div水平居中</h4><ul>\n<li><strong>蓝色盒子</strong>，将父容器设为<code>text-align:center</code>，div设为<code>display:inline-block</code>，适用于多个div水平居中。</li>\n<li>【推荐】<strong>黄色盒子</strong>，使用<code>margin:auto</code>属性设置（需要设置宽度）</li>\n<li>【推荐，常用于响应式开发，注意脱离文档流带来的问题】<strong>绿色盒子</strong>，父容器<code>position:relative</code>，div设置<code>position:absolute</code>和<code>left:50%</code>和<code>transform:translateX(-50%)</code></li>\n<li><strong>绿色盒子</strong>，父容器<code>position:relative</code>，div设置<code>position:absolute</code>和<code>left:50%</code>和<code>margin-left:(-width/2)</code></li>\n<li>【极度推荐,响应式，无需计算margin】<strong>粉色盒子</strong>，父容器<code>display:flex</code>并<code>flex-direction:row</code>（默认），然后<code>justify-content:center</code>（要看主轴的方向）</li>\n</ul>\n<h3 id=\"右对齐\"><a href=\"#右对齐\" class=\"headerlink\" title=\"右对齐\"></a>右对齐</h3><h4 id=\"文本右对齐\"><a href=\"#文本右对齐\" class=\"headerlink\" title=\"文本右对齐\"></a>文本右对齐</h4><ul>\n<li>使用<code>text-align:right</code></li>\n</ul>\n<h4 id=\"div右对齐\"><a href=\"#div右对齐\" class=\"headerlink\" title=\"div右对齐\"></a>div右对齐</h4><ul>\n<li>使用<code>position:absolute</code>和<code>right:0</code>实现</li>\n<li>【推荐】使用<code>flex</code>布局</li>\n<li>（十分奇妙）使用<code>margin-left:auto</code>，需要设置宽度</li>\n<li>使用<code>float</code>，注意脱离文档流带来的问题（eg：如果高度大于父容器，则需要设置父容器<code>overflow:auto</code>）</li>\n<li>将父容器设为<code>text-align:right</code>，div设为<code>display:inline-block</code></li>\n</ul>\n<h3 id=\"垂直居中\"><a href=\"#垂直居中\" class=\"headerlink\" title=\"垂直居中\"></a>垂直居中</h3><p>垂直居中不太好演示，代码直接在这里写了。</p>\n<h4 id=\"文本垂直居中\"><a href=\"#文本垂直居中\" class=\"headerlink\" title=\"文本垂直居中\"></a>文本垂直居中</h4><ul>\n<li>《不推荐》使用<code>padding</code></li>\n<li>【推荐】使用<code>height</code>和<code>line-height</code>设置，考虑文本多行<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.center</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">3px</span> solid green;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* If the text has multiple lines, add the following: */</span></span><br><span class=\"line\"><span class=\"selector-class\">.center</span> <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">1.5</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"div垂直居中\"><a href=\"#div垂直居中\" class=\"headerlink\" title=\"div垂直居中\"></a>div垂直居中</h4><ul>\n<li><p>父容器设置<code>line-height</code>和<code>height</code>等高，div设置为<code>display:inline-block</code>和<code>vertical-align:middle</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>:inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>:middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>父容器<code>position:relative</code>，div设置<code>position:absolute</code>和<code>top:50%</code>和<code>margin-top:(-height/2)</code></p>\n</li>\n<li><p>【推荐,响应式】父容器<code>position:relative</code>，div设置<code>position:absolute</code>和<code>top:50%</code>和<code>transform:translateY(-50%)</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>:relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>:absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>:<span class=\"built_in\">translateY</span>(-<span class=\"number\">50%</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>【极度推荐,响应式，无需计算margin】使用<code>flex</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>:flex;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>:center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>大致就是如此，后续发现其他方法继续补充。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://www.w3schools.com/css/css_align.asp\">CSS Layout - Horizontal &amp; Vertical Align</a></li>\n<li><a href=\"https://www.freecodecamp.org/news/how-to-center-things-with-style-in-css-dc87b7542689\">How to center things with style in CSS</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note primary\"><p>水平居中、垂直居中、右对齐。</p>\n</div>","more":"<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>元素居中是实际前端开发中常用的一种操作。元素居中分为垂直居中和水平居中，为了以后方便重查，本篇文章总结一下一些常见的对齐方式。</p>\n<p><strong>样例代码如下，查看时请参考下面的代码。</strong></p>\n<p class=\"codepen\" data-height=\"800\" data-theme-id=\"dark\" data-default-tab=\"css,result\" data-user=\"scarboroughcoral\" data-slug-hash=\"oNNmbMV\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Centering with CSS Part 1\">\n  <span>See the Pen <a href=\"https://codepen.io/scarboroughcoral/pen/oNNmbMV\">\n  Centering with CSS Part 1</a> by 李明岳 (<a href=\"https://codepen.io/scarboroughcoral\">@scarboroughcoral</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n<h3 id=\"水平居中\"><a href=\"#水平居中\" class=\"headerlink\" title=\"水平居中\"></a>水平居中</h3><h4 id=\"文本水平居中\"><a href=\"#文本水平居中\" class=\"headerlink\" title=\"文本水平居中\"></a>文本水平居中</h4><ul>\n<li><code>text-align</code>属性</li>\n</ul>\n<h4 id=\"div水平居中\"><a href=\"#div水平居中\" class=\"headerlink\" title=\"div水平居中\"></a>div水平居中</h4><ul>\n<li><strong>蓝色盒子</strong>，将父容器设为<code>text-align:center</code>，div设为<code>display:inline-block</code>，适用于多个div水平居中。</li>\n<li>【推荐】<strong>黄色盒子</strong>，使用<code>margin:auto</code>属性设置（需要设置宽度）</li>\n<li>【推荐，常用于响应式开发，注意脱离文档流带来的问题】<strong>绿色盒子</strong>，父容器<code>position:relative</code>，div设置<code>position:absolute</code>和<code>left:50%</code>和<code>transform:translateX(-50%)</code></li>\n<li><strong>绿色盒子</strong>，父容器<code>position:relative</code>，div设置<code>position:absolute</code>和<code>left:50%</code>和<code>margin-left:(-width/2)</code></li>\n<li>【极度推荐,响应式，无需计算margin】<strong>粉色盒子</strong>，父容器<code>display:flex</code>并<code>flex-direction:row</code>（默认），然后<code>justify-content:center</code>（要看主轴的方向）</li>\n</ul>\n<h3 id=\"右对齐\"><a href=\"#右对齐\" class=\"headerlink\" title=\"右对齐\"></a>右对齐</h3><h4 id=\"文本右对齐\"><a href=\"#文本右对齐\" class=\"headerlink\" title=\"文本右对齐\"></a>文本右对齐</h4><ul>\n<li>使用<code>text-align:right</code></li>\n</ul>\n<h4 id=\"div右对齐\"><a href=\"#div右对齐\" class=\"headerlink\" title=\"div右对齐\"></a>div右对齐</h4><ul>\n<li>使用<code>position:absolute</code>和<code>right:0</code>实现</li>\n<li>【推荐】使用<code>flex</code>布局</li>\n<li>（十分奇妙）使用<code>margin-left:auto</code>，需要设置宽度</li>\n<li>使用<code>float</code>，注意脱离文档流带来的问题（eg：如果高度大于父容器，则需要设置父容器<code>overflow:auto</code>）</li>\n<li>将父容器设为<code>text-align:right</code>，div设为<code>display:inline-block</code></li>\n</ul>\n<h3 id=\"垂直居中\"><a href=\"#垂直居中\" class=\"headerlink\" title=\"垂直居中\"></a>垂直居中</h3><p>垂直居中不太好演示，代码直接在这里写了。</p>\n<h4 id=\"文本垂直居中\"><a href=\"#文本垂直居中\" class=\"headerlink\" title=\"文本垂直居中\"></a>文本垂直居中</h4><ul>\n<li>《不推荐》使用<code>padding</code></li>\n<li>【推荐】使用<code>height</code>和<code>line-height</code>设置，考虑文本多行<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.center</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">3px</span> solid green;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* If the text has multiple lines, add the following: */</span></span><br><span class=\"line\"><span class=\"selector-class\">.center</span> <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">1.5</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"div垂直居中\"><a href=\"#div垂直居中\" class=\"headerlink\" title=\"div垂直居中\"></a>div垂直居中</h4><ul>\n<li><p>父容器设置<code>line-height</code>和<code>height</code>等高，div设置为<code>display:inline-block</code>和<code>vertical-align:middle</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>:inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>:middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>父容器<code>position:relative</code>，div设置<code>position:absolute</code>和<code>top:50%</code>和<code>margin-top:(-height/2)</code></p>\n</li>\n<li><p>【推荐,响应式】父容器<code>position:relative</code>，div设置<code>position:absolute</code>和<code>top:50%</code>和<code>transform:translateY(-50%)</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>:relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>:absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>:<span class=\"built_in\">translateY</span>(-<span class=\"number\">50%</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>【极度推荐,响应式，无需计算margin】使用<code>flex</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>:flex;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>:center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>大致就是如此，后续发现其他方法继续补充。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://www.w3schools.com/css/css_align.asp\">CSS Layout - Horizontal &amp; Vertical Align</a></li>\n<li><a href=\"https://www.freecodecamp.org/news/how-to-center-things-with-style-in-css-dc87b7542689\">How to center things with style in CSS</a></li>\n</ul>"},{"title":"A Cache Simulator——CSAPP 之 Cache Lab","mathjax":false,"copyright":true,"comment":true,"date":"2019-09-29T06:09:54.000Z","_content":"\n{% note primary %}\n以软件的方式实现Cache。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 结果\n\n![cache lab result](csapp-lab-5/cache-simulator.png)\n\n## 程序\n\n实现一个Cache模拟器。\n\n{% note info no-icon %}\n1. 输入：\n   1. 指定组数量\n   2. 指定组内行数量\n   3. 指定行内块大小\n   4. 指定访存文件\n2. 输出：\n   1. 命中数\n   2. 未命中数\n   3. 驱逐数\n3. 算法：\n   1. 驱逐使用LRU算法\n{% endnote %}\n\n\n\n其中，访存文件如下所示：\n\n```bash part of trans.trace\nI  00400570,3\n S 00600a98,4\nI  00400573,4\n M 7ff000388,4\nI  00400577,4\n L 7ff000388,4\n```\n\n## 算法\n\n* Cache Line 数据结构：\n\n```c\ntypedef struct\n{\n    bool valid; //valid bit\n    // bool dirty;                   //if modified before\n    unsigned long tag;            //tag bit for identifying the line in the group\n    unsigned long last_used_time; //last used time for LRU algorithm detection\n    //data\n\n} Line;\n```\n\n* LRU驱逐算法：\n\n每行指定一个上次使用时间（`last_used_time`），当某次访存出现miss并且组内无空余行时，比较上次使用时间最早的行并驱逐。\n\n* 整体算法：\n\n\n{% note info no-icon %}\n1. 获取参数：s、E、b、t\n2. 给cache分配内存\n3. 读取文件\n4. 解析每一行：\n    1. 获取非指令访存，获取访存地址，解析组索引、块偏移\n    2. Load、Store一次访存，Modify两次访存\n    3. 每次访存查找Cache：\n        1. 找到内存块对应组\n        2. 找组内是否有相同的标记，如果有则hit，结束查找；否则miss并下一步\n        3. 找组内是否有空行，如果有则结束查找；否则需要eviction并下一步\n        4. 找到组内上次使用时间最早的并驱逐，结束查找\n{% endnote %}\n\n\n## 代码\n\n```c csim.c\n#include \"cachelab.h\"\n#include <stdio.h>\n#include <stdlib.h>\n#include <getopt.h>\n#include <math.h>\n\ntypedef int bool;\n\n#define true 1\n#define false 0\n\nunsigned long time = 0;\n\nbool v_mode = false;\nint s = 0, E = 0, b = 0;\nchar *file = \"\";\n\n// statistics number\nunsigned hit_count = 0, miss_count = 0, eviction_count = 0;\nvoid getOpt(bool *v_mode, int *s, int *E, int *b, char **file, int argc, char **argv);\nvoid access(unsigned long address);\ntypedef struct\n{\n    bool valid; //valid bit\n    // bool dirty;                   //if modified before\n    unsigned long tag;            //tag bit for identifying the line in the group\n    unsigned long last_used_time; //last used time for LRU algorithm detection\n\n    //data\n\n} Line;\n\nLine **cache = NULL;\n\nint main(int argc, char **argv)\n{\n\n    // load options\n    getOpt(&v_mode, &s, &E, &b, &file, argc, argv);\n\n    // printf(\"%d %d %d %d %s %d\\n\", v_mode, s, E, b, file, (-(1U)) >> 28);\n\n    // open the trace file\n    FILE *trace_file = fopen(file, \"r\");\n\n    // malloc the cache\n    int S = 1<<s;\n    cache = malloc(sizeof(Line *) * S);\n    for (size_t i = 0; i < S; i++)\n    {\n        cache[i] = malloc(sizeof(Line) * E);\n    }\n\n    // initialize the cache line\n\n    for (size_t i = 0; i < S; i++)\n    {\n        for (size_t j = 0; j < E; j++)\n        {\n            cache[i][j].last_used_time = 0;\n            cache[i][j].tag = 0;\n            cache[i][j].valid = 0;\n        }\n    }\n\n    // read the trace file & resolve it\n\n    char buffer[64];\n\n    char type;\n    unsigned long addr;\n    int m_size;\n    while (fgets(buffer, 64, trace_file))\n    {\n        sscanf(buffer, \" %c %lx,%d\", &type, &addr, &m_size);\n        switch (type)\n        {\n        case 'L':\n            access(addr);\n            break;\n        case 'M':\n            access(addr);\n\n        case 'S':\n            access(addr);\n            break;\n\n        default:\n            break;\n        }\n    }\n\n    // free the memory\n    for (size_t i = 0; i < S; i++)\n    {\n        free(cache[i]);\n        cache[i] = NULL;\n    }\n    free(cache);\n    cache = NULL;\n\n    // close the trace file\n    fclose(trace_file);\n\n    printSummary(hit_count, miss_count, eviction_count);\n    return 0;\n}\n\nvoid access(unsigned long address)\n{\n    // get the position\n    int group = (address >> b)&((1 << s) - 1) ;\n    int tag = address >> (b + s);\n    // int bias = address & ((1 << b) - 1);\n\n    // search for the tag\n    // hit?\n    for (size_t i = 0; i < E; i++)\n    {\n        if (cache[group][i].tag == tag && cache[group][i].valid == 1)\n        {\n            hit_count++;\n            cache[group][i].last_used_time=++time;\n            return;\n        }\n    }\n\n    // miss and any empty\n    for (size_t i = 0; i < E; i++)\n    {\n        if (cache[group][i].valid == 0)\n        {\n            cache[group][i].valid = 1;\n            cache[group][i].last_used_time = ++time;\n            cache[group][i].tag = tag;\n            miss_count++;\n            return;\n\n        }\n\n    }\n\n    // miss and no empty\n    eviction_count++;\n    miss_count++;\n    unsigned long lru_time = -1UL;\n    unsigned line_index=0;\n\n    for (size_t i = 0; i < E; i++)\n    {\n        if (cache[group][i].last_used_time < lru_time)\n        {\n            lru_time=cache[group][i].last_used_time;\n            line_index=i;\n        }\n    }\n\n    cache[group][line_index].last_used_time=++time;\n    cache[group][line_index].tag=tag;\n\n    printf(\"test\\n\");\n\n}\n\nvoid getOpt(bool *v_mode, int *s, int *E, int *b, char **file, int argc, char **argv)\n{\n    char opt;\n    while ((opt = getopt(argc, argv, \"v::s:E:b:t:ma\")) != -1)\n    {\n        switch (opt)\n        {\n        case 'v':\n            *v_mode = true;\n            break;\n        case 's':\n            *s = atoi(optarg);\n            break;\n        case 'E':\n            *E = atoi(optarg);\n            break;\n        case 'b':\n            *b = atoi(optarg);\n            break;\n        case 't':\n            *file = optarg;\n            break;\n        case '?':\n\n            fprintf(stderr, \"Usage: %s [-hv] -s <num> -E <num> -b <num> -t <file>\\n\\\nOptions:\\n\\\n  -h         Print this help message.\\n\\\n  -v         Optional verbose flag.\\n\\\n  -s <num>   Number of set index bits.\\n\\\n  -E <num>   Number of lines per set.\\n\\\n  -b <num>   Number of block offset bits.\\n\\\n  -t <file>  Trace file.\\n\\\n\\n\\\nExamples:\\n\\\n  linux>  %s -s 4 -E 1 -b 4 -t traces/yi.trace\\n\\\n  linux>  %s -v -s 8 -E 2 -b 4 -t traces/yi.trace\\n\",\n                    argv[0], argv[0], argv[0]);\n            exit(EXIT_FAILURE);\n\n        default:\n            break;\n        }\n    }\n}\n```","source":"_posts/csapp-lab-5.md","raw":"---\ntitle: A Cache Simulator——CSAPP 之 Cache Lab\nmathjax: false\ncopyright: true\ncomment: true\ndate: 2019-09-29 14:09:54\ntags:\n- Operating System\n- CSAPP\n- CSAPP Lab\ncategories:\n- Computer Science\n- Operating System\n\n---\n\n{% note primary %}\n以软件的方式实现Cache。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 结果\n\n![cache lab result](csapp-lab-5/cache-simulator.png)\n\n## 程序\n\n实现一个Cache模拟器。\n\n{% note info no-icon %}\n1. 输入：\n   1. 指定组数量\n   2. 指定组内行数量\n   3. 指定行内块大小\n   4. 指定访存文件\n2. 输出：\n   1. 命中数\n   2. 未命中数\n   3. 驱逐数\n3. 算法：\n   1. 驱逐使用LRU算法\n{% endnote %}\n\n\n\n其中，访存文件如下所示：\n\n```bash part of trans.trace\nI  00400570,3\n S 00600a98,4\nI  00400573,4\n M 7ff000388,4\nI  00400577,4\n L 7ff000388,4\n```\n\n## 算法\n\n* Cache Line 数据结构：\n\n```c\ntypedef struct\n{\n    bool valid; //valid bit\n    // bool dirty;                   //if modified before\n    unsigned long tag;            //tag bit for identifying the line in the group\n    unsigned long last_used_time; //last used time for LRU algorithm detection\n    //data\n\n} Line;\n```\n\n* LRU驱逐算法：\n\n每行指定一个上次使用时间（`last_used_time`），当某次访存出现miss并且组内无空余行时，比较上次使用时间最早的行并驱逐。\n\n* 整体算法：\n\n\n{% note info no-icon %}\n1. 获取参数：s、E、b、t\n2. 给cache分配内存\n3. 读取文件\n4. 解析每一行：\n    1. 获取非指令访存，获取访存地址，解析组索引、块偏移\n    2. Load、Store一次访存，Modify两次访存\n    3. 每次访存查找Cache：\n        1. 找到内存块对应组\n        2. 找组内是否有相同的标记，如果有则hit，结束查找；否则miss并下一步\n        3. 找组内是否有空行，如果有则结束查找；否则需要eviction并下一步\n        4. 找到组内上次使用时间最早的并驱逐，结束查找\n{% endnote %}\n\n\n## 代码\n\n```c csim.c\n#include \"cachelab.h\"\n#include <stdio.h>\n#include <stdlib.h>\n#include <getopt.h>\n#include <math.h>\n\ntypedef int bool;\n\n#define true 1\n#define false 0\n\nunsigned long time = 0;\n\nbool v_mode = false;\nint s = 0, E = 0, b = 0;\nchar *file = \"\";\n\n// statistics number\nunsigned hit_count = 0, miss_count = 0, eviction_count = 0;\nvoid getOpt(bool *v_mode, int *s, int *E, int *b, char **file, int argc, char **argv);\nvoid access(unsigned long address);\ntypedef struct\n{\n    bool valid; //valid bit\n    // bool dirty;                   //if modified before\n    unsigned long tag;            //tag bit for identifying the line in the group\n    unsigned long last_used_time; //last used time for LRU algorithm detection\n\n    //data\n\n} Line;\n\nLine **cache = NULL;\n\nint main(int argc, char **argv)\n{\n\n    // load options\n    getOpt(&v_mode, &s, &E, &b, &file, argc, argv);\n\n    // printf(\"%d %d %d %d %s %d\\n\", v_mode, s, E, b, file, (-(1U)) >> 28);\n\n    // open the trace file\n    FILE *trace_file = fopen(file, \"r\");\n\n    // malloc the cache\n    int S = 1<<s;\n    cache = malloc(sizeof(Line *) * S);\n    for (size_t i = 0; i < S; i++)\n    {\n        cache[i] = malloc(sizeof(Line) * E);\n    }\n\n    // initialize the cache line\n\n    for (size_t i = 0; i < S; i++)\n    {\n        for (size_t j = 0; j < E; j++)\n        {\n            cache[i][j].last_used_time = 0;\n            cache[i][j].tag = 0;\n            cache[i][j].valid = 0;\n        }\n    }\n\n    // read the trace file & resolve it\n\n    char buffer[64];\n\n    char type;\n    unsigned long addr;\n    int m_size;\n    while (fgets(buffer, 64, trace_file))\n    {\n        sscanf(buffer, \" %c %lx,%d\", &type, &addr, &m_size);\n        switch (type)\n        {\n        case 'L':\n            access(addr);\n            break;\n        case 'M':\n            access(addr);\n\n        case 'S':\n            access(addr);\n            break;\n\n        default:\n            break;\n        }\n    }\n\n    // free the memory\n    for (size_t i = 0; i < S; i++)\n    {\n        free(cache[i]);\n        cache[i] = NULL;\n    }\n    free(cache);\n    cache = NULL;\n\n    // close the trace file\n    fclose(trace_file);\n\n    printSummary(hit_count, miss_count, eviction_count);\n    return 0;\n}\n\nvoid access(unsigned long address)\n{\n    // get the position\n    int group = (address >> b)&((1 << s) - 1) ;\n    int tag = address >> (b + s);\n    // int bias = address & ((1 << b) - 1);\n\n    // search for the tag\n    // hit?\n    for (size_t i = 0; i < E; i++)\n    {\n        if (cache[group][i].tag == tag && cache[group][i].valid == 1)\n        {\n            hit_count++;\n            cache[group][i].last_used_time=++time;\n            return;\n        }\n    }\n\n    // miss and any empty\n    for (size_t i = 0; i < E; i++)\n    {\n        if (cache[group][i].valid == 0)\n        {\n            cache[group][i].valid = 1;\n            cache[group][i].last_used_time = ++time;\n            cache[group][i].tag = tag;\n            miss_count++;\n            return;\n\n        }\n\n    }\n\n    // miss and no empty\n    eviction_count++;\n    miss_count++;\n    unsigned long lru_time = -1UL;\n    unsigned line_index=0;\n\n    for (size_t i = 0; i < E; i++)\n    {\n        if (cache[group][i].last_used_time < lru_time)\n        {\n            lru_time=cache[group][i].last_used_time;\n            line_index=i;\n        }\n    }\n\n    cache[group][line_index].last_used_time=++time;\n    cache[group][line_index].tag=tag;\n\n    printf(\"test\\n\");\n\n}\n\nvoid getOpt(bool *v_mode, int *s, int *E, int *b, char **file, int argc, char **argv)\n{\n    char opt;\n    while ((opt = getopt(argc, argv, \"v::s:E:b:t:ma\")) != -1)\n    {\n        switch (opt)\n        {\n        case 'v':\n            *v_mode = true;\n            break;\n        case 's':\n            *s = atoi(optarg);\n            break;\n        case 'E':\n            *E = atoi(optarg);\n            break;\n        case 'b':\n            *b = atoi(optarg);\n            break;\n        case 't':\n            *file = optarg;\n            break;\n        case '?':\n\n            fprintf(stderr, \"Usage: %s [-hv] -s <num> -E <num> -b <num> -t <file>\\n\\\nOptions:\\n\\\n  -h         Print this help message.\\n\\\n  -v         Optional verbose flag.\\n\\\n  -s <num>   Number of set index bits.\\n\\\n  -E <num>   Number of lines per set.\\n\\\n  -b <num>   Number of block offset bits.\\n\\\n  -t <file>  Trace file.\\n\\\n\\n\\\nExamples:\\n\\\n  linux>  %s -s 4 -E 1 -b 4 -t traces/yi.trace\\n\\\n  linux>  %s -v -s 8 -E 2 -b 4 -t traces/yi.trace\\n\",\n                    argv[0], argv[0], argv[0]);\n            exit(EXIT_FAILURE);\n\n        default:\n            break;\n        }\n    }\n}\n```","slug":"csapp-lab-5","published":1,"updated":"2022-01-06T04:09:12.280Z","_id":"cksq5v7m8000vn0pue0ung4sl","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note primary\"><p>以软件的方式实现Cache。</p>\n</div>\n\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p><img data-src=\"csapp-lab-5/cache-simulator.png\" alt=\"cache lab result\"></p>\n<h2 id=\"程序\"><a href=\"#程序\" class=\"headerlink\" title=\"程序\"></a>程序</h2><p>实现一个Cache模拟器。</p>\n<div class=\"note info no-icon\"><ol>\n<li>输入：<ol>\n<li>指定组数量</li>\n<li>指定组内行数量</li>\n<li>指定行内块大小</li>\n<li>指定访存文件</li>\n</ol>\n</li>\n<li>输出：<ol>\n<li>命中数</li>\n<li>未命中数</li>\n<li>驱逐数</li>\n</ol>\n</li>\n<li>算法：<ol>\n<li>驱逐使用LRU算法</li>\n</ol>\n</li>\n</ol>\n</div>\n\n\n\n<p>其中，访存文件如下所示：</p>\n<figure class=\"highlight bash\"><figcaption><span>part of trans.trace</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I  00400570,3</span><br><span class=\"line\"> S 00600a98,4</span><br><span class=\"line\">I  00400573,4</span><br><span class=\"line\"> M 7ff000388,4</span><br><span class=\"line\">I  00400577,4</span><br><span class=\"line\"> L 7ff000388,4</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><ul>\n<li>Cache Line 数据结构：</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> valid; <span class=\"comment\">//valid bit</span></span><br><span class=\"line\">    <span class=\"comment\">// bool dirty;                   //if modified before</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> tag;            <span class=\"comment\">//tag bit for identifying the line in the group</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> last_used_time; <span class=\"comment\">//last used time for LRU algorithm detection</span></span><br><span class=\"line\">    <span class=\"comment\">//data</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125; Line;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>LRU驱逐算法：</li>\n</ul>\n<p>每行指定一个上次使用时间（<code>last_used_time</code>），当某次访存出现miss并且组内无空余行时，比较上次使用时间最早的行并驱逐。</p>\n<ul>\n<li>整体算法：</li>\n</ul>\n<div class=\"note info no-icon\"><ol>\n<li>获取参数：s、E、b、t</li>\n<li>给cache分配内存</li>\n<li>读取文件</li>\n<li>解析每一行：<ol>\n<li>获取非指令访存，获取访存地址，解析组索引、块偏移</li>\n<li>Load、Store一次访存，Modify两次访存</li>\n<li>每次访存查找Cache：<ol>\n<li>找到内存块对应组</li>\n<li>找组内是否有相同的标记，如果有则hit，结束查找；否则miss并下一步</li>\n<li>找组内是否有空行，如果有则结束查找；否则需要eviction并下一步</li>\n<li>找到组内上次使用时间最早的并驱逐，结束查找</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</div>\n\n\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c\"><figcaption><span>csim.c</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;cachelab.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;getopt.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;math.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">int</span> <span class=\"keyword\">bool</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> true 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> false 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> time = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> v_mode = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> s = <span class=\"number\">0</span>, E = <span class=\"number\">0</span>, b = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> *file = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// statistics number</span></span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> hit_count = <span class=\"number\">0</span>, miss_count = <span class=\"number\">0</span>, eviction_count = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getOpt</span><span class=\"params\">(<span class=\"keyword\">bool</span> *v_mode, <span class=\"keyword\">int</span> *s, <span class=\"keyword\">int</span> *E, <span class=\"keyword\">int</span> *b, <span class=\"keyword\">char</span> **file, <span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">access</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> address)</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> valid; <span class=\"comment\">//valid bit</span></span><br><span class=\"line\">    <span class=\"comment\">// bool dirty;                   //if modified before</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> tag;            <span class=\"comment\">//tag bit for identifying the line in the group</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> last_used_time; <span class=\"comment\">//last used time for LRU algorithm detection</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//data</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125; Line;</span><br><span class=\"line\"></span><br><span class=\"line\">Line **cache = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// load options</span></span><br><span class=\"line\">    getOpt(&amp;v_mode, &amp;s, &amp;E, &amp;b, &amp;file, argc, argv);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// printf(&quot;%d %d %d %d %s %d\\n&quot;, v_mode, s, E, b, file, (-(1U)) &gt;&gt; 28);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// open the trace file</span></span><br><span class=\"line\">    FILE *trace_file = fopen(file, <span class=\"string\">&quot;r&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// malloc the cache</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> S = <span class=\"number\">1</span>&lt;&lt;s;</span><br><span class=\"line\">    cache = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Line *) * S);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; S; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cache[i] = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Line) * E);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// initialize the cache line</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; S; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> j = <span class=\"number\">0</span>; j &lt; E; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cache[i][j].last_used_time = <span class=\"number\">0</span>;</span><br><span class=\"line\">            cache[i][j].tag = <span class=\"number\">0</span>;</span><br><span class=\"line\">            cache[i][j].valid = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// read the trace file &amp; resolve it</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">char</span> buffer[<span class=\"number\">64</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">char</span> type;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> addr;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m_size;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (fgets(buffer, <span class=\"number\">64</span>, trace_file))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">sscanf</span>(buffer, <span class=\"string\">&quot; %c %lx,%d&quot;</span>, &amp;type, &amp;addr, &amp;m_size);</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (type)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;L&#x27;</span>:</span><br><span class=\"line\">            access(addr);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;M&#x27;</span>:</span><br><span class=\"line\">            access(addr);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;S&#x27;</span>:</span><br><span class=\"line\">            access(addr);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// free the memory</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; S; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">free</span>(cache[i]);</span><br><span class=\"line\">        cache[i] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(cache);</span><br><span class=\"line\">    cache = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// close the trace file</span></span><br><span class=\"line\">    fclose(trace_file);</span><br><span class=\"line\"></span><br><span class=\"line\">    printSummary(hit_count, miss_count, eviction_count);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">access</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> address)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// get the position</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> group = (address &gt;&gt; b)&amp;((<span class=\"number\">1</span> &lt;&lt; s) - <span class=\"number\">1</span>) ;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tag = address &gt;&gt; (b + s);</span><br><span class=\"line\">    <span class=\"comment\">// int bias = address &amp; ((1 &lt;&lt; b) - 1);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// search for the tag</span></span><br><span class=\"line\">    <span class=\"comment\">// hit?</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; E; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cache[group][i].tag == tag &amp;&amp; cache[group][i].valid == <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            hit_count++;</span><br><span class=\"line\">            cache[group][i].last_used_time=++time;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// miss and any empty</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; E; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cache[group][i].valid == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cache[group][i].valid = <span class=\"number\">1</span>;</span><br><span class=\"line\">            cache[group][i].last_used_time = ++time;</span><br><span class=\"line\">            cache[group][i].tag = tag;</span><br><span class=\"line\">            miss_count++;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// miss and no empty</span></span><br><span class=\"line\">    eviction_count++;</span><br><span class=\"line\">    miss_count++;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> lru_time = <span class=\"number\">-1UL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> line_index=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; E; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cache[group][i].last_used_time &lt; lru_time)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            lru_time=cache[group][i].last_used_time;</span><br><span class=\"line\">            line_index=i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cache[group][line_index].last_used_time=++time;</span><br><span class=\"line\">    cache[group][line_index].tag=tag;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;test\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getOpt</span><span class=\"params\">(<span class=\"keyword\">bool</span> *v_mode, <span class=\"keyword\">int</span> *s, <span class=\"keyword\">int</span> *E, <span class=\"keyword\">int</span> *b, <span class=\"keyword\">char</span> **file, <span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> opt;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((opt = getopt(argc, argv, <span class=\"string\">&quot;v::s:E:b:t:ma&quot;</span>)) != <span class=\"number\">-1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (opt)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;v&#x27;</span>:</span><br><span class=\"line\">            *v_mode = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;s&#x27;</span>:</span><br><span class=\"line\">            *s = atoi(optarg);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;E&#x27;</span>:</span><br><span class=\"line\">            *E = atoi(optarg);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;b&#x27;</span>:</span><br><span class=\"line\">            *b = atoi(optarg);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;t&#x27;</span>:</span><br><span class=\"line\">            *file = optarg;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;?&#x27;</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;Usage: %s [-hv] -s &lt;num&gt; -E &lt;num&gt; -b &lt;num&gt; -t &lt;file&gt;\\n\\</span></span><br><span class=\"line\"><span class=\"string\">Options:\\n\\</span></span><br><span class=\"line\"><span class=\"string\">  -h         Print this help message.\\n\\</span></span><br><span class=\"line\"><span class=\"string\">  -v         Optional verbose flag.\\n\\</span></span><br><span class=\"line\"><span class=\"string\">  -s &lt;num&gt;   Number of set index bits.\\n\\</span></span><br><span class=\"line\"><span class=\"string\">  -E &lt;num&gt;   Number of lines per set.\\n\\</span></span><br><span class=\"line\"><span class=\"string\">  -b &lt;num&gt;   Number of block offset bits.\\n\\</span></span><br><span class=\"line\"><span class=\"string\">  -t &lt;file&gt;  Trace file.\\n\\</span></span><br><span class=\"line\"><span class=\"string\">\\n\\</span></span><br><span class=\"line\"><span class=\"string\">Examples:\\n\\</span></span><br><span class=\"line\"><span class=\"string\">  linux&gt;  %s -s 4 -E 1 -b 4 -t traces/yi.trace\\n\\</span></span><br><span class=\"line\"><span class=\"string\">  linux&gt;  %s -v -s 8 -E 2 -b 4 -t traces/yi.trace\\n&quot;</span>,</span><br><span class=\"line\">                    argv[<span class=\"number\">0</span>], argv[<span class=\"number\">0</span>], argv[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<div class=\"note primary\"><p>以软件的方式实现Cache。</p>\n</div>","more":"<hr>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p><img data-src=\"csapp-lab-5/cache-simulator.png\" alt=\"cache lab result\"></p>\n<h2 id=\"程序\"><a href=\"#程序\" class=\"headerlink\" title=\"程序\"></a>程序</h2><p>实现一个Cache模拟器。</p>\n<div class=\"note info no-icon\"><ol>\n<li>输入：<ol>\n<li>指定组数量</li>\n<li>指定组内行数量</li>\n<li>指定行内块大小</li>\n<li>指定访存文件</li>\n</ol>\n</li>\n<li>输出：<ol>\n<li>命中数</li>\n<li>未命中数</li>\n<li>驱逐数</li>\n</ol>\n</li>\n<li>算法：<ol>\n<li>驱逐使用LRU算法</li>\n</ol>\n</li>\n</ol>\n</div>\n\n\n\n<p>其中，访存文件如下所示：</p>\n<figure class=\"highlight bash\"><figcaption><span>part of trans.trace</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I  00400570,3</span><br><span class=\"line\"> S 00600a98,4</span><br><span class=\"line\">I  00400573,4</span><br><span class=\"line\"> M 7ff000388,4</span><br><span class=\"line\">I  00400577,4</span><br><span class=\"line\"> L 7ff000388,4</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><ul>\n<li>Cache Line 数据结构：</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> valid; <span class=\"comment\">//valid bit</span></span><br><span class=\"line\">    <span class=\"comment\">// bool dirty;                   //if modified before</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> tag;            <span class=\"comment\">//tag bit for identifying the line in the group</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> last_used_time; <span class=\"comment\">//last used time for LRU algorithm detection</span></span><br><span class=\"line\">    <span class=\"comment\">//data</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125; Line;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>LRU驱逐算法：</li>\n</ul>\n<p>每行指定一个上次使用时间（<code>last_used_time</code>），当某次访存出现miss并且组内无空余行时，比较上次使用时间最早的行并驱逐。</p>\n<ul>\n<li>整体算法：</li>\n</ul>\n<div class=\"note info no-icon\"><ol>\n<li>获取参数：s、E、b、t</li>\n<li>给cache分配内存</li>\n<li>读取文件</li>\n<li>解析每一行：<ol>\n<li>获取非指令访存，获取访存地址，解析组索引、块偏移</li>\n<li>Load、Store一次访存，Modify两次访存</li>\n<li>每次访存查找Cache：<ol>\n<li>找到内存块对应组</li>\n<li>找组内是否有相同的标记，如果有则hit，结束查找；否则miss并下一步</li>\n<li>找组内是否有空行，如果有则结束查找；否则需要eviction并下一步</li>\n<li>找到组内上次使用时间最早的并驱逐，结束查找</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</div>\n\n\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c\"><figcaption><span>csim.c</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;cachelab.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;getopt.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;math.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">int</span> <span class=\"keyword\">bool</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> true 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> false 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> time = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> v_mode = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> s = <span class=\"number\">0</span>, E = <span class=\"number\">0</span>, b = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> *file = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// statistics number</span></span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> hit_count = <span class=\"number\">0</span>, miss_count = <span class=\"number\">0</span>, eviction_count = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getOpt</span><span class=\"params\">(<span class=\"keyword\">bool</span> *v_mode, <span class=\"keyword\">int</span> *s, <span class=\"keyword\">int</span> *E, <span class=\"keyword\">int</span> *b, <span class=\"keyword\">char</span> **file, <span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">access</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> address)</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> valid; <span class=\"comment\">//valid bit</span></span><br><span class=\"line\">    <span class=\"comment\">// bool dirty;                   //if modified before</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> tag;            <span class=\"comment\">//tag bit for identifying the line in the group</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> last_used_time; <span class=\"comment\">//last used time for LRU algorithm detection</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//data</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125; Line;</span><br><span class=\"line\"></span><br><span class=\"line\">Line **cache = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// load options</span></span><br><span class=\"line\">    getOpt(&amp;v_mode, &amp;s, &amp;E, &amp;b, &amp;file, argc, argv);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// printf(&quot;%d %d %d %d %s %d\\n&quot;, v_mode, s, E, b, file, (-(1U)) &gt;&gt; 28);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// open the trace file</span></span><br><span class=\"line\">    FILE *trace_file = fopen(file, <span class=\"string\">&quot;r&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// malloc the cache</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> S = <span class=\"number\">1</span>&lt;&lt;s;</span><br><span class=\"line\">    cache = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Line *) * S);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; S; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cache[i] = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Line) * E);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// initialize the cache line</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; S; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> j = <span class=\"number\">0</span>; j &lt; E; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cache[i][j].last_used_time = <span class=\"number\">0</span>;</span><br><span class=\"line\">            cache[i][j].tag = <span class=\"number\">0</span>;</span><br><span class=\"line\">            cache[i][j].valid = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// read the trace file &amp; resolve it</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">char</span> buffer[<span class=\"number\">64</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">char</span> type;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> addr;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m_size;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (fgets(buffer, <span class=\"number\">64</span>, trace_file))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">sscanf</span>(buffer, <span class=\"string\">&quot; %c %lx,%d&quot;</span>, &amp;type, &amp;addr, &amp;m_size);</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (type)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;L&#x27;</span>:</span><br><span class=\"line\">            access(addr);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;M&#x27;</span>:</span><br><span class=\"line\">            access(addr);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;S&#x27;</span>:</span><br><span class=\"line\">            access(addr);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// free the memory</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; S; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">free</span>(cache[i]);</span><br><span class=\"line\">        cache[i] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(cache);</span><br><span class=\"line\">    cache = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// close the trace file</span></span><br><span class=\"line\">    fclose(trace_file);</span><br><span class=\"line\"></span><br><span class=\"line\">    printSummary(hit_count, miss_count, eviction_count);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">access</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> address)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// get the position</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> group = (address &gt;&gt; b)&amp;((<span class=\"number\">1</span> &lt;&lt; s) - <span class=\"number\">1</span>) ;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tag = address &gt;&gt; (b + s);</span><br><span class=\"line\">    <span class=\"comment\">// int bias = address &amp; ((1 &lt;&lt; b) - 1);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// search for the tag</span></span><br><span class=\"line\">    <span class=\"comment\">// hit?</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; E; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cache[group][i].tag == tag &amp;&amp; cache[group][i].valid == <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            hit_count++;</span><br><span class=\"line\">            cache[group][i].last_used_time=++time;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// miss and any empty</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; E; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cache[group][i].valid == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cache[group][i].valid = <span class=\"number\">1</span>;</span><br><span class=\"line\">            cache[group][i].last_used_time = ++time;</span><br><span class=\"line\">            cache[group][i].tag = tag;</span><br><span class=\"line\">            miss_count++;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// miss and no empty</span></span><br><span class=\"line\">    eviction_count++;</span><br><span class=\"line\">    miss_count++;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> lru_time = <span class=\"number\">-1UL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> line_index=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; E; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cache[group][i].last_used_time &lt; lru_time)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            lru_time=cache[group][i].last_used_time;</span><br><span class=\"line\">            line_index=i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cache[group][line_index].last_used_time=++time;</span><br><span class=\"line\">    cache[group][line_index].tag=tag;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;test\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getOpt</span><span class=\"params\">(<span class=\"keyword\">bool</span> *v_mode, <span class=\"keyword\">int</span> *s, <span class=\"keyword\">int</span> *E, <span class=\"keyword\">int</span> *b, <span class=\"keyword\">char</span> **file, <span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> opt;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((opt = getopt(argc, argv, <span class=\"string\">&quot;v::s:E:b:t:ma&quot;</span>)) != <span class=\"number\">-1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (opt)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;v&#x27;</span>:</span><br><span class=\"line\">            *v_mode = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;s&#x27;</span>:</span><br><span class=\"line\">            *s = atoi(optarg);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;E&#x27;</span>:</span><br><span class=\"line\">            *E = atoi(optarg);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;b&#x27;</span>:</span><br><span class=\"line\">            *b = atoi(optarg);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;t&#x27;</span>:</span><br><span class=\"line\">            *file = optarg;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;?&#x27;</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;Usage: %s [-hv] -s &lt;num&gt; -E &lt;num&gt; -b &lt;num&gt; -t &lt;file&gt;\\n\\</span></span><br><span class=\"line\"><span class=\"string\">Options:\\n\\</span></span><br><span class=\"line\"><span class=\"string\">  -h         Print this help message.\\n\\</span></span><br><span class=\"line\"><span class=\"string\">  -v         Optional verbose flag.\\n\\</span></span><br><span class=\"line\"><span class=\"string\">  -s &lt;num&gt;   Number of set index bits.\\n\\</span></span><br><span class=\"line\"><span class=\"string\">  -E &lt;num&gt;   Number of lines per set.\\n\\</span></span><br><span class=\"line\"><span class=\"string\">  -b &lt;num&gt;   Number of block offset bits.\\n\\</span></span><br><span class=\"line\"><span class=\"string\">  -t &lt;file&gt;  Trace file.\\n\\</span></span><br><span class=\"line\"><span class=\"string\">\\n\\</span></span><br><span class=\"line\"><span class=\"string\">Examples:\\n\\</span></span><br><span class=\"line\"><span class=\"string\">  linux&gt;  %s -s 4 -E 1 -b 4 -t traces/yi.trace\\n\\</span></span><br><span class=\"line\"><span class=\"string\">  linux&gt;  %s -v -s 8 -E 2 -b 4 -t traces/yi.trace\\n&quot;</span>,</span><br><span class=\"line\">                    argv[<span class=\"number\">0</span>], argv[<span class=\"number\">0</span>], argv[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"A Tiny Shell——CSAPP之Shell Lab","mathjax":false,"copyright":true,"comment":true,"date":"2019-11-01T09:02:14.000Z","_content":"\n{% note primary %}\n利用Linux信号实现一个简单的Shell。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n\n## 前言\n\n很恶心，代码写完了，都过了。不过有的测试用例rtest卡了，认为是修改了，重下一遍，结果不小心覆盖了，git上传也不完整。。靠大脑cache来总结吧\n\n## 信号\n\n信号类似于一种中断，或者可以称之为软件中断。先来总结一下关于异常控制流ECF（Exception Control Flow）的分类吧。\n\n异常控制流，或者称之为异常，这是广义的异常，只要不是正常的逻辑控制流，就是异常。\n\n异常分为同步异常和异步异常。异步异常就是中断（分为硬件中断和软件中断），同步异常就是狭义的异常（包括陷阱trap，错误fault，和终止abort）\n\n### 异常分类\n1. 同步的\n   1. 陷阱trap，有目的的。eg：system call\n   2. 错误fault，无目的的，有可能恢复。eg：pagefault\n   3. 终止abort，无目的的，不能恢复。eg：非法指令\n2. 异步的\n   1. 硬件中断\n   2. 软件中断\n      1. 信号\n      2. ...\n\n## 信号处理执行过程\n\n几个标志字：\npending：delivered信号，等待被处理\nblocked：被阻塞的信号，可以加入到pending里，但不会被receive\n\n\n信号处理分为几个阶段：\n1. deliver：放到pending里\n2. receive：Handler处理\n\n信号处理过程：\n假设内核已经从一个异常处理程序中返回并且要切换到进程P：\n1. 内核计算进程P的信号状态：pending_unblocked_signals=pending&~unblocked\n2. 如果pending_unblocked_signals为0则直接切换到进程P\n3. 如果不为0则就依次强制进程P处理信号，直到为0（信号处理可能被其他信号中断）\n\n##  waitpid (pid_t pid, int *statusp, int options)函数详解\n1. pid>0等待一个特定pid的进程，pid=-1，等待所有子进程，（还支持其他类型等待集合，比如Unix进程组，在此不做讨论）\n2. status用于保存等待返回进程的状态\n3. options有三个。WNOHANG——等待集合中没有进程终止则立即返回，WUNTRACED——挂起调用进程直到等待进程终止或停止，WCONTINUED——挂起调用进程直到等待进程终止或被停止的进程收到SIGCONT重新执行\n\n## 关键点\n\n> 写一下关键的地方吧。按照测试来写，具体能容可能由测试来展开。\n\n\n### test01\n\nCTRL+D退出，自带\n\n### test02\n\n内置quit命令。\n判断使用已定义好的builtin_cmd函数，匹配quit字符串返回1，不是内置则返回0\n首先在eval函数里判断，如果是内置指令则单独执行，无需fork。单独执行时直接exit。\n\n### test03\n\n运行一个前台进程。\n\n这说明不是一个内置指令了，那就需要fork和execve\n\n这时候需要注意几点：\n1. 因为这时候要addjob，有可能会产生deletejob发生在addjob之前。所以要在exceve之前阻塞SIGCHLD信号来避免此问题发生。\n2. 利用parseline函数返回值来判断是前台还是后台，如果是前台，tsh需要挂起（`while(flag) suspend(&mask)`）直到前台程序结束或停止。\n3. 判断前台程序结束使用一个标志位，在SIGCHLD Handler里waitpid时判断如果当前进程是fg的话就修改标志位`flag`。此时因为received一个SIGCHLD信号，`suspend()`函数会被触发结束挂起，此时发现循环条件不满足，这就取消挂起了。\n\n### test04\n运行一个后台进程。\n\n与前台程序相反：\n1. 通过parseline函数返回值判断是bg，则tsh无需挂起\n2. 与前台类似，exceve之前也要block SIGCHLD信号，并将job设为BG\n\n### test 05\n\n运行多个后台进程，并使用jobs命令打印当前jobs\n\n1. jobs是个内置命令，在builtin_cmd函数里面匹配jobs字符串调用已经写好的listjobs函数并返回1\n\n### test06\n\n运行一个前台进程，发送一个SIGINT信号给此进程（按下CTRL+C\n\n1. 首先需要tsh进程接受到SIGINT信号。tsh的SIGINT信号的处理程序源文件中已经给注册（signal）了，我们只需要填写完成信号处理函数就OK了\n2. tsh接受到SIGINT信号，如果此时有前台进程则发送给前台进程及其后代进程（后续再说其后代进程的处理），发送使用kill函数，pid通过fgpid函数获得\n3. 此时前台进程会被SIGINT信号默认结束进程。这会deliver给tsh进程一个SIGCHLD信号，通过`WIFSIGNALED(status)`来判断此进程是否由信号终止的，status有waitpid获取（后续讲），这时就可以打印了，通过`WTERMSIG(status)`来获取引发终止的信号\n\n### test07\n确认只发送SIGINT信号给前台程序，因为我们通过fgpid获取的进程id，所以肯定是只发送信号给前台进程了。直接过\n\n### test08\n发送一个SIGTSTP信号给前台程序。和SIGINT类似，不过有点区别\n\n\n1. tsh接受到SIGTSTP信号处理过程是一样的，发送给fgpid获取的进程。\n2. SIGTSTP信号被子进程received之后，子进程默认停止。父进程被delivered一个SIGCHLD信号，在SIGCHLD Handler里需要使用`WIFSTOPPED(status)`函数来判断当前进程是否被停止，如果停止则设置state为ST，并打印。此时listjobs则会看到状态发生了改变\n\n\n\n### test09\n\n内置`bg %jid(or pid) `命令，作用是在后台运行一个已停止的进程。\n和其他内置命令一样，不过需要额外解析jid或者pid，然后需要发送一个SIGCONT信号\n\n1. 关于tsh进程发起`bg %jid`命令，tsh进程需要发送SIGCONT信号给对应的job进程，需要等待job进程接受到SIGCONT信号并开始执行，然后tsh进程SIGCHLD Handler处理。\n   > waitpid函数需要添加**WCONTINUED**的选项来拿到此进程。\n2. tsh在SIGCHLD Handler里需要将当前进程置为BG\n\n### test10\n\n内置`fg %jid(or pid) `命令，作用是在前台运行一个已停止的进程。\n\n1. 和bg命令类似，需要解析jid和发送SIGCONT信号\n2. fg需要将目标进程在前台执行，这就需要tsh进程挂起，和前台进程类似\n\n### test11\n\n发送SIGINT信号给前台进程组里的所有进程。\n\n1. 默认情况下，fork的子进程是和父进程同一个进程组的，进程组由pgid唯一标识\n2. 前台进程组是由exceve执行的进程及其后代进程组成的，只需要对exceve进程设置gpid即可，通过`setgpid(pid,pgid)`函数来设置，pid=0则为当前进程设置，pgid=0则使用当前进程pid来作为pgid。我们使用当前进程pid作为pgid，后代进程和此进程是相同的pgid\n3. 使用kill(pid,signum)来发送信号，当pid<0时则把pid的绝对值当做pgid，将signum对应的信号发送给pgid的所有进程中\n\n### test12\n\n发送SIGTSTP信号给前台进程组里的所有进程。和test11类似，不赘述\n\n### test13\n发送SIGCONT信号给后台pid对应停止进程的进程组里的所有进程。和test11类似，不赘述\n\n### test14\n简单错误处理，比如fg一个不存在的进程或进程组，或缺少参数。进行字符串匹配即可，不赘述。\n\n### test15\nPutting it all together\n\n这个出了点问题\n1. `bg %1`没打印东西，而`jobs`命令后将`bg %1`的东西打印了。解决办法，输出缓冲区的内容没有输出到设备，使用fflush(stdout)函数。\n2. tsh进程挂起标志位flag的设置，只需要在waitpid当前进程是FG进程并且停止`WIFSTOPPED(status)==1`或终止`WIFEXITED(status)==1`状态才结束挂起。\n\n### test16\n\n能够处理来自其他进程的信号，毫无疑问可以。\n\n## 总结\n\nOK，结束了。本次实验主要是熟悉了信号的使用，包括如何定义信号处理函数，如何响应子进程状态的改变，如何同步信号引发的一些问题等。另外也大体了解了shell是个什么东西，6.828再见。","source":"_posts/csapp-lab-6.md","raw":"---\ntitle: A Tiny Shell——CSAPP之Shell Lab\nmathjax: false\ncopyright: true\ncomment: true\ndate: 2019-11-01 17:02:14\ntags:\n- Operating System\n- CSAPP\n- CSAPP Lab\ncategories:\n- Computer Science\n- Operating System\n\n---\n\n{% note primary %}\n利用Linux信号实现一个简单的Shell。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n\n## 前言\n\n很恶心，代码写完了，都过了。不过有的测试用例rtest卡了，认为是修改了，重下一遍，结果不小心覆盖了，git上传也不完整。。靠大脑cache来总结吧\n\n## 信号\n\n信号类似于一种中断，或者可以称之为软件中断。先来总结一下关于异常控制流ECF（Exception Control Flow）的分类吧。\n\n异常控制流，或者称之为异常，这是广义的异常，只要不是正常的逻辑控制流，就是异常。\n\n异常分为同步异常和异步异常。异步异常就是中断（分为硬件中断和软件中断），同步异常就是狭义的异常（包括陷阱trap，错误fault，和终止abort）\n\n### 异常分类\n1. 同步的\n   1. 陷阱trap，有目的的。eg：system call\n   2. 错误fault，无目的的，有可能恢复。eg：pagefault\n   3. 终止abort，无目的的，不能恢复。eg：非法指令\n2. 异步的\n   1. 硬件中断\n   2. 软件中断\n      1. 信号\n      2. ...\n\n## 信号处理执行过程\n\n几个标志字：\npending：delivered信号，等待被处理\nblocked：被阻塞的信号，可以加入到pending里，但不会被receive\n\n\n信号处理分为几个阶段：\n1. deliver：放到pending里\n2. receive：Handler处理\n\n信号处理过程：\n假设内核已经从一个异常处理程序中返回并且要切换到进程P：\n1. 内核计算进程P的信号状态：pending_unblocked_signals=pending&~unblocked\n2. 如果pending_unblocked_signals为0则直接切换到进程P\n3. 如果不为0则就依次强制进程P处理信号，直到为0（信号处理可能被其他信号中断）\n\n##  waitpid (pid_t pid, int *statusp, int options)函数详解\n1. pid>0等待一个特定pid的进程，pid=-1，等待所有子进程，（还支持其他类型等待集合，比如Unix进程组，在此不做讨论）\n2. status用于保存等待返回进程的状态\n3. options有三个。WNOHANG——等待集合中没有进程终止则立即返回，WUNTRACED——挂起调用进程直到等待进程终止或停止，WCONTINUED——挂起调用进程直到等待进程终止或被停止的进程收到SIGCONT重新执行\n\n## 关键点\n\n> 写一下关键的地方吧。按照测试来写，具体能容可能由测试来展开。\n\n\n### test01\n\nCTRL+D退出，自带\n\n### test02\n\n内置quit命令。\n判断使用已定义好的builtin_cmd函数，匹配quit字符串返回1，不是内置则返回0\n首先在eval函数里判断，如果是内置指令则单独执行，无需fork。单独执行时直接exit。\n\n### test03\n\n运行一个前台进程。\n\n这说明不是一个内置指令了，那就需要fork和execve\n\n这时候需要注意几点：\n1. 因为这时候要addjob，有可能会产生deletejob发生在addjob之前。所以要在exceve之前阻塞SIGCHLD信号来避免此问题发生。\n2. 利用parseline函数返回值来判断是前台还是后台，如果是前台，tsh需要挂起（`while(flag) suspend(&mask)`）直到前台程序结束或停止。\n3. 判断前台程序结束使用一个标志位，在SIGCHLD Handler里waitpid时判断如果当前进程是fg的话就修改标志位`flag`。此时因为received一个SIGCHLD信号，`suspend()`函数会被触发结束挂起，此时发现循环条件不满足，这就取消挂起了。\n\n### test04\n运行一个后台进程。\n\n与前台程序相反：\n1. 通过parseline函数返回值判断是bg，则tsh无需挂起\n2. 与前台类似，exceve之前也要block SIGCHLD信号，并将job设为BG\n\n### test 05\n\n运行多个后台进程，并使用jobs命令打印当前jobs\n\n1. jobs是个内置命令，在builtin_cmd函数里面匹配jobs字符串调用已经写好的listjobs函数并返回1\n\n### test06\n\n运行一个前台进程，发送一个SIGINT信号给此进程（按下CTRL+C\n\n1. 首先需要tsh进程接受到SIGINT信号。tsh的SIGINT信号的处理程序源文件中已经给注册（signal）了，我们只需要填写完成信号处理函数就OK了\n2. tsh接受到SIGINT信号，如果此时有前台进程则发送给前台进程及其后代进程（后续再说其后代进程的处理），发送使用kill函数，pid通过fgpid函数获得\n3. 此时前台进程会被SIGINT信号默认结束进程。这会deliver给tsh进程一个SIGCHLD信号，通过`WIFSIGNALED(status)`来判断此进程是否由信号终止的，status有waitpid获取（后续讲），这时就可以打印了，通过`WTERMSIG(status)`来获取引发终止的信号\n\n### test07\n确认只发送SIGINT信号给前台程序，因为我们通过fgpid获取的进程id，所以肯定是只发送信号给前台进程了。直接过\n\n### test08\n发送一个SIGTSTP信号给前台程序。和SIGINT类似，不过有点区别\n\n\n1. tsh接受到SIGTSTP信号处理过程是一样的，发送给fgpid获取的进程。\n2. SIGTSTP信号被子进程received之后，子进程默认停止。父进程被delivered一个SIGCHLD信号，在SIGCHLD Handler里需要使用`WIFSTOPPED(status)`函数来判断当前进程是否被停止，如果停止则设置state为ST，并打印。此时listjobs则会看到状态发生了改变\n\n\n\n### test09\n\n内置`bg %jid(or pid) `命令，作用是在后台运行一个已停止的进程。\n和其他内置命令一样，不过需要额外解析jid或者pid，然后需要发送一个SIGCONT信号\n\n1. 关于tsh进程发起`bg %jid`命令，tsh进程需要发送SIGCONT信号给对应的job进程，需要等待job进程接受到SIGCONT信号并开始执行，然后tsh进程SIGCHLD Handler处理。\n   > waitpid函数需要添加**WCONTINUED**的选项来拿到此进程。\n2. tsh在SIGCHLD Handler里需要将当前进程置为BG\n\n### test10\n\n内置`fg %jid(or pid) `命令，作用是在前台运行一个已停止的进程。\n\n1. 和bg命令类似，需要解析jid和发送SIGCONT信号\n2. fg需要将目标进程在前台执行，这就需要tsh进程挂起，和前台进程类似\n\n### test11\n\n发送SIGINT信号给前台进程组里的所有进程。\n\n1. 默认情况下，fork的子进程是和父进程同一个进程组的，进程组由pgid唯一标识\n2. 前台进程组是由exceve执行的进程及其后代进程组成的，只需要对exceve进程设置gpid即可，通过`setgpid(pid,pgid)`函数来设置，pid=0则为当前进程设置，pgid=0则使用当前进程pid来作为pgid。我们使用当前进程pid作为pgid，后代进程和此进程是相同的pgid\n3. 使用kill(pid,signum)来发送信号，当pid<0时则把pid的绝对值当做pgid，将signum对应的信号发送给pgid的所有进程中\n\n### test12\n\n发送SIGTSTP信号给前台进程组里的所有进程。和test11类似，不赘述\n\n### test13\n发送SIGCONT信号给后台pid对应停止进程的进程组里的所有进程。和test11类似，不赘述\n\n### test14\n简单错误处理，比如fg一个不存在的进程或进程组，或缺少参数。进行字符串匹配即可，不赘述。\n\n### test15\nPutting it all together\n\n这个出了点问题\n1. `bg %1`没打印东西，而`jobs`命令后将`bg %1`的东西打印了。解决办法，输出缓冲区的内容没有输出到设备，使用fflush(stdout)函数。\n2. tsh进程挂起标志位flag的设置，只需要在waitpid当前进程是FG进程并且停止`WIFSTOPPED(status)==1`或终止`WIFEXITED(status)==1`状态才结束挂起。\n\n### test16\n\n能够处理来自其他进程的信号，毫无疑问可以。\n\n## 总结\n\nOK，结束了。本次实验主要是熟悉了信号的使用，包括如何定义信号处理函数，如何响应子进程状态的改变，如何同步信号引发的一些问题等。另外也大体了解了shell是个什么东西，6.828再见。","slug":"csapp-lab-6","published":1,"updated":"2022-01-06T04:09:12.281Z","_id":"cksq5v7m9000yn0pug3c7934g","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note primary\"><p>利用Linux信号实现一个简单的Shell。</p>\n</div>\n\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>很恶心，代码写完了，都过了。不过有的测试用例rtest卡了，认为是修改了，重下一遍，结果不小心覆盖了，git上传也不完整。。靠大脑cache来总结吧</p>\n<h2 id=\"信号\"><a href=\"#信号\" class=\"headerlink\" title=\"信号\"></a>信号</h2><p>信号类似于一种中断，或者可以称之为软件中断。先来总结一下关于异常控制流ECF（Exception Control Flow）的分类吧。</p>\n<p>异常控制流，或者称之为异常，这是广义的异常，只要不是正常的逻辑控制流，就是异常。</p>\n<p>异常分为同步异常和异步异常。异步异常就是中断（分为硬件中断和软件中断），同步异常就是狭义的异常（包括陷阱trap，错误fault，和终止abort）</p>\n<h3 id=\"异常分类\"><a href=\"#异常分类\" class=\"headerlink\" title=\"异常分类\"></a>异常分类</h3><ol>\n<li>同步的<ol>\n<li>陷阱trap，有目的的。eg：system call</li>\n<li>错误fault，无目的的，有可能恢复。eg：pagefault</li>\n<li>终止abort，无目的的，不能恢复。eg：非法指令</li>\n</ol>\n</li>\n<li>异步的<ol>\n<li>硬件中断</li>\n<li>软件中断<ol>\n<li>信号</li>\n<li>…</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"信号处理执行过程\"><a href=\"#信号处理执行过程\" class=\"headerlink\" title=\"信号处理执行过程\"></a>信号处理执行过程</h2><p>几个标志字：<br>pending：delivered信号，等待被处理<br>blocked：被阻塞的信号，可以加入到pending里，但不会被receive</p>\n<p>信号处理分为几个阶段：</p>\n<ol>\n<li>deliver：放到pending里</li>\n<li>receive：Handler处理</li>\n</ol>\n<p>信号处理过程：<br>假设内核已经从一个异常处理程序中返回并且要切换到进程P：</p>\n<ol>\n<li>内核计算进程P的信号状态：pending_unblocked_signals=pending&amp;~unblocked</li>\n<li>如果pending_unblocked_signals为0则直接切换到进程P</li>\n<li>如果不为0则就依次强制进程P处理信号，直到为0（信号处理可能被其他信号中断）</li>\n</ol>\n<h2 id=\"waitpid-pid-t-pid-int-statusp-int-options-函数详解\"><a href=\"#waitpid-pid-t-pid-int-statusp-int-options-函数详解\" class=\"headerlink\" title=\"waitpid (pid_t pid, int *statusp, int options)函数详解\"></a>waitpid (pid_t pid, int *statusp, int options)函数详解</h2><ol>\n<li>pid&gt;0等待一个特定pid的进程，pid=-1，等待所有子进程，（还支持其他类型等待集合，比如Unix进程组，在此不做讨论）</li>\n<li>status用于保存等待返回进程的状态</li>\n<li>options有三个。WNOHANG——等待集合中没有进程终止则立即返回，WUNTRACED——挂起调用进程直到等待进程终止或停止，WCONTINUED——挂起调用进程直到等待进程终止或被停止的进程收到SIGCONT重新执行</li>\n</ol>\n<h2 id=\"关键点\"><a href=\"#关键点\" class=\"headerlink\" title=\"关键点\"></a>关键点</h2><blockquote>\n<p>写一下关键的地方吧。按照测试来写，具体能容可能由测试来展开。</p>\n</blockquote>\n<h3 id=\"test01\"><a href=\"#test01\" class=\"headerlink\" title=\"test01\"></a>test01</h3><p>CTRL+D退出，自带</p>\n<h3 id=\"test02\"><a href=\"#test02\" class=\"headerlink\" title=\"test02\"></a>test02</h3><p>内置quit命令。<br>判断使用已定义好的builtin_cmd函数，匹配quit字符串返回1，不是内置则返回0<br>首先在eval函数里判断，如果是内置指令则单独执行，无需fork。单独执行时直接exit。</p>\n<h3 id=\"test03\"><a href=\"#test03\" class=\"headerlink\" title=\"test03\"></a>test03</h3><p>运行一个前台进程。</p>\n<p>这说明不是一个内置指令了，那就需要fork和execve</p>\n<p>这时候需要注意几点：</p>\n<ol>\n<li>因为这时候要addjob，有可能会产生deletejob发生在addjob之前。所以要在exceve之前阻塞SIGCHLD信号来避免此问题发生。</li>\n<li>利用parseline函数返回值来判断是前台还是后台，如果是前台，tsh需要挂起（<code>while(flag) suspend(&amp;mask)</code>）直到前台程序结束或停止。</li>\n<li>判断前台程序结束使用一个标志位，在SIGCHLD Handler里waitpid时判断如果当前进程是fg的话就修改标志位<code>flag</code>。此时因为received一个SIGCHLD信号，<code>suspend()</code>函数会被触发结束挂起，此时发现循环条件不满足，这就取消挂起了。</li>\n</ol>\n<h3 id=\"test04\"><a href=\"#test04\" class=\"headerlink\" title=\"test04\"></a>test04</h3><p>运行一个后台进程。</p>\n<p>与前台程序相反：</p>\n<ol>\n<li>通过parseline函数返回值判断是bg，则tsh无需挂起</li>\n<li>与前台类似，exceve之前也要block SIGCHLD信号，并将job设为BG</li>\n</ol>\n<h3 id=\"test-05\"><a href=\"#test-05\" class=\"headerlink\" title=\"test 05\"></a>test 05</h3><p>运行多个后台进程，并使用jobs命令打印当前jobs</p>\n<ol>\n<li>jobs是个内置命令，在builtin_cmd函数里面匹配jobs字符串调用已经写好的listjobs函数并返回1</li>\n</ol>\n<h3 id=\"test06\"><a href=\"#test06\" class=\"headerlink\" title=\"test06\"></a>test06</h3><p>运行一个前台进程，发送一个SIGINT信号给此进程（按下CTRL+C</p>\n<ol>\n<li>首先需要tsh进程接受到SIGINT信号。tsh的SIGINT信号的处理程序源文件中已经给注册（signal）了，我们只需要填写完成信号处理函数就OK了</li>\n<li>tsh接受到SIGINT信号，如果此时有前台进程则发送给前台进程及其后代进程（后续再说其后代进程的处理），发送使用kill函数，pid通过fgpid函数获得</li>\n<li>此时前台进程会被SIGINT信号默认结束进程。这会deliver给tsh进程一个SIGCHLD信号，通过<code>WIFSIGNALED(status)</code>来判断此进程是否由信号终止的，status有waitpid获取（后续讲），这时就可以打印了，通过<code>WTERMSIG(status)</code>来获取引发终止的信号</li>\n</ol>\n<h3 id=\"test07\"><a href=\"#test07\" class=\"headerlink\" title=\"test07\"></a>test07</h3><p>确认只发送SIGINT信号给前台程序，因为我们通过fgpid获取的进程id，所以肯定是只发送信号给前台进程了。直接过</p>\n<h3 id=\"test08\"><a href=\"#test08\" class=\"headerlink\" title=\"test08\"></a>test08</h3><p>发送一个SIGTSTP信号给前台程序。和SIGINT类似，不过有点区别</p>\n<ol>\n<li>tsh接受到SIGTSTP信号处理过程是一样的，发送给fgpid获取的进程。</li>\n<li>SIGTSTP信号被子进程received之后，子进程默认停止。父进程被delivered一个SIGCHLD信号，在SIGCHLD Handler里需要使用<code>WIFSTOPPED(status)</code>函数来判断当前进程是否被停止，如果停止则设置state为ST，并打印。此时listjobs则会看到状态发生了改变</li>\n</ol>\n<h3 id=\"test09\"><a href=\"#test09\" class=\"headerlink\" title=\"test09\"></a>test09</h3><p>内置<code>bg %jid(or pid) </code>命令，作用是在后台运行一个已停止的进程。<br>和其他内置命令一样，不过需要额外解析jid或者pid，然后需要发送一个SIGCONT信号</p>\n<ol>\n<li>关于tsh进程发起<code>bg %jid</code>命令，tsh进程需要发送SIGCONT信号给对应的job进程，需要等待job进程接受到SIGCONT信号并开始执行，然后tsh进程SIGCHLD Handler处理。<blockquote>\n<p>waitpid函数需要添加<strong>WCONTINUED</strong>的选项来拿到此进程。</p>\n</blockquote>\n</li>\n<li>tsh在SIGCHLD Handler里需要将当前进程置为BG</li>\n</ol>\n<h3 id=\"test10\"><a href=\"#test10\" class=\"headerlink\" title=\"test10\"></a>test10</h3><p>内置<code>fg %jid(or pid) </code>命令，作用是在前台运行一个已停止的进程。</p>\n<ol>\n<li>和bg命令类似，需要解析jid和发送SIGCONT信号</li>\n<li>fg需要将目标进程在前台执行，这就需要tsh进程挂起，和前台进程类似</li>\n</ol>\n<h3 id=\"test11\"><a href=\"#test11\" class=\"headerlink\" title=\"test11\"></a>test11</h3><p>发送SIGINT信号给前台进程组里的所有进程。</p>\n<ol>\n<li>默认情况下，fork的子进程是和父进程同一个进程组的，进程组由pgid唯一标识</li>\n<li>前台进程组是由exceve执行的进程及其后代进程组成的，只需要对exceve进程设置gpid即可，通过<code>setgpid(pid,pgid)</code>函数来设置，pid=0则为当前进程设置，pgid=0则使用当前进程pid来作为pgid。我们使用当前进程pid作为pgid，后代进程和此进程是相同的pgid</li>\n<li>使用kill(pid,signum)来发送信号，当pid&lt;0时则把pid的绝对值当做pgid，将signum对应的信号发送给pgid的所有进程中</li>\n</ol>\n<h3 id=\"test12\"><a href=\"#test12\" class=\"headerlink\" title=\"test12\"></a>test12</h3><p>发送SIGTSTP信号给前台进程组里的所有进程。和test11类似，不赘述</p>\n<h3 id=\"test13\"><a href=\"#test13\" class=\"headerlink\" title=\"test13\"></a>test13</h3><p>发送SIGCONT信号给后台pid对应停止进程的进程组里的所有进程。和test11类似，不赘述</p>\n<h3 id=\"test14\"><a href=\"#test14\" class=\"headerlink\" title=\"test14\"></a>test14</h3><p>简单错误处理，比如fg一个不存在的进程或进程组，或缺少参数。进行字符串匹配即可，不赘述。</p>\n<h3 id=\"test15\"><a href=\"#test15\" class=\"headerlink\" title=\"test15\"></a>test15</h3><p>Putting it all together</p>\n<p>这个出了点问题</p>\n<ol>\n<li><code>bg %1</code>没打印东西，而<code>jobs</code>命令后将<code>bg %1</code>的东西打印了。解决办法，输出缓冲区的内容没有输出到设备，使用fflush(stdout)函数。</li>\n<li>tsh进程挂起标志位flag的设置，只需要在waitpid当前进程是FG进程并且停止<code>WIFSTOPPED(status)==1</code>或终止<code>WIFEXITED(status)==1</code>状态才结束挂起。</li>\n</ol>\n<h3 id=\"test16\"><a href=\"#test16\" class=\"headerlink\" title=\"test16\"></a>test16</h3><p>能够处理来自其他进程的信号，毫无疑问可以。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>OK，结束了。本次实验主要是熟悉了信号的使用，包括如何定义信号处理函数，如何响应子进程状态的改变，如何同步信号引发的一些问题等。另外也大体了解了shell是个什么东西，6.828再见。</p>\n","site":{"data":{}},"excerpt":"<div class=\"note primary\"><p>利用Linux信号实现一个简单的Shell。</p>\n</div>","more":"<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>很恶心，代码写完了，都过了。不过有的测试用例rtest卡了，认为是修改了，重下一遍，结果不小心覆盖了，git上传也不完整。。靠大脑cache来总结吧</p>\n<h2 id=\"信号\"><a href=\"#信号\" class=\"headerlink\" title=\"信号\"></a>信号</h2><p>信号类似于一种中断，或者可以称之为软件中断。先来总结一下关于异常控制流ECF（Exception Control Flow）的分类吧。</p>\n<p>异常控制流，或者称之为异常，这是广义的异常，只要不是正常的逻辑控制流，就是异常。</p>\n<p>异常分为同步异常和异步异常。异步异常就是中断（分为硬件中断和软件中断），同步异常就是狭义的异常（包括陷阱trap，错误fault，和终止abort）</p>\n<h3 id=\"异常分类\"><a href=\"#异常分类\" class=\"headerlink\" title=\"异常分类\"></a>异常分类</h3><ol>\n<li>同步的<ol>\n<li>陷阱trap，有目的的。eg：system call</li>\n<li>错误fault，无目的的，有可能恢复。eg：pagefault</li>\n<li>终止abort，无目的的，不能恢复。eg：非法指令</li>\n</ol>\n</li>\n<li>异步的<ol>\n<li>硬件中断</li>\n<li>软件中断<ol>\n<li>信号</li>\n<li>…</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"信号处理执行过程\"><a href=\"#信号处理执行过程\" class=\"headerlink\" title=\"信号处理执行过程\"></a>信号处理执行过程</h2><p>几个标志字：<br>pending：delivered信号，等待被处理<br>blocked：被阻塞的信号，可以加入到pending里，但不会被receive</p>\n<p>信号处理分为几个阶段：</p>\n<ol>\n<li>deliver：放到pending里</li>\n<li>receive：Handler处理</li>\n</ol>\n<p>信号处理过程：<br>假设内核已经从一个异常处理程序中返回并且要切换到进程P：</p>\n<ol>\n<li>内核计算进程P的信号状态：pending_unblocked_signals=pending&amp;~unblocked</li>\n<li>如果pending_unblocked_signals为0则直接切换到进程P</li>\n<li>如果不为0则就依次强制进程P处理信号，直到为0（信号处理可能被其他信号中断）</li>\n</ol>\n<h2 id=\"waitpid-pid-t-pid-int-statusp-int-options-函数详解\"><a href=\"#waitpid-pid-t-pid-int-statusp-int-options-函数详解\" class=\"headerlink\" title=\"waitpid (pid_t pid, int *statusp, int options)函数详解\"></a>waitpid (pid_t pid, int *statusp, int options)函数详解</h2><ol>\n<li>pid&gt;0等待一个特定pid的进程，pid=-1，等待所有子进程，（还支持其他类型等待集合，比如Unix进程组，在此不做讨论）</li>\n<li>status用于保存等待返回进程的状态</li>\n<li>options有三个。WNOHANG——等待集合中没有进程终止则立即返回，WUNTRACED——挂起调用进程直到等待进程终止或停止，WCONTINUED——挂起调用进程直到等待进程终止或被停止的进程收到SIGCONT重新执行</li>\n</ol>\n<h2 id=\"关键点\"><a href=\"#关键点\" class=\"headerlink\" title=\"关键点\"></a>关键点</h2><blockquote>\n<p>写一下关键的地方吧。按照测试来写，具体能容可能由测试来展开。</p>\n</blockquote>\n<h3 id=\"test01\"><a href=\"#test01\" class=\"headerlink\" title=\"test01\"></a>test01</h3><p>CTRL+D退出，自带</p>\n<h3 id=\"test02\"><a href=\"#test02\" class=\"headerlink\" title=\"test02\"></a>test02</h3><p>内置quit命令。<br>判断使用已定义好的builtin_cmd函数，匹配quit字符串返回1，不是内置则返回0<br>首先在eval函数里判断，如果是内置指令则单独执行，无需fork。单独执行时直接exit。</p>\n<h3 id=\"test03\"><a href=\"#test03\" class=\"headerlink\" title=\"test03\"></a>test03</h3><p>运行一个前台进程。</p>\n<p>这说明不是一个内置指令了，那就需要fork和execve</p>\n<p>这时候需要注意几点：</p>\n<ol>\n<li>因为这时候要addjob，有可能会产生deletejob发生在addjob之前。所以要在exceve之前阻塞SIGCHLD信号来避免此问题发生。</li>\n<li>利用parseline函数返回值来判断是前台还是后台，如果是前台，tsh需要挂起（<code>while(flag) suspend(&amp;mask)</code>）直到前台程序结束或停止。</li>\n<li>判断前台程序结束使用一个标志位，在SIGCHLD Handler里waitpid时判断如果当前进程是fg的话就修改标志位<code>flag</code>。此时因为received一个SIGCHLD信号，<code>suspend()</code>函数会被触发结束挂起，此时发现循环条件不满足，这就取消挂起了。</li>\n</ol>\n<h3 id=\"test04\"><a href=\"#test04\" class=\"headerlink\" title=\"test04\"></a>test04</h3><p>运行一个后台进程。</p>\n<p>与前台程序相反：</p>\n<ol>\n<li>通过parseline函数返回值判断是bg，则tsh无需挂起</li>\n<li>与前台类似，exceve之前也要block SIGCHLD信号，并将job设为BG</li>\n</ol>\n<h3 id=\"test-05\"><a href=\"#test-05\" class=\"headerlink\" title=\"test 05\"></a>test 05</h3><p>运行多个后台进程，并使用jobs命令打印当前jobs</p>\n<ol>\n<li>jobs是个内置命令，在builtin_cmd函数里面匹配jobs字符串调用已经写好的listjobs函数并返回1</li>\n</ol>\n<h3 id=\"test06\"><a href=\"#test06\" class=\"headerlink\" title=\"test06\"></a>test06</h3><p>运行一个前台进程，发送一个SIGINT信号给此进程（按下CTRL+C</p>\n<ol>\n<li>首先需要tsh进程接受到SIGINT信号。tsh的SIGINT信号的处理程序源文件中已经给注册（signal）了，我们只需要填写完成信号处理函数就OK了</li>\n<li>tsh接受到SIGINT信号，如果此时有前台进程则发送给前台进程及其后代进程（后续再说其后代进程的处理），发送使用kill函数，pid通过fgpid函数获得</li>\n<li>此时前台进程会被SIGINT信号默认结束进程。这会deliver给tsh进程一个SIGCHLD信号，通过<code>WIFSIGNALED(status)</code>来判断此进程是否由信号终止的，status有waitpid获取（后续讲），这时就可以打印了，通过<code>WTERMSIG(status)</code>来获取引发终止的信号</li>\n</ol>\n<h3 id=\"test07\"><a href=\"#test07\" class=\"headerlink\" title=\"test07\"></a>test07</h3><p>确认只发送SIGINT信号给前台程序，因为我们通过fgpid获取的进程id，所以肯定是只发送信号给前台进程了。直接过</p>\n<h3 id=\"test08\"><a href=\"#test08\" class=\"headerlink\" title=\"test08\"></a>test08</h3><p>发送一个SIGTSTP信号给前台程序。和SIGINT类似，不过有点区别</p>\n<ol>\n<li>tsh接受到SIGTSTP信号处理过程是一样的，发送给fgpid获取的进程。</li>\n<li>SIGTSTP信号被子进程received之后，子进程默认停止。父进程被delivered一个SIGCHLD信号，在SIGCHLD Handler里需要使用<code>WIFSTOPPED(status)</code>函数来判断当前进程是否被停止，如果停止则设置state为ST，并打印。此时listjobs则会看到状态发生了改变</li>\n</ol>\n<h3 id=\"test09\"><a href=\"#test09\" class=\"headerlink\" title=\"test09\"></a>test09</h3><p>内置<code>bg %jid(or pid) </code>命令，作用是在后台运行一个已停止的进程。<br>和其他内置命令一样，不过需要额外解析jid或者pid，然后需要发送一个SIGCONT信号</p>\n<ol>\n<li>关于tsh进程发起<code>bg %jid</code>命令，tsh进程需要发送SIGCONT信号给对应的job进程，需要等待job进程接受到SIGCONT信号并开始执行，然后tsh进程SIGCHLD Handler处理。<blockquote>\n<p>waitpid函数需要添加<strong>WCONTINUED</strong>的选项来拿到此进程。</p>\n</blockquote>\n</li>\n<li>tsh在SIGCHLD Handler里需要将当前进程置为BG</li>\n</ol>\n<h3 id=\"test10\"><a href=\"#test10\" class=\"headerlink\" title=\"test10\"></a>test10</h3><p>内置<code>fg %jid(or pid) </code>命令，作用是在前台运行一个已停止的进程。</p>\n<ol>\n<li>和bg命令类似，需要解析jid和发送SIGCONT信号</li>\n<li>fg需要将目标进程在前台执行，这就需要tsh进程挂起，和前台进程类似</li>\n</ol>\n<h3 id=\"test11\"><a href=\"#test11\" class=\"headerlink\" title=\"test11\"></a>test11</h3><p>发送SIGINT信号给前台进程组里的所有进程。</p>\n<ol>\n<li>默认情况下，fork的子进程是和父进程同一个进程组的，进程组由pgid唯一标识</li>\n<li>前台进程组是由exceve执行的进程及其后代进程组成的，只需要对exceve进程设置gpid即可，通过<code>setgpid(pid,pgid)</code>函数来设置，pid=0则为当前进程设置，pgid=0则使用当前进程pid来作为pgid。我们使用当前进程pid作为pgid，后代进程和此进程是相同的pgid</li>\n<li>使用kill(pid,signum)来发送信号，当pid&lt;0时则把pid的绝对值当做pgid，将signum对应的信号发送给pgid的所有进程中</li>\n</ol>\n<h3 id=\"test12\"><a href=\"#test12\" class=\"headerlink\" title=\"test12\"></a>test12</h3><p>发送SIGTSTP信号给前台进程组里的所有进程。和test11类似，不赘述</p>\n<h3 id=\"test13\"><a href=\"#test13\" class=\"headerlink\" title=\"test13\"></a>test13</h3><p>发送SIGCONT信号给后台pid对应停止进程的进程组里的所有进程。和test11类似，不赘述</p>\n<h3 id=\"test14\"><a href=\"#test14\" class=\"headerlink\" title=\"test14\"></a>test14</h3><p>简单错误处理，比如fg一个不存在的进程或进程组，或缺少参数。进行字符串匹配即可，不赘述。</p>\n<h3 id=\"test15\"><a href=\"#test15\" class=\"headerlink\" title=\"test15\"></a>test15</h3><p>Putting it all together</p>\n<p>这个出了点问题</p>\n<ol>\n<li><code>bg %1</code>没打印东西，而<code>jobs</code>命令后将<code>bg %1</code>的东西打印了。解决办法，输出缓冲区的内容没有输出到设备，使用fflush(stdout)函数。</li>\n<li>tsh进程挂起标志位flag的设置，只需要在waitpid当前进程是FG进程并且停止<code>WIFSTOPPED(status)==1</code>或终止<code>WIFEXITED(status)==1</code>状态才结束挂起。</li>\n</ol>\n<h3 id=\"test16\"><a href=\"#test16\" class=\"headerlink\" title=\"test16\"></a>test16</h3><p>能够处理来自其他进程的信号，毫无疑问可以。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>OK，结束了。本次实验主要是熟悉了信号的使用，包括如何定义信号处理函数，如何响应子进程状态的改变，如何同步信号引发的一些问题等。另外也大体了解了shell是个什么东西，6.828再见。</p>"},{"title":"CSS系列：CSS选择器总结【WIP】","mathjax":false,"copyright":true,"comment":true,"date":"2019-11-29T06:41:21.000Z","_content":"\n{% note primary %}\ntype,universal,attribute,class,id,pseudo-class,pseudo-element,combinator\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 前言\n\ncss的选择器一直常用的就几个，也就记住了这几个，初学时系统的学过一遍不过现在也忘得差不多了，今天就来总结一下CSS中到底有哪些选择器。\n\n\n## 总览\n\n所有的选择器如下，我们接下来会一一介绍其用法和语义，还有他们的优先级。\n\n- 简单选择器\n  - 通配选择器\n  - 标签（类型）选择器\n  - 属性选择器\n  - 类选择器\n  - ID选择器\n  - 伪类选择器\n- 伪元素选择器\n- 组合选择器\n\n## 命名空间\n\n再具体介绍各类选择器之前，我们必须先来谈个概念——命名空间。**这部分内容没怎么用过，不会详细展开，只会简单总结一下用法。以后用到会继续补充，如果有错请右下角小窗或者文章右上角修改pr**\n\n命名空间可以作用于通配选择器、标签（类型）选择器和属性选择器，目的就是只选择某个或某些命名空间内的元素。\n命名空间通常用于处理文档中包含多个命名空间，比如说HTML5文档内联一些SVG、MathML、XML等。\n\n### 规则\n\n- 任何 `@namespace` 规则都必须在所有的 `@charset` 和 `@import` 规则之后, 并且在样式表中，位于其他任何 `style declarations` 之前。\n\n### 语法\n\n```css\n/* 默认命名空间 */\n@namespace url(XML-namespace-URL);\n@namespace \"XML-namespace-URL\";\n\n/* 命名空间前缀 */\n@namespace prefix url(XML-namespace-URL);\n@namespace prefix \"XML-namespace-URL\";\n\n/*使用*/\n\n/*匹配prefix命名空间的selector元素*/\nprefix|selector{}\n/*匹配所有命名空间下的selector元素*/\n*|selector{}\n/*匹配默认命名空间下的selector元素*/\nselector{}\n\n```\n\n### 例子\n\n```css\n@namespace url(http://www.w3.org/1999/xhtml);\n@namespace svg url(http://www.w3.org/2000/svg);\n\n/* 匹配所有的XHTML <a> 元素, 因为 XHTML 是默认无前缀命名空间 */\na {}\n\n/* 匹配所有的 SVG <a> 元素 */\nsvg|a {}\n\n/* 匹配 XHTML 和 SVG <a> 元素 */\n*|a {}\n\n```\n\n\n\n## 简单选择器及其语义\n\n我们把以下常见的6中选择器称为简单原则器。\n\n### 通配选择器\n\n`*`，选择任意标签元素。\n\n### 标签（类型）选择器\n\n`type`，选择`type`类型的标签。\n\n\n### 属性选择器\n\n根据标签的属性来选择。\n\n#### 属性存在性和值选择器\n\n- `[att]`，选择含`att`属性的元素，不管属性值是什么。\n- `[att=val]`，选择含`att`属性并且属性值为`val`的元素。\n- `[att~=val]`，选择满足如下条件的元素：含`att`属性，并且`att`属性值是一个列表，列表中有一个值为`val`。（`val`只是一个值，如果其中含空格或者为空串就不会代表任何值）\n- `[att|=val]`，选择包含`att`属性并且属性值是`val`或者以`val`开头并且后跟`-`的元素。\n\n#### 值串匹配属性选择器\n\n- `[att^=val]`，选择含`att`属性并且值以`val`开头的元素，如果`val`为空串则不代表任何值。\n- `[att$=val]`，选择含`att`属性并且值以`val`结束的元素，如果`val`为空串则不代表任何值。\n- `[att*=val]`，选择含`att`属性并且值包含`val`子串的元素，如果`val`为空串则不代表任何值。\n\n\n### 类选择器\n\n`.selector`，选择含有`class`属性并且值中包含`selector`值的元素。**类似于`[class~=selector]`属性选择器**。\n\n### ID选择器\n\n`#selector`，选择包含`id`属性并且值为`selector`的元素。\n\n### 伪类选择器\n\n`:selector`，伪类是为了解决使用其他简单选择器无法实现的选择问题。选择通常是基于和DOM树无关的信息。通常以`:`开头。\n\n#### 动态伪类选择器\n不会出现在源码和DOM树中。\n\n\n##### 链接伪类选择器\n\n- `:link`，选择未被访问过的链接元素。\n- `:visited`，选择已被访问过的链接元素。\n\n##### 用户动作伪类选择器\n\n有可能同时触发。\n\n- `:hover`，选择被用户选定的（不一定激活元素动作）的元素。\n- `:active`，选择被用户激活动作的元素。\n- `:focus`，选择被用户聚焦的元素。\n\n\n#### 目标伪类选择器\n\n- `:target`，和网页内部索引有关，某个URI对应一个`id`，比如当前链接是`http://example.com/html/top.html#section_2`，被这个链接能够索引到`id`为`section_2`的元素，`:target`就是选择当前URI索引的`target`元素，如果页内没有`target`（`id`）就不会被触发。\n\n#### 语言伪类选择器\n\n- `:lang(language)`，\n\n#### UI元素状态伪类选择器\n\n- `:enabled`\n- `:disabled`\n- `:checked`\n- `:interminate`\n\n#### 结构伪类选择器\n\n\n\n## 伪元素选择器\n\n## 组合选择器\n\n## 优先级\n\n\n## 总结\n\n## Reference\n- [Selectors Level 3](https://www.w3.org/TR/selectors-3/)\n- [CSS Namespaces Module Level 3](https://www.w3.org/TR/2014/REC-css-namespaces-3-20140320/)\n","source":"_posts/css-selectors.md","raw":"---\ntitle: CSS系列：CSS选择器总结【WIP】\nmathjax: false\ncopyright: true\ncomment: true\ndate: 2019-11-29 14:41:21\ntags:\n- CSS\ncategories:\n- Front-End Development\n- CSS\n---\n\n{% note primary %}\ntype,universal,attribute,class,id,pseudo-class,pseudo-element,combinator\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 前言\n\ncss的选择器一直常用的就几个，也就记住了这几个，初学时系统的学过一遍不过现在也忘得差不多了，今天就来总结一下CSS中到底有哪些选择器。\n\n\n## 总览\n\n所有的选择器如下，我们接下来会一一介绍其用法和语义，还有他们的优先级。\n\n- 简单选择器\n  - 通配选择器\n  - 标签（类型）选择器\n  - 属性选择器\n  - 类选择器\n  - ID选择器\n  - 伪类选择器\n- 伪元素选择器\n- 组合选择器\n\n## 命名空间\n\n再具体介绍各类选择器之前，我们必须先来谈个概念——命名空间。**这部分内容没怎么用过，不会详细展开，只会简单总结一下用法。以后用到会继续补充，如果有错请右下角小窗或者文章右上角修改pr**\n\n命名空间可以作用于通配选择器、标签（类型）选择器和属性选择器，目的就是只选择某个或某些命名空间内的元素。\n命名空间通常用于处理文档中包含多个命名空间，比如说HTML5文档内联一些SVG、MathML、XML等。\n\n### 规则\n\n- 任何 `@namespace` 规则都必须在所有的 `@charset` 和 `@import` 规则之后, 并且在样式表中，位于其他任何 `style declarations` 之前。\n\n### 语法\n\n```css\n/* 默认命名空间 */\n@namespace url(XML-namespace-URL);\n@namespace \"XML-namespace-URL\";\n\n/* 命名空间前缀 */\n@namespace prefix url(XML-namespace-URL);\n@namespace prefix \"XML-namespace-URL\";\n\n/*使用*/\n\n/*匹配prefix命名空间的selector元素*/\nprefix|selector{}\n/*匹配所有命名空间下的selector元素*/\n*|selector{}\n/*匹配默认命名空间下的selector元素*/\nselector{}\n\n```\n\n### 例子\n\n```css\n@namespace url(http://www.w3.org/1999/xhtml);\n@namespace svg url(http://www.w3.org/2000/svg);\n\n/* 匹配所有的XHTML <a> 元素, 因为 XHTML 是默认无前缀命名空间 */\na {}\n\n/* 匹配所有的 SVG <a> 元素 */\nsvg|a {}\n\n/* 匹配 XHTML 和 SVG <a> 元素 */\n*|a {}\n\n```\n\n\n\n## 简单选择器及其语义\n\n我们把以下常见的6中选择器称为简单原则器。\n\n### 通配选择器\n\n`*`，选择任意标签元素。\n\n### 标签（类型）选择器\n\n`type`，选择`type`类型的标签。\n\n\n### 属性选择器\n\n根据标签的属性来选择。\n\n#### 属性存在性和值选择器\n\n- `[att]`，选择含`att`属性的元素，不管属性值是什么。\n- `[att=val]`，选择含`att`属性并且属性值为`val`的元素。\n- `[att~=val]`，选择满足如下条件的元素：含`att`属性，并且`att`属性值是一个列表，列表中有一个值为`val`。（`val`只是一个值，如果其中含空格或者为空串就不会代表任何值）\n- `[att|=val]`，选择包含`att`属性并且属性值是`val`或者以`val`开头并且后跟`-`的元素。\n\n#### 值串匹配属性选择器\n\n- `[att^=val]`，选择含`att`属性并且值以`val`开头的元素，如果`val`为空串则不代表任何值。\n- `[att$=val]`，选择含`att`属性并且值以`val`结束的元素，如果`val`为空串则不代表任何值。\n- `[att*=val]`，选择含`att`属性并且值包含`val`子串的元素，如果`val`为空串则不代表任何值。\n\n\n### 类选择器\n\n`.selector`，选择含有`class`属性并且值中包含`selector`值的元素。**类似于`[class~=selector]`属性选择器**。\n\n### ID选择器\n\n`#selector`，选择包含`id`属性并且值为`selector`的元素。\n\n### 伪类选择器\n\n`:selector`，伪类是为了解决使用其他简单选择器无法实现的选择问题。选择通常是基于和DOM树无关的信息。通常以`:`开头。\n\n#### 动态伪类选择器\n不会出现在源码和DOM树中。\n\n\n##### 链接伪类选择器\n\n- `:link`，选择未被访问过的链接元素。\n- `:visited`，选择已被访问过的链接元素。\n\n##### 用户动作伪类选择器\n\n有可能同时触发。\n\n- `:hover`，选择被用户选定的（不一定激活元素动作）的元素。\n- `:active`，选择被用户激活动作的元素。\n- `:focus`，选择被用户聚焦的元素。\n\n\n#### 目标伪类选择器\n\n- `:target`，和网页内部索引有关，某个URI对应一个`id`，比如当前链接是`http://example.com/html/top.html#section_2`，被这个链接能够索引到`id`为`section_2`的元素，`:target`就是选择当前URI索引的`target`元素，如果页内没有`target`（`id`）就不会被触发。\n\n#### 语言伪类选择器\n\n- `:lang(language)`，\n\n#### UI元素状态伪类选择器\n\n- `:enabled`\n- `:disabled`\n- `:checked`\n- `:interminate`\n\n#### 结构伪类选择器\n\n\n\n## 伪元素选择器\n\n## 组合选择器\n\n## 优先级\n\n\n## 总结\n\n## Reference\n- [Selectors Level 3](https://www.w3.org/TR/selectors-3/)\n- [CSS Namespaces Module Level 3](https://www.w3.org/TR/2014/REC-css-namespaces-3-20140320/)\n","slug":"css-selectors","published":1,"updated":"2022-01-06T04:09:12.282Z","_id":"cksq5v7ma0010n0pu591wgprr","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note primary\"><p>type,universal,attribute,class,id,pseudo-class,pseudo-element,combinator</p>\n</div>\n\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>css的选择器一直常用的就几个，也就记住了这几个，初学时系统的学过一遍不过现在也忘得差不多了，今天就来总结一下CSS中到底有哪些选择器。</p>\n<h2 id=\"总览\"><a href=\"#总览\" class=\"headerlink\" title=\"总览\"></a>总览</h2><p>所有的选择器如下，我们接下来会一一介绍其用法和语义，还有他们的优先级。</p>\n<ul>\n<li>简单选择器<ul>\n<li>通配选择器</li>\n<li>标签（类型）选择器</li>\n<li>属性选择器</li>\n<li>类选择器</li>\n<li>ID选择器</li>\n<li>伪类选择器</li>\n</ul>\n</li>\n<li>伪元素选择器</li>\n<li>组合选择器</li>\n</ul>\n<h2 id=\"命名空间\"><a href=\"#命名空间\" class=\"headerlink\" title=\"命名空间\"></a>命名空间</h2><p>再具体介绍各类选择器之前，我们必须先来谈个概念——命名空间。<strong>这部分内容没怎么用过，不会详细展开，只会简单总结一下用法。以后用到会继续补充，如果有错请右下角小窗或者文章右上角修改pr</strong></p>\n<p>命名空间可以作用于通配选择器、标签（类型）选择器和属性选择器，目的就是只选择某个或某些命名空间内的元素。<br>命名空间通常用于处理文档中包含多个命名空间，比如说HTML5文档内联一些SVG、MathML、XML等。</p>\n<h3 id=\"规则\"><a href=\"#规则\" class=\"headerlink\" title=\"规则\"></a>规则</h3><ul>\n<li>任何 <code>@namespace</code> 规则都必须在所有的 <code>@charset</code> 和 <code>@import</code> 规则之后, 并且在样式表中，位于其他任何 <code>style declarations</code> 之前。</li>\n</ul>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 默认命名空间 */</span></span><br><span class=\"line\"><span class=\"keyword\">@namespace</span> url(XML-namespace-URL);</span><br><span class=\"line\"><span class=\"keyword\">@namespace</span> <span class=\"string\">&quot;XML-namespace-URL&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 命名空间前缀 */</span></span><br><span class=\"line\"><span class=\"keyword\">@namespace</span> prefix url(XML-namespace-URL);</span><br><span class=\"line\"><span class=\"keyword\">@namespace</span> prefix <span class=\"string\">&quot;XML-namespace-URL&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*使用*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*匹配prefix命名空间的selector元素*/</span></span><br><span class=\"line\">prefix|selector&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">/*匹配所有命名空间下的selector元素*/</span></span><br><span class=\"line\">*|selector&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">/*匹配默认命名空间下的selector元素*/</span></span><br><span class=\"line\">selector&#123;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@namespace</span> url(<span class=\"attribute\">http</span>://www.w3.org/<span class=\"number\">1999</span>/xhtml);</span><br><span class=\"line\"><span class=\"keyword\">@namespace</span> svg url(<span class=\"attribute\">http</span>://www.w3.org/<span class=\"number\">2000</span>/svg);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 匹配所有的XHTML &lt;a&gt; 元素, 因为 XHTML 是默认无前缀命名空间 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 匹配所有的 SVG &lt;a&gt; 元素 */</span></span><br><span class=\"line\">svg|<span class=\"selector-tag\">a</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 匹配 XHTML 和 SVG &lt;a&gt; 元素 */</span></span><br><span class=\"line\">*|<span class=\"selector-tag\">a</span> &#123;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"简单选择器及其语义\"><a href=\"#简单选择器及其语义\" class=\"headerlink\" title=\"简单选择器及其语义\"></a>简单选择器及其语义</h2><p>我们把以下常见的6中选择器称为简单原则器。</p>\n<h3 id=\"通配选择器\"><a href=\"#通配选择器\" class=\"headerlink\" title=\"通配选择器\"></a>通配选择器</h3><p><code>*</code>，选择任意标签元素。</p>\n<h3 id=\"标签（类型）选择器\"><a href=\"#标签（类型）选择器\" class=\"headerlink\" title=\"标签（类型）选择器\"></a>标签（类型）选择器</h3><p><code>type</code>，选择<code>type</code>类型的标签。</p>\n<h3 id=\"属性选择器\"><a href=\"#属性选择器\" class=\"headerlink\" title=\"属性选择器\"></a>属性选择器</h3><p>根据标签的属性来选择。</p>\n<h4 id=\"属性存在性和值选择器\"><a href=\"#属性存在性和值选择器\" class=\"headerlink\" title=\"属性存在性和值选择器\"></a>属性存在性和值选择器</h4><ul>\n<li><code>[att]</code>，选择含<code>att</code>属性的元素，不管属性值是什么。</li>\n<li><code>[att=val]</code>，选择含<code>att</code>属性并且属性值为<code>val</code>的元素。</li>\n<li><code>[att~=val]</code>，选择满足如下条件的元素：含<code>att</code>属性，并且<code>att</code>属性值是一个列表，列表中有一个值为<code>val</code>。（<code>val</code>只是一个值，如果其中含空格或者为空串就不会代表任何值）</li>\n<li><code>[att|=val]</code>，选择包含<code>att</code>属性并且属性值是<code>val</code>或者以<code>val</code>开头并且后跟<code>-</code>的元素。</li>\n</ul>\n<h4 id=\"值串匹配属性选择器\"><a href=\"#值串匹配属性选择器\" class=\"headerlink\" title=\"值串匹配属性选择器\"></a>值串匹配属性选择器</h4><ul>\n<li><code>[att^=val]</code>，选择含<code>att</code>属性并且值以<code>val</code>开头的元素，如果<code>val</code>为空串则不代表任何值。</li>\n<li><code>[att$=val]</code>，选择含<code>att</code>属性并且值以<code>val</code>结束的元素，如果<code>val</code>为空串则不代表任何值。</li>\n<li><code>[att*=val]</code>，选择含<code>att</code>属性并且值包含<code>val</code>子串的元素，如果<code>val</code>为空串则不代表任何值。</li>\n</ul>\n<h3 id=\"类选择器\"><a href=\"#类选择器\" class=\"headerlink\" title=\"类选择器\"></a>类选择器</h3><p><code>.selector</code>，选择含有<code>class</code>属性并且值中包含<code>selector</code>值的元素。<strong>类似于<code>[class~=selector]</code>属性选择器</strong>。</p>\n<h3 id=\"ID选择器\"><a href=\"#ID选择器\" class=\"headerlink\" title=\"ID选择器\"></a>ID选择器</h3><p><code>#selector</code>，选择包含<code>id</code>属性并且值为<code>selector</code>的元素。</p>\n<h3 id=\"伪类选择器\"><a href=\"#伪类选择器\" class=\"headerlink\" title=\"伪类选择器\"></a>伪类选择器</h3><p><code>:selector</code>，伪类是为了解决使用其他简单选择器无法实现的选择问题。选择通常是基于和DOM树无关的信息。通常以<code>:</code>开头。</p>\n<h4 id=\"动态伪类选择器\"><a href=\"#动态伪类选择器\" class=\"headerlink\" title=\"动态伪类选择器\"></a>动态伪类选择器</h4><p>不会出现在源码和DOM树中。</p>\n<h5 id=\"链接伪类选择器\"><a href=\"#链接伪类选择器\" class=\"headerlink\" title=\"链接伪类选择器\"></a>链接伪类选择器</h5><ul>\n<li><code>:link</code>，选择未被访问过的链接元素。</li>\n<li><code>:visited</code>，选择已被访问过的链接元素。</li>\n</ul>\n<h5 id=\"用户动作伪类选择器\"><a href=\"#用户动作伪类选择器\" class=\"headerlink\" title=\"用户动作伪类选择器\"></a>用户动作伪类选择器</h5><p>有可能同时触发。</p>\n<ul>\n<li><code>:hover</code>，选择被用户选定的（不一定激活元素动作）的元素。</li>\n<li><code>:active</code>，选择被用户激活动作的元素。</li>\n<li><code>:focus</code>，选择被用户聚焦的元素。</li>\n</ul>\n<h4 id=\"目标伪类选择器\"><a href=\"#目标伪类选择器\" class=\"headerlink\" title=\"目标伪类选择器\"></a>目标伪类选择器</h4><ul>\n<li><code>:target</code>，和网页内部索引有关，某个URI对应一个<code>id</code>，比如当前链接是<code>http://example.com/html/top.html#section_2</code>，被这个链接能够索引到<code>id</code>为<code>section_2</code>的元素，<code>:target</code>就是选择当前URI索引的<code>target</code>元素，如果页内没有<code>target</code>（<code>id</code>）就不会被触发。</li>\n</ul>\n<h4 id=\"语言伪类选择器\"><a href=\"#语言伪类选择器\" class=\"headerlink\" title=\"语言伪类选择器\"></a>语言伪类选择器</h4><ul>\n<li><code>:lang(language)</code>，</li>\n</ul>\n<h4 id=\"UI元素状态伪类选择器\"><a href=\"#UI元素状态伪类选择器\" class=\"headerlink\" title=\"UI元素状态伪类选择器\"></a>UI元素状态伪类选择器</h4><ul>\n<li><code>:enabled</code></li>\n<li><code>:disabled</code></li>\n<li><code>:checked</code></li>\n<li><code>:interminate</code></li>\n</ul>\n<h4 id=\"结构伪类选择器\"><a href=\"#结构伪类选择器\" class=\"headerlink\" title=\"结构伪类选择器\"></a>结构伪类选择器</h4><h2 id=\"伪元素选择器\"><a href=\"#伪元素选择器\" class=\"headerlink\" title=\"伪元素选择器\"></a>伪元素选择器</h2><h2 id=\"组合选择器\"><a href=\"#组合选择器\" class=\"headerlink\" title=\"组合选择器\"></a>组合选择器</h2><h2 id=\"优先级\"><a href=\"#优先级\" class=\"headerlink\" title=\"优先级\"></a>优先级</h2><h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://www.w3.org/TR/selectors-3/\">Selectors Level 3</a></li>\n<li><a href=\"https://www.w3.org/TR/2014/REC-css-namespaces-3-20140320/\">CSS Namespaces Module Level 3</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note primary\"><p>type,universal,attribute,class,id,pseudo-class,pseudo-element,combinator</p>\n</div>","more":"<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>css的选择器一直常用的就几个，也就记住了这几个，初学时系统的学过一遍不过现在也忘得差不多了，今天就来总结一下CSS中到底有哪些选择器。</p>\n<h2 id=\"总览\"><a href=\"#总览\" class=\"headerlink\" title=\"总览\"></a>总览</h2><p>所有的选择器如下，我们接下来会一一介绍其用法和语义，还有他们的优先级。</p>\n<ul>\n<li>简单选择器<ul>\n<li>通配选择器</li>\n<li>标签（类型）选择器</li>\n<li>属性选择器</li>\n<li>类选择器</li>\n<li>ID选择器</li>\n<li>伪类选择器</li>\n</ul>\n</li>\n<li>伪元素选择器</li>\n<li>组合选择器</li>\n</ul>\n<h2 id=\"命名空间\"><a href=\"#命名空间\" class=\"headerlink\" title=\"命名空间\"></a>命名空间</h2><p>再具体介绍各类选择器之前，我们必须先来谈个概念——命名空间。<strong>这部分内容没怎么用过，不会详细展开，只会简单总结一下用法。以后用到会继续补充，如果有错请右下角小窗或者文章右上角修改pr</strong></p>\n<p>命名空间可以作用于通配选择器、标签（类型）选择器和属性选择器，目的就是只选择某个或某些命名空间内的元素。<br>命名空间通常用于处理文档中包含多个命名空间，比如说HTML5文档内联一些SVG、MathML、XML等。</p>\n<h3 id=\"规则\"><a href=\"#规则\" class=\"headerlink\" title=\"规则\"></a>规则</h3><ul>\n<li>任何 <code>@namespace</code> 规则都必须在所有的 <code>@charset</code> 和 <code>@import</code> 规则之后, 并且在样式表中，位于其他任何 <code>style declarations</code> 之前。</li>\n</ul>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 默认命名空间 */</span></span><br><span class=\"line\"><span class=\"keyword\">@namespace</span> url(XML-namespace-URL);</span><br><span class=\"line\"><span class=\"keyword\">@namespace</span> <span class=\"string\">&quot;XML-namespace-URL&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 命名空间前缀 */</span></span><br><span class=\"line\"><span class=\"keyword\">@namespace</span> prefix url(XML-namespace-URL);</span><br><span class=\"line\"><span class=\"keyword\">@namespace</span> prefix <span class=\"string\">&quot;XML-namespace-URL&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*使用*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*匹配prefix命名空间的selector元素*/</span></span><br><span class=\"line\">prefix|selector&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">/*匹配所有命名空间下的selector元素*/</span></span><br><span class=\"line\">*|selector&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">/*匹配默认命名空间下的selector元素*/</span></span><br><span class=\"line\">selector&#123;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@namespace</span> url(<span class=\"attribute\">http</span>://www.w3.org/<span class=\"number\">1999</span>/xhtml);</span><br><span class=\"line\"><span class=\"keyword\">@namespace</span> svg url(<span class=\"attribute\">http</span>://www.w3.org/<span class=\"number\">2000</span>/svg);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 匹配所有的XHTML &lt;a&gt; 元素, 因为 XHTML 是默认无前缀命名空间 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 匹配所有的 SVG &lt;a&gt; 元素 */</span></span><br><span class=\"line\">svg|<span class=\"selector-tag\">a</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 匹配 XHTML 和 SVG &lt;a&gt; 元素 */</span></span><br><span class=\"line\">*|<span class=\"selector-tag\">a</span> &#123;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"简单选择器及其语义\"><a href=\"#简单选择器及其语义\" class=\"headerlink\" title=\"简单选择器及其语义\"></a>简单选择器及其语义</h2><p>我们把以下常见的6中选择器称为简单原则器。</p>\n<h3 id=\"通配选择器\"><a href=\"#通配选择器\" class=\"headerlink\" title=\"通配选择器\"></a>通配选择器</h3><p><code>*</code>，选择任意标签元素。</p>\n<h3 id=\"标签（类型）选择器\"><a href=\"#标签（类型）选择器\" class=\"headerlink\" title=\"标签（类型）选择器\"></a>标签（类型）选择器</h3><p><code>type</code>，选择<code>type</code>类型的标签。</p>\n<h3 id=\"属性选择器\"><a href=\"#属性选择器\" class=\"headerlink\" title=\"属性选择器\"></a>属性选择器</h3><p>根据标签的属性来选择。</p>\n<h4 id=\"属性存在性和值选择器\"><a href=\"#属性存在性和值选择器\" class=\"headerlink\" title=\"属性存在性和值选择器\"></a>属性存在性和值选择器</h4><ul>\n<li><code>[att]</code>，选择含<code>att</code>属性的元素，不管属性值是什么。</li>\n<li><code>[att=val]</code>，选择含<code>att</code>属性并且属性值为<code>val</code>的元素。</li>\n<li><code>[att~=val]</code>，选择满足如下条件的元素：含<code>att</code>属性，并且<code>att</code>属性值是一个列表，列表中有一个值为<code>val</code>。（<code>val</code>只是一个值，如果其中含空格或者为空串就不会代表任何值）</li>\n<li><code>[att|=val]</code>，选择包含<code>att</code>属性并且属性值是<code>val</code>或者以<code>val</code>开头并且后跟<code>-</code>的元素。</li>\n</ul>\n<h4 id=\"值串匹配属性选择器\"><a href=\"#值串匹配属性选择器\" class=\"headerlink\" title=\"值串匹配属性选择器\"></a>值串匹配属性选择器</h4><ul>\n<li><code>[att^=val]</code>，选择含<code>att</code>属性并且值以<code>val</code>开头的元素，如果<code>val</code>为空串则不代表任何值。</li>\n<li><code>[att$=val]</code>，选择含<code>att</code>属性并且值以<code>val</code>结束的元素，如果<code>val</code>为空串则不代表任何值。</li>\n<li><code>[att*=val]</code>，选择含<code>att</code>属性并且值包含<code>val</code>子串的元素，如果<code>val</code>为空串则不代表任何值。</li>\n</ul>\n<h3 id=\"类选择器\"><a href=\"#类选择器\" class=\"headerlink\" title=\"类选择器\"></a>类选择器</h3><p><code>.selector</code>，选择含有<code>class</code>属性并且值中包含<code>selector</code>值的元素。<strong>类似于<code>[class~=selector]</code>属性选择器</strong>。</p>\n<h3 id=\"ID选择器\"><a href=\"#ID选择器\" class=\"headerlink\" title=\"ID选择器\"></a>ID选择器</h3><p><code>#selector</code>，选择包含<code>id</code>属性并且值为<code>selector</code>的元素。</p>\n<h3 id=\"伪类选择器\"><a href=\"#伪类选择器\" class=\"headerlink\" title=\"伪类选择器\"></a>伪类选择器</h3><p><code>:selector</code>，伪类是为了解决使用其他简单选择器无法实现的选择问题。选择通常是基于和DOM树无关的信息。通常以<code>:</code>开头。</p>\n<h4 id=\"动态伪类选择器\"><a href=\"#动态伪类选择器\" class=\"headerlink\" title=\"动态伪类选择器\"></a>动态伪类选择器</h4><p>不会出现在源码和DOM树中。</p>\n<h5 id=\"链接伪类选择器\"><a href=\"#链接伪类选择器\" class=\"headerlink\" title=\"链接伪类选择器\"></a>链接伪类选择器</h5><ul>\n<li><code>:link</code>，选择未被访问过的链接元素。</li>\n<li><code>:visited</code>，选择已被访问过的链接元素。</li>\n</ul>\n<h5 id=\"用户动作伪类选择器\"><a href=\"#用户动作伪类选择器\" class=\"headerlink\" title=\"用户动作伪类选择器\"></a>用户动作伪类选择器</h5><p>有可能同时触发。</p>\n<ul>\n<li><code>:hover</code>，选择被用户选定的（不一定激活元素动作）的元素。</li>\n<li><code>:active</code>，选择被用户激活动作的元素。</li>\n<li><code>:focus</code>，选择被用户聚焦的元素。</li>\n</ul>\n<h4 id=\"目标伪类选择器\"><a href=\"#目标伪类选择器\" class=\"headerlink\" title=\"目标伪类选择器\"></a>目标伪类选择器</h4><ul>\n<li><code>:target</code>，和网页内部索引有关，某个URI对应一个<code>id</code>，比如当前链接是<code>http://example.com/html/top.html#section_2</code>，被这个链接能够索引到<code>id</code>为<code>section_2</code>的元素，<code>:target</code>就是选择当前URI索引的<code>target</code>元素，如果页内没有<code>target</code>（<code>id</code>）就不会被触发。</li>\n</ul>\n<h4 id=\"语言伪类选择器\"><a href=\"#语言伪类选择器\" class=\"headerlink\" title=\"语言伪类选择器\"></a>语言伪类选择器</h4><ul>\n<li><code>:lang(language)</code>，</li>\n</ul>\n<h4 id=\"UI元素状态伪类选择器\"><a href=\"#UI元素状态伪类选择器\" class=\"headerlink\" title=\"UI元素状态伪类选择器\"></a>UI元素状态伪类选择器</h4><ul>\n<li><code>:enabled</code></li>\n<li><code>:disabled</code></li>\n<li><code>:checked</code></li>\n<li><code>:interminate</code></li>\n</ul>\n<h4 id=\"结构伪类选择器\"><a href=\"#结构伪类选择器\" class=\"headerlink\" title=\"结构伪类选择器\"></a>结构伪类选择器</h4><h2 id=\"伪元素选择器\"><a href=\"#伪元素选择器\" class=\"headerlink\" title=\"伪元素选择器\"></a>伪元素选择器</h2><h2 id=\"组合选择器\"><a href=\"#组合选择器\" class=\"headerlink\" title=\"组合选择器\"></a>组合选择器</h2><h2 id=\"优先级\"><a href=\"#优先级\" class=\"headerlink\" title=\"优先级\"></a>优先级</h2><h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://www.w3.org/TR/selectors-3/\">Selectors Level 3</a></li>\n<li><a href=\"https://www.w3.org/TR/2014/REC-css-namespaces-3-20140320/\">CSS Namespaces Module Level 3</a></li>\n</ul>"},{"title":"CSS系列：回流和重绘","mathjax":false,"copyright":true,"comment":true,"date":"2019-12-03T10:53:38.000Z","_content":"\n{% note primary %}\nReflow and Repaint\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 前言\n\n头条面试题，这方面没有深入了解，今天总结一下。\n\n## 浏览器渲染机制\n\n![](http://www.phpied.com/files/reflow/render.png)\n\n- 浏览器将下载好的HTML源码解析成DOM树，根节点是`<html>`（`documentElement`）\n- 浏览器解析CSS，忽略掉无法识别的CSS代码，CSS代码包括浏览器默认样式、开发者的CSS文件还有嵌入HTML的style属性里的样式。\n- 构造渲染树（`render tree`）。渲染树不同于DOM树，它能够获取到节点样式，仅包含需要渲染的节点，任何不可见的元素（`display:none`，`<head>`）都不会出现在渲染树中。另外如果一个`<p>`标签内有多行元素，在渲染树中每行都会看做是一个节点。\n- 渲染树构造完成后浏览器就可以在屏幕上绘制界面了。\n\n\n## 渲染机制例子\n\n- HTML源码\n  ```html\n  <html>\n    <head>\n    <title>Beautiful page</title>\n    </head>\n    <body>\n        \n    <p>\n        Once upon a time there was \n        a looong paragraph...\n    </p>\n    \n    <div style=\"display: none\">\n        Secret message\n    </div>\n    \n    <div><img src=\"...\" /></div>\n    ...\n    \n    </body>\n  </html>\n  ```\n- DOM树\n  ```text\n  documentElement (html)\n    head\n        title\n    body\n        p\n            [text node]\n\t\t\n        div \n            [text node]\n\t\t\n        div\n            img\n\t\t\n        ...\n  ```\n- 渲染树\n  ```text\n  root (RenderView)\n    body\n        p\n            line 1\n            line 2\n            line 3\n            ...\n            \n        div\n            img\n\t    \n\t...\n  ```\n\n## 回流和重绘（`reflow&repaint`）\n\n首先可以确定的是网页肯定至少有一次布局和绘制，除非是一个空白页面。\n\n### 什么是回流和重绘\n\n- 部分或全部渲染树需要重新验证，节点大小需要重新计算，这称之为**回流**（reflow,relayout）。至少有一次回流发生，即页面的初始布局。\n- 页面部分因为样式的改变而需要更新修改结果，比如说背景颜色、字体颜色、可见性（`visibility:hidden`），页面可见的更新称之为**重绘**。\n\n### 什么会触发回流和重绘\n\n- 增加、删除、修改节点\n- 隐藏DOM节点：使用`display:none`（回流并重绘）；使用`visibility:hidden`（仅重绘，因为没有布局大小上的改变）\n- 移动等动画作用于DOM节点\n- 添加样式表，并修改样式\n- 用户操作比如放缩窗口大小、修改字体大小、滑动滚动条。\n\n例子：\n\n```javascript\nvar bstyle = document.body.style; // cache\n \nbstyle.padding = \"20px\"; // reflow, repaint\nbstyle.border = \"10px solid red\"; // another reflow and a repaint\n \nbstyle.color = \"blue\"; // repaint only, no dimensions changed\nbstyle.backgroundColor = \"#fad\"; // repaint\n \nbstyle.fontSize = \"2em\"; // reflow, repaint\n \n// new DOM element - reflow, repaint\ndocument.body.appendChild(document.createTextNode('dude!'));\n```\n\n### 如何减少回流和重绘\n\n因为除了一些必要的回流和重绘，其他的回流和重绘是不必要甚至是非常浪费资源的，因此我们要尽量避免这种回流和重绘，那么如何避免呢？\n\n#### 浏览器的自动优化\n\n浏览器为回流和重绘设置一个队列，队列里面保存需要修改的内容，浏览器可以批量处理。时间达到限制或者改变数目达到限制，多次引起回流的改变可以绑定成一个，这样只有一次回流。\n\n但有一些改变或请求可以**强制浏览器清空队列并执行重绘**，如下：\n\n- `offsetTop`,`offsetLeft`,`offsetWidth`,`offsetHeight`（只读，当前元素和最近relative祖先元素的left距离，当前元素的可见高度）\n- `scrollTop`,`scrollLeft`,`scrollWidth`,`scrollHeight`\n- `clientTop`,`clientLeft`,`clienWidth`,`clientHeight`\n- `getComputedStyle()`,或者`currentStyle` in IE\n\n因为浏览器必须返回给你这些变量的**最新的值**，因此浏览器必须清空修改队列，并执行相应的更新操作。\n\n\n#### 常用避免策略\n\n- 不要独立地单独修改样式，修改`class`或者修改`cssText`属性\n  ```javascript\n    // bad\n    var left = 10,\n        top = 10;\n    el.style.left = left + \"px\";\n    el.style.top  = top  + \"px\";\n    \n    // better \n    el.className += \" theclassname\";\n    \n    // or when top and left are calculated dynamically...\n    \n    // better\n    el.style.cssText += \"; left: \" + left + \"px; top: \" + top + \"px;\";\n  ```\n- 不要在动态的DOM树上批量修改\n  - 用一个临时进行修改，最终将修改的变量加入到DOM树中。\n  - 克隆准备修改的节点，在克隆节点上修改，然后替换原来的节点\n  - 隐藏原来的节点（`display:none`，1次回流，1次重绘），在这个节点上进行批量修改，重新显示这个节点（1次回流，1次重绘）。\n- 不要频繁计算样式，不要让浏览器的队列频繁刷新执行修改，比如不要在循环中使用上面提到的那些变量。**应该使用一个缓存变量暂时存储。**\n  ```javascript\n    // no-no!\n    for(big; loop; here) {\n        el.style.left = el.offsetLeft + 10 + \"px\";\n        el.style.top  = el.offsetTop  + 10 + \"px\";\n    }\n    \n    // better\n    var left = el.offsetLeft,\n        top  = el.offsetTop\n        esty = el.style;\n    for(big; loop; here) {\n        left += 10;\n        top  += 10;\n        esty.left = left + \"px\";\n        esty.top  = top  + \"px\";\n    }\n  ```\n- 通常来说，可以考虑当前的修改会让渲染树进行多少计算，然后针对性的进行优化。\n  > 比如说将一个准备进行动画的节点设为`postion:absolute`使之成为`<body>`的子节点，这就不会影响大量的其他节点\n\n## 总结\n\n- 渲染树是DOM树的可见部分\n- 渲染树的重新计算叫做回流\n- 重新计算后将修改绘制在屏幕上叫做重绘\n- 回流一定重绘\n- 重绘不一定回流\n- 需要批量修改样式时使用临时变量，或使目标节点暂时脱离渲染树，或使目标节点减少在渲染树上和其他节点的关系，这样可以一定程度减少回流和重绘\n\n## Reference\n\n- [Rendering: repaint, reflow/relayout, restyle](https://www.phpied.com/rendering-repaint-reflowrelayout-restyle/)\n","source":"_posts/css-reflow-repaint.md","raw":"---\ntitle: CSS系列：回流和重绘\nmathjax: false\ncopyright: true\ncomment: true\ndate: 2019-12-03 18:53:38\ntags:\n- CSS\ncategories:\n- Front-End Development\n- CSS\n\n---\n\n{% note primary %}\nReflow and Repaint\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 前言\n\n头条面试题，这方面没有深入了解，今天总结一下。\n\n## 浏览器渲染机制\n\n![](http://www.phpied.com/files/reflow/render.png)\n\n- 浏览器将下载好的HTML源码解析成DOM树，根节点是`<html>`（`documentElement`）\n- 浏览器解析CSS，忽略掉无法识别的CSS代码，CSS代码包括浏览器默认样式、开发者的CSS文件还有嵌入HTML的style属性里的样式。\n- 构造渲染树（`render tree`）。渲染树不同于DOM树，它能够获取到节点样式，仅包含需要渲染的节点，任何不可见的元素（`display:none`，`<head>`）都不会出现在渲染树中。另外如果一个`<p>`标签内有多行元素，在渲染树中每行都会看做是一个节点。\n- 渲染树构造完成后浏览器就可以在屏幕上绘制界面了。\n\n\n## 渲染机制例子\n\n- HTML源码\n  ```html\n  <html>\n    <head>\n    <title>Beautiful page</title>\n    </head>\n    <body>\n        \n    <p>\n        Once upon a time there was \n        a looong paragraph...\n    </p>\n    \n    <div style=\"display: none\">\n        Secret message\n    </div>\n    \n    <div><img src=\"...\" /></div>\n    ...\n    \n    </body>\n  </html>\n  ```\n- DOM树\n  ```text\n  documentElement (html)\n    head\n        title\n    body\n        p\n            [text node]\n\t\t\n        div \n            [text node]\n\t\t\n        div\n            img\n\t\t\n        ...\n  ```\n- 渲染树\n  ```text\n  root (RenderView)\n    body\n        p\n            line 1\n            line 2\n            line 3\n            ...\n            \n        div\n            img\n\t    \n\t...\n  ```\n\n## 回流和重绘（`reflow&repaint`）\n\n首先可以确定的是网页肯定至少有一次布局和绘制，除非是一个空白页面。\n\n### 什么是回流和重绘\n\n- 部分或全部渲染树需要重新验证，节点大小需要重新计算，这称之为**回流**（reflow,relayout）。至少有一次回流发生，即页面的初始布局。\n- 页面部分因为样式的改变而需要更新修改结果，比如说背景颜色、字体颜色、可见性（`visibility:hidden`），页面可见的更新称之为**重绘**。\n\n### 什么会触发回流和重绘\n\n- 增加、删除、修改节点\n- 隐藏DOM节点：使用`display:none`（回流并重绘）；使用`visibility:hidden`（仅重绘，因为没有布局大小上的改变）\n- 移动等动画作用于DOM节点\n- 添加样式表，并修改样式\n- 用户操作比如放缩窗口大小、修改字体大小、滑动滚动条。\n\n例子：\n\n```javascript\nvar bstyle = document.body.style; // cache\n \nbstyle.padding = \"20px\"; // reflow, repaint\nbstyle.border = \"10px solid red\"; // another reflow and a repaint\n \nbstyle.color = \"blue\"; // repaint only, no dimensions changed\nbstyle.backgroundColor = \"#fad\"; // repaint\n \nbstyle.fontSize = \"2em\"; // reflow, repaint\n \n// new DOM element - reflow, repaint\ndocument.body.appendChild(document.createTextNode('dude!'));\n```\n\n### 如何减少回流和重绘\n\n因为除了一些必要的回流和重绘，其他的回流和重绘是不必要甚至是非常浪费资源的，因此我们要尽量避免这种回流和重绘，那么如何避免呢？\n\n#### 浏览器的自动优化\n\n浏览器为回流和重绘设置一个队列，队列里面保存需要修改的内容，浏览器可以批量处理。时间达到限制或者改变数目达到限制，多次引起回流的改变可以绑定成一个，这样只有一次回流。\n\n但有一些改变或请求可以**强制浏览器清空队列并执行重绘**，如下：\n\n- `offsetTop`,`offsetLeft`,`offsetWidth`,`offsetHeight`（只读，当前元素和最近relative祖先元素的left距离，当前元素的可见高度）\n- `scrollTop`,`scrollLeft`,`scrollWidth`,`scrollHeight`\n- `clientTop`,`clientLeft`,`clienWidth`,`clientHeight`\n- `getComputedStyle()`,或者`currentStyle` in IE\n\n因为浏览器必须返回给你这些变量的**最新的值**，因此浏览器必须清空修改队列，并执行相应的更新操作。\n\n\n#### 常用避免策略\n\n- 不要独立地单独修改样式，修改`class`或者修改`cssText`属性\n  ```javascript\n    // bad\n    var left = 10,\n        top = 10;\n    el.style.left = left + \"px\";\n    el.style.top  = top  + \"px\";\n    \n    // better \n    el.className += \" theclassname\";\n    \n    // or when top and left are calculated dynamically...\n    \n    // better\n    el.style.cssText += \"; left: \" + left + \"px; top: \" + top + \"px;\";\n  ```\n- 不要在动态的DOM树上批量修改\n  - 用一个临时进行修改，最终将修改的变量加入到DOM树中。\n  - 克隆准备修改的节点，在克隆节点上修改，然后替换原来的节点\n  - 隐藏原来的节点（`display:none`，1次回流，1次重绘），在这个节点上进行批量修改，重新显示这个节点（1次回流，1次重绘）。\n- 不要频繁计算样式，不要让浏览器的队列频繁刷新执行修改，比如不要在循环中使用上面提到的那些变量。**应该使用一个缓存变量暂时存储。**\n  ```javascript\n    // no-no!\n    for(big; loop; here) {\n        el.style.left = el.offsetLeft + 10 + \"px\";\n        el.style.top  = el.offsetTop  + 10 + \"px\";\n    }\n    \n    // better\n    var left = el.offsetLeft,\n        top  = el.offsetTop\n        esty = el.style;\n    for(big; loop; here) {\n        left += 10;\n        top  += 10;\n        esty.left = left + \"px\";\n        esty.top  = top  + \"px\";\n    }\n  ```\n- 通常来说，可以考虑当前的修改会让渲染树进行多少计算，然后针对性的进行优化。\n  > 比如说将一个准备进行动画的节点设为`postion:absolute`使之成为`<body>`的子节点，这就不会影响大量的其他节点\n\n## 总结\n\n- 渲染树是DOM树的可见部分\n- 渲染树的重新计算叫做回流\n- 重新计算后将修改绘制在屏幕上叫做重绘\n- 回流一定重绘\n- 重绘不一定回流\n- 需要批量修改样式时使用临时变量，或使目标节点暂时脱离渲染树，或使目标节点减少在渲染树上和其他节点的关系，这样可以一定程度减少回流和重绘\n\n## Reference\n\n- [Rendering: repaint, reflow/relayout, restyle](https://www.phpied.com/rendering-repaint-reflowrelayout-restyle/)\n","slug":"css-reflow-repaint","published":1,"updated":"2022-01-06T04:09:12.281Z","_id":"cksq5v7mb0012n0pu7adrfx4z","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note primary\"><p>Reflow and Repaint</p>\n</div>\n\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>头条面试题，这方面没有深入了解，今天总结一下。</p>\n<h2 id=\"浏览器渲染机制\"><a href=\"#浏览器渲染机制\" class=\"headerlink\" title=\"浏览器渲染机制\"></a>浏览器渲染机制</h2><p><img data-src=\"http://www.phpied.com/files/reflow/render.png\"></p>\n<ul>\n<li>浏览器将下载好的HTML源码解析成DOM树，根节点是<code>&lt;html&gt;</code>（<code>documentElement</code>）</li>\n<li>浏览器解析CSS，忽略掉无法识别的CSS代码，CSS代码包括浏览器默认样式、开发者的CSS文件还有嵌入HTML的style属性里的样式。</li>\n<li>构造渲染树（<code>render tree</code>）。渲染树不同于DOM树，它能够获取到节点样式，仅包含需要渲染的节点，任何不可见的元素（<code>display:none</code>，<code>&lt;head&gt;</code>）都不会出现在渲染树中。另外如果一个<code>&lt;p&gt;</code>标签内有多行元素，在渲染树中每行都会看做是一个节点。</li>\n<li>渲染树构造完成后浏览器就可以在屏幕上绘制界面了。</li>\n</ul>\n<h2 id=\"渲染机制例子\"><a href=\"#渲染机制例子\" class=\"headerlink\" title=\"渲染机制例子\"></a>渲染机制例子</h2><ul>\n<li>HTML源码<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Beautiful page<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">      </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">      Once upon a time there was </span><br><span class=\"line\">      a looong paragraph...</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;display: none&quot;</span>&gt;</span></span><br><span class=\"line\">      Secret message</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;...&quot;</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>DOM树<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">documentElement (html)</span><br><span class=\"line\">  head</span><br><span class=\"line\">      title</span><br><span class=\"line\">  body</span><br><span class=\"line\">      p</span><br><span class=\"line\">          [text node]</span><br><span class=\"line\"></span><br><span class=\"line\">      div </span><br><span class=\"line\">          [text node]</span><br><span class=\"line\"></span><br><span class=\"line\">      div</span><br><span class=\"line\">          img</span><br><span class=\"line\"></span><br><span class=\"line\">      ...</span><br></pre></td></tr></table></figure></li>\n<li>渲染树<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> root (RenderView)</span><br><span class=\"line\">   body</span><br><span class=\"line\">       p</span><br><span class=\"line\">           line 1</span><br><span class=\"line\">           line 2</span><br><span class=\"line\">           line 3</span><br><span class=\"line\">           ...</span><br><span class=\"line\">           </span><br><span class=\"line\">       div</span><br><span class=\"line\">           img</span><br><span class=\"line\">    </span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"回流和重绘（reflow-amp-repaint）\"><a href=\"#回流和重绘（reflow-amp-repaint）\" class=\"headerlink\" title=\"回流和重绘（reflow&amp;repaint）\"></a>回流和重绘（<code>reflow&amp;repaint</code>）</h2><p>首先可以确定的是网页肯定至少有一次布局和绘制，除非是一个空白页面。</p>\n<h3 id=\"什么是回流和重绘\"><a href=\"#什么是回流和重绘\" class=\"headerlink\" title=\"什么是回流和重绘\"></a>什么是回流和重绘</h3><ul>\n<li>部分或全部渲染树需要重新验证，节点大小需要重新计算，这称之为<strong>回流</strong>（reflow,relayout）。至少有一次回流发生，即页面的初始布局。</li>\n<li>页面部分因为样式的改变而需要更新修改结果，比如说背景颜色、字体颜色、可见性（<code>visibility:hidden</code>），页面可见的更新称之为<strong>重绘</strong>。</li>\n</ul>\n<h3 id=\"什么会触发回流和重绘\"><a href=\"#什么会触发回流和重绘\" class=\"headerlink\" title=\"什么会触发回流和重绘\"></a>什么会触发回流和重绘</h3><ul>\n<li>增加、删除、修改节点</li>\n<li>隐藏DOM节点：使用<code>display:none</code>（回流并重绘）；使用<code>visibility:hidden</code>（仅重绘，因为没有布局大小上的改变）</li>\n<li>移动等动画作用于DOM节点</li>\n<li>添加样式表，并修改样式</li>\n<li>用户操作比如放缩窗口大小、修改字体大小、滑动滚动条。</li>\n</ul>\n<p>例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bstyle = <span class=\"built_in\">document</span>.body.style; <span class=\"comment\">// cache</span></span><br><span class=\"line\"> </span><br><span class=\"line\">bstyle.padding = <span class=\"string\">&quot;20px&quot;</span>; <span class=\"comment\">// reflow, repaint</span></span><br><span class=\"line\">bstyle.border = <span class=\"string\">&quot;10px solid red&quot;</span>; <span class=\"comment\">// another reflow and a repaint</span></span><br><span class=\"line\"> </span><br><span class=\"line\">bstyle.color = <span class=\"string\">&quot;blue&quot;</span>; <span class=\"comment\">// repaint only, no dimensions changed</span></span><br><span class=\"line\">bstyle.backgroundColor = <span class=\"string\">&quot;#fad&quot;</span>; <span class=\"comment\">// repaint</span></span><br><span class=\"line\"> </span><br><span class=\"line\">bstyle.fontSize = <span class=\"string\">&quot;2em&quot;</span>; <span class=\"comment\">// reflow, repaint</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// new DOM element - reflow, repaint</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(<span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">&#x27;dude!&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"如何减少回流和重绘\"><a href=\"#如何减少回流和重绘\" class=\"headerlink\" title=\"如何减少回流和重绘\"></a>如何减少回流和重绘</h3><p>因为除了一些必要的回流和重绘，其他的回流和重绘是不必要甚至是非常浪费资源的，因此我们要尽量避免这种回流和重绘，那么如何避免呢？</p>\n<h4 id=\"浏览器的自动优化\"><a href=\"#浏览器的自动优化\" class=\"headerlink\" title=\"浏览器的自动优化\"></a>浏览器的自动优化</h4><p>浏览器为回流和重绘设置一个队列，队列里面保存需要修改的内容，浏览器可以批量处理。时间达到限制或者改变数目达到限制，多次引起回流的改变可以绑定成一个，这样只有一次回流。</p>\n<p>但有一些改变或请求可以<strong>强制浏览器清空队列并执行重绘</strong>，如下：</p>\n<ul>\n<li><code>offsetTop</code>,<code>offsetLeft</code>,<code>offsetWidth</code>,<code>offsetHeight</code>（只读，当前元素和最近relative祖先元素的left距离，当前元素的可见高度）</li>\n<li><code>scrollTop</code>,<code>scrollLeft</code>,<code>scrollWidth</code>,<code>scrollHeight</code></li>\n<li><code>clientTop</code>,<code>clientLeft</code>,<code>clienWidth</code>,<code>clientHeight</code></li>\n<li><code>getComputedStyle()</code>,或者<code>currentStyle</code> in IE</li>\n</ul>\n<p>因为浏览器必须返回给你这些变量的<strong>最新的值</strong>，因此浏览器必须清空修改队列，并执行相应的更新操作。</p>\n<h4 id=\"常用避免策略\"><a href=\"#常用避免策略\" class=\"headerlink\" title=\"常用避免策略\"></a>常用避免策略</h4><ul>\n<li>不要独立地单独修改样式，修改<code>class</code>或者修改<code>cssText</code>属性<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> left = <span class=\"number\">10</span>,</span><br><span class=\"line\">    top = <span class=\"number\">10</span>;</span><br><span class=\"line\">el.style.left = left + <span class=\"string\">&quot;px&quot;</span>;</span><br><span class=\"line\">el.style.top  = top  + <span class=\"string\">&quot;px&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// better </span></span><br><span class=\"line\">el.className += <span class=\"string\">&quot; theclassname&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or when top and left are calculated dynamically...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// better</span></span><br><span class=\"line\">el.style.cssText += <span class=\"string\">&quot;; left: &quot;</span> + left + <span class=\"string\">&quot;px; top: &quot;</span> + top + <span class=\"string\">&quot;px;&quot;</span>;</span><br></pre></td></tr></table></figure></li>\n<li>不要在动态的DOM树上批量修改<ul>\n<li>用一个临时进行修改，最终将修改的变量加入到DOM树中。</li>\n<li>克隆准备修改的节点，在克隆节点上修改，然后替换原来的节点</li>\n<li>隐藏原来的节点（<code>display:none</code>，1次回流，1次重绘），在这个节点上进行批量修改，重新显示这个节点（1次回流，1次重绘）。</li>\n</ul>\n</li>\n<li>不要频繁计算样式，不要让浏览器的队列频繁刷新执行修改，比如不要在循环中使用上面提到的那些变量。<strong>应该使用一个缓存变量暂时存储。</strong><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// no-no!</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(big; loop; here) &#123;</span><br><span class=\"line\">    el.style.left = el.offsetLeft + <span class=\"number\">10</span> + <span class=\"string\">&quot;px&quot;</span>;</span><br><span class=\"line\">    el.style.top  = el.offsetTop  + <span class=\"number\">10</span> + <span class=\"string\">&quot;px&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// better</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> left = el.offsetLeft,</span><br><span class=\"line\">    top  = el.offsetTop</span><br><span class=\"line\">    esty = el.style;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(big; loop; here) &#123;</span><br><span class=\"line\">    left += <span class=\"number\">10</span>;</span><br><span class=\"line\">    top  += <span class=\"number\">10</span>;</span><br><span class=\"line\">    esty.left = left + <span class=\"string\">&quot;px&quot;</span>;</span><br><span class=\"line\">    esty.top  = top  + <span class=\"string\">&quot;px&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>通常来说，可以考虑当前的修改会让渲染树进行多少计算，然后针对性的进行优化。<blockquote>\n<p>比如说将一个准备进行动画的节点设为<code>postion:absolute</code>使之成为<code>&lt;body&gt;</code>的子节点，这就不会影响大量的其他节点</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>渲染树是DOM树的可见部分</li>\n<li>渲染树的重新计算叫做回流</li>\n<li>重新计算后将修改绘制在屏幕上叫做重绘</li>\n<li>回流一定重绘</li>\n<li>重绘不一定回流</li>\n<li>需要批量修改样式时使用临时变量，或使目标节点暂时脱离渲染树，或使目标节点减少在渲染树上和其他节点的关系，这样可以一定程度减少回流和重绘</li>\n</ul>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://www.phpied.com/rendering-repaint-reflowrelayout-restyle/\">Rendering: repaint, reflow/relayout, restyle</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note primary\"><p>Reflow and Repaint</p>\n</div>","more":"<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>头条面试题，这方面没有深入了解，今天总结一下。</p>\n<h2 id=\"浏览器渲染机制\"><a href=\"#浏览器渲染机制\" class=\"headerlink\" title=\"浏览器渲染机制\"></a>浏览器渲染机制</h2><p><img data-src=\"http://www.phpied.com/files/reflow/render.png\"></p>\n<ul>\n<li>浏览器将下载好的HTML源码解析成DOM树，根节点是<code>&lt;html&gt;</code>（<code>documentElement</code>）</li>\n<li>浏览器解析CSS，忽略掉无法识别的CSS代码，CSS代码包括浏览器默认样式、开发者的CSS文件还有嵌入HTML的style属性里的样式。</li>\n<li>构造渲染树（<code>render tree</code>）。渲染树不同于DOM树，它能够获取到节点样式，仅包含需要渲染的节点，任何不可见的元素（<code>display:none</code>，<code>&lt;head&gt;</code>）都不会出现在渲染树中。另外如果一个<code>&lt;p&gt;</code>标签内有多行元素，在渲染树中每行都会看做是一个节点。</li>\n<li>渲染树构造完成后浏览器就可以在屏幕上绘制界面了。</li>\n</ul>\n<h2 id=\"渲染机制例子\"><a href=\"#渲染机制例子\" class=\"headerlink\" title=\"渲染机制例子\"></a>渲染机制例子</h2><ul>\n<li>HTML源码<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Beautiful page<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">      </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">      Once upon a time there was </span><br><span class=\"line\">      a looong paragraph...</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;display: none&quot;</span>&gt;</span></span><br><span class=\"line\">      Secret message</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;...&quot;</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>DOM树<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">documentElement (html)</span><br><span class=\"line\">  head</span><br><span class=\"line\">      title</span><br><span class=\"line\">  body</span><br><span class=\"line\">      p</span><br><span class=\"line\">          [text node]</span><br><span class=\"line\"></span><br><span class=\"line\">      div </span><br><span class=\"line\">          [text node]</span><br><span class=\"line\"></span><br><span class=\"line\">      div</span><br><span class=\"line\">          img</span><br><span class=\"line\"></span><br><span class=\"line\">      ...</span><br></pre></td></tr></table></figure></li>\n<li>渲染树<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> root (RenderView)</span><br><span class=\"line\">   body</span><br><span class=\"line\">       p</span><br><span class=\"line\">           line 1</span><br><span class=\"line\">           line 2</span><br><span class=\"line\">           line 3</span><br><span class=\"line\">           ...</span><br><span class=\"line\">           </span><br><span class=\"line\">       div</span><br><span class=\"line\">           img</span><br><span class=\"line\">    </span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"回流和重绘（reflow-amp-repaint）\"><a href=\"#回流和重绘（reflow-amp-repaint）\" class=\"headerlink\" title=\"回流和重绘（reflow&amp;repaint）\"></a>回流和重绘（<code>reflow&amp;repaint</code>）</h2><p>首先可以确定的是网页肯定至少有一次布局和绘制，除非是一个空白页面。</p>\n<h3 id=\"什么是回流和重绘\"><a href=\"#什么是回流和重绘\" class=\"headerlink\" title=\"什么是回流和重绘\"></a>什么是回流和重绘</h3><ul>\n<li>部分或全部渲染树需要重新验证，节点大小需要重新计算，这称之为<strong>回流</strong>（reflow,relayout）。至少有一次回流发生，即页面的初始布局。</li>\n<li>页面部分因为样式的改变而需要更新修改结果，比如说背景颜色、字体颜色、可见性（<code>visibility:hidden</code>），页面可见的更新称之为<strong>重绘</strong>。</li>\n</ul>\n<h3 id=\"什么会触发回流和重绘\"><a href=\"#什么会触发回流和重绘\" class=\"headerlink\" title=\"什么会触发回流和重绘\"></a>什么会触发回流和重绘</h3><ul>\n<li>增加、删除、修改节点</li>\n<li>隐藏DOM节点：使用<code>display:none</code>（回流并重绘）；使用<code>visibility:hidden</code>（仅重绘，因为没有布局大小上的改变）</li>\n<li>移动等动画作用于DOM节点</li>\n<li>添加样式表，并修改样式</li>\n<li>用户操作比如放缩窗口大小、修改字体大小、滑动滚动条。</li>\n</ul>\n<p>例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bstyle = <span class=\"built_in\">document</span>.body.style; <span class=\"comment\">// cache</span></span><br><span class=\"line\"> </span><br><span class=\"line\">bstyle.padding = <span class=\"string\">&quot;20px&quot;</span>; <span class=\"comment\">// reflow, repaint</span></span><br><span class=\"line\">bstyle.border = <span class=\"string\">&quot;10px solid red&quot;</span>; <span class=\"comment\">// another reflow and a repaint</span></span><br><span class=\"line\"> </span><br><span class=\"line\">bstyle.color = <span class=\"string\">&quot;blue&quot;</span>; <span class=\"comment\">// repaint only, no dimensions changed</span></span><br><span class=\"line\">bstyle.backgroundColor = <span class=\"string\">&quot;#fad&quot;</span>; <span class=\"comment\">// repaint</span></span><br><span class=\"line\"> </span><br><span class=\"line\">bstyle.fontSize = <span class=\"string\">&quot;2em&quot;</span>; <span class=\"comment\">// reflow, repaint</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// new DOM element - reflow, repaint</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(<span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">&#x27;dude!&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"如何减少回流和重绘\"><a href=\"#如何减少回流和重绘\" class=\"headerlink\" title=\"如何减少回流和重绘\"></a>如何减少回流和重绘</h3><p>因为除了一些必要的回流和重绘，其他的回流和重绘是不必要甚至是非常浪费资源的，因此我们要尽量避免这种回流和重绘，那么如何避免呢？</p>\n<h4 id=\"浏览器的自动优化\"><a href=\"#浏览器的自动优化\" class=\"headerlink\" title=\"浏览器的自动优化\"></a>浏览器的自动优化</h4><p>浏览器为回流和重绘设置一个队列，队列里面保存需要修改的内容，浏览器可以批量处理。时间达到限制或者改变数目达到限制，多次引起回流的改变可以绑定成一个，这样只有一次回流。</p>\n<p>但有一些改变或请求可以<strong>强制浏览器清空队列并执行重绘</strong>，如下：</p>\n<ul>\n<li><code>offsetTop</code>,<code>offsetLeft</code>,<code>offsetWidth</code>,<code>offsetHeight</code>（只读，当前元素和最近relative祖先元素的left距离，当前元素的可见高度）</li>\n<li><code>scrollTop</code>,<code>scrollLeft</code>,<code>scrollWidth</code>,<code>scrollHeight</code></li>\n<li><code>clientTop</code>,<code>clientLeft</code>,<code>clienWidth</code>,<code>clientHeight</code></li>\n<li><code>getComputedStyle()</code>,或者<code>currentStyle</code> in IE</li>\n</ul>\n<p>因为浏览器必须返回给你这些变量的<strong>最新的值</strong>，因此浏览器必须清空修改队列，并执行相应的更新操作。</p>\n<h4 id=\"常用避免策略\"><a href=\"#常用避免策略\" class=\"headerlink\" title=\"常用避免策略\"></a>常用避免策略</h4><ul>\n<li>不要独立地单独修改样式，修改<code>class</code>或者修改<code>cssText</code>属性<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> left = <span class=\"number\">10</span>,</span><br><span class=\"line\">    top = <span class=\"number\">10</span>;</span><br><span class=\"line\">el.style.left = left + <span class=\"string\">&quot;px&quot;</span>;</span><br><span class=\"line\">el.style.top  = top  + <span class=\"string\">&quot;px&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// better </span></span><br><span class=\"line\">el.className += <span class=\"string\">&quot; theclassname&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or when top and left are calculated dynamically...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// better</span></span><br><span class=\"line\">el.style.cssText += <span class=\"string\">&quot;; left: &quot;</span> + left + <span class=\"string\">&quot;px; top: &quot;</span> + top + <span class=\"string\">&quot;px;&quot;</span>;</span><br></pre></td></tr></table></figure></li>\n<li>不要在动态的DOM树上批量修改<ul>\n<li>用一个临时进行修改，最终将修改的变量加入到DOM树中。</li>\n<li>克隆准备修改的节点，在克隆节点上修改，然后替换原来的节点</li>\n<li>隐藏原来的节点（<code>display:none</code>，1次回流，1次重绘），在这个节点上进行批量修改，重新显示这个节点（1次回流，1次重绘）。</li>\n</ul>\n</li>\n<li>不要频繁计算样式，不要让浏览器的队列频繁刷新执行修改，比如不要在循环中使用上面提到的那些变量。<strong>应该使用一个缓存变量暂时存储。</strong><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// no-no!</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(big; loop; here) &#123;</span><br><span class=\"line\">    el.style.left = el.offsetLeft + <span class=\"number\">10</span> + <span class=\"string\">&quot;px&quot;</span>;</span><br><span class=\"line\">    el.style.top  = el.offsetTop  + <span class=\"number\">10</span> + <span class=\"string\">&quot;px&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// better</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> left = el.offsetLeft,</span><br><span class=\"line\">    top  = el.offsetTop</span><br><span class=\"line\">    esty = el.style;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(big; loop; here) &#123;</span><br><span class=\"line\">    left += <span class=\"number\">10</span>;</span><br><span class=\"line\">    top  += <span class=\"number\">10</span>;</span><br><span class=\"line\">    esty.left = left + <span class=\"string\">&quot;px&quot;</span>;</span><br><span class=\"line\">    esty.top  = top  + <span class=\"string\">&quot;px&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>通常来说，可以考虑当前的修改会让渲染树进行多少计算，然后针对性的进行优化。<blockquote>\n<p>比如说将一个准备进行动画的节点设为<code>postion:absolute</code>使之成为<code>&lt;body&gt;</code>的子节点，这就不会影响大量的其他节点</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>渲染树是DOM树的可见部分</li>\n<li>渲染树的重新计算叫做回流</li>\n<li>重新计算后将修改绘制在屏幕上叫做重绘</li>\n<li>回流一定重绘</li>\n<li>重绘不一定回流</li>\n<li>需要批量修改样式时使用临时变量，或使目标节点暂时脱离渲染树，或使目标节点减少在渲染树上和其他节点的关系，这样可以一定程度减少回流和重绘</li>\n</ul>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://www.phpied.com/rendering-repaint-reflowrelayout-restyle/\">Rendering: repaint, reflow/relayout, restyle</a></li>\n</ul>"},{"title":"DAO层设计规范","date":"2018-03-23T04:47:11.000Z","_content":"\n\n{% note default %}\n人们眼中的天才之所以卓越非凡，并非天资超人一等，而是付出了持续不断的努力。1万小时的锤炼是任何人从平凡变成世界级大师的必要条件。\n{% endnote %}\n\n<!-- more -->\n\n\n### DAO\n\n`DAO`,Data Acess Object。数据访问对象，顾名思义，是用来访问数据的，数据存在于数据库中，显然DAO用于访问数据库。\n\n### 连接池\n\n为什么要用连接池呢？数据库连接池正如同线程池的目的一样都是为了提高效率，对于数据库连接池，用户每次请求都需要创建一个数据库连接，这毫无疑问会使系统变得异常缓慢，为了避免这样的系统效率问题，所以有了连接池这种方式，系统启动时就会创建一个连接池，连接池中有一定量的数据库连接对象，当用户发起请求，系统会到连接池中取一个连接，当请求完成后会将连接放回到连接池中，这样就大大提高了系统的执行效率。在JAVA Web开发中使用数据源DataSource来获取连接。\n\n### DAO设计规范\n\n刚刚入门的时候，我对DAO的设计一无所知，我只是单纯的把一张表对应一个DAO对象，直接创建一个类，并未做任何抽象。看了《Java Web应用开发和案例教程》之后，确实对DAO层的设计有了一定的了解。\n\n#### 抽象\n\n- 肯定需要抽象，所有DAO在使用的时候都会先获取数据库连接，因此可以抽象一个接口出来。把他叫做`DAO`\n\n- 把DAO层公共的地方抽取出来当做一个类，比如说获取连接。其他普通的DAO类都会扩展此类，即继承此类。它叫做`BaseDAO`\n\n- 对于特定的DAO也需要进行接口设计，因为这样有利于管理和设计\n\n- 特定的DAO会继承BaseDAO并实现其特定接口\n\n#### 整体类图\n\n![](dao-specification/UMLer.jpg)","source":"_posts/dao-specification.md","raw":"---\ntitle: DAO层设计规范\ndate: 2018-03-23 12:47:11\n\ntags:\n- Java Web\ncategories:\n- Back-End Development\n- Java Web\n---\n\n\n{% note default %}\n人们眼中的天才之所以卓越非凡，并非天资超人一等，而是付出了持续不断的努力。1万小时的锤炼是任何人从平凡变成世界级大师的必要条件。\n{% endnote %}\n\n<!-- more -->\n\n\n### DAO\n\n`DAO`,Data Acess Object。数据访问对象，顾名思义，是用来访问数据的，数据存在于数据库中，显然DAO用于访问数据库。\n\n### 连接池\n\n为什么要用连接池呢？数据库连接池正如同线程池的目的一样都是为了提高效率，对于数据库连接池，用户每次请求都需要创建一个数据库连接，这毫无疑问会使系统变得异常缓慢，为了避免这样的系统效率问题，所以有了连接池这种方式，系统启动时就会创建一个连接池，连接池中有一定量的数据库连接对象，当用户发起请求，系统会到连接池中取一个连接，当请求完成后会将连接放回到连接池中，这样就大大提高了系统的执行效率。在JAVA Web开发中使用数据源DataSource来获取连接。\n\n### DAO设计规范\n\n刚刚入门的时候，我对DAO的设计一无所知，我只是单纯的把一张表对应一个DAO对象，直接创建一个类，并未做任何抽象。看了《Java Web应用开发和案例教程》之后，确实对DAO层的设计有了一定的了解。\n\n#### 抽象\n\n- 肯定需要抽象，所有DAO在使用的时候都会先获取数据库连接，因此可以抽象一个接口出来。把他叫做`DAO`\n\n- 把DAO层公共的地方抽取出来当做一个类，比如说获取连接。其他普通的DAO类都会扩展此类，即继承此类。它叫做`BaseDAO`\n\n- 对于特定的DAO也需要进行接口设计，因为这样有利于管理和设计\n\n- 特定的DAO会继承BaseDAO并实现其特定接口\n\n#### 整体类图\n\n![](dao-specification/UMLer.jpg)","slug":"dao-specification","published":1,"updated":"2022-01-06T04:09:12.282Z","_id":"cksq5v7mb0014n0pu7gwa2c2e","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note default\"><p>人们眼中的天才之所以卓越非凡，并非天资超人一等，而是付出了持续不断的努力。1万小时的锤炼是任何人从平凡变成世界级大师的必要条件。</p>\n</div>\n\n<span id=\"more\"></span>\n\n\n<h3 id=\"DAO\"><a href=\"#DAO\" class=\"headerlink\" title=\"DAO\"></a>DAO</h3><p><code>DAO</code>,Data Acess Object。数据访问对象，顾名思义，是用来访问数据的，数据存在于数据库中，显然DAO用于访问数据库。</p>\n<h3 id=\"连接池\"><a href=\"#连接池\" class=\"headerlink\" title=\"连接池\"></a>连接池</h3><p>为什么要用连接池呢？数据库连接池正如同线程池的目的一样都是为了提高效率，对于数据库连接池，用户每次请求都需要创建一个数据库连接，这毫无疑问会使系统变得异常缓慢，为了避免这样的系统效率问题，所以有了连接池这种方式，系统启动时就会创建一个连接池，连接池中有一定量的数据库连接对象，当用户发起请求，系统会到连接池中取一个连接，当请求完成后会将连接放回到连接池中，这样就大大提高了系统的执行效率。在JAVA Web开发中使用数据源DataSource来获取连接。</p>\n<h3 id=\"DAO设计规范\"><a href=\"#DAO设计规范\" class=\"headerlink\" title=\"DAO设计规范\"></a>DAO设计规范</h3><p>刚刚入门的时候，我对DAO的设计一无所知，我只是单纯的把一张表对应一个DAO对象，直接创建一个类，并未做任何抽象。看了《Java Web应用开发和案例教程》之后，确实对DAO层的设计有了一定的了解。</p>\n<h4 id=\"抽象\"><a href=\"#抽象\" class=\"headerlink\" title=\"抽象\"></a>抽象</h4><ul>\n<li><p>肯定需要抽象，所有DAO在使用的时候都会先获取数据库连接，因此可以抽象一个接口出来。把他叫做<code>DAO</code></p>\n</li>\n<li><p>把DAO层公共的地方抽取出来当做一个类，比如说获取连接。其他普通的DAO类都会扩展此类，即继承此类。它叫做<code>BaseDAO</code></p>\n</li>\n<li><p>对于特定的DAO也需要进行接口设计，因为这样有利于管理和设计</p>\n</li>\n<li><p>特定的DAO会继承BaseDAO并实现其特定接口</p>\n</li>\n</ul>\n<h4 id=\"整体类图\"><a href=\"#整体类图\" class=\"headerlink\" title=\"整体类图\"></a>整体类图</h4><p><img data-src=\"dao-specification/UMLer.jpg\"></p>\n","site":{"data":{}},"excerpt":"<div class=\"note default\"><p>人们眼中的天才之所以卓越非凡，并非天资超人一等，而是付出了持续不断的努力。1万小时的锤炼是任何人从平凡变成世界级大师的必要条件。</p>\n</div>","more":"<h3 id=\"DAO\"><a href=\"#DAO\" class=\"headerlink\" title=\"DAO\"></a>DAO</h3><p><code>DAO</code>,Data Acess Object。数据访问对象，顾名思义，是用来访问数据的，数据存在于数据库中，显然DAO用于访问数据库。</p>\n<h3 id=\"连接池\"><a href=\"#连接池\" class=\"headerlink\" title=\"连接池\"></a>连接池</h3><p>为什么要用连接池呢？数据库连接池正如同线程池的目的一样都是为了提高效率，对于数据库连接池，用户每次请求都需要创建一个数据库连接，这毫无疑问会使系统变得异常缓慢，为了避免这样的系统效率问题，所以有了连接池这种方式，系统启动时就会创建一个连接池，连接池中有一定量的数据库连接对象，当用户发起请求，系统会到连接池中取一个连接，当请求完成后会将连接放回到连接池中，这样就大大提高了系统的执行效率。在JAVA Web开发中使用数据源DataSource来获取连接。</p>\n<h3 id=\"DAO设计规范\"><a href=\"#DAO设计规范\" class=\"headerlink\" title=\"DAO设计规范\"></a>DAO设计规范</h3><p>刚刚入门的时候，我对DAO的设计一无所知，我只是单纯的把一张表对应一个DAO对象，直接创建一个类，并未做任何抽象。看了《Java Web应用开发和案例教程》之后，确实对DAO层的设计有了一定的了解。</p>\n<h4 id=\"抽象\"><a href=\"#抽象\" class=\"headerlink\" title=\"抽象\"></a>抽象</h4><ul>\n<li><p>肯定需要抽象，所有DAO在使用的时候都会先获取数据库连接，因此可以抽象一个接口出来。把他叫做<code>DAO</code></p>\n</li>\n<li><p>把DAO层公共的地方抽取出来当做一个类，比如说获取连接。其他普通的DAO类都会扩展此类，即继承此类。它叫做<code>BaseDAO</code></p>\n</li>\n<li><p>对于特定的DAO也需要进行接口设计，因为这样有利于管理和设计</p>\n</li>\n<li><p>特定的DAO会继承BaseDAO并实现其特定接口</p>\n</li>\n</ul>\n<h4 id=\"整体类图\"><a href=\"#整体类图\" class=\"headerlink\" title=\"整体类图\"></a>整体类图</h4><p><img data-src=\"dao-specification/UMLer.jpg\"></p>"},{"title":"双系统的实现原理","date":"2018-03-23T07:01:57.000Z","_content":"\n\n{% note default %}\n硬件令机器变快。软件则把快机器搞慢。\n{% endnote %}\n\n<!-- more -->\n\n### 前言\n\n今天谈一谈双系统的实现原理，其实写这篇博客的时候我还没怎么彻底搞懂，不过在写的过程中会边思考边写，因为借鉴了[CyC2018/Interview-Notebook](https://github.com/CyC2018/InnterviewNotes/blob/master/notes/Linux.md)，这个文档也是借鉴了一本书`《鸟哥的Linux私房菜》`。\n\n### 双系统\n\n你也许会发现身边有许多装逼大神，用电脑就用电脑了，还非得矫揉造作地弄一个双系统，`Windows+Linux`，旁人一看，立马感觉逼格顶呱呱。双系统很好理解，无非就是一个选择问题，内部过程一目了然，`一个if语句嘛`。打个不合适的比方，就比如上厕所，这厕所就好比是操作系统，有男厕所、女厕所，你进厕所前就是一个选择嘛。下面我们就看一下机器是如何选择的。\n\n### 实现原理\n在谈实现原理之前，我们必须要搞清楚几个概念，也许你可能听说过这些概念，但却不知道它是干嘛用的，那么你很适合读这篇文章。\n\n> 在看这些概念的过程中，你可以结合这张图来看。虽然有些繁体字，就当`涨姿势了`我滴乖。\n\n![](daul-system-principle/daul.jpg)\n\n#### BIOS\n我靠，是你！`BIOS`，之前安装`virtual box`的时候还见过你，当时让我开启一下`Intel VT-x`，然后就需要让`BIOS`大哥帮忙。操作系统老师好像也讲过，好像。。。\n那么这个`BIOS`到底是个什么鬼？`Basic Input Output System`。结合英文全称来说一下，基本输入输出系统。没错，**BIOS 是开机的时候计算机执行的第一个程序**，他会决定你开启电脑后的下一步工作。`BIOS`大哥知道你的磁盘里哪些可以开机，并且会读取第一个扇区的`MBR`，那什么又是`MBR`？\n\n#### MBR\n`Master boot record, MBR`，翻译过来是主要开机记录，这又是什么鬼？我也不太明确这个定义，不过我确切的知道它是用来干嘛的。`MBR是可以执行自己内部的开机管理程序的`。\n\n#### 开机管理程序\n\nwtf？定义一个跟一个，什么鬼？客官您别着急，好戏马上开始。。。开机管理程序是干嘛的？开机管理程序会加载操作系统的核心文件。那就很清楚了吧，一个电脑里装上两个系统，**只需要有两个开机管理程序就行了呗。**\n我们再来仔细看一下开机管理程序的其他功能。\n> 选单、载入核心文件以及转交其它开机管理程序。`转交这个功能可以用来实现了多重引导`，只需要将另一个操作系统的开机管理程序安装在其它分区的启动扇区上，在启动 MBR 中的开机管理程序时，就可以选择启动当前的操作系统或者转交给其它开机管理程序从而启动另一个操作系统。\n\n### 总结\n\n捋一捋思路。一切从开启电源开始。。。\n\n> 电源开启，电脑启动`BIOS`，BIOS读取第一个扇区的`MBR`，MBR看自己内部有没有`开机管理程序`（没有的话就废了，没装系统嘛），有的话，看看`选单`里面有啥东西，（如果安装了Linux和Windows），自身的开机管理程序是Windows的，并且可以转发到另一个开机管理程序。那么选单里就有两个选项，载入Windows和`载入Linux`，而载入Linux实际上是两个步骤，先`转发到Linux开机管理程序的位置`，然后由Linux的开机管理程序，载入Linux系统核心。\n\n嗯，就这样了，照着图看更清晰哟。","source":"_posts/daul-system-principle.md","raw":"---\ntitle: 双系统的实现原理\ndate: 2018-03-23 15:01:57\ntags:\n- Operating System\n\ncategories: \n- Computer Science\n- Operating System\n---\n\n\n{% note default %}\n硬件令机器变快。软件则把快机器搞慢。\n{% endnote %}\n\n<!-- more -->\n\n### 前言\n\n今天谈一谈双系统的实现原理，其实写这篇博客的时候我还没怎么彻底搞懂，不过在写的过程中会边思考边写，因为借鉴了[CyC2018/Interview-Notebook](https://github.com/CyC2018/InnterviewNotes/blob/master/notes/Linux.md)，这个文档也是借鉴了一本书`《鸟哥的Linux私房菜》`。\n\n### 双系统\n\n你也许会发现身边有许多装逼大神，用电脑就用电脑了，还非得矫揉造作地弄一个双系统，`Windows+Linux`，旁人一看，立马感觉逼格顶呱呱。双系统很好理解，无非就是一个选择问题，内部过程一目了然，`一个if语句嘛`。打个不合适的比方，就比如上厕所，这厕所就好比是操作系统，有男厕所、女厕所，你进厕所前就是一个选择嘛。下面我们就看一下机器是如何选择的。\n\n### 实现原理\n在谈实现原理之前，我们必须要搞清楚几个概念，也许你可能听说过这些概念，但却不知道它是干嘛用的，那么你很适合读这篇文章。\n\n> 在看这些概念的过程中，你可以结合这张图来看。虽然有些繁体字，就当`涨姿势了`我滴乖。\n\n![](daul-system-principle/daul.jpg)\n\n#### BIOS\n我靠，是你！`BIOS`，之前安装`virtual box`的时候还见过你，当时让我开启一下`Intel VT-x`，然后就需要让`BIOS`大哥帮忙。操作系统老师好像也讲过，好像。。。\n那么这个`BIOS`到底是个什么鬼？`Basic Input Output System`。结合英文全称来说一下，基本输入输出系统。没错，**BIOS 是开机的时候计算机执行的第一个程序**，他会决定你开启电脑后的下一步工作。`BIOS`大哥知道你的磁盘里哪些可以开机，并且会读取第一个扇区的`MBR`，那什么又是`MBR`？\n\n#### MBR\n`Master boot record, MBR`，翻译过来是主要开机记录，这又是什么鬼？我也不太明确这个定义，不过我确切的知道它是用来干嘛的。`MBR是可以执行自己内部的开机管理程序的`。\n\n#### 开机管理程序\n\nwtf？定义一个跟一个，什么鬼？客官您别着急，好戏马上开始。。。开机管理程序是干嘛的？开机管理程序会加载操作系统的核心文件。那就很清楚了吧，一个电脑里装上两个系统，**只需要有两个开机管理程序就行了呗。**\n我们再来仔细看一下开机管理程序的其他功能。\n> 选单、载入核心文件以及转交其它开机管理程序。`转交这个功能可以用来实现了多重引导`，只需要将另一个操作系统的开机管理程序安装在其它分区的启动扇区上，在启动 MBR 中的开机管理程序时，就可以选择启动当前的操作系统或者转交给其它开机管理程序从而启动另一个操作系统。\n\n### 总结\n\n捋一捋思路。一切从开启电源开始。。。\n\n> 电源开启，电脑启动`BIOS`，BIOS读取第一个扇区的`MBR`，MBR看自己内部有没有`开机管理程序`（没有的话就废了，没装系统嘛），有的话，看看`选单`里面有啥东西，（如果安装了Linux和Windows），自身的开机管理程序是Windows的，并且可以转发到另一个开机管理程序。那么选单里就有两个选项，载入Windows和`载入Linux`，而载入Linux实际上是两个步骤，先`转发到Linux开机管理程序的位置`，然后由Linux的开机管理程序，载入Linux系统核心。\n\n嗯，就这样了，照着图看更清晰哟。","slug":"daul-system-principle","published":1,"updated":"2022-01-06T04:09:12.283Z","_id":"cksq5v7me0017n0pufhesaacr","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note default\"><p>硬件令机器变快。软件则把快机器搞慢。</p>\n</div>\n\n<span id=\"more\"></span>\n\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>今天谈一谈双系统的实现原理，其实写这篇博客的时候我还没怎么彻底搞懂，不过在写的过程中会边思考边写，因为借鉴了<a href=\"https://github.com/CyC2018/InnterviewNotes/blob/master/notes/Linux.md\">CyC2018/Interview-Notebook</a>，这个文档也是借鉴了一本书<code>《鸟哥的Linux私房菜》</code>。</p>\n<h3 id=\"双系统\"><a href=\"#双系统\" class=\"headerlink\" title=\"双系统\"></a>双系统</h3><p>你也许会发现身边有许多装逼大神，用电脑就用电脑了，还非得矫揉造作地弄一个双系统，<code>Windows+Linux</code>，旁人一看，立马感觉逼格顶呱呱。双系统很好理解，无非就是一个选择问题，内部过程一目了然，<code>一个if语句嘛</code>。打个不合适的比方，就比如上厕所，这厕所就好比是操作系统，有男厕所、女厕所，你进厕所前就是一个选择嘛。下面我们就看一下机器是如何选择的。</p>\n<h3 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h3><p>在谈实现原理之前，我们必须要搞清楚几个概念，也许你可能听说过这些概念，但却不知道它是干嘛用的，那么你很适合读这篇文章。</p>\n<blockquote>\n<p>在看这些概念的过程中，你可以结合这张图来看。虽然有些繁体字，就当<code>涨姿势了</code>我滴乖。</p>\n</blockquote>\n<p><img data-src=\"daul-system-principle/daul.jpg\"></p>\n<h4 id=\"BIOS\"><a href=\"#BIOS\" class=\"headerlink\" title=\"BIOS\"></a>BIOS</h4><p>我靠，是你！<code>BIOS</code>，之前安装<code>virtual box</code>的时候还见过你，当时让我开启一下<code>Intel VT-x</code>，然后就需要让<code>BIOS</code>大哥帮忙。操作系统老师好像也讲过，好像。。。<br>那么这个<code>BIOS</code>到底是个什么鬼？<code>Basic Input Output System</code>。结合英文全称来说一下，基本输入输出系统。没错，<strong>BIOS 是开机的时候计算机执行的第一个程序</strong>，他会决定你开启电脑后的下一步工作。<code>BIOS</code>大哥知道你的磁盘里哪些可以开机，并且会读取第一个扇区的<code>MBR</code>，那什么又是<code>MBR</code>？</p>\n<h4 id=\"MBR\"><a href=\"#MBR\" class=\"headerlink\" title=\"MBR\"></a>MBR</h4><p><code>Master boot record, MBR</code>，翻译过来是主要开机记录，这又是什么鬼？我也不太明确这个定义，不过我确切的知道它是用来干嘛的。<code>MBR是可以执行自己内部的开机管理程序的</code>。</p>\n<h4 id=\"开机管理程序\"><a href=\"#开机管理程序\" class=\"headerlink\" title=\"开机管理程序\"></a>开机管理程序</h4><p>wtf？定义一个跟一个，什么鬼？客官您别着急，好戏马上开始。。。开机管理程序是干嘛的？开机管理程序会加载操作系统的核心文件。那就很清楚了吧，一个电脑里装上两个系统，<strong>只需要有两个开机管理程序就行了呗。</strong><br>我们再来仔细看一下开机管理程序的其他功能。</p>\n<blockquote>\n<p>选单、载入核心文件以及转交其它开机管理程序。<code>转交这个功能可以用来实现了多重引导</code>，只需要将另一个操作系统的开机管理程序安装在其它分区的启动扇区上，在启动 MBR 中的开机管理程序时，就可以选择启动当前的操作系统或者转交给其它开机管理程序从而启动另一个操作系统。</p>\n</blockquote>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>捋一捋思路。一切从开启电源开始。。。</p>\n<blockquote>\n<p>电源开启，电脑启动<code>BIOS</code>，BIOS读取第一个扇区的<code>MBR</code>，MBR看自己内部有没有<code>开机管理程序</code>（没有的话就废了，没装系统嘛），有的话，看看<code>选单</code>里面有啥东西，（如果安装了Linux和Windows），自身的开机管理程序是Windows的，并且可以转发到另一个开机管理程序。那么选单里就有两个选项，载入Windows和<code>载入Linux</code>，而载入Linux实际上是两个步骤，先<code>转发到Linux开机管理程序的位置</code>，然后由Linux的开机管理程序，载入Linux系统核心。</p>\n</blockquote>\n<p>嗯，就这样了，照着图看更清晰哟。</p>\n","site":{"data":{}},"excerpt":"<div class=\"note default\"><p>硬件令机器变快。软件则把快机器搞慢。</p>\n</div>","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>今天谈一谈双系统的实现原理，其实写这篇博客的时候我还没怎么彻底搞懂，不过在写的过程中会边思考边写，因为借鉴了<a href=\"https://github.com/CyC2018/InnterviewNotes/blob/master/notes/Linux.md\">CyC2018/Interview-Notebook</a>，这个文档也是借鉴了一本书<code>《鸟哥的Linux私房菜》</code>。</p>\n<h3 id=\"双系统\"><a href=\"#双系统\" class=\"headerlink\" title=\"双系统\"></a>双系统</h3><p>你也许会发现身边有许多装逼大神，用电脑就用电脑了，还非得矫揉造作地弄一个双系统，<code>Windows+Linux</code>，旁人一看，立马感觉逼格顶呱呱。双系统很好理解，无非就是一个选择问题，内部过程一目了然，<code>一个if语句嘛</code>。打个不合适的比方，就比如上厕所，这厕所就好比是操作系统，有男厕所、女厕所，你进厕所前就是一个选择嘛。下面我们就看一下机器是如何选择的。</p>\n<h3 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h3><p>在谈实现原理之前，我们必须要搞清楚几个概念，也许你可能听说过这些概念，但却不知道它是干嘛用的，那么你很适合读这篇文章。</p>\n<blockquote>\n<p>在看这些概念的过程中，你可以结合这张图来看。虽然有些繁体字，就当<code>涨姿势了</code>我滴乖。</p>\n</blockquote>\n<p><img data-src=\"daul-system-principle/daul.jpg\"></p>\n<h4 id=\"BIOS\"><a href=\"#BIOS\" class=\"headerlink\" title=\"BIOS\"></a>BIOS</h4><p>我靠，是你！<code>BIOS</code>，之前安装<code>virtual box</code>的时候还见过你，当时让我开启一下<code>Intel VT-x</code>，然后就需要让<code>BIOS</code>大哥帮忙。操作系统老师好像也讲过，好像。。。<br>那么这个<code>BIOS</code>到底是个什么鬼？<code>Basic Input Output System</code>。结合英文全称来说一下，基本输入输出系统。没错，<strong>BIOS 是开机的时候计算机执行的第一个程序</strong>，他会决定你开启电脑后的下一步工作。<code>BIOS</code>大哥知道你的磁盘里哪些可以开机，并且会读取第一个扇区的<code>MBR</code>，那什么又是<code>MBR</code>？</p>\n<h4 id=\"MBR\"><a href=\"#MBR\" class=\"headerlink\" title=\"MBR\"></a>MBR</h4><p><code>Master boot record, MBR</code>，翻译过来是主要开机记录，这又是什么鬼？我也不太明确这个定义，不过我确切的知道它是用来干嘛的。<code>MBR是可以执行自己内部的开机管理程序的</code>。</p>\n<h4 id=\"开机管理程序\"><a href=\"#开机管理程序\" class=\"headerlink\" title=\"开机管理程序\"></a>开机管理程序</h4><p>wtf？定义一个跟一个，什么鬼？客官您别着急，好戏马上开始。。。开机管理程序是干嘛的？开机管理程序会加载操作系统的核心文件。那就很清楚了吧，一个电脑里装上两个系统，<strong>只需要有两个开机管理程序就行了呗。</strong><br>我们再来仔细看一下开机管理程序的其他功能。</p>\n<blockquote>\n<p>选单、载入核心文件以及转交其它开机管理程序。<code>转交这个功能可以用来实现了多重引导</code>，只需要将另一个操作系统的开机管理程序安装在其它分区的启动扇区上，在启动 MBR 中的开机管理程序时，就可以选择启动当前的操作系统或者转交给其它开机管理程序从而启动另一个操作系统。</p>\n</blockquote>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>捋一捋思路。一切从开启电源开始。。。</p>\n<blockquote>\n<p>电源开启，电脑启动<code>BIOS</code>，BIOS读取第一个扇区的<code>MBR</code>，MBR看自己内部有没有<code>开机管理程序</code>（没有的话就废了，没装系统嘛），有的话，看看<code>选单</code>里面有啥东西，（如果安装了Linux和Windows），自身的开机管理程序是Windows的，并且可以转发到另一个开机管理程序。那么选单里就有两个选项，载入Windows和<code>载入Linux</code>，而载入Linux实际上是两个步骤，先<code>转发到Linux开机管理程序的位置</code>，然后由Linux的开机管理程序，载入Linux系统核心。</p>\n</blockquote>\n<p>嗯，就这样了，照着图看更清晰哟。</p>"},{"title":"DIP中常见的核","mathjax":true,"copyright":true,"comment":true,"date":"2019-03-14T11:01:20.000Z","_content":"\n{% note default %}\n一二三四五，六七八九十。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n{% note default %}\n\n**文章暂未完成**\n\n{% endnote %}\n\n\n## 前言\n\nDIP（Digital Image Processing）中的核可以看做是一个模具，可以作用于每个像素。每种核作用图像后会得到不同的结果，本文主要是记录一些常见的“核”\n\n视频见[YOUTOBE](https://www.youtube.com/watch?v=izDu5zdjjYA)\n\n{% note info%}\n## 核是什么\n\n核可以看做是一个模具，也叫做模板，有时也称算子。模板操作是数字图像处理中常用的一种邻域运算方式，主要有卷积和相关两种，可以实现图像平滑、图像锐化、边缘检测等功能。\n\n- 核常用矩阵表示。可以是一幅图像、一个滤波器或一个窗口，定义了参与运算的中心元素和邻域元素的相对位置及相关系数。卷积时常采用3×3或者5×5大小。\n- 模板的中心元素（或称原点）表示将要处理的元素， 一般取模板中心点，也可根据需要选取非中心点。\n\n{% endnote %}\n\n## 常见的核\n\n{% note primary%}\n### 图像平滑\n{% endnote %}\n\n\n\n#### 邻域平均滤波\n> 邻域平均法是一种线性低通滤波器。**可滤除一定的噪声。**\n\n- 第一种\n\n$$\n    \\frac{1}{9}\\times\n    \\begin{bmatrix}\n        1&1&1\\\\\\\\\n        1&1&1\\\\\\\\\n        1&1&1\n    \\end{bmatrix}\n$$\n\n- 第二种\n\n$$\n    \\frac{1}{16}\\times\n    \\begin{bmatrix}\n       1&2&1\\\\\\\\\n       2&4&2\\\\\\\\\n       1&2&1 \n    \\end{bmatrix}\n$$\n\n#### 中值滤波\n\n> 是一种非线性滤波，**找出核内的中位数当做结果**。\n\n$$\n       Midian( \n           \\begin{bmatrix}\n             a&b&c\\\\\\\\\n             d&e&f\\\\\\\\\n             g&h&i \n           \\end{bmatrix})\n$$\n\n\n{% note primary%}\n### 边缘检测\n{% endnote %}\n\n> 用于检测图像中一些物体边缘的地方。比如无人机、自动驾驶障碍物检测等会使用到。\n\n主要方法有以下几种：\n\n#### Prewitt\n\n> 引入了平均因素，对噪声有抑制作用；操作简便。\n\n- 垂直边缘检测算子\n\n\n$$\n           \\begin{bmatrix}\n             -1&0&1\\\\\\\\\n             -1&0&1\\\\\\\\\n             -1&0&1 \n           \\end{bmatrix}\n$$\n\n- 水平边缘检测算子\n\n\n$$\n           \\begin{bmatrix}\n             -1&-1&-1\\\\\\\\\n             0&0&0\\\\\\\\\n             1&1&1 \n           \\end{bmatrix}\n$$\n#### Sobel\n> 引入了平均因素，增强了最近像素的影像，噪声抑制效果比Prewitt好。\n\n- 垂直边缘检测算子\n\n\n$$\n           \\begin{bmatrix}\n             -1&0&1\\\\\\\\\n             -2&0&2\\\\\\\\\n             -1&0&1 \n           \\end{bmatrix}\n$$\n\n- 水平边缘检测算子\n\n\n$$\n           \\begin{bmatrix}\n             -1&-2&-1\\\\\\\\\n             0&0&0\\\\\\\\\n             1&2&1 \n           \\end{bmatrix}\n$$\n","source":"_posts/digital-image-kernel-collection.md","raw":"---\ntitle: DIP中常见的核\nmathjax: true\ncopyright: true\ncomment: true\ndate: 2019-03-14 19:01:20\ntags:\n- Computer Graphics\n- DIP\ncategories: \n- Computer Science\n- Computer Graphics\n\n---\n\n{% note default %}\n一二三四五，六七八九十。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n{% note default %}\n\n**文章暂未完成**\n\n{% endnote %}\n\n\n## 前言\n\nDIP（Digital Image Processing）中的核可以看做是一个模具，可以作用于每个像素。每种核作用图像后会得到不同的结果，本文主要是记录一些常见的“核”\n\n视频见[YOUTOBE](https://www.youtube.com/watch?v=izDu5zdjjYA)\n\n{% note info%}\n## 核是什么\n\n核可以看做是一个模具，也叫做模板，有时也称算子。模板操作是数字图像处理中常用的一种邻域运算方式，主要有卷积和相关两种，可以实现图像平滑、图像锐化、边缘检测等功能。\n\n- 核常用矩阵表示。可以是一幅图像、一个滤波器或一个窗口，定义了参与运算的中心元素和邻域元素的相对位置及相关系数。卷积时常采用3×3或者5×5大小。\n- 模板的中心元素（或称原点）表示将要处理的元素， 一般取模板中心点，也可根据需要选取非中心点。\n\n{% endnote %}\n\n## 常见的核\n\n{% note primary%}\n### 图像平滑\n{% endnote %}\n\n\n\n#### 邻域平均滤波\n> 邻域平均法是一种线性低通滤波器。**可滤除一定的噪声。**\n\n- 第一种\n\n$$\n    \\frac{1}{9}\\times\n    \\begin{bmatrix}\n        1&1&1\\\\\\\\\n        1&1&1\\\\\\\\\n        1&1&1\n    \\end{bmatrix}\n$$\n\n- 第二种\n\n$$\n    \\frac{1}{16}\\times\n    \\begin{bmatrix}\n       1&2&1\\\\\\\\\n       2&4&2\\\\\\\\\n       1&2&1 \n    \\end{bmatrix}\n$$\n\n#### 中值滤波\n\n> 是一种非线性滤波，**找出核内的中位数当做结果**。\n\n$$\n       Midian( \n           \\begin{bmatrix}\n             a&b&c\\\\\\\\\n             d&e&f\\\\\\\\\n             g&h&i \n           \\end{bmatrix})\n$$\n\n\n{% note primary%}\n### 边缘检测\n{% endnote %}\n\n> 用于检测图像中一些物体边缘的地方。比如无人机、自动驾驶障碍物检测等会使用到。\n\n主要方法有以下几种：\n\n#### Prewitt\n\n> 引入了平均因素，对噪声有抑制作用；操作简便。\n\n- 垂直边缘检测算子\n\n\n$$\n           \\begin{bmatrix}\n             -1&0&1\\\\\\\\\n             -1&0&1\\\\\\\\\n             -1&0&1 \n           \\end{bmatrix}\n$$\n\n- 水平边缘检测算子\n\n\n$$\n           \\begin{bmatrix}\n             -1&-1&-1\\\\\\\\\n             0&0&0\\\\\\\\\n             1&1&1 \n           \\end{bmatrix}\n$$\n#### Sobel\n> 引入了平均因素，增强了最近像素的影像，噪声抑制效果比Prewitt好。\n\n- 垂直边缘检测算子\n\n\n$$\n           \\begin{bmatrix}\n             -1&0&1\\\\\\\\\n             -2&0&2\\\\\\\\\n             -1&0&1 \n           \\end{bmatrix}\n$$\n\n- 水平边缘检测算子\n\n\n$$\n           \\begin{bmatrix}\n             -1&-2&-1\\\\\\\\\n             0&0&0\\\\\\\\\n             1&2&1 \n           \\end{bmatrix}\n$$\n","slug":"digital-image-kernel-collection","published":1,"updated":"2022-01-06T04:09:12.283Z","_id":"cksq5v7me001an0pu8sdt330e","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note default\"><p>一二三四五，六七八九十。</p>\n</div>\n\n<span id=\"more\"></span>\n\n<hr>\n<div class=\"note default\"><p><strong>文章暂未完成</strong></p>\n</div>\n\n\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>DIP（Digital Image Processing）中的核可以看做是一个模具，可以作用于每个像素。每种核作用图像后会得到不同的结果，本文主要是记录一些常见的“核”</p>\n<p>视频见<a href=\"https://www.youtube.com/watch?v=izDu5zdjjYA\">YOUTOBE</a></p>\n<div class=\"note info\"><h2 id=\"核是什么\"><a href=\"#核是什么\" class=\"headerlink\" title=\"核是什么\"></a>核是什么</h2><p>核可以看做是一个模具，也叫做模板，有时也称算子。模板操作是数字图像处理中常用的一种邻域运算方式，主要有卷积和相关两种，可以实现图像平滑、图像锐化、边缘检测等功能。</p>\n<ul>\n<li>核常用矩阵表示。可以是一幅图像、一个滤波器或一个窗口，定义了参与运算的中心元素和邻域元素的相对位置及相关系数。卷积时常采用3×3或者5×5大小。</li>\n<li>模板的中心元素（或称原点）表示将要处理的元素， 一般取模板中心点，也可根据需要选取非中心点。</li>\n</ul>\n</div>\n\n<h2 id=\"常见的核\"><a href=\"#常见的核\" class=\"headerlink\" title=\"常见的核\"></a>常见的核</h2><div class=\"note primary\"><h3 id=\"图像平滑\"><a href=\"#图像平滑\" class=\"headerlink\" title=\"图像平滑\"></a>图像平滑</h3></div>\n\n\n\n<h4 id=\"邻域平均滤波\"><a href=\"#邻域平均滤波\" class=\"headerlink\" title=\"邻域平均滤波\"></a>邻域平均滤波</h4><blockquote>\n<p>邻域平均法是一种线性低通滤波器。<strong>可滤除一定的噪声。</strong></p>\n</blockquote>\n<ul>\n<li>第一种</li>\n</ul>\n<p>$$<br>    \\frac{1}{9}\\times<br>    \\begin{bmatrix}<br>        1&amp;1&amp;1\\\\<br>        1&amp;1&amp;1\\\\<br>        1&amp;1&amp;1<br>    \\end{bmatrix}<br>$$</p>\n<ul>\n<li>第二种</li>\n</ul>\n<p>$$<br>    \\frac{1}{16}\\times<br>    \\begin{bmatrix}<br>       1&amp;2&amp;1\\\\<br>       2&amp;4&amp;2\\\\<br>       1&amp;2&amp;1<br>    \\end{bmatrix}<br>$$</p>\n<h4 id=\"中值滤波\"><a href=\"#中值滤波\" class=\"headerlink\" title=\"中值滤波\"></a>中值滤波</h4><blockquote>\n<p>是一种非线性滤波，<strong>找出核内的中位数当做结果</strong>。</p>\n</blockquote>\n<p>$$<br>       Midian(<br>           \\begin{bmatrix}<br>             a&amp;b&amp;c\\\\<br>             d&amp;e&amp;f\\\\<br>             g&amp;h&amp;i<br>           \\end{bmatrix})<br>$$</p>\n<div class=\"note primary\"><h3 id=\"边缘检测\"><a href=\"#边缘检测\" class=\"headerlink\" title=\"边缘检测\"></a>边缘检测</h3></div>\n\n<blockquote>\n<p>用于检测图像中一些物体边缘的地方。比如无人机、自动驾驶障碍物检测等会使用到。</p>\n</blockquote>\n<p>主要方法有以下几种：</p>\n<h4 id=\"Prewitt\"><a href=\"#Prewitt\" class=\"headerlink\" title=\"Prewitt\"></a>Prewitt</h4><blockquote>\n<p>引入了平均因素，对噪声有抑制作用；操作简便。</p>\n</blockquote>\n<ul>\n<li>垂直边缘检测算子</li>\n</ul>\n<p>$$<br>           \\begin{bmatrix}<br>             -1&amp;0&amp;1\\\\<br>             -1&amp;0&amp;1\\\\<br>             -1&amp;0&amp;1<br>           \\end{bmatrix}<br>$$</p>\n<ul>\n<li>水平边缘检测算子</li>\n</ul>\n<p>$$<br>           \\begin{bmatrix}<br>             -1&amp;-1&amp;-1\\\\<br>             0&amp;0&amp;0\\\\<br>             1&amp;1&amp;1<br>           \\end{bmatrix}<br>$$</p>\n<h4 id=\"Sobel\"><a href=\"#Sobel\" class=\"headerlink\" title=\"Sobel\"></a>Sobel</h4><blockquote>\n<p>引入了平均因素，增强了最近像素的影像，噪声抑制效果比Prewitt好。</p>\n</blockquote>\n<ul>\n<li>垂直边缘检测算子</li>\n</ul>\n<p>$$<br>           \\begin{bmatrix}<br>             -1&amp;0&amp;1\\\\<br>             -2&amp;0&amp;2\\\\<br>             -1&amp;0&amp;1<br>           \\end{bmatrix}<br>$$</p>\n<ul>\n<li>水平边缘检测算子</li>\n</ul>\n<p>$$<br>           \\begin{bmatrix}<br>             -1&amp;-2&amp;-1\\\\<br>             0&amp;0&amp;0\\\\<br>             1&amp;2&amp;1<br>           \\end{bmatrix}<br>$$</p>\n","site":{"data":{}},"excerpt":"<div class=\"note default\"><p>一二三四五，六七八九十。</p>\n</div>","more":"<hr>\n<div class=\"note default\"><p><strong>文章暂未完成</strong></p>\n</div>\n\n\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>DIP（Digital Image Processing）中的核可以看做是一个模具，可以作用于每个像素。每种核作用图像后会得到不同的结果，本文主要是记录一些常见的“核”</p>\n<p>视频见<a href=\"https://www.youtube.com/watch?v=izDu5zdjjYA\">YOUTOBE</a></p>\n<div class=\"note info\"><h2 id=\"核是什么\"><a href=\"#核是什么\" class=\"headerlink\" title=\"核是什么\"></a>核是什么</h2><p>核可以看做是一个模具，也叫做模板，有时也称算子。模板操作是数字图像处理中常用的一种邻域运算方式，主要有卷积和相关两种，可以实现图像平滑、图像锐化、边缘检测等功能。</p>\n<ul>\n<li>核常用矩阵表示。可以是一幅图像、一个滤波器或一个窗口，定义了参与运算的中心元素和邻域元素的相对位置及相关系数。卷积时常采用3×3或者5×5大小。</li>\n<li>模板的中心元素（或称原点）表示将要处理的元素， 一般取模板中心点，也可根据需要选取非中心点。</li>\n</ul>\n</div>\n\n<h2 id=\"常见的核\"><a href=\"#常见的核\" class=\"headerlink\" title=\"常见的核\"></a>常见的核</h2><div class=\"note primary\"><h3 id=\"图像平滑\"><a href=\"#图像平滑\" class=\"headerlink\" title=\"图像平滑\"></a>图像平滑</h3></div>\n\n\n\n<h4 id=\"邻域平均滤波\"><a href=\"#邻域平均滤波\" class=\"headerlink\" title=\"邻域平均滤波\"></a>邻域平均滤波</h4><blockquote>\n<p>邻域平均法是一种线性低通滤波器。<strong>可滤除一定的噪声。</strong></p>\n</blockquote>\n<ul>\n<li>第一种</li>\n</ul>\n<p>$$<br>    \\frac{1}{9}\\times<br>    \\begin{bmatrix}<br>        1&amp;1&amp;1\\\\<br>        1&amp;1&amp;1\\\\<br>        1&amp;1&amp;1<br>    \\end{bmatrix}<br>$$</p>\n<ul>\n<li>第二种</li>\n</ul>\n<p>$$<br>    \\frac{1}{16}\\times<br>    \\begin{bmatrix}<br>       1&amp;2&amp;1\\\\<br>       2&amp;4&amp;2\\\\<br>       1&amp;2&amp;1<br>    \\end{bmatrix}<br>$$</p>\n<h4 id=\"中值滤波\"><a href=\"#中值滤波\" class=\"headerlink\" title=\"中值滤波\"></a>中值滤波</h4><blockquote>\n<p>是一种非线性滤波，<strong>找出核内的中位数当做结果</strong>。</p>\n</blockquote>\n<p>$$<br>       Midian(<br>           \\begin{bmatrix}<br>             a&amp;b&amp;c\\\\<br>             d&amp;e&amp;f\\\\<br>             g&amp;h&amp;i<br>           \\end{bmatrix})<br>$$</p>\n<div class=\"note primary\"><h3 id=\"边缘检测\"><a href=\"#边缘检测\" class=\"headerlink\" title=\"边缘检测\"></a>边缘检测</h3></div>\n\n<blockquote>\n<p>用于检测图像中一些物体边缘的地方。比如无人机、自动驾驶障碍物检测等会使用到。</p>\n</blockquote>\n<p>主要方法有以下几种：</p>\n<h4 id=\"Prewitt\"><a href=\"#Prewitt\" class=\"headerlink\" title=\"Prewitt\"></a>Prewitt</h4><blockquote>\n<p>引入了平均因素，对噪声有抑制作用；操作简便。</p>\n</blockquote>\n<ul>\n<li>垂直边缘检测算子</li>\n</ul>\n<p>$$<br>           \\begin{bmatrix}<br>             -1&amp;0&amp;1\\\\<br>             -1&amp;0&amp;1\\\\<br>             -1&amp;0&amp;1<br>           \\end{bmatrix}<br>$$</p>\n<ul>\n<li>水平边缘检测算子</li>\n</ul>\n<p>$$<br>           \\begin{bmatrix}<br>             -1&amp;-1&amp;-1\\\\<br>             0&amp;0&amp;0\\\\<br>             1&amp;1&amp;1<br>           \\end{bmatrix}<br>$$</p>\n<h4 id=\"Sobel\"><a href=\"#Sobel\" class=\"headerlink\" title=\"Sobel\"></a>Sobel</h4><blockquote>\n<p>引入了平均因素，增强了最近像素的影像，噪声抑制效果比Prewitt好。</p>\n</blockquote>\n<ul>\n<li>垂直边缘检测算子</li>\n</ul>\n<p>$$<br>           \\begin{bmatrix}<br>             -1&amp;0&amp;1\\\\<br>             -2&amp;0&amp;2\\\\<br>             -1&amp;0&amp;1<br>           \\end{bmatrix}<br>$$</p>\n<ul>\n<li>水平边缘检测算子</li>\n</ul>\n<p>$$<br>           \\begin{bmatrix}<br>             -1&amp;-2&amp;-1\\\\<br>             0&amp;0&amp;0\\\\<br>             1&amp;2&amp;1<br>           \\end{bmatrix}<br>$$</p>"},{"title":"图像基本变换","mathjax":true,"copyright":true,"comment":true,"date":"2019-03-29T01:21:04.000Z","_content":"\n{% note primary %}\n图像基本变换：缩放、平移、镜像、旋转、透视。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n\n## 前言\n\n本系列文章（DIP，Digital Image Processing），用于记录总结数字图像处理课程的实验内容。目录请参考[DIP系列文章](/tags/DIP/)。\n\n{% note warning no-icon %}\n\n**本次不展示代码，全部代码请查看[GitHub](https://github.com/ScarboroughCoral/DIPModule)**\n\n{% endnote %}\n\n## 题目要求\n\n1. 图像缩放\n2. 图像平移\n3. 图像镜像\n4. 图像旋转\n5. 图像透视（选做就是不做）\n\n\n## 原图（测试图像）\n\n仅对8位灰度图进行处理，RGB真彩色处理同理。\n\n![](dip-transformation/3-3.png)\n\n## 整体思路\n\n空间域处理都是对每个像素进行处理，无非就是做一层映射而已。\n\n利用后向映射进行变换，即**根据转换后图像的像素位置确定转换前的像素位置，得到像素灰度值并赋值给转换后图像像素**。\n\n![](dip-transformation/back.png)\n\n\n## 实验内容\n\n\n\n思路及效果如下：\n\n### 0x00 基本变量表\n\n|  变量名  |              含义              |\n| :------: | :----------------------------: |\n|  $x_0 $  |         原像素横坐标值         |\n|  $y_0 $  |         原像素纵坐标值         |\n|   $x$    |         转换后横坐标值         |\n|   $y$    |         转换后纵坐标值         |\n|  $t_1$   | 转换幅度值，放缩倍数、平移量等 |\n|  $t_2$   | 转换幅度值，放缩倍数、平移量等 |\n| $width $ |        图像水平像素个数        |\n| $height$ |        图像垂直像素个数        |\n| $\\theta$ |         顺时针旋转角度         |\n\n\n\n### 0x01 图像缩放\n\n\n\n转换矩阵：\n\n$$\\left[\n\\begin{matrix}\nx \\\\\\\\\ny \\\\\\\\\n1 \\\\\\\\\n\\end{matrix}\n\\right] =\n\\left[\n\\begin{matrix}\nt_1 & 0 & 0 \\\\\\\\\n0 & t_2 & 0 \\\\\\\\\n0 & 0 & 1\n\\end{matrix}\n\\right]\n\\left[\n\\begin{matrix}\nx_0 \\\\\\\\\ny_0 \\\\\\\\\n1 \\\\\\\\\n\\end{matrix}\n\\right] $$\n\n\n后向映射为：\n\n\n$$\\left[\n\\begin{matrix}\nx_0 \\\\\\\\\ny_0 \\\\\\\\\n1 \\\\\\\\\n\\end{matrix}\n\\right] =\n\\left[\n\\begin{matrix}\n\\frac{1}{t_1} & 0 & 0 \\\\\\\\\n0 & \\frac{1}{t_2} & 0 \\\\\\\\\n0 & 0 & 1\n\\end{matrix}\n\\right]\n\\left[\n\\begin{matrix}\nx \\\\\\\\\ny \\\\\\\\\n1 \\\\\\\\\n\\end{matrix}\n\\right] $$\n\n这样即可求得转换后图像当前坐标的灰度值为多少了。\n\n> 宽×3，高×4\n\n![](dip-transformation/scale.png)\n\n### 0x02 图像平移\n> 向左下平移\n\n\n转换矩阵：\n\n\n$$\\left[\n\\begin{matrix}\nx \\\\\\\\\ny \\\\\\\\\n1 \\\\\\\\\n\\end{matrix}\n\\right] =\n\\left[\n\\begin{matrix}\n1 & 0 & t_1 \\\\\\\\\n0 & 1 & t_2 \\\\\\\\\n0 & 0 & 1\n\\end{matrix}\n\\right]\n\\left[\n\\begin{matrix}\nx_0 \\\\\\\\\ny_0 \\\\\\\\\n1 \\\\\\\\\n\\end{matrix}\n\\right] $$\n\n\n后向映射为：\n\n\n$$\\left[\n\\begin{matrix}\nx_0 \\\\\\\\\ny_0 \\\\\\\\\n1 \\\\\\\\\n\\end{matrix}\n\\right] =\n\\left[\n\\begin{matrix}\n1 & 0 & -t_1 \\\\\\\\\n0 & 1 & -t_2 \\\\\\\\\n0 & 0 & 1\n\\end{matrix}\n\\right]\n\\left[\n\\begin{matrix}\nx \\\\\\\\\ny \\\\\\\\\n1 \\\\\\\\\n\\end{matrix}\n\\right] $$\n\n![](dip-transformation/shift.png)\n\n### 0x03 图像镜像\n\n只展示水平镜像，垂直同理。\n\n转换矩阵：\n\n$$\\left[\n\\begin{matrix}\nx \\\\\\\\\ny \\\\\\\\\n1 \\\\\\\\\n\\end{matrix}\n\\right] =\n\\left[\n\\begin{matrix}\n-1 & 0 & width \\\\\\\\\n0 & 1 & 0 \\\\\\\\\n0 & 0 & 1\n\\end{matrix}\n\\right]\n\\left[\n\\begin{matrix}\nx_0 \\\\\\\\\ny_0 \\\\\\\\\n1 \\\\\\\\\n\\end{matrix}\n\\right] $$\n\n\n后向映射为：\n\n\n\n\n$$\\left[\n\\begin{matrix}\nx_0 \\\\\\\\\ny_0 \\\\\\\\\n1 \\\\\\\\\n\\end{matrix}\n\\right] =\n\\left[\n\\begin{matrix}\n-1 & 0 & width \\\\\\\\\n0 & 1 & 0 \\\\\\\\\n0 & 0 & 1\n\\end{matrix}\n\\right]\n\\left[\n\\begin{matrix}\nx \\\\\\\\\ny \\\\\\\\\n1 \\\\\\\\\n\\end{matrix}\n\\right] $$\n\n\n\n> 水平镜像\n\n![](dip-transformation/x-mirror.png)\n\n> 垂直镜像\n\n![](dip-transformation/y-mirror.png)\n\n### 0x04 图像旋转\n\n转换矩阵：\n\n\n$$\\left[\n\\begin{matrix}\nx \\\\\\\\\ny \\\\\\\\\n1 \\\\\\\\\n\\end{matrix}\n\\right] =\n\\left[\n\\begin{matrix}\n\\cos\\theta & \\sin\\theta & 0 \\\\\\\\\n-\\sin\\theta & \\cos\\theta & 0 \\\\\\\\\n0 & 0 & 1\n\\end{matrix}\n\\right]\n\\left[\n\\begin{matrix}\nx_0 \\\\\\\\\ny_0 \\\\\\\\\n1 \\\\\\\\\n\\end{matrix}\n\\right] $$\n\n\n后向映射为：\n\n\n$$\\left[\n\\begin{matrix}\nx_0 \\\\\\\\\ny_0 \\\\\\\\\n1 \\\\\\\\\n\\end{matrix}\n\\right] =\n\\left[\n\\begin{matrix}\n\\cos\\theta & -\\sin\\theta & 0 \\\\\\\\\n\\sin\\theta & \\cos\\theta & 0 \\\\\\\\\n0 & 0 & 1\n\\end{matrix}\n\\right]\n\\left[\n\\begin{matrix}\nx \\\\\\\\\ny \\\\\\\\\n1 \\\\\\\\\n\\end{matrix}\n\\right] $$\n\n\n> 顺时针旋转45°\n\n![](dip-transformation/rotate.png)\n### 0x05 图像透视\n\n没做。\n\n## 不足\n\n- 未对RGB真彩色图像做变换，原理一样，懒得做\n- 未做透视变换\n- 未使用线性插值方法进行补像素灰度值\n\n\n## 总结\n\n本次实验主要是熟悉图像的基本变换，如果文中有错误，欢迎在评论区指正。请继续关注[DIP，数字图像处理系列文章](/tags/DIP/)！","source":"_posts/dip-transformation.md","raw":"---\ntitle: 图像基本变换\nmathjax: true\ncopyright: true\ncomment: true\ndate: 2019-03-29 09:21:04\ntags:\n- Computer Graphics\n- DIP\ncategories:\n- Computer Science\n- Computer Graphics\n\n---\n\n{% note primary %}\n图像基本变换：缩放、平移、镜像、旋转、透视。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n\n## 前言\n\n本系列文章（DIP，Digital Image Processing），用于记录总结数字图像处理课程的实验内容。目录请参考[DIP系列文章](/tags/DIP/)。\n\n{% note warning no-icon %}\n\n**本次不展示代码，全部代码请查看[GitHub](https://github.com/ScarboroughCoral/DIPModule)**\n\n{% endnote %}\n\n## 题目要求\n\n1. 图像缩放\n2. 图像平移\n3. 图像镜像\n4. 图像旋转\n5. 图像透视（选做就是不做）\n\n\n## 原图（测试图像）\n\n仅对8位灰度图进行处理，RGB真彩色处理同理。\n\n![](dip-transformation/3-3.png)\n\n## 整体思路\n\n空间域处理都是对每个像素进行处理，无非就是做一层映射而已。\n\n利用后向映射进行变换，即**根据转换后图像的像素位置确定转换前的像素位置，得到像素灰度值并赋值给转换后图像像素**。\n\n![](dip-transformation/back.png)\n\n\n## 实验内容\n\n\n\n思路及效果如下：\n\n### 0x00 基本变量表\n\n|  变量名  |              含义              |\n| :------: | :----------------------------: |\n|  $x_0 $  |         原像素横坐标值         |\n|  $y_0 $  |         原像素纵坐标值         |\n|   $x$    |         转换后横坐标值         |\n|   $y$    |         转换后纵坐标值         |\n|  $t_1$   | 转换幅度值，放缩倍数、平移量等 |\n|  $t_2$   | 转换幅度值，放缩倍数、平移量等 |\n| $width $ |        图像水平像素个数        |\n| $height$ |        图像垂直像素个数        |\n| $\\theta$ |         顺时针旋转角度         |\n\n\n\n### 0x01 图像缩放\n\n\n\n转换矩阵：\n\n$$\\left[\n\\begin{matrix}\nx \\\\\\\\\ny \\\\\\\\\n1 \\\\\\\\\n\\end{matrix}\n\\right] =\n\\left[\n\\begin{matrix}\nt_1 & 0 & 0 \\\\\\\\\n0 & t_2 & 0 \\\\\\\\\n0 & 0 & 1\n\\end{matrix}\n\\right]\n\\left[\n\\begin{matrix}\nx_0 \\\\\\\\\ny_0 \\\\\\\\\n1 \\\\\\\\\n\\end{matrix}\n\\right] $$\n\n\n后向映射为：\n\n\n$$\\left[\n\\begin{matrix}\nx_0 \\\\\\\\\ny_0 \\\\\\\\\n1 \\\\\\\\\n\\end{matrix}\n\\right] =\n\\left[\n\\begin{matrix}\n\\frac{1}{t_1} & 0 & 0 \\\\\\\\\n0 & \\frac{1}{t_2} & 0 \\\\\\\\\n0 & 0 & 1\n\\end{matrix}\n\\right]\n\\left[\n\\begin{matrix}\nx \\\\\\\\\ny \\\\\\\\\n1 \\\\\\\\\n\\end{matrix}\n\\right] $$\n\n这样即可求得转换后图像当前坐标的灰度值为多少了。\n\n> 宽×3，高×4\n\n![](dip-transformation/scale.png)\n\n### 0x02 图像平移\n> 向左下平移\n\n\n转换矩阵：\n\n\n$$\\left[\n\\begin{matrix}\nx \\\\\\\\\ny \\\\\\\\\n1 \\\\\\\\\n\\end{matrix}\n\\right] =\n\\left[\n\\begin{matrix}\n1 & 0 & t_1 \\\\\\\\\n0 & 1 & t_2 \\\\\\\\\n0 & 0 & 1\n\\end{matrix}\n\\right]\n\\left[\n\\begin{matrix}\nx_0 \\\\\\\\\ny_0 \\\\\\\\\n1 \\\\\\\\\n\\end{matrix}\n\\right] $$\n\n\n后向映射为：\n\n\n$$\\left[\n\\begin{matrix}\nx_0 \\\\\\\\\ny_0 \\\\\\\\\n1 \\\\\\\\\n\\end{matrix}\n\\right] =\n\\left[\n\\begin{matrix}\n1 & 0 & -t_1 \\\\\\\\\n0 & 1 & -t_2 \\\\\\\\\n0 & 0 & 1\n\\end{matrix}\n\\right]\n\\left[\n\\begin{matrix}\nx \\\\\\\\\ny \\\\\\\\\n1 \\\\\\\\\n\\end{matrix}\n\\right] $$\n\n![](dip-transformation/shift.png)\n\n### 0x03 图像镜像\n\n只展示水平镜像，垂直同理。\n\n转换矩阵：\n\n$$\\left[\n\\begin{matrix}\nx \\\\\\\\\ny \\\\\\\\\n1 \\\\\\\\\n\\end{matrix}\n\\right] =\n\\left[\n\\begin{matrix}\n-1 & 0 & width \\\\\\\\\n0 & 1 & 0 \\\\\\\\\n0 & 0 & 1\n\\end{matrix}\n\\right]\n\\left[\n\\begin{matrix}\nx_0 \\\\\\\\\ny_0 \\\\\\\\\n1 \\\\\\\\\n\\end{matrix}\n\\right] $$\n\n\n后向映射为：\n\n\n\n\n$$\\left[\n\\begin{matrix}\nx_0 \\\\\\\\\ny_0 \\\\\\\\\n1 \\\\\\\\\n\\end{matrix}\n\\right] =\n\\left[\n\\begin{matrix}\n-1 & 0 & width \\\\\\\\\n0 & 1 & 0 \\\\\\\\\n0 & 0 & 1\n\\end{matrix}\n\\right]\n\\left[\n\\begin{matrix}\nx \\\\\\\\\ny \\\\\\\\\n1 \\\\\\\\\n\\end{matrix}\n\\right] $$\n\n\n\n> 水平镜像\n\n![](dip-transformation/x-mirror.png)\n\n> 垂直镜像\n\n![](dip-transformation/y-mirror.png)\n\n### 0x04 图像旋转\n\n转换矩阵：\n\n\n$$\\left[\n\\begin{matrix}\nx \\\\\\\\\ny \\\\\\\\\n1 \\\\\\\\\n\\end{matrix}\n\\right] =\n\\left[\n\\begin{matrix}\n\\cos\\theta & \\sin\\theta & 0 \\\\\\\\\n-\\sin\\theta & \\cos\\theta & 0 \\\\\\\\\n0 & 0 & 1\n\\end{matrix}\n\\right]\n\\left[\n\\begin{matrix}\nx_0 \\\\\\\\\ny_0 \\\\\\\\\n1 \\\\\\\\\n\\end{matrix}\n\\right] $$\n\n\n后向映射为：\n\n\n$$\\left[\n\\begin{matrix}\nx_0 \\\\\\\\\ny_0 \\\\\\\\\n1 \\\\\\\\\n\\end{matrix}\n\\right] =\n\\left[\n\\begin{matrix}\n\\cos\\theta & -\\sin\\theta & 0 \\\\\\\\\n\\sin\\theta & \\cos\\theta & 0 \\\\\\\\\n0 & 0 & 1\n\\end{matrix}\n\\right]\n\\left[\n\\begin{matrix}\nx \\\\\\\\\ny \\\\\\\\\n1 \\\\\\\\\n\\end{matrix}\n\\right] $$\n\n\n> 顺时针旋转45°\n\n![](dip-transformation/rotate.png)\n### 0x05 图像透视\n\n没做。\n\n## 不足\n\n- 未对RGB真彩色图像做变换，原理一样，懒得做\n- 未做透视变换\n- 未使用线性插值方法进行补像素灰度值\n\n\n## 总结\n\n本次实验主要是熟悉图像的基本变换，如果文中有错误，欢迎在评论区指正。请继续关注[DIP，数字图像处理系列文章](/tags/DIP/)！","slug":"dip-transformation","published":1,"updated":"2022-01-06T04:09:12.290Z","_id":"cksq5v7mf001cn0pugwzl1r5h","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note primary\"><p>图像基本变换：缩放、平移、镜像、旋转、透视。</p>\n</div>\n\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本系列文章（DIP，Digital Image Processing），用于记录总结数字图像处理课程的实验内容。目录请参考<a href=\"/tags/DIP/\">DIP系列文章</a>。</p>\n<div class=\"note warning no-icon\"><p><strong>本次不展示代码，全部代码请查看<a href=\"https://github.com/ScarboroughCoral/DIPModule\">GitHub</a></strong></p>\n</div>\n\n<h2 id=\"题目要求\"><a href=\"#题目要求\" class=\"headerlink\" title=\"题目要求\"></a>题目要求</h2><ol>\n<li>图像缩放</li>\n<li>图像平移</li>\n<li>图像镜像</li>\n<li>图像旋转</li>\n<li>图像透视（选做就是不做）</li>\n</ol>\n<h2 id=\"原图（测试图像）\"><a href=\"#原图（测试图像）\" class=\"headerlink\" title=\"原图（测试图像）\"></a>原图（测试图像）</h2><p>仅对8位灰度图进行处理，RGB真彩色处理同理。</p>\n<p><img data-src=\"dip-transformation/3-3.png\"></p>\n<h2 id=\"整体思路\"><a href=\"#整体思路\" class=\"headerlink\" title=\"整体思路\"></a>整体思路</h2><p>空间域处理都是对每个像素进行处理，无非就是做一层映射而已。</p>\n<p>利用后向映射进行变换，即<strong>根据转换后图像的像素位置确定转换前的像素位置，得到像素灰度值并赋值给转换后图像像素</strong>。</p>\n<p><img data-src=\"dip-transformation/back.png\"></p>\n<h2 id=\"实验内容\"><a href=\"#实验内容\" class=\"headerlink\" title=\"实验内容\"></a>实验内容</h2><p>思路及效果如下：</p>\n<h3 id=\"0x00-基本变量表\"><a href=\"#0x00-基本变量表\" class=\"headerlink\" title=\"0x00 基本变量表\"></a>0x00 基本变量表</h3><table>\n<thead>\n<tr>\n<th align=\"center\">变量名</th>\n<th align=\"center\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">$x_0 $</td>\n<td align=\"center\">原像素横坐标值</td>\n</tr>\n<tr>\n<td align=\"center\">$y_0 $</td>\n<td align=\"center\">原像素纵坐标值</td>\n</tr>\n<tr>\n<td align=\"center\">$x$</td>\n<td align=\"center\">转换后横坐标值</td>\n</tr>\n<tr>\n<td align=\"center\">$y$</td>\n<td align=\"center\">转换后纵坐标值</td>\n</tr>\n<tr>\n<td align=\"center\">$t_1$</td>\n<td align=\"center\">转换幅度值，放缩倍数、平移量等</td>\n</tr>\n<tr>\n<td align=\"center\">$t_2$</td>\n<td align=\"center\">转换幅度值，放缩倍数、平移量等</td>\n</tr>\n<tr>\n<td align=\"center\">$width $</td>\n<td align=\"center\">图像水平像素个数</td>\n</tr>\n<tr>\n<td align=\"center\">$height$</td>\n<td align=\"center\">图像垂直像素个数</td>\n</tr>\n<tr>\n<td align=\"center\">$\\theta$</td>\n<td align=\"center\">顺时针旋转角度</td>\n</tr>\n</tbody></table>\n<h3 id=\"0x01-图像缩放\"><a href=\"#0x01-图像缩放\" class=\"headerlink\" title=\"0x01 图像缩放\"></a>0x01 图像缩放</h3><p>转换矩阵：</p>\n<p>$$\\left[<br>\\begin{matrix}<br>x \\\\<br>y \\\\<br>1 \\\\<br>\\end{matrix}<br>\\right] =<br>\\left[<br>\\begin{matrix}<br>t_1 &amp; 0 &amp; 0 \\\\<br>0 &amp; t_2 &amp; 0 \\\\<br>0 &amp; 0 &amp; 1<br>\\end{matrix}<br>\\right]<br>\\left[<br>\\begin{matrix}<br>x_0 \\\\<br>y_0 \\\\<br>1 \\\\<br>\\end{matrix}<br>\\right] $$</p>\n<p>后向映射为：</p>\n<p>$$\\left[<br>\\begin{matrix}<br>x_0 \\\\<br>y_0 \\\\<br>1 \\\\<br>\\end{matrix}<br>\\right] =<br>\\left[<br>\\begin{matrix}<br>\\frac{1}{t_1} &amp; 0 &amp; 0 \\\\<br>0 &amp; \\frac{1}{t_2} &amp; 0 \\\\<br>0 &amp; 0 &amp; 1<br>\\end{matrix}<br>\\right]<br>\\left[<br>\\begin{matrix}<br>x \\\\<br>y \\\\<br>1 \\\\<br>\\end{matrix}<br>\\right] $$</p>\n<p>这样即可求得转换后图像当前坐标的灰度值为多少了。</p>\n<blockquote>\n<p>宽×3，高×4</p>\n</blockquote>\n<p><img data-src=\"dip-transformation/scale.png\"></p>\n<h3 id=\"0x02-图像平移\"><a href=\"#0x02-图像平移\" class=\"headerlink\" title=\"0x02 图像平移\"></a>0x02 图像平移</h3><blockquote>\n<p>向左下平移</p>\n</blockquote>\n<p>转换矩阵：</p>\n<p>$$\\left[<br>\\begin{matrix}<br>x \\\\<br>y \\\\<br>1 \\\\<br>\\end{matrix}<br>\\right] =<br>\\left[<br>\\begin{matrix}<br>1 &amp; 0 &amp; t_1 \\\\<br>0 &amp; 1 &amp; t_2 \\\\<br>0 &amp; 0 &amp; 1<br>\\end{matrix}<br>\\right]<br>\\left[<br>\\begin{matrix}<br>x_0 \\\\<br>y_0 \\\\<br>1 \\\\<br>\\end{matrix}<br>\\right] $$</p>\n<p>后向映射为：</p>\n<p>$$\\left[<br>\\begin{matrix}<br>x_0 \\\\<br>y_0 \\\\<br>1 \\\\<br>\\end{matrix}<br>\\right] =<br>\\left[<br>\\begin{matrix}<br>1 &amp; 0 &amp; -t_1 \\\\<br>0 &amp; 1 &amp; -t_2 \\\\<br>0 &amp; 0 &amp; 1<br>\\end{matrix}<br>\\right]<br>\\left[<br>\\begin{matrix}<br>x \\\\<br>y \\\\<br>1 \\\\<br>\\end{matrix}<br>\\right] $$</p>\n<p><img data-src=\"dip-transformation/shift.png\"></p>\n<h3 id=\"0x03-图像镜像\"><a href=\"#0x03-图像镜像\" class=\"headerlink\" title=\"0x03 图像镜像\"></a>0x03 图像镜像</h3><p>只展示水平镜像，垂直同理。</p>\n<p>转换矩阵：</p>\n<p>$$\\left[<br>\\begin{matrix}<br>x \\\\<br>y \\\\<br>1 \\\\<br>\\end{matrix}<br>\\right] =<br>\\left[<br>\\begin{matrix}<br>-1 &amp; 0 &amp; width \\\\<br>0 &amp; 1 &amp; 0 \\\\<br>0 &amp; 0 &amp; 1<br>\\end{matrix}<br>\\right]<br>\\left[<br>\\begin{matrix}<br>x_0 \\\\<br>y_0 \\\\<br>1 \\\\<br>\\end{matrix}<br>\\right] $$</p>\n<p>后向映射为：</p>\n<p>$$\\left[<br>\\begin{matrix}<br>x_0 \\\\<br>y_0 \\\\<br>1 \\\\<br>\\end{matrix}<br>\\right] =<br>\\left[<br>\\begin{matrix}<br>-1 &amp; 0 &amp; width \\\\<br>0 &amp; 1 &amp; 0 \\\\<br>0 &amp; 0 &amp; 1<br>\\end{matrix}<br>\\right]<br>\\left[<br>\\begin{matrix}<br>x \\\\<br>y \\\\<br>1 \\\\<br>\\end{matrix}<br>\\right] $$</p>\n<blockquote>\n<p>水平镜像</p>\n</blockquote>\n<p><img data-src=\"dip-transformation/x-mirror.png\"></p>\n<blockquote>\n<p>垂直镜像</p>\n</blockquote>\n<p><img data-src=\"dip-transformation/y-mirror.png\"></p>\n<h3 id=\"0x04-图像旋转\"><a href=\"#0x04-图像旋转\" class=\"headerlink\" title=\"0x04 图像旋转\"></a>0x04 图像旋转</h3><p>转换矩阵：</p>\n<p>$$\\left[<br>\\begin{matrix}<br>x \\\\<br>y \\\\<br>1 \\\\<br>\\end{matrix}<br>\\right] =<br>\\left[<br>\\begin{matrix}<br>\\cos\\theta &amp; \\sin\\theta &amp; 0 \\\\<br>-\\sin\\theta &amp; \\cos\\theta &amp; 0 \\\\<br>0 &amp; 0 &amp; 1<br>\\end{matrix}<br>\\right]<br>\\left[<br>\\begin{matrix}<br>x_0 \\\\<br>y_0 \\\\<br>1 \\\\<br>\\end{matrix}<br>\\right] $$</p>\n<p>后向映射为：</p>\n<p>$$\\left[<br>\\begin{matrix}<br>x_0 \\\\<br>y_0 \\\\<br>1 \\\\<br>\\end{matrix}<br>\\right] =<br>\\left[<br>\\begin{matrix}<br>\\cos\\theta &amp; -\\sin\\theta &amp; 0 \\\\<br>\\sin\\theta &amp; \\cos\\theta &amp; 0 \\\\<br>0 &amp; 0 &amp; 1<br>\\end{matrix}<br>\\right]<br>\\left[<br>\\begin{matrix}<br>x \\\\<br>y \\\\<br>1 \\\\<br>\\end{matrix}<br>\\right] $$</p>\n<blockquote>\n<p>顺时针旋转45°</p>\n</blockquote>\n<p><img data-src=\"dip-transformation/rotate.png\"></p>\n<h3 id=\"0x05-图像透视\"><a href=\"#0x05-图像透视\" class=\"headerlink\" title=\"0x05 图像透视\"></a>0x05 图像透视</h3><p>没做。</p>\n<h2 id=\"不足\"><a href=\"#不足\" class=\"headerlink\" title=\"不足\"></a>不足</h2><ul>\n<li>未对RGB真彩色图像做变换，原理一样，懒得做</li>\n<li>未做透视变换</li>\n<li>未使用线性插值方法进行补像素灰度值</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本次实验主要是熟悉图像的基本变换，如果文中有错误，欢迎在评论区指正。请继续关注<a href=\"/tags/DIP/\">DIP，数字图像处理系列文章</a>！</p>\n","site":{"data":{}},"excerpt":"<div class=\"note primary\"><p>图像基本变换：缩放、平移、镜像、旋转、透视。</p>\n</div>","more":"<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本系列文章（DIP，Digital Image Processing），用于记录总结数字图像处理课程的实验内容。目录请参考<a href=\"/tags/DIP/\">DIP系列文章</a>。</p>\n<div class=\"note warning no-icon\"><p><strong>本次不展示代码，全部代码请查看<a href=\"https://github.com/ScarboroughCoral/DIPModule\">GitHub</a></strong></p>\n</div>\n\n<h2 id=\"题目要求\"><a href=\"#题目要求\" class=\"headerlink\" title=\"题目要求\"></a>题目要求</h2><ol>\n<li>图像缩放</li>\n<li>图像平移</li>\n<li>图像镜像</li>\n<li>图像旋转</li>\n<li>图像透视（选做就是不做）</li>\n</ol>\n<h2 id=\"原图（测试图像）\"><a href=\"#原图（测试图像）\" class=\"headerlink\" title=\"原图（测试图像）\"></a>原图（测试图像）</h2><p>仅对8位灰度图进行处理，RGB真彩色处理同理。</p>\n<p><img data-src=\"dip-transformation/3-3.png\"></p>\n<h2 id=\"整体思路\"><a href=\"#整体思路\" class=\"headerlink\" title=\"整体思路\"></a>整体思路</h2><p>空间域处理都是对每个像素进行处理，无非就是做一层映射而已。</p>\n<p>利用后向映射进行变换，即<strong>根据转换后图像的像素位置确定转换前的像素位置，得到像素灰度值并赋值给转换后图像像素</strong>。</p>\n<p><img data-src=\"dip-transformation/back.png\"></p>\n<h2 id=\"实验内容\"><a href=\"#实验内容\" class=\"headerlink\" title=\"实验内容\"></a>实验内容</h2><p>思路及效果如下：</p>\n<h3 id=\"0x00-基本变量表\"><a href=\"#0x00-基本变量表\" class=\"headerlink\" title=\"0x00 基本变量表\"></a>0x00 基本变量表</h3><table>\n<thead>\n<tr>\n<th align=\"center\">变量名</th>\n<th align=\"center\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">$x_0 $</td>\n<td align=\"center\">原像素横坐标值</td>\n</tr>\n<tr>\n<td align=\"center\">$y_0 $</td>\n<td align=\"center\">原像素纵坐标值</td>\n</tr>\n<tr>\n<td align=\"center\">$x$</td>\n<td align=\"center\">转换后横坐标值</td>\n</tr>\n<tr>\n<td align=\"center\">$y$</td>\n<td align=\"center\">转换后纵坐标值</td>\n</tr>\n<tr>\n<td align=\"center\">$t_1$</td>\n<td align=\"center\">转换幅度值，放缩倍数、平移量等</td>\n</tr>\n<tr>\n<td align=\"center\">$t_2$</td>\n<td align=\"center\">转换幅度值，放缩倍数、平移量等</td>\n</tr>\n<tr>\n<td align=\"center\">$width $</td>\n<td align=\"center\">图像水平像素个数</td>\n</tr>\n<tr>\n<td align=\"center\">$height$</td>\n<td align=\"center\">图像垂直像素个数</td>\n</tr>\n<tr>\n<td align=\"center\">$\\theta$</td>\n<td align=\"center\">顺时针旋转角度</td>\n</tr>\n</tbody></table>\n<h3 id=\"0x01-图像缩放\"><a href=\"#0x01-图像缩放\" class=\"headerlink\" title=\"0x01 图像缩放\"></a>0x01 图像缩放</h3><p>转换矩阵：</p>\n<p>$$\\left[<br>\\begin{matrix}<br>x \\\\<br>y \\\\<br>1 \\\\<br>\\end{matrix}<br>\\right] =<br>\\left[<br>\\begin{matrix}<br>t_1 &amp; 0 &amp; 0 \\\\<br>0 &amp; t_2 &amp; 0 \\\\<br>0 &amp; 0 &amp; 1<br>\\end{matrix}<br>\\right]<br>\\left[<br>\\begin{matrix}<br>x_0 \\\\<br>y_0 \\\\<br>1 \\\\<br>\\end{matrix}<br>\\right] $$</p>\n<p>后向映射为：</p>\n<p>$$\\left[<br>\\begin{matrix}<br>x_0 \\\\<br>y_0 \\\\<br>1 \\\\<br>\\end{matrix}<br>\\right] =<br>\\left[<br>\\begin{matrix}<br>\\frac{1}{t_1} &amp; 0 &amp; 0 \\\\<br>0 &amp; \\frac{1}{t_2} &amp; 0 \\\\<br>0 &amp; 0 &amp; 1<br>\\end{matrix}<br>\\right]<br>\\left[<br>\\begin{matrix}<br>x \\\\<br>y \\\\<br>1 \\\\<br>\\end{matrix}<br>\\right] $$</p>\n<p>这样即可求得转换后图像当前坐标的灰度值为多少了。</p>\n<blockquote>\n<p>宽×3，高×4</p>\n</blockquote>\n<p><img data-src=\"dip-transformation/scale.png\"></p>\n<h3 id=\"0x02-图像平移\"><a href=\"#0x02-图像平移\" class=\"headerlink\" title=\"0x02 图像平移\"></a>0x02 图像平移</h3><blockquote>\n<p>向左下平移</p>\n</blockquote>\n<p>转换矩阵：</p>\n<p>$$\\left[<br>\\begin{matrix}<br>x \\\\<br>y \\\\<br>1 \\\\<br>\\end{matrix}<br>\\right] =<br>\\left[<br>\\begin{matrix}<br>1 &amp; 0 &amp; t_1 \\\\<br>0 &amp; 1 &amp; t_2 \\\\<br>0 &amp; 0 &amp; 1<br>\\end{matrix}<br>\\right]<br>\\left[<br>\\begin{matrix}<br>x_0 \\\\<br>y_0 \\\\<br>1 \\\\<br>\\end{matrix}<br>\\right] $$</p>\n<p>后向映射为：</p>\n<p>$$\\left[<br>\\begin{matrix}<br>x_0 \\\\<br>y_0 \\\\<br>1 \\\\<br>\\end{matrix}<br>\\right] =<br>\\left[<br>\\begin{matrix}<br>1 &amp; 0 &amp; -t_1 \\\\<br>0 &amp; 1 &amp; -t_2 \\\\<br>0 &amp; 0 &amp; 1<br>\\end{matrix}<br>\\right]<br>\\left[<br>\\begin{matrix}<br>x \\\\<br>y \\\\<br>1 \\\\<br>\\end{matrix}<br>\\right] $$</p>\n<p><img data-src=\"dip-transformation/shift.png\"></p>\n<h3 id=\"0x03-图像镜像\"><a href=\"#0x03-图像镜像\" class=\"headerlink\" title=\"0x03 图像镜像\"></a>0x03 图像镜像</h3><p>只展示水平镜像，垂直同理。</p>\n<p>转换矩阵：</p>\n<p>$$\\left[<br>\\begin{matrix}<br>x \\\\<br>y \\\\<br>1 \\\\<br>\\end{matrix}<br>\\right] =<br>\\left[<br>\\begin{matrix}<br>-1 &amp; 0 &amp; width \\\\<br>0 &amp; 1 &amp; 0 \\\\<br>0 &amp; 0 &amp; 1<br>\\end{matrix}<br>\\right]<br>\\left[<br>\\begin{matrix}<br>x_0 \\\\<br>y_0 \\\\<br>1 \\\\<br>\\end{matrix}<br>\\right] $$</p>\n<p>后向映射为：</p>\n<p>$$\\left[<br>\\begin{matrix}<br>x_0 \\\\<br>y_0 \\\\<br>1 \\\\<br>\\end{matrix}<br>\\right] =<br>\\left[<br>\\begin{matrix}<br>-1 &amp; 0 &amp; width \\\\<br>0 &amp; 1 &amp; 0 \\\\<br>0 &amp; 0 &amp; 1<br>\\end{matrix}<br>\\right]<br>\\left[<br>\\begin{matrix}<br>x \\\\<br>y \\\\<br>1 \\\\<br>\\end{matrix}<br>\\right] $$</p>\n<blockquote>\n<p>水平镜像</p>\n</blockquote>\n<p><img data-src=\"dip-transformation/x-mirror.png\"></p>\n<blockquote>\n<p>垂直镜像</p>\n</blockquote>\n<p><img data-src=\"dip-transformation/y-mirror.png\"></p>\n<h3 id=\"0x04-图像旋转\"><a href=\"#0x04-图像旋转\" class=\"headerlink\" title=\"0x04 图像旋转\"></a>0x04 图像旋转</h3><p>转换矩阵：</p>\n<p>$$\\left[<br>\\begin{matrix}<br>x \\\\<br>y \\\\<br>1 \\\\<br>\\end{matrix}<br>\\right] =<br>\\left[<br>\\begin{matrix}<br>\\cos\\theta &amp; \\sin\\theta &amp; 0 \\\\<br>-\\sin\\theta &amp; \\cos\\theta &amp; 0 \\\\<br>0 &amp; 0 &amp; 1<br>\\end{matrix}<br>\\right]<br>\\left[<br>\\begin{matrix}<br>x_0 \\\\<br>y_0 \\\\<br>1 \\\\<br>\\end{matrix}<br>\\right] $$</p>\n<p>后向映射为：</p>\n<p>$$\\left[<br>\\begin{matrix}<br>x_0 \\\\<br>y_0 \\\\<br>1 \\\\<br>\\end{matrix}<br>\\right] =<br>\\left[<br>\\begin{matrix}<br>\\cos\\theta &amp; -\\sin\\theta &amp; 0 \\\\<br>\\sin\\theta &amp; \\cos\\theta &amp; 0 \\\\<br>0 &amp; 0 &amp; 1<br>\\end{matrix}<br>\\right]<br>\\left[<br>\\begin{matrix}<br>x \\\\<br>y \\\\<br>1 \\\\<br>\\end{matrix}<br>\\right] $$</p>\n<blockquote>\n<p>顺时针旋转45°</p>\n</blockquote>\n<p><img data-src=\"dip-transformation/rotate.png\"></p>\n<h3 id=\"0x05-图像透视\"><a href=\"#0x05-图像透视\" class=\"headerlink\" title=\"0x05 图像透视\"></a>0x05 图像透视</h3><p>没做。</p>\n<h2 id=\"不足\"><a href=\"#不足\" class=\"headerlink\" title=\"不足\"></a>不足</h2><ul>\n<li>未对RGB真彩色图像做变换，原理一样，懒得做</li>\n<li>未做透视变换</li>\n<li>未使用线性插值方法进行补像素灰度值</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本次实验主要是熟悉图像的基本变换，如果文中有错误，欢迎在评论区指正。请继续关注<a href=\"/tags/DIP/\">DIP，数字图像处理系列文章</a>！</p>"},{"title":"多容器APP之Compose学习笔记(二)","date":"2018-03-07T05:07:14.000Z","_content":"\n\n{% note default %}\n人类善用工具，是因为懒。\n{% endnote %}\n\n<!-- more -->\n\n### 前言\n\n已经不能称之为学习笔记了，因为官方文档实在是枯燥，于是我就直接对着某个实例上了。本次我搭建了一个可以复用的环境，`Mysql+Tomcat+Nginx`可能这样搭配有点不合理，或许，毕竟对这方面了解的不多，不过搭建出来确实能用。而且能够复用，你只需要将你的JavaWeb工程打包成War文件放到Tomcat的webapps目录下就行了。\n\n### Compose服务配置 \n\n这个环境中需要三层服务，一是数据库层，二是app层，三是nginx用作代理层。因为是比较小的项目所以没有做反向代理的配置，但是此环境可用于扩展，将Tomcat部署到不同的模拟服务器下，并用nginx反向代理。这是可扩展的。下面是我的目录结构：\n\n```\nenv_template\n│   \n│   docker-compose.yml\n│\n└───lostfound\n│   │   \n│   │   Dockerfile\n│   \n└───nginx\n    │   \n    │   nginx.conf\n    │   Dockerfile\n```\n\n服务配置使用默认名为docker-compose.yml的配置文件来配置的。下面是我的配置文件\n```yaml\nversion: '2'\nnetworks:\n  lostfound:\nservices:\n  lostfound:\n    build: lostfound\n    networks:\n      - lostfound\n    volumes:\n      - $PWD/lostfound/webapps:/usr/local/tomcat/webapps\n    depends_on:\n      - db\n    ports:\n      - \"8080:8080\"\n  nginx:\n    build: nginx\n    networks:\n      - lostfound\n    depends_on:\n      - lostfound\n    ports:\n      - \"80:80\"\n  db:\n    image: \"mysql:5.7.15\"\n    networks:\n      - lostfound \n    environment:\n      MYSQL_ROOT_PASSWORD: root\n      MYSQL_USER: lostfound\n      MYSQL_PASSWORD: ******\n    volumes:\n      - $PWD/data:/var/lib/mysql\n    ports:\n      - \"3306:3306\"\n\n```\n\n简单说一下，三层服务配置。三项服务在同一个网络`lostfound`内，lostfound层就是app层，是从工程目录下的lostfound文件夹构建的，里面就是tomcat，端口映射8080。为了容易部署我的web应用程序，我将lostfound层的`tomcat/webapps`挂载到本地。然后app层依赖于数据库层，等待数据库层构建运行，数据库层应用了Mysql5.7里面有一些环境的配置，另外为了使得数据持久化，我将容器中的保存数据的文件夹也挂载到本地，端口映射为3306，**如果你的3306端口被占用，时会报错的，你需要停止你的3306端口的应用程序，一般来说是Mysql服务**。使用`sudo service mysql stop`来结束本地的mysql服务。然后是nginx服务，这层服务对于这种小工程来说不是必需的，但是为了可扩展我就加上了。端口映射为默认端口80。\n\n### Tomcat 构建\n\n这个比较简单，就是`pull`一个镜像，并暴露端口8080。这是其Dockerfile文件：\n\n```Dockerfile\nFROM tomcat\nEXPOSE 8080\n```\n\n### Nginx 构建\n\n这个也是`pull`一个镜像，然后将代理设置一下。\n\n- Dockerfile\n```Dockerfile\nFROM nginx\nCOPY nginx.conf /etc/nginx/nginx.conf\nEXPOSE 80\n```\n- nginx.conf\n```nginx\nworker_processes 4;\nevents {worker_connections 1024;}\nhttp {\n    server {\n        listen 80;\n        location / {\n            proxy_pass http://lostfound:8080;\n        }\n    }\n}\n```\n\n> 将tomcat运行的webapp代理到nginx。\n\n\n### 其他\n\n> 运行此环境需要你安装以下工具：\n- Docker\n- Docker-Compose\n\n### 运行\n\n```bash\ndocker-compose up\n```\n> 打开浏览器，地址栏内输入`localhost/yourappname`\n\n### Github地址\n\n> https://github.com/ScarboroughCoral/SE_Docker\n\n","source":"_posts/docker-two.md","raw":"---\ntitle: 多容器APP之Compose学习笔记(二)\ndate: 2018-03-07 13:07:14\n\ntags:\n- Docker\n- Docker-Compose\ncategories:\n- Tools\n- Docker\n---\n\n\n{% note default %}\n人类善用工具，是因为懒。\n{% endnote %}\n\n<!-- more -->\n\n### 前言\n\n已经不能称之为学习笔记了，因为官方文档实在是枯燥，于是我就直接对着某个实例上了。本次我搭建了一个可以复用的环境，`Mysql+Tomcat+Nginx`可能这样搭配有点不合理，或许，毕竟对这方面了解的不多，不过搭建出来确实能用。而且能够复用，你只需要将你的JavaWeb工程打包成War文件放到Tomcat的webapps目录下就行了。\n\n### Compose服务配置 \n\n这个环境中需要三层服务，一是数据库层，二是app层，三是nginx用作代理层。因为是比较小的项目所以没有做反向代理的配置，但是此环境可用于扩展，将Tomcat部署到不同的模拟服务器下，并用nginx反向代理。这是可扩展的。下面是我的目录结构：\n\n```\nenv_template\n│   \n│   docker-compose.yml\n│\n└───lostfound\n│   │   \n│   │   Dockerfile\n│   \n└───nginx\n    │   \n    │   nginx.conf\n    │   Dockerfile\n```\n\n服务配置使用默认名为docker-compose.yml的配置文件来配置的。下面是我的配置文件\n```yaml\nversion: '2'\nnetworks:\n  lostfound:\nservices:\n  lostfound:\n    build: lostfound\n    networks:\n      - lostfound\n    volumes:\n      - $PWD/lostfound/webapps:/usr/local/tomcat/webapps\n    depends_on:\n      - db\n    ports:\n      - \"8080:8080\"\n  nginx:\n    build: nginx\n    networks:\n      - lostfound\n    depends_on:\n      - lostfound\n    ports:\n      - \"80:80\"\n  db:\n    image: \"mysql:5.7.15\"\n    networks:\n      - lostfound \n    environment:\n      MYSQL_ROOT_PASSWORD: root\n      MYSQL_USER: lostfound\n      MYSQL_PASSWORD: ******\n    volumes:\n      - $PWD/data:/var/lib/mysql\n    ports:\n      - \"3306:3306\"\n\n```\n\n简单说一下，三层服务配置。三项服务在同一个网络`lostfound`内，lostfound层就是app层，是从工程目录下的lostfound文件夹构建的，里面就是tomcat，端口映射8080。为了容易部署我的web应用程序，我将lostfound层的`tomcat/webapps`挂载到本地。然后app层依赖于数据库层，等待数据库层构建运行，数据库层应用了Mysql5.7里面有一些环境的配置，另外为了使得数据持久化，我将容器中的保存数据的文件夹也挂载到本地，端口映射为3306，**如果你的3306端口被占用，时会报错的，你需要停止你的3306端口的应用程序，一般来说是Mysql服务**。使用`sudo service mysql stop`来结束本地的mysql服务。然后是nginx服务，这层服务对于这种小工程来说不是必需的，但是为了可扩展我就加上了。端口映射为默认端口80。\n\n### Tomcat 构建\n\n这个比较简单，就是`pull`一个镜像，并暴露端口8080。这是其Dockerfile文件：\n\n```Dockerfile\nFROM tomcat\nEXPOSE 8080\n```\n\n### Nginx 构建\n\n这个也是`pull`一个镜像，然后将代理设置一下。\n\n- Dockerfile\n```Dockerfile\nFROM nginx\nCOPY nginx.conf /etc/nginx/nginx.conf\nEXPOSE 80\n```\n- nginx.conf\n```nginx\nworker_processes 4;\nevents {worker_connections 1024;}\nhttp {\n    server {\n        listen 80;\n        location / {\n            proxy_pass http://lostfound:8080;\n        }\n    }\n}\n```\n\n> 将tomcat运行的webapp代理到nginx。\n\n\n### 其他\n\n> 运行此环境需要你安装以下工具：\n- Docker\n- Docker-Compose\n\n### 运行\n\n```bash\ndocker-compose up\n```\n> 打开浏览器，地址栏内输入`localhost/yourappname`\n\n### Github地址\n\n> https://github.com/ScarboroughCoral/SE_Docker\n\n","slug":"docker-two","published":1,"updated":"2022-01-06T04:09:12.324Z","_id":"cksq5v7mg001hn0pubzkrgp6i","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note default\"><p>人类善用工具，是因为懒。</p>\n</div>\n\n<span id=\"more\"></span>\n\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>已经不能称之为学习笔记了，因为官方文档实在是枯燥，于是我就直接对着某个实例上了。本次我搭建了一个可以复用的环境，<code>Mysql+Tomcat+Nginx</code>可能这样搭配有点不合理，或许，毕竟对这方面了解的不多，不过搭建出来确实能用。而且能够复用，你只需要将你的JavaWeb工程打包成War文件放到Tomcat的webapps目录下就行了。</p>\n<h3 id=\"Compose服务配置\"><a href=\"#Compose服务配置\" class=\"headerlink\" title=\"Compose服务配置\"></a>Compose服务配置</h3><p>这个环境中需要三层服务，一是数据库层，二是app层，三是nginx用作代理层。因为是比较小的项目所以没有做反向代理的配置，但是此环境可用于扩展，将Tomcat部署到不同的模拟服务器下，并用nginx反向代理。这是可扩展的。下面是我的目录结构：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">env_template</span><br><span class=\"line\">│   </span><br><span class=\"line\">│   docker-compose.yml</span><br><span class=\"line\">│</span><br><span class=\"line\">└───lostfound</span><br><span class=\"line\">│   │   </span><br><span class=\"line\">│   │   Dockerfile</span><br><span class=\"line\">│   </span><br><span class=\"line\">└───nginx</span><br><span class=\"line\">    │   </span><br><span class=\"line\">    │   nginx.conf</span><br><span class=\"line\">    │   Dockerfile</span><br></pre></td></tr></table></figure>\n\n<p>服务配置使用默认名为docker-compose.yml的配置文件来配置的。下面是我的配置文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;2&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\">  <span class=\"attr\">lostfound:</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">lostfound:</span></span><br><span class=\"line\">    <span class=\"attr\">build:</span> <span class=\"string\">lostfound</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">lostfound</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">$PWD/lostfound/webapps:/usr/local/tomcat/webapps</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">db</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;8080:8080&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">nginx:</span></span><br><span class=\"line\">    <span class=\"attr\">build:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">lostfound</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">lostfound</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;80:80&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">db:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">&quot;mysql:5.7.15&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">lostfound</span> </span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">MYSQL_ROOT_PASSWORD:</span> <span class=\"string\">root</span></span><br><span class=\"line\">      <span class=\"attr\">MYSQL_USER:</span> <span class=\"string\">lostfound</span></span><br><span class=\"line\">      <span class=\"attr\">MYSQL_PASSWORD:</span> <span class=\"string\">******</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">$PWD/data:/var/lib/mysql</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;3306:3306&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>简单说一下，三层服务配置。三项服务在同一个网络<code>lostfound</code>内，lostfound层就是app层，是从工程目录下的lostfound文件夹构建的，里面就是tomcat，端口映射8080。为了容易部署我的web应用程序，我将lostfound层的<code>tomcat/webapps</code>挂载到本地。然后app层依赖于数据库层，等待数据库层构建运行，数据库层应用了Mysql5.7里面有一些环境的配置，另外为了使得数据持久化，我将容器中的保存数据的文件夹也挂载到本地，端口映射为3306，<strong>如果你的3306端口被占用，时会报错的，你需要停止你的3306端口的应用程序，一般来说是Mysql服务</strong>。使用<code>sudo service mysql stop</code>来结束本地的mysql服务。然后是nginx服务，这层服务对于这种小工程来说不是必需的，但是为了可扩展我就加上了。端口映射为默认端口80。</p>\n<h3 id=\"Tomcat-构建\"><a href=\"#Tomcat-构建\" class=\"headerlink\" title=\"Tomcat 构建\"></a>Tomcat 构建</h3><p>这个比较简单，就是<code>pull</code>一个镜像，并暴露端口8080。这是其Dockerfile文件：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> tomcat</span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">8080</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Nginx-构建\"><a href=\"#Nginx-构建\" class=\"headerlink\" title=\"Nginx 构建\"></a>Nginx 构建</h3><p>这个也是<code>pull</code>一个镜像，然后将代理设置一下。</p>\n<ul>\n<li>Dockerfile<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> nginx</span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> nginx.conf /etc/nginx/nginx.conf</span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure></li>\n<li>nginx.conf<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">worker_processes</span> <span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"section\">events</span> &#123;<span class=\"attribute\">worker_connections</span> <span class=\"number\">1024</span>;&#125;</span><br><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\">    <span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">        <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_pass</span> http://lostfound:8080;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<blockquote>\n<p>将tomcat运行的webapp代理到nginx。</p>\n</blockquote>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><blockquote>\n<p>运行此环境需要你安装以下工具：</p>\n</blockquote>\n<ul>\n<li>Docker</li>\n<li>Docker-Compose</li>\n</ul>\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>打开浏览器，地址栏内输入<code>localhost/yourappname</code></p>\n</blockquote>\n<h3 id=\"Github地址\"><a href=\"#Github地址\" class=\"headerlink\" title=\"Github地址\"></a>Github地址</h3><blockquote>\n<p><a href=\"https://github.com/ScarboroughCoral/SE_Docker\">https://github.com/ScarboroughCoral/SE_Docker</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<div class=\"note default\"><p>人类善用工具，是因为懒。</p>\n</div>","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>已经不能称之为学习笔记了，因为官方文档实在是枯燥，于是我就直接对着某个实例上了。本次我搭建了一个可以复用的环境，<code>Mysql+Tomcat+Nginx</code>可能这样搭配有点不合理，或许，毕竟对这方面了解的不多，不过搭建出来确实能用。而且能够复用，你只需要将你的JavaWeb工程打包成War文件放到Tomcat的webapps目录下就行了。</p>\n<h3 id=\"Compose服务配置\"><a href=\"#Compose服务配置\" class=\"headerlink\" title=\"Compose服务配置\"></a>Compose服务配置</h3><p>这个环境中需要三层服务，一是数据库层，二是app层，三是nginx用作代理层。因为是比较小的项目所以没有做反向代理的配置，但是此环境可用于扩展，将Tomcat部署到不同的模拟服务器下，并用nginx反向代理。这是可扩展的。下面是我的目录结构：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">env_template</span><br><span class=\"line\">│   </span><br><span class=\"line\">│   docker-compose.yml</span><br><span class=\"line\">│</span><br><span class=\"line\">└───lostfound</span><br><span class=\"line\">│   │   </span><br><span class=\"line\">│   │   Dockerfile</span><br><span class=\"line\">│   </span><br><span class=\"line\">└───nginx</span><br><span class=\"line\">    │   </span><br><span class=\"line\">    │   nginx.conf</span><br><span class=\"line\">    │   Dockerfile</span><br></pre></td></tr></table></figure>\n\n<p>服务配置使用默认名为docker-compose.yml的配置文件来配置的。下面是我的配置文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;2&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\">  <span class=\"attr\">lostfound:</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">lostfound:</span></span><br><span class=\"line\">    <span class=\"attr\">build:</span> <span class=\"string\">lostfound</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">lostfound</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">$PWD/lostfound/webapps:/usr/local/tomcat/webapps</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">db</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;8080:8080&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">nginx:</span></span><br><span class=\"line\">    <span class=\"attr\">build:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">lostfound</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">lostfound</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;80:80&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">db:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">&quot;mysql:5.7.15&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">lostfound</span> </span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">MYSQL_ROOT_PASSWORD:</span> <span class=\"string\">root</span></span><br><span class=\"line\">      <span class=\"attr\">MYSQL_USER:</span> <span class=\"string\">lostfound</span></span><br><span class=\"line\">      <span class=\"attr\">MYSQL_PASSWORD:</span> <span class=\"string\">******</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">$PWD/data:/var/lib/mysql</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;3306:3306&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>简单说一下，三层服务配置。三项服务在同一个网络<code>lostfound</code>内，lostfound层就是app层，是从工程目录下的lostfound文件夹构建的，里面就是tomcat，端口映射8080。为了容易部署我的web应用程序，我将lostfound层的<code>tomcat/webapps</code>挂载到本地。然后app层依赖于数据库层，等待数据库层构建运行，数据库层应用了Mysql5.7里面有一些环境的配置，另外为了使得数据持久化，我将容器中的保存数据的文件夹也挂载到本地，端口映射为3306，<strong>如果你的3306端口被占用，时会报错的，你需要停止你的3306端口的应用程序，一般来说是Mysql服务</strong>。使用<code>sudo service mysql stop</code>来结束本地的mysql服务。然后是nginx服务，这层服务对于这种小工程来说不是必需的，但是为了可扩展我就加上了。端口映射为默认端口80。</p>\n<h3 id=\"Tomcat-构建\"><a href=\"#Tomcat-构建\" class=\"headerlink\" title=\"Tomcat 构建\"></a>Tomcat 构建</h3><p>这个比较简单，就是<code>pull</code>一个镜像，并暴露端口8080。这是其Dockerfile文件：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> tomcat</span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">8080</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Nginx-构建\"><a href=\"#Nginx-构建\" class=\"headerlink\" title=\"Nginx 构建\"></a>Nginx 构建</h3><p>这个也是<code>pull</code>一个镜像，然后将代理设置一下。</p>\n<ul>\n<li>Dockerfile<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> nginx</span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> nginx.conf /etc/nginx/nginx.conf</span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure></li>\n<li>nginx.conf<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">worker_processes</span> <span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"section\">events</span> &#123;<span class=\"attribute\">worker_connections</span> <span class=\"number\">1024</span>;&#125;</span><br><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\">    <span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">        <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_pass</span> http://lostfound:8080;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<blockquote>\n<p>将tomcat运行的webapp代理到nginx。</p>\n</blockquote>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><blockquote>\n<p>运行此环境需要你安装以下工具：</p>\n</blockquote>\n<ul>\n<li>Docker</li>\n<li>Docker-Compose</li>\n</ul>\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>打开浏览器，地址栏内输入<code>localhost/yourappname</code></p>\n</blockquote>\n<h3 id=\"Github地址\"><a href=\"#Github地址\" class=\"headerlink\" title=\"Github地址\"></a>Github地址</h3><blockquote>\n<p><a href=\"https://github.com/ScarboroughCoral/SE_Docker\">https://github.com/ScarboroughCoral/SE_Docker</a></p>\n</blockquote>"},{"title":"Docker入门思考","date":"2018-02-15T13:39:34.000Z","_content":"\n\n{% note default %}\n人类善用工具，是因为懒。\n{% endnote %}\n\n<!-- more -->\n### Docker的本地博客\n\n> 这是我用组合镜像工具搭建的一个本地博客，用到了nginx反向代理服务器，ghost博客镜像（npm包管理），还一个mysql镜像。\n![](docker-one/docker.png)\n\n### 前言\n\n> 最近弄了一下自己的[个人网站](http://scarboroughcoral.top)和博客，花了2块钱买了一年的域名。域名解析github page太让人欲罢不能，现在想来就吐血。这篇文章主要是写最近使用的一项技术，感觉逼格真高。但更重要的是非常方便。我猜测docker可能是以后老师检查课设的重要手段之一，嘘，猜测。从一开始学习使用，到搭建一个本地博客。这`docker`果然是个好东西。\n\n### 拿来就用，不依赖第三方环境\n\n> 就是这样，只要你的电脑上安装上docker，并且在[Docker Hub](https://hub.docker.com/)上有一个账号，你就可以从上面下载镜像并跑起来。正因如此，童鞋们可以将自己的课设通过docker打造镜像上传到`Docker Hub`上供老师们欣赏。不想原来那样，将自己的源代码打包发给老师，老师能不能运行起来都难说。\n\n### 不同于虚拟机\n\n> 我们知道虚拟机非常的大，一个就论G之算，而Docker镜像，往往你所需要的非常精简，甚者是说这镜像完全是为你打造的，你是需要将相应的文件加入其中，二次打造，就非常完美了，可以说是非常OK了！\n\n### 概念\n\n> 上次IBM讲座可以说是没怎么听，全程王者荣耀（坏笑）。对一些概念一知半解，比如说镜像和容器，仓库什么的。\n\n#### 镜像和容器\n\n> 个人理解，`镜像是死的，容器是活的`。就类似于虚拟机一样，你安装时需要的便是镜像，当你运行起来时对其文件进行操作，那便成了你挥洒笔墨的容器。程序和进程也是类似。\n\n#### 仓库\n\n> Docker仓库分为本地仓库和远程仓库，这类似于任何仓库类型的工具，比如npm包，github也是类似。这个仓库就是镜像仓库，当你需要一个镜像时，比如说nginx,ubuntu,arch,centos,mysql等等其中之一时，你需要进行pull操作，他会先从你的本地仓库去找，突然发现没有，然后他就去远程仓库了，找到了你想要的镜像，然后就给你运来了。\n\n#### 命令\n\n> docker有许多的命令。常见的就是这些\n\n- pull 要一个镜像，类似git命令\n- push 推送一个镜像，类似git\n- build 打造合成\n- run 运行\n- ps 显示正在运行的容器\n- images 显示本地有哪些镜像\n- stop 停止容器\n- rm 删除打造的镜像\n- rmi 删除仓库中的镜像\n\n> 就记得这些了,当然这只是基础的一些，其他的类似。\n\n### Logo\n\n> Docker的logo挺有意思的，一个小鲸鱼和一堆集装箱。docker的作用正如此logo，那些集装箱就是镜像，小鲸鱼就是docker端。当拿镜像时，你吩咐小鲸鱼去仓库运一个，它哧溜哧溜的先去本地仓库，我屮艸芔茻，没有，然后又呼哧呼哧的到远程仓库，然后哼登哼登的跑回来把他给你。你拿来这集装箱打开就用。没错，很六！\n\n### 组合镜像\n\n> 用了一个工具，[Docker Compose](https://docs.docker.com/compose/install/),我的本地博客就是用这玩意弄得，用到了nginx反向代理服务器，ghost博客镜像（npm包管理），还一个mysql镜像。","source":"_posts/docker-one.md","raw":"---\ntitle: Docker入门思考\ndate: 2018-02-15 21:39:34\n\ntags:\n- Docker\ncategories:\n- Tools\n- Docker\n---\n\n\n{% note default %}\n人类善用工具，是因为懒。\n{% endnote %}\n\n<!-- more -->\n### Docker的本地博客\n\n> 这是我用组合镜像工具搭建的一个本地博客，用到了nginx反向代理服务器，ghost博客镜像（npm包管理），还一个mysql镜像。\n![](docker-one/docker.png)\n\n### 前言\n\n> 最近弄了一下自己的[个人网站](http://scarboroughcoral.top)和博客，花了2块钱买了一年的域名。域名解析github page太让人欲罢不能，现在想来就吐血。这篇文章主要是写最近使用的一项技术，感觉逼格真高。但更重要的是非常方便。我猜测docker可能是以后老师检查课设的重要手段之一，嘘，猜测。从一开始学习使用，到搭建一个本地博客。这`docker`果然是个好东西。\n\n### 拿来就用，不依赖第三方环境\n\n> 就是这样，只要你的电脑上安装上docker，并且在[Docker Hub](https://hub.docker.com/)上有一个账号，你就可以从上面下载镜像并跑起来。正因如此，童鞋们可以将自己的课设通过docker打造镜像上传到`Docker Hub`上供老师们欣赏。不想原来那样，将自己的源代码打包发给老师，老师能不能运行起来都难说。\n\n### 不同于虚拟机\n\n> 我们知道虚拟机非常的大，一个就论G之算，而Docker镜像，往往你所需要的非常精简，甚者是说这镜像完全是为你打造的，你是需要将相应的文件加入其中，二次打造，就非常完美了，可以说是非常OK了！\n\n### 概念\n\n> 上次IBM讲座可以说是没怎么听，全程王者荣耀（坏笑）。对一些概念一知半解，比如说镜像和容器，仓库什么的。\n\n#### 镜像和容器\n\n> 个人理解，`镜像是死的，容器是活的`。就类似于虚拟机一样，你安装时需要的便是镜像，当你运行起来时对其文件进行操作，那便成了你挥洒笔墨的容器。程序和进程也是类似。\n\n#### 仓库\n\n> Docker仓库分为本地仓库和远程仓库，这类似于任何仓库类型的工具，比如npm包，github也是类似。这个仓库就是镜像仓库，当你需要一个镜像时，比如说nginx,ubuntu,arch,centos,mysql等等其中之一时，你需要进行pull操作，他会先从你的本地仓库去找，突然发现没有，然后他就去远程仓库了，找到了你想要的镜像，然后就给你运来了。\n\n#### 命令\n\n> docker有许多的命令。常见的就是这些\n\n- pull 要一个镜像，类似git命令\n- push 推送一个镜像，类似git\n- build 打造合成\n- run 运行\n- ps 显示正在运行的容器\n- images 显示本地有哪些镜像\n- stop 停止容器\n- rm 删除打造的镜像\n- rmi 删除仓库中的镜像\n\n> 就记得这些了,当然这只是基础的一些，其他的类似。\n\n### Logo\n\n> Docker的logo挺有意思的，一个小鲸鱼和一堆集装箱。docker的作用正如此logo，那些集装箱就是镜像，小鲸鱼就是docker端。当拿镜像时，你吩咐小鲸鱼去仓库运一个，它哧溜哧溜的先去本地仓库，我屮艸芔茻，没有，然后又呼哧呼哧的到远程仓库，然后哼登哼登的跑回来把他给你。你拿来这集装箱打开就用。没错，很六！\n\n### 组合镜像\n\n> 用了一个工具，[Docker Compose](https://docs.docker.com/compose/install/),我的本地博客就是用这玩意弄得，用到了nginx反向代理服务器，ghost博客镜像（npm包管理），还一个mysql镜像。","slug":"docker-one","published":1,"updated":"2022-01-06T04:09:12.314Z","_id":"cksq5v7mh001kn0pu3byp8j69","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note default\"><p>人类善用工具，是因为懒。</p>\n</div>\n\n<span id=\"more\"></span>\n<h3 id=\"Docker的本地博客\"><a href=\"#Docker的本地博客\" class=\"headerlink\" title=\"Docker的本地博客\"></a>Docker的本地博客</h3><blockquote>\n<p>这是我用组合镜像工具搭建的一个本地博客，用到了nginx反向代理服务器，ghost博客镜像（npm包管理），还一个mysql镜像。<br><img data-src=\"docker-one/docker.png\"></p>\n</blockquote>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<p>最近弄了一下自己的<a href=\"http://scarboroughcoral.top/\">个人网站</a>和博客，花了2块钱买了一年的域名。域名解析github page太让人欲罢不能，现在想来就吐血。这篇文章主要是写最近使用的一项技术，感觉逼格真高。但更重要的是非常方便。我猜测docker可能是以后老师检查课设的重要手段之一，嘘，猜测。从一开始学习使用，到搭建一个本地博客。这<code>docker</code>果然是个好东西。</p>\n</blockquote>\n<h3 id=\"拿来就用，不依赖第三方环境\"><a href=\"#拿来就用，不依赖第三方环境\" class=\"headerlink\" title=\"拿来就用，不依赖第三方环境\"></a>拿来就用，不依赖第三方环境</h3><blockquote>\n<p>就是这样，只要你的电脑上安装上docker，并且在<a href=\"https://hub.docker.com/\">Docker Hub</a>上有一个账号，你就可以从上面下载镜像并跑起来。正因如此，童鞋们可以将自己的课设通过docker打造镜像上传到<code>Docker Hub</code>上供老师们欣赏。不想原来那样，将自己的源代码打包发给老师，老师能不能运行起来都难说。</p>\n</blockquote>\n<h3 id=\"不同于虚拟机\"><a href=\"#不同于虚拟机\" class=\"headerlink\" title=\"不同于虚拟机\"></a>不同于虚拟机</h3><blockquote>\n<p>我们知道虚拟机非常的大，一个就论G之算，而Docker镜像，往往你所需要的非常精简，甚者是说这镜像完全是为你打造的，你是需要将相应的文件加入其中，二次打造，就非常完美了，可以说是非常OK了！</p>\n</blockquote>\n<h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><blockquote>\n<p>上次IBM讲座可以说是没怎么听，全程王者荣耀（坏笑）。对一些概念一知半解，比如说镜像和容器，仓库什么的。</p>\n</blockquote>\n<h4 id=\"镜像和容器\"><a href=\"#镜像和容器\" class=\"headerlink\" title=\"镜像和容器\"></a>镜像和容器</h4><blockquote>\n<p>个人理解，<code>镜像是死的，容器是活的</code>。就类似于虚拟机一样，你安装时需要的便是镜像，当你运行起来时对其文件进行操作，那便成了你挥洒笔墨的容器。程序和进程也是类似。</p>\n</blockquote>\n<h4 id=\"仓库\"><a href=\"#仓库\" class=\"headerlink\" title=\"仓库\"></a>仓库</h4><blockquote>\n<p>Docker仓库分为本地仓库和远程仓库，这类似于任何仓库类型的工具，比如npm包，github也是类似。这个仓库就是镜像仓库，当你需要一个镜像时，比如说nginx,ubuntu,arch,centos,mysql等等其中之一时，你需要进行pull操作，他会先从你的本地仓库去找，突然发现没有，然后他就去远程仓库了，找到了你想要的镜像，然后就给你运来了。</p>\n</blockquote>\n<h4 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h4><blockquote>\n<p>docker有许多的命令。常见的就是这些</p>\n</blockquote>\n<ul>\n<li>pull 要一个镜像，类似git命令</li>\n<li>push 推送一个镜像，类似git</li>\n<li>build 打造合成</li>\n<li>run 运行</li>\n<li>ps 显示正在运行的容器</li>\n<li>images 显示本地有哪些镜像</li>\n<li>stop 停止容器</li>\n<li>rm 删除打造的镜像</li>\n<li>rmi 删除仓库中的镜像</li>\n</ul>\n<blockquote>\n<p>就记得这些了,当然这只是基础的一些，其他的类似。</p>\n</blockquote>\n<h3 id=\"Logo\"><a href=\"#Logo\" class=\"headerlink\" title=\"Logo\"></a>Logo</h3><blockquote>\n<p>Docker的logo挺有意思的，一个小鲸鱼和一堆集装箱。docker的作用正如此logo，那些集装箱就是镜像，小鲸鱼就是docker端。当拿镜像时，你吩咐小鲸鱼去仓库运一个，它哧溜哧溜的先去本地仓库，我屮艸芔茻，没有，然后又呼哧呼哧的到远程仓库，然后哼登哼登的跑回来把他给你。你拿来这集装箱打开就用。没错，很六！</p>\n</blockquote>\n<h3 id=\"组合镜像\"><a href=\"#组合镜像\" class=\"headerlink\" title=\"组合镜像\"></a>组合镜像</h3><blockquote>\n<p>用了一个工具，<a href=\"https://docs.docker.com/compose/install/\">Docker Compose</a>,我的本地博客就是用这玩意弄得，用到了nginx反向代理服务器，ghost博客镜像（npm包管理），还一个mysql镜像。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<div class=\"note default\"><p>人类善用工具，是因为懒。</p>\n</div>","more":"<h3 id=\"Docker的本地博客\"><a href=\"#Docker的本地博客\" class=\"headerlink\" title=\"Docker的本地博客\"></a>Docker的本地博客</h3><blockquote>\n<p>这是我用组合镜像工具搭建的一个本地博客，用到了nginx反向代理服务器，ghost博客镜像（npm包管理），还一个mysql镜像。<br><img data-src=\"docker-one/docker.png\"></p>\n</blockquote>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<p>最近弄了一下自己的<a href=\"http://scarboroughcoral.top/\">个人网站</a>和博客，花了2块钱买了一年的域名。域名解析github page太让人欲罢不能，现在想来就吐血。这篇文章主要是写最近使用的一项技术，感觉逼格真高。但更重要的是非常方便。我猜测docker可能是以后老师检查课设的重要手段之一，嘘，猜测。从一开始学习使用，到搭建一个本地博客。这<code>docker</code>果然是个好东西。</p>\n</blockquote>\n<h3 id=\"拿来就用，不依赖第三方环境\"><a href=\"#拿来就用，不依赖第三方环境\" class=\"headerlink\" title=\"拿来就用，不依赖第三方环境\"></a>拿来就用，不依赖第三方环境</h3><blockquote>\n<p>就是这样，只要你的电脑上安装上docker，并且在<a href=\"https://hub.docker.com/\">Docker Hub</a>上有一个账号，你就可以从上面下载镜像并跑起来。正因如此，童鞋们可以将自己的课设通过docker打造镜像上传到<code>Docker Hub</code>上供老师们欣赏。不想原来那样，将自己的源代码打包发给老师，老师能不能运行起来都难说。</p>\n</blockquote>\n<h3 id=\"不同于虚拟机\"><a href=\"#不同于虚拟机\" class=\"headerlink\" title=\"不同于虚拟机\"></a>不同于虚拟机</h3><blockquote>\n<p>我们知道虚拟机非常的大，一个就论G之算，而Docker镜像，往往你所需要的非常精简，甚者是说这镜像完全是为你打造的，你是需要将相应的文件加入其中，二次打造，就非常完美了，可以说是非常OK了！</p>\n</blockquote>\n<h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><blockquote>\n<p>上次IBM讲座可以说是没怎么听，全程王者荣耀（坏笑）。对一些概念一知半解，比如说镜像和容器，仓库什么的。</p>\n</blockquote>\n<h4 id=\"镜像和容器\"><a href=\"#镜像和容器\" class=\"headerlink\" title=\"镜像和容器\"></a>镜像和容器</h4><blockquote>\n<p>个人理解，<code>镜像是死的，容器是活的</code>。就类似于虚拟机一样，你安装时需要的便是镜像，当你运行起来时对其文件进行操作，那便成了你挥洒笔墨的容器。程序和进程也是类似。</p>\n</blockquote>\n<h4 id=\"仓库\"><a href=\"#仓库\" class=\"headerlink\" title=\"仓库\"></a>仓库</h4><blockquote>\n<p>Docker仓库分为本地仓库和远程仓库，这类似于任何仓库类型的工具，比如npm包，github也是类似。这个仓库就是镜像仓库，当你需要一个镜像时，比如说nginx,ubuntu,arch,centos,mysql等等其中之一时，你需要进行pull操作，他会先从你的本地仓库去找，突然发现没有，然后他就去远程仓库了，找到了你想要的镜像，然后就给你运来了。</p>\n</blockquote>\n<h4 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h4><blockquote>\n<p>docker有许多的命令。常见的就是这些</p>\n</blockquote>\n<ul>\n<li>pull 要一个镜像，类似git命令</li>\n<li>push 推送一个镜像，类似git</li>\n<li>build 打造合成</li>\n<li>run 运行</li>\n<li>ps 显示正在运行的容器</li>\n<li>images 显示本地有哪些镜像</li>\n<li>stop 停止容器</li>\n<li>rm 删除打造的镜像</li>\n<li>rmi 删除仓库中的镜像</li>\n</ul>\n<blockquote>\n<p>就记得这些了,当然这只是基础的一些，其他的类似。</p>\n</blockquote>\n<h3 id=\"Logo\"><a href=\"#Logo\" class=\"headerlink\" title=\"Logo\"></a>Logo</h3><blockquote>\n<p>Docker的logo挺有意思的，一个小鲸鱼和一堆集装箱。docker的作用正如此logo，那些集装箱就是镜像，小鲸鱼就是docker端。当拿镜像时，你吩咐小鲸鱼去仓库运一个，它哧溜哧溜的先去本地仓库，我屮艸芔茻，没有，然后又呼哧呼哧的到远程仓库，然后哼登哼登的跑回来把他给你。你拿来这集装箱打开就用。没错，很六！</p>\n</blockquote>\n<h3 id=\"组合镜像\"><a href=\"#组合镜像\" class=\"headerlink\" title=\"组合镜像\"></a>组合镜像</h3><blockquote>\n<p>用了一个工具，<a href=\"https://docs.docker.com/compose/install/\">Docker Compose</a>,我的本地博客就是用这玩意弄得，用到了nginx反向代理服务器，ghost博客镜像（npm包管理），还一个mysql镜像。</p>\n</blockquote>"},{"title":"多容器APP之Compose学习笔记(一)","date":"2018-03-07T05:07:14.000Z","_content":"\n\n\n{% note default %}\n人类善用工具，是因为懒。\n{% endnote %}\n\n<!-- more -->\n\n### 前言\n\n这一段时间比较乱,不知道要干点什么,索性就直接刷了几本书.现在在刷的是《Java Web 应用开发与案例教程》，这本书本人觉着比较棒，虽然讲了JSP的使用，毕竟现在JSP不是主流了，应该是如此，自从前后端分离之后，HTML，CSS，JavaScript的出现，使客户端实现动态网页流行了起来。但其中的一些知识点还是需要知道的，比如说ServletContext、Session、Request、PageContext的生命周期，转发和重定向等。恩，接下来进入主题。\n\n### Compose的学习\n\n前几天对Docker的入门直接刷了一个Mooc，但是不怎么系统。就像那样说的`现在手机使得知识点变得零碎起来，而系统学习是必须的`。那如何做到系统学习？一是书籍，而是官方教程。我认为如此。我打算在[官方教程](https://docs.docker.com/compose/)里面看一下Compose的系统学习思路。\n\n### Compose的构建过程\n\n首先要明确一点，我们用Docker是来干嘛的？用Compose是用来干嘛的？Docker是为了让工程摆脱环境，Compose是集成多个容器，这是因为有时候单个容器并不能完成我们的需求。那么Compose是如何构建的呢？\n\n我们思考，为什么Docker让工程摆脱了环境？这是因为Docker已经将环境也顺便打包到集装箱里了。那么构建过程第一步便是底层环境的构建，`任何应用必须运行在操作系统上`，这里就是Dockerfile的构建，当然这里面可能有一系列命令，总之Compose会让Dockerfile里面的命令先执行完毕。就像下面这个文件一样\n```Dockerfile\nFROM python:3.4-alpine\nADD . /code\nWORKDIR /code\nRUN pip install -r requirements.txt\nCMD [\"python\", \"app.py\"]\n```\n然后第二步便会找Compose的配置文件`docker-compose.yml`这里面配置了你所需要的服务，需要哪些容器镜像，配置端口等等。\n```yml\nversion: '3'\nservices:\n  web:\n    build: .\n    ports:\n     - \"5000:5000\"\n  redis:\n    image: \"redis:alpine\"\n```\n\n这是构建过程\n```bash\nBuilding web\nStep 1/5 : FROM python:3.4-alpine\n3.4-alpine: Pulling from library/python\n81033e7c1d6a: Pull complete\n9b61101706a6: Pull complete\n415e2a07c89b: Pull complete\nf22df7a3f000: Pull complete\n8c16bf19c1f9: Pull complete\nDigest: sha256:fe436cb066394d81cf49448a04dec7c765082445a500bc44f1ae5e8a455793bd\nStatus: Downloaded newer image for python:3.4-alpine\n ---> 5c72717ec319\nStep 2/5 : ADD . /code\n ---> 73b857a9e7be\nStep 3/5 : WORKDIR /code\nRemoving intermediate container 36713f6d9d18\n ---> 7de417856227\nStep 4/5 : RUN pip install -r requirements.txt\n ---> Running in f9b8a9c9be05\nCollecting flask (from -r requirements.txt (line 1))\n  Downloading Flask-0.12.2-py2.py3-none-any.whl (83kB)\nCollecting redis (from -r requirements.txt (line 2))\n  Downloading redis-2.10.6-py2.py3-none-any.whl (64kB)\nCollecting Jinja2>=2.4 (from flask->-r requirements.txt (line 1))\n  Downloading Jinja2-2.10-py2.py3-none-any.whl (126kB)\nCollecting itsdangerous>=0.21 (from flask->-r requirements.txt (line 1))\n  Downloading itsdangerous-0.24.tar.gz (46kB)\nCollecting click>=2.0 (from flask->-r requirements.txt (line 1))\n  Downloading click-6.7-py2.py3-none-any.whl (71kB)\nCollecting Werkzeug>=0.7 (from flask->-r requirements.txt (line 1))\n  Downloading Werkzeug-0.14.1-py2.py3-none-any.whl (322kB)\nCollecting MarkupSafe>=0.23 (from Jinja2>=2.4->flask->-r requirements.txt (line 1))\n  Downloading MarkupSafe-1.0.tar.gz\nBuilding wheels for collected packages: itsdangerous, MarkupSafe\n  Running setup.py bdist_wheel for itsdangerous: started\n  Running setup.py bdist_wheel for itsdangerous: finished with status 'done'\n  Stored in directory: /root/.cache/pip/wheels/fc/a8/66/24d655233c757e178d45dea2de22a04c6d92766abfb741129a\n  Running setup.py bdist_wheel for MarkupSafe: started\n  Running setup.py bdist_wheel for MarkupSafe: finished with status 'done'\n  Stored in directory: /root/.cache/pip/wheels/88/a7/30/e39a54a87bcbe25308fa3ca64e8ddc75d9b3e5afa21ee32d57\nSuccessfully built itsdangerous MarkupSafe\nInstalling collected packages: MarkupSafe, Jinja2, itsdangerous, click, Werkzeug, flask, redis\nSuccessfully installed Jinja2-2.10 MarkupSafe-1.0 Werkzeug-0.14.1 click-6.7 flask-0.12.2 itsdangerous-0.24 redis-2.10.6\nRemoving intermediate container f9b8a9c9be05\n ---> 9daf3f18ec3b\nStep 5/5 : CMD [\"python\",\"app.py\"]\n ---> Running in bd6fd9143af8\nRemoving intermediate container bd6fd9143af8\n ---> 159831743522\nSuccessfully built 159831743522\nSuccessfully tagged composetest_web:latest\nWARNING: Image for service web was built because it did not already exist. To rebuild this image you must use `docker-compose build` or `docker-compose up --build`.\nPulling redis (redis:alpine)...\nalpine: Pulling from library/redis\nff3a5c916c92: Already exists\naae70a2e6027: Pull complete\n87c655da471c: Pull complete\na0bd51ac7350: Pull complete\n755565c3ea2b: Pull complete\n8bf100ea488d: Pull complete\nDigest: sha256:4f54ade2260d5c80283d044ab9657f390cb8effd9a7a847765693a3670f6874a\nStatus: Downloaded newer image for redis:alpine\nCreating composetest_web_1   ... done\nCreating composetest_redis_1 ... done\nAttaching to composetest_web_1, composetest_redis_1\n\n```","source":"_posts/docker-zero.md","raw":"---\ntitle: 多容器APP之Compose学习笔记(一)\ndate: 2018-03-07 13:07:14\n\ntags:\n- Docker\n- Docker-Compose\ncategories:\n- Tools\n- Docker\n---\n\n\n\n{% note default %}\n人类善用工具，是因为懒。\n{% endnote %}\n\n<!-- more -->\n\n### 前言\n\n这一段时间比较乱,不知道要干点什么,索性就直接刷了几本书.现在在刷的是《Java Web 应用开发与案例教程》，这本书本人觉着比较棒，虽然讲了JSP的使用，毕竟现在JSP不是主流了，应该是如此，自从前后端分离之后，HTML，CSS，JavaScript的出现，使客户端实现动态网页流行了起来。但其中的一些知识点还是需要知道的，比如说ServletContext、Session、Request、PageContext的生命周期，转发和重定向等。恩，接下来进入主题。\n\n### Compose的学习\n\n前几天对Docker的入门直接刷了一个Mooc，但是不怎么系统。就像那样说的`现在手机使得知识点变得零碎起来，而系统学习是必须的`。那如何做到系统学习？一是书籍，而是官方教程。我认为如此。我打算在[官方教程](https://docs.docker.com/compose/)里面看一下Compose的系统学习思路。\n\n### Compose的构建过程\n\n首先要明确一点，我们用Docker是来干嘛的？用Compose是用来干嘛的？Docker是为了让工程摆脱环境，Compose是集成多个容器，这是因为有时候单个容器并不能完成我们的需求。那么Compose是如何构建的呢？\n\n我们思考，为什么Docker让工程摆脱了环境？这是因为Docker已经将环境也顺便打包到集装箱里了。那么构建过程第一步便是底层环境的构建，`任何应用必须运行在操作系统上`，这里就是Dockerfile的构建，当然这里面可能有一系列命令，总之Compose会让Dockerfile里面的命令先执行完毕。就像下面这个文件一样\n```Dockerfile\nFROM python:3.4-alpine\nADD . /code\nWORKDIR /code\nRUN pip install -r requirements.txt\nCMD [\"python\", \"app.py\"]\n```\n然后第二步便会找Compose的配置文件`docker-compose.yml`这里面配置了你所需要的服务，需要哪些容器镜像，配置端口等等。\n```yml\nversion: '3'\nservices:\n  web:\n    build: .\n    ports:\n     - \"5000:5000\"\n  redis:\n    image: \"redis:alpine\"\n```\n\n这是构建过程\n```bash\nBuilding web\nStep 1/5 : FROM python:3.4-alpine\n3.4-alpine: Pulling from library/python\n81033e7c1d6a: Pull complete\n9b61101706a6: Pull complete\n415e2a07c89b: Pull complete\nf22df7a3f000: Pull complete\n8c16bf19c1f9: Pull complete\nDigest: sha256:fe436cb066394d81cf49448a04dec7c765082445a500bc44f1ae5e8a455793bd\nStatus: Downloaded newer image for python:3.4-alpine\n ---> 5c72717ec319\nStep 2/5 : ADD . /code\n ---> 73b857a9e7be\nStep 3/5 : WORKDIR /code\nRemoving intermediate container 36713f6d9d18\n ---> 7de417856227\nStep 4/5 : RUN pip install -r requirements.txt\n ---> Running in f9b8a9c9be05\nCollecting flask (from -r requirements.txt (line 1))\n  Downloading Flask-0.12.2-py2.py3-none-any.whl (83kB)\nCollecting redis (from -r requirements.txt (line 2))\n  Downloading redis-2.10.6-py2.py3-none-any.whl (64kB)\nCollecting Jinja2>=2.4 (from flask->-r requirements.txt (line 1))\n  Downloading Jinja2-2.10-py2.py3-none-any.whl (126kB)\nCollecting itsdangerous>=0.21 (from flask->-r requirements.txt (line 1))\n  Downloading itsdangerous-0.24.tar.gz (46kB)\nCollecting click>=2.0 (from flask->-r requirements.txt (line 1))\n  Downloading click-6.7-py2.py3-none-any.whl (71kB)\nCollecting Werkzeug>=0.7 (from flask->-r requirements.txt (line 1))\n  Downloading Werkzeug-0.14.1-py2.py3-none-any.whl (322kB)\nCollecting MarkupSafe>=0.23 (from Jinja2>=2.4->flask->-r requirements.txt (line 1))\n  Downloading MarkupSafe-1.0.tar.gz\nBuilding wheels for collected packages: itsdangerous, MarkupSafe\n  Running setup.py bdist_wheel for itsdangerous: started\n  Running setup.py bdist_wheel for itsdangerous: finished with status 'done'\n  Stored in directory: /root/.cache/pip/wheels/fc/a8/66/24d655233c757e178d45dea2de22a04c6d92766abfb741129a\n  Running setup.py bdist_wheel for MarkupSafe: started\n  Running setup.py bdist_wheel for MarkupSafe: finished with status 'done'\n  Stored in directory: /root/.cache/pip/wheels/88/a7/30/e39a54a87bcbe25308fa3ca64e8ddc75d9b3e5afa21ee32d57\nSuccessfully built itsdangerous MarkupSafe\nInstalling collected packages: MarkupSafe, Jinja2, itsdangerous, click, Werkzeug, flask, redis\nSuccessfully installed Jinja2-2.10 MarkupSafe-1.0 Werkzeug-0.14.1 click-6.7 flask-0.12.2 itsdangerous-0.24 redis-2.10.6\nRemoving intermediate container f9b8a9c9be05\n ---> 9daf3f18ec3b\nStep 5/5 : CMD [\"python\",\"app.py\"]\n ---> Running in bd6fd9143af8\nRemoving intermediate container bd6fd9143af8\n ---> 159831743522\nSuccessfully built 159831743522\nSuccessfully tagged composetest_web:latest\nWARNING: Image for service web was built because it did not already exist. To rebuild this image you must use `docker-compose build` or `docker-compose up --build`.\nPulling redis (redis:alpine)...\nalpine: Pulling from library/redis\nff3a5c916c92: Already exists\naae70a2e6027: Pull complete\n87c655da471c: Pull complete\na0bd51ac7350: Pull complete\n755565c3ea2b: Pull complete\n8bf100ea488d: Pull complete\nDigest: sha256:4f54ade2260d5c80283d044ab9657f390cb8effd9a7a847765693a3670f6874a\nStatus: Downloaded newer image for redis:alpine\nCreating composetest_web_1   ... done\nCreating composetest_redis_1 ... done\nAttaching to composetest_web_1, composetest_redis_1\n\n```","slug":"docker-zero","published":1,"updated":"2022-01-06T04:09:12.324Z","_id":"cksq5v7mi001pn0pu2uc94uyf","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note default\"><p>人类善用工具，是因为懒。</p>\n</div>\n\n<span id=\"more\"></span>\n\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>这一段时间比较乱,不知道要干点什么,索性就直接刷了几本书.现在在刷的是《Java Web 应用开发与案例教程》，这本书本人觉着比较棒，虽然讲了JSP的使用，毕竟现在JSP不是主流了，应该是如此，自从前后端分离之后，HTML，CSS，JavaScript的出现，使客户端实现动态网页流行了起来。但其中的一些知识点还是需要知道的，比如说ServletContext、Session、Request、PageContext的生命周期，转发和重定向等。恩，接下来进入主题。</p>\n<h3 id=\"Compose的学习\"><a href=\"#Compose的学习\" class=\"headerlink\" title=\"Compose的学习\"></a>Compose的学习</h3><p>前几天对Docker的入门直接刷了一个Mooc，但是不怎么系统。就像那样说的<code>现在手机使得知识点变得零碎起来，而系统学习是必须的</code>。那如何做到系统学习？一是书籍，而是官方教程。我认为如此。我打算在<a href=\"https://docs.docker.com/compose/\">官方教程</a>里面看一下Compose的系统学习思路。</p>\n<h3 id=\"Compose的构建过程\"><a href=\"#Compose的构建过程\" class=\"headerlink\" title=\"Compose的构建过程\"></a>Compose的构建过程</h3><p>首先要明确一点，我们用Docker是来干嘛的？用Compose是用来干嘛的？Docker是为了让工程摆脱环境，Compose是集成多个容器，这是因为有时候单个容器并不能完成我们的需求。那么Compose是如何构建的呢？</p>\n<p>我们思考，为什么Docker让工程摆脱了环境？这是因为Docker已经将环境也顺便打包到集装箱里了。那么构建过程第一步便是底层环境的构建，<code>任何应用必须运行在操作系统上</code>，这里就是Dockerfile的构建，当然这里面可能有一系列命令，总之Compose会让Dockerfile里面的命令先执行完毕。就像下面这个文件一样</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> python:<span class=\"number\">3.4</span>-alpine</span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"bash\"> . /code</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /code</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> pip install -r requirements.txt</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> [<span class=\"string\">&quot;python&quot;</span>, <span class=\"string\">&quot;app.py&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n<p>然后第二步便会找Compose的配置文件<code>docker-compose.yml</code>这里面配置了你所需要的服务，需要哪些容器镜像，配置端口等等。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">web:</span></span><br><span class=\"line\">    <span class=\"attr\">build:</span> <span class=\"string\">.</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">&quot;5000:5000&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">redis:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">&quot;redis:alpine&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>这是构建过程</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Building web</span><br><span class=\"line\">Step 1/5 : FROM python:3.4-alpine</span><br><span class=\"line\">3.4-alpine: Pulling from library/python</span><br><span class=\"line\">81033e7c1d6a: Pull complete</span><br><span class=\"line\">9b61101706a6: Pull complete</span><br><span class=\"line\">415e2a07c89b: Pull complete</span><br><span class=\"line\">f22df7a3f000: Pull complete</span><br><span class=\"line\">8c16bf19c1f9: Pull complete</span><br><span class=\"line\">Digest: sha256:fe436cb066394d81cf49448a04dec7c765082445a500bc44f1ae5e8a455793bd</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> python:3.4-alpine</span><br><span class=\"line\"> ---&gt; 5c72717ec319</span><br><span class=\"line\">Step 2/5 : ADD . /code</span><br><span class=\"line\"> ---&gt; 73b857a9e7be</span><br><span class=\"line\">Step 3/5 : WORKDIR /code</span><br><span class=\"line\">Removing intermediate container 36713f6d9d18</span><br><span class=\"line\"> ---&gt; 7de417856227</span><br><span class=\"line\">Step 4/5 : RUN pip install -r requirements.txt</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> f9b8a9c9be05</span><br><span class=\"line\">Collecting flask (from -r requirements.txt (line 1))</span><br><span class=\"line\">  Downloading Flask-0.12.2-py2.py3-none-any.whl (83kB)</span><br><span class=\"line\">Collecting redis (from -r requirements.txt (line 2))</span><br><span class=\"line\">  Downloading redis-2.10.6-py2.py3-none-any.whl (64kB)</span><br><span class=\"line\">Collecting Jinja2&gt;=2.4 (from flask-&gt;-r requirements.txt (line 1))</span><br><span class=\"line\">  Downloading Jinja2-2.10-py2.py3-none-any.whl (126kB)</span><br><span class=\"line\">Collecting itsdangerous&gt;=0.21 (from flask-&gt;-r requirements.txt (line 1))</span><br><span class=\"line\">  Downloading itsdangerous-0.24.tar.gz (46kB)</span><br><span class=\"line\">Collecting click&gt;=2.0 (from flask-&gt;-r requirements.txt (line 1))</span><br><span class=\"line\">  Downloading click-6.7-py2.py3-none-any.whl (71kB)</span><br><span class=\"line\">Collecting Werkzeug&gt;=0.7 (from flask-&gt;-r requirements.txt (line 1))</span><br><span class=\"line\">  Downloading Werkzeug-0.14.1-py2.py3-none-any.whl (322kB)</span><br><span class=\"line\">Collecting MarkupSafe&gt;=0.23 (from Jinja2&gt;=2.4-&gt;flask-&gt;-r requirements.txt (line 1))</span><br><span class=\"line\">  Downloading MarkupSafe-1.0.tar.gz</span><br><span class=\"line\">Building wheels <span class=\"keyword\">for</span> collected packages: itsdangerous, MarkupSafe</span><br><span class=\"line\">  Running setup.py bdist_wheel <span class=\"keyword\">for</span> itsdangerous: started</span><br><span class=\"line\">  Running setup.py bdist_wheel <span class=\"keyword\">for</span> itsdangerous: finished with status <span class=\"string\">&#x27;done&#x27;</span></span><br><span class=\"line\">  Stored <span class=\"keyword\">in</span> directory: /root/.cache/pip/wheels/<span class=\"built_in\">fc</span>/a8/66/24d655233c757e178d45dea2de22a04c6d92766abfb741129a</span><br><span class=\"line\">  Running setup.py bdist_wheel <span class=\"keyword\">for</span> MarkupSafe: started</span><br><span class=\"line\">  Running setup.py bdist_wheel <span class=\"keyword\">for</span> MarkupSafe: finished with status <span class=\"string\">&#x27;done&#x27;</span></span><br><span class=\"line\">  Stored <span class=\"keyword\">in</span> directory: /root/.cache/pip/wheels/88/a7/30/e39a54a87bcbe25308fa3ca64e8ddc75d9b3e5afa21ee32d57</span><br><span class=\"line\">Successfully built itsdangerous MarkupSafe</span><br><span class=\"line\">Installing collected packages: MarkupSafe, Jinja2, itsdangerous, click, Werkzeug, flask, redis</span><br><span class=\"line\">Successfully installed Jinja2-2.10 MarkupSafe-1.0 Werkzeug-0.14.1 click-6.7 flask-0.12.2 itsdangerous-0.24 redis-2.10.6</span><br><span class=\"line\">Removing intermediate container f9b8a9c9be05</span><br><span class=\"line\"> ---&gt; 9daf3f18ec3b</span><br><span class=\"line\">Step 5/5 : CMD [<span class=\"string\">&quot;python&quot;</span>,<span class=\"string\">&quot;app.py&quot;</span>]</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> bd6fd9143af8</span><br><span class=\"line\">Removing intermediate container bd6fd9143af8</span><br><span class=\"line\"> ---&gt; 159831743522</span><br><span class=\"line\">Successfully built 159831743522</span><br><span class=\"line\">Successfully tagged composetest_web:latest</span><br><span class=\"line\">WARNING: Image <span class=\"keyword\">for</span> service web was built because it did not already exist. To rebuild this image you must use `docker-compose build` or `docker-compose up --build`.</span><br><span class=\"line\">Pulling redis (redis:alpine)...</span><br><span class=\"line\">alpine: Pulling from library/redis</span><br><span class=\"line\">ff3a5c916c92: Already exists</span><br><span class=\"line\">aae70a2e6027: Pull complete</span><br><span class=\"line\">87c655da471c: Pull complete</span><br><span class=\"line\">a0bd51ac7350: Pull complete</span><br><span class=\"line\">755565c3ea2b: Pull complete</span><br><span class=\"line\">8bf100ea488d: Pull complete</span><br><span class=\"line\">Digest: sha256:4f54ade2260d5c80283d044ab9657f390cb8effd9a7a847765693a3670f6874a</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> redis:alpine</span><br><span class=\"line\">Creating composetest_web_1   ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Creating composetest_redis_1 ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Attaching to composetest_web_1, composetest_redis_1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<div class=\"note default\"><p>人类善用工具，是因为懒。</p>\n</div>","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>这一段时间比较乱,不知道要干点什么,索性就直接刷了几本书.现在在刷的是《Java Web 应用开发与案例教程》，这本书本人觉着比较棒，虽然讲了JSP的使用，毕竟现在JSP不是主流了，应该是如此，自从前后端分离之后，HTML，CSS，JavaScript的出现，使客户端实现动态网页流行了起来。但其中的一些知识点还是需要知道的，比如说ServletContext、Session、Request、PageContext的生命周期，转发和重定向等。恩，接下来进入主题。</p>\n<h3 id=\"Compose的学习\"><a href=\"#Compose的学习\" class=\"headerlink\" title=\"Compose的学习\"></a>Compose的学习</h3><p>前几天对Docker的入门直接刷了一个Mooc，但是不怎么系统。就像那样说的<code>现在手机使得知识点变得零碎起来，而系统学习是必须的</code>。那如何做到系统学习？一是书籍，而是官方教程。我认为如此。我打算在<a href=\"https://docs.docker.com/compose/\">官方教程</a>里面看一下Compose的系统学习思路。</p>\n<h3 id=\"Compose的构建过程\"><a href=\"#Compose的构建过程\" class=\"headerlink\" title=\"Compose的构建过程\"></a>Compose的构建过程</h3><p>首先要明确一点，我们用Docker是来干嘛的？用Compose是用来干嘛的？Docker是为了让工程摆脱环境，Compose是集成多个容器，这是因为有时候单个容器并不能完成我们的需求。那么Compose是如何构建的呢？</p>\n<p>我们思考，为什么Docker让工程摆脱了环境？这是因为Docker已经将环境也顺便打包到集装箱里了。那么构建过程第一步便是底层环境的构建，<code>任何应用必须运行在操作系统上</code>，这里就是Dockerfile的构建，当然这里面可能有一系列命令，总之Compose会让Dockerfile里面的命令先执行完毕。就像下面这个文件一样</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> python:<span class=\"number\">3.4</span>-alpine</span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"bash\"> . /code</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /code</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> pip install -r requirements.txt</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> [<span class=\"string\">&quot;python&quot;</span>, <span class=\"string\">&quot;app.py&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n<p>然后第二步便会找Compose的配置文件<code>docker-compose.yml</code>这里面配置了你所需要的服务，需要哪些容器镜像，配置端口等等。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">web:</span></span><br><span class=\"line\">    <span class=\"attr\">build:</span> <span class=\"string\">.</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">&quot;5000:5000&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">redis:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">&quot;redis:alpine&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>这是构建过程</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Building web</span><br><span class=\"line\">Step 1/5 : FROM python:3.4-alpine</span><br><span class=\"line\">3.4-alpine: Pulling from library/python</span><br><span class=\"line\">81033e7c1d6a: Pull complete</span><br><span class=\"line\">9b61101706a6: Pull complete</span><br><span class=\"line\">415e2a07c89b: Pull complete</span><br><span class=\"line\">f22df7a3f000: Pull complete</span><br><span class=\"line\">8c16bf19c1f9: Pull complete</span><br><span class=\"line\">Digest: sha256:fe436cb066394d81cf49448a04dec7c765082445a500bc44f1ae5e8a455793bd</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> python:3.4-alpine</span><br><span class=\"line\"> ---&gt; 5c72717ec319</span><br><span class=\"line\">Step 2/5 : ADD . /code</span><br><span class=\"line\"> ---&gt; 73b857a9e7be</span><br><span class=\"line\">Step 3/5 : WORKDIR /code</span><br><span class=\"line\">Removing intermediate container 36713f6d9d18</span><br><span class=\"line\"> ---&gt; 7de417856227</span><br><span class=\"line\">Step 4/5 : RUN pip install -r requirements.txt</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> f9b8a9c9be05</span><br><span class=\"line\">Collecting flask (from -r requirements.txt (line 1))</span><br><span class=\"line\">  Downloading Flask-0.12.2-py2.py3-none-any.whl (83kB)</span><br><span class=\"line\">Collecting redis (from -r requirements.txt (line 2))</span><br><span class=\"line\">  Downloading redis-2.10.6-py2.py3-none-any.whl (64kB)</span><br><span class=\"line\">Collecting Jinja2&gt;=2.4 (from flask-&gt;-r requirements.txt (line 1))</span><br><span class=\"line\">  Downloading Jinja2-2.10-py2.py3-none-any.whl (126kB)</span><br><span class=\"line\">Collecting itsdangerous&gt;=0.21 (from flask-&gt;-r requirements.txt (line 1))</span><br><span class=\"line\">  Downloading itsdangerous-0.24.tar.gz (46kB)</span><br><span class=\"line\">Collecting click&gt;=2.0 (from flask-&gt;-r requirements.txt (line 1))</span><br><span class=\"line\">  Downloading click-6.7-py2.py3-none-any.whl (71kB)</span><br><span class=\"line\">Collecting Werkzeug&gt;=0.7 (from flask-&gt;-r requirements.txt (line 1))</span><br><span class=\"line\">  Downloading Werkzeug-0.14.1-py2.py3-none-any.whl (322kB)</span><br><span class=\"line\">Collecting MarkupSafe&gt;=0.23 (from Jinja2&gt;=2.4-&gt;flask-&gt;-r requirements.txt (line 1))</span><br><span class=\"line\">  Downloading MarkupSafe-1.0.tar.gz</span><br><span class=\"line\">Building wheels <span class=\"keyword\">for</span> collected packages: itsdangerous, MarkupSafe</span><br><span class=\"line\">  Running setup.py bdist_wheel <span class=\"keyword\">for</span> itsdangerous: started</span><br><span class=\"line\">  Running setup.py bdist_wheel <span class=\"keyword\">for</span> itsdangerous: finished with status <span class=\"string\">&#x27;done&#x27;</span></span><br><span class=\"line\">  Stored <span class=\"keyword\">in</span> directory: /root/.cache/pip/wheels/<span class=\"built_in\">fc</span>/a8/66/24d655233c757e178d45dea2de22a04c6d92766abfb741129a</span><br><span class=\"line\">  Running setup.py bdist_wheel <span class=\"keyword\">for</span> MarkupSafe: started</span><br><span class=\"line\">  Running setup.py bdist_wheel <span class=\"keyword\">for</span> MarkupSafe: finished with status <span class=\"string\">&#x27;done&#x27;</span></span><br><span class=\"line\">  Stored <span class=\"keyword\">in</span> directory: /root/.cache/pip/wheels/88/a7/30/e39a54a87bcbe25308fa3ca64e8ddc75d9b3e5afa21ee32d57</span><br><span class=\"line\">Successfully built itsdangerous MarkupSafe</span><br><span class=\"line\">Installing collected packages: MarkupSafe, Jinja2, itsdangerous, click, Werkzeug, flask, redis</span><br><span class=\"line\">Successfully installed Jinja2-2.10 MarkupSafe-1.0 Werkzeug-0.14.1 click-6.7 flask-0.12.2 itsdangerous-0.24 redis-2.10.6</span><br><span class=\"line\">Removing intermediate container f9b8a9c9be05</span><br><span class=\"line\"> ---&gt; 9daf3f18ec3b</span><br><span class=\"line\">Step 5/5 : CMD [<span class=\"string\">&quot;python&quot;</span>,<span class=\"string\">&quot;app.py&quot;</span>]</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> bd6fd9143af8</span><br><span class=\"line\">Removing intermediate container bd6fd9143af8</span><br><span class=\"line\"> ---&gt; 159831743522</span><br><span class=\"line\">Successfully built 159831743522</span><br><span class=\"line\">Successfully tagged composetest_web:latest</span><br><span class=\"line\">WARNING: Image <span class=\"keyword\">for</span> service web was built because it did not already exist. To rebuild this image you must use `docker-compose build` or `docker-compose up --build`.</span><br><span class=\"line\">Pulling redis (redis:alpine)...</span><br><span class=\"line\">alpine: Pulling from library/redis</span><br><span class=\"line\">ff3a5c916c92: Already exists</span><br><span class=\"line\">aae70a2e6027: Pull complete</span><br><span class=\"line\">87c655da471c: Pull complete</span><br><span class=\"line\">a0bd51ac7350: Pull complete</span><br><span class=\"line\">755565c3ea2b: Pull complete</span><br><span class=\"line\">8bf100ea488d: Pull complete</span><br><span class=\"line\">Digest: sha256:4f54ade2260d5c80283d044ab9657f390cb8effd9a7a847765693a3670f6874a</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> redis:alpine</span><br><span class=\"line\">Creating composetest_web_1   ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Creating composetest_redis_1 ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Attaching to composetest_web_1, composetest_redis_1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"找儿子——《辐射4》：游戏评测日志","mathjax":false,"copyright":true,"comment":true,"date":"2019-04-21T10:37:36.000Z","_content":"\n{% note primary %}\n一刷，很多姿势没有解锁。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n\n{% note info %}\n\n英文名：Fallout 4。\n\n### Steam简介：\n\nBethesda Game Studios, the award-winning creators of Fallout 3 and The Elder Scrolls V: Skyrim, welcome you to the world of Fallout 4 – their most ambitious game ever, and the next generation of open-world gaming.\n\n{% endnote %}\n\n### 画面\n\n3D 建模非常的真实，如同`给她爱five——GTA5`一般。从现代化城市到一片废墟，从普通人物、动物到变种人、变种动物和人造人，各种天气，各种手持兵器、枪支和机甲，还有各种建筑，这些建模都是非常出色的。\n\n![ScreenShot1](fallout4/ScreenShot1.png)\n\n^图1: 某海湾旁边\n\n![ScreenShot2](fallout4/ScreenShot2.png)\n\n^图2: 某人记忆探索\n\n\n\n### 故事\n\n辐射4的故事背景烘托的很浓厚——2200年的美国。一开始一家人其乐融融，漂亮的妻子、1岁的儿子还有一个智能机器人快乐的生活着。不过好景不长，全国辐射危机即将爆发战争，一家人鉴定契约到某地下庇护所冰冻逃脱战争。然而这个过程并不顺利，人有旦夕祸福，天有不测风云，冰冻其间妻子被枪击中，儿子被劫，被冰冻的自己只有意识却无法挽救。主线剧情也由此揭开——找儿子！不过有一点比较捞，妻子死没死不知道就直接找儿子去了。其间围绕找儿子展开了一系列剧情，其间接触了一些势力，这些势力之间或者合作或者敌对。\n\n![ScreenShot3](fallout4/ScreenShot3.png)\n^图3: 找到的儿子\n\n### 游戏性\n\n整体上来看是个大型**FPS**游戏，其中掺杂着**RPG**元素、建造基地的**沙盒**元素、朋友亲密度**模拟养成**元素等。游戏地图非常大，可以在不同已到达地区之间传送。开局一人一狗，中途也可以和**NPC一起刷图**，你的言行举止会影响和NPC的**亲密度**。自己可以对自己的基地进行建造各种设施。使用各种物品有可能受辐射影响造成**最大生命值**的减少。人物升级可以升级技能，这决定着你是向**近战、步枪、狙击、管理**等方向发展。\n\n\n![ScreenShot4](fallout4/ScreenShot4.png)\n^图4: 基地建造\n\n\n![ScreenShot0](fallout4/ScreenShot0.png)\n^图5: 一人一狗\n\n### 总评\n\n这个游戏难度还是比较大的（本人比较菜），可能是本人比较懒，所以没有体验一百种死法，后期直接开启了GOD模式。这是第一款Steam上入坑的RMB游，所以算是比较有感情吧。\n","source":"_posts/fallout4.md","raw":"---\ntitle: 找儿子——《辐射4》：游戏评测日志\nmathjax: false\ncopyright: true\ncomment: true\ndate: 2019-04-21 18:37:36\ntags:\n- FPS\n- Game\ncategories:\n- Game Review\n- FPS\n\n---\n\n{% note primary %}\n一刷，很多姿势没有解锁。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n\n{% note info %}\n\n英文名：Fallout 4。\n\n### Steam简介：\n\nBethesda Game Studios, the award-winning creators of Fallout 3 and The Elder Scrolls V: Skyrim, welcome you to the world of Fallout 4 – their most ambitious game ever, and the next generation of open-world gaming.\n\n{% endnote %}\n\n### 画面\n\n3D 建模非常的真实，如同`给她爱five——GTA5`一般。从现代化城市到一片废墟，从普通人物、动物到变种人、变种动物和人造人，各种天气，各种手持兵器、枪支和机甲，还有各种建筑，这些建模都是非常出色的。\n\n![ScreenShot1](fallout4/ScreenShot1.png)\n\n^图1: 某海湾旁边\n\n![ScreenShot2](fallout4/ScreenShot2.png)\n\n^图2: 某人记忆探索\n\n\n\n### 故事\n\n辐射4的故事背景烘托的很浓厚——2200年的美国。一开始一家人其乐融融，漂亮的妻子、1岁的儿子还有一个智能机器人快乐的生活着。不过好景不长，全国辐射危机即将爆发战争，一家人鉴定契约到某地下庇护所冰冻逃脱战争。然而这个过程并不顺利，人有旦夕祸福，天有不测风云，冰冻其间妻子被枪击中，儿子被劫，被冰冻的自己只有意识却无法挽救。主线剧情也由此揭开——找儿子！不过有一点比较捞，妻子死没死不知道就直接找儿子去了。其间围绕找儿子展开了一系列剧情，其间接触了一些势力，这些势力之间或者合作或者敌对。\n\n![ScreenShot3](fallout4/ScreenShot3.png)\n^图3: 找到的儿子\n\n### 游戏性\n\n整体上来看是个大型**FPS**游戏，其中掺杂着**RPG**元素、建造基地的**沙盒**元素、朋友亲密度**模拟养成**元素等。游戏地图非常大，可以在不同已到达地区之间传送。开局一人一狗，中途也可以和**NPC一起刷图**，你的言行举止会影响和NPC的**亲密度**。自己可以对自己的基地进行建造各种设施。使用各种物品有可能受辐射影响造成**最大生命值**的减少。人物升级可以升级技能，这决定着你是向**近战、步枪、狙击、管理**等方向发展。\n\n\n![ScreenShot4](fallout4/ScreenShot4.png)\n^图4: 基地建造\n\n\n![ScreenShot0](fallout4/ScreenShot0.png)\n^图5: 一人一狗\n\n### 总评\n\n这个游戏难度还是比较大的（本人比较菜），可能是本人比较懒，所以没有体验一百种死法，后期直接开启了GOD模式。这是第一款Steam上入坑的RMB游，所以算是比较有感情吧。\n","slug":"fallout4","published":1,"updated":"2022-01-06T04:09:12.325Z","_id":"cksq5v7mj001sn0puhcp32aqz","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note primary\"><p>一刷，很多姿势没有解锁。</p>\n</div>\n\n<span id=\"more\"></span>\n\n<hr>\n<div class=\"note info\"><p>英文名：Fallout 4。</p>\n<h3 id=\"Steam简介：\"><a href=\"#Steam简介：\" class=\"headerlink\" title=\"Steam简介：\"></a>Steam简介：</h3><p>Bethesda Game Studios, the award-winning creators of Fallout 3 and The Elder Scrolls V: Skyrim, welcome you to the world of Fallout 4 – their most ambitious game ever, and the next generation of open-world gaming.</p>\n</div>\n\n<h3 id=\"画面\"><a href=\"#画面\" class=\"headerlink\" title=\"画面\"></a>画面</h3><p>3D 建模非常的真实，如同<code>给她爱five——GTA5</code>一般。从现代化城市到一片废墟，从普通人物、动物到变种人、变种动物和人造人，各种天气，各种手持兵器、枪支和机甲，还有各种建筑，这些建模都是非常出色的。</p>\n<p><img data-src=\"fallout4/ScreenShot1.png\" alt=\"ScreenShot1\"></p>\n<p>^图1: 某海湾旁边</p>\n<p><img data-src=\"fallout4/ScreenShot2.png\" alt=\"ScreenShot2\"></p>\n<p>^图2: 某人记忆探索</p>\n<h3 id=\"故事\"><a href=\"#故事\" class=\"headerlink\" title=\"故事\"></a>故事</h3><p>辐射4的故事背景烘托的很浓厚——2200年的美国。一开始一家人其乐融融，漂亮的妻子、1岁的儿子还有一个智能机器人快乐的生活着。不过好景不长，全国辐射危机即将爆发战争，一家人鉴定契约到某地下庇护所冰冻逃脱战争。然而这个过程并不顺利，人有旦夕祸福，天有不测风云，冰冻其间妻子被枪击中，儿子被劫，被冰冻的自己只有意识却无法挽救。主线剧情也由此揭开——找儿子！不过有一点比较捞，妻子死没死不知道就直接找儿子去了。其间围绕找儿子展开了一系列剧情，其间接触了一些势力，这些势力之间或者合作或者敌对。</p>\n<p><img data-src=\"fallout4/ScreenShot3.png\" alt=\"ScreenShot3\"><br>^图3: 找到的儿子</p>\n<h3 id=\"游戏性\"><a href=\"#游戏性\" class=\"headerlink\" title=\"游戏性\"></a>游戏性</h3><p>整体上来看是个大型<strong>FPS</strong>游戏，其中掺杂着<strong>RPG</strong>元素、建造基地的<strong>沙盒</strong>元素、朋友亲密度<strong>模拟养成</strong>元素等。游戏地图非常大，可以在不同已到达地区之间传送。开局一人一狗，中途也可以和<strong>NPC一起刷图</strong>，你的言行举止会影响和NPC的<strong>亲密度</strong>。自己可以对自己的基地进行建造各种设施。使用各种物品有可能受辐射影响造成<strong>最大生命值</strong>的减少。人物升级可以升级技能，这决定着你是向<strong>近战、步枪、狙击、管理</strong>等方向发展。</p>\n<p><img data-src=\"fallout4/ScreenShot4.png\" alt=\"ScreenShot4\"><br>^图4: 基地建造</p>\n<p><img data-src=\"fallout4/ScreenShot0.png\" alt=\"ScreenShot0\"><br>^图5: 一人一狗</p>\n<h3 id=\"总评\"><a href=\"#总评\" class=\"headerlink\" title=\"总评\"></a>总评</h3><p>这个游戏难度还是比较大的（本人比较菜），可能是本人比较懒，所以没有体验一百种死法，后期直接开启了GOD模式。这是第一款Steam上入坑的RMB游，所以算是比较有感情吧。</p>\n","site":{"data":{}},"excerpt":"<div class=\"note primary\"><p>一刷，很多姿势没有解锁。</p>\n</div>","more":"<hr>\n<div class=\"note info\"><p>英文名：Fallout 4。</p>\n<h3 id=\"Steam简介：\"><a href=\"#Steam简介：\" class=\"headerlink\" title=\"Steam简介：\"></a>Steam简介：</h3><p>Bethesda Game Studios, the award-winning creators of Fallout 3 and The Elder Scrolls V: Skyrim, welcome you to the world of Fallout 4 – their most ambitious game ever, and the next generation of open-world gaming.</p>\n</div>\n\n<h3 id=\"画面\"><a href=\"#画面\" class=\"headerlink\" title=\"画面\"></a>画面</h3><p>3D 建模非常的真实，如同<code>给她爱five——GTA5</code>一般。从现代化城市到一片废墟，从普通人物、动物到变种人、变种动物和人造人，各种天气，各种手持兵器、枪支和机甲，还有各种建筑，这些建模都是非常出色的。</p>\n<p><img data-src=\"fallout4/ScreenShot1.png\" alt=\"ScreenShot1\"></p>\n<p>^图1: 某海湾旁边</p>\n<p><img data-src=\"fallout4/ScreenShot2.png\" alt=\"ScreenShot2\"></p>\n<p>^图2: 某人记忆探索</p>\n<h3 id=\"故事\"><a href=\"#故事\" class=\"headerlink\" title=\"故事\"></a>故事</h3><p>辐射4的故事背景烘托的很浓厚——2200年的美国。一开始一家人其乐融融，漂亮的妻子、1岁的儿子还有一个智能机器人快乐的生活着。不过好景不长，全国辐射危机即将爆发战争，一家人鉴定契约到某地下庇护所冰冻逃脱战争。然而这个过程并不顺利，人有旦夕祸福，天有不测风云，冰冻其间妻子被枪击中，儿子被劫，被冰冻的自己只有意识却无法挽救。主线剧情也由此揭开——找儿子！不过有一点比较捞，妻子死没死不知道就直接找儿子去了。其间围绕找儿子展开了一系列剧情，其间接触了一些势力，这些势力之间或者合作或者敌对。</p>\n<p><img data-src=\"fallout4/ScreenShot3.png\" alt=\"ScreenShot3\"><br>^图3: 找到的儿子</p>\n<h3 id=\"游戏性\"><a href=\"#游戏性\" class=\"headerlink\" title=\"游戏性\"></a>游戏性</h3><p>整体上来看是个大型<strong>FPS</strong>游戏，其中掺杂着<strong>RPG</strong>元素、建造基地的<strong>沙盒</strong>元素、朋友亲密度<strong>模拟养成</strong>元素等。游戏地图非常大，可以在不同已到达地区之间传送。开局一人一狗，中途也可以和<strong>NPC一起刷图</strong>，你的言行举止会影响和NPC的<strong>亲密度</strong>。自己可以对自己的基地进行建造各种设施。使用各种物品有可能受辐射影响造成<strong>最大生命值</strong>的减少。人物升级可以升级技能，这决定着你是向<strong>近战、步枪、狙击、管理</strong>等方向发展。</p>\n<p><img data-src=\"fallout4/ScreenShot4.png\" alt=\"ScreenShot4\"><br>^图4: 基地建造</p>\n<p><img data-src=\"fallout4/ScreenShot0.png\" alt=\"ScreenShot0\"><br>^图5: 一人一狗</p>\n<h3 id=\"总评\"><a href=\"#总评\" class=\"headerlink\" title=\"总评\"></a>总评</h3><p>这个游戏难度还是比较大的（本人比较菜），可能是本人比较懒，所以没有体验一百种死法，后期直接开启了GOD模式。这是第一款Steam上入坑的RMB游，所以算是比较有感情吧。</p>"},{"title":"有关计算机浮点数的思考。","mathjax":true,"copyright":true,"comment":true,"date":"2019-03-03T11:40:40.000Z","_content":"\n{% note warning %}\n计算机的浮点数只能近似表示一些非常精确的数。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n本篇文章是对{% label primary@阮一峰%}的[《浮点数的二进制表示》](http://www.ruanyifeng.com/blog/2010/06/ieee_floating-point_representation.html)的思考过程。\n\n\n## 前言\n\n本来是想对CSAPP的的信息表示的浮点数表示做一下总结的，不过写了几百字后放弃了，主要是对浮点数还不够了解。不过看过阮一峰大神的文章之后，不禁大叹一声。这篇文章就想总结一下自己对浮点数的理解。\n\n## 由一个题目说起\n\n有一道C语言的练习题，是这样的\n\n```c\n\n#include <stdio.h>\n\nvoid main(void){\n\n　　int num=9; /* num是整型变量，设为9 */\n\n　　float* pFloat=&num; /* pFloat表示num的内存地址，但是设为浮点数 */\n\n　　printf(\"num的值为：%d\\n\",num); /* 显示num的整型值 */\n\n　　printf(\"*pFloat的值为：%f\\n\",*pFloat); /* 显示num的浮点值 */\n\n　　*pFloat=9.0; /* 将num的值改为浮点数 */\n\n　　printf(\"num的值为：%d\\n\",num); /* 显示num的整型值 */\n\n　　printf(\"*pFloat的值为：%f\\n\",*pFloat); /* 显示num的浮点值 */\n\n}\n```\n\n运行结果如下：\n\n```bash\ncoral@xx:~/workspace/csapp$ ./float\nnum的值为：9\n*pFloat的值为：0.000000\nnum的值为：1091567616\n*pFloat的值为：9.000000\n\n```\n\n- 第一行，直接输出num的值，这个毫无疑问是对的。\n- 第二行，输出为什么为0？\n> float和int类型的变量存储空间都是4个字节。令一个float类型的指针指向num的地址，然后通过`*float` 的方式访问，会将num地址内存储的内容以4字节浮点数解析。\n\n\n- 第三行，输出为什么是一个类似乱码的数值？\n> 将原来num变量的内容通过float类型的指针采取`*float`的方式赋值为9.0，然而输出的时候按照int的方式输出，所以解析错误，出现乱码。\n\n- 第四行，这个就没有疑问了\n> 通过float类型指针，然后通过float类型指针访问，所以解析方式是相同的，所以答案正如所料。\n\n\n总之，这个题就是需要考虑int类型和float类型的存储格式。如果按照不同的方式解析肯定会出现错误。\n\n\n## 一句话\n\n内存只是一个字节数组而已，不管是float、int还是其他类型的变量，不过是内存中需要的大小或者是存储格式不同而已，无其他区别。\n\n## int的存储格式\n\nint是4字节类型，也就是32位。int的存储格式就是32位补码。这个不必多言，很好理解。这篇文章重点写浮点数的存储格式。 \n\n## float的存储格式\n\nfloat的存储格式正如下图，在这里我们只考虑简单的单精度浮点数和双精度浮点数：\n\n![](float-think/float.png)\n\n### 科学计数法\n\n因为浮点数的需求是要表示小数、特大数和非常接近零的数。当然由于浮点数精度总是有限的，所以有一些数值只能近似表示，而不能完全相等。\n\n下面再来回想一下科学计数法，当然这我们很早之前就学过，比如下面这个数:\n\n$$\n    5.21\\times10^{1314}\n$$\n\n如果我们不使用科学计数法的话就需要用1313位数字来表示，这样就太麻烦了。所以就采用了科学计数法来表示，用于节省“空间”。\n\n### “二进制”科学计数法\n\n与此目的相同，计算机为了表示一些数，就采用了“二进制”版本的科学计数法，比如数值7.0，就可以用以下“二进制”科学计数法表示：\n\n$$\n    1.11\\times2^2\n$$\n\n它是怎么来的呢？因为7.0的二进制表示为111，将小数点左移两位，相应的就需要乘上$2^2$来使其相等。\n\n浮点数的存储格式的想法就来自于此，因为这样能够大大减少存储空间，另外一个好处就是能够在误差允许的范围内表示非常大的数（$\\pm\\infty$）或者非常接近于0的数($f\\to0$)。\n\n浮点数一般用如下方式表示：\n\n$$\n(-1)^S\\times M\\times2^E\n$$\n\n- S用于表示浮点数的符号\n- M用于表示有效数字，$1\\leq M<2$\n- E用于表示指数\n\n所以计算机只需要存储这三部分即可。\n\n### 单精度浮点数的存储格式\n\n与想象的方式还有点不同，除了一些优化外，还需要遵守（abicd）一些约定。\n\n下面的表格便是32位浮点数大端法表示的存储格式：\n\n| sign（符号） | exp（指数） | frac（有效数字小数部分） |\n| :----------: | :---------: | :----------------------: |\n|     1位      |     8位     |           23位           |\n\n\n\n- 32位浮点数的存储格式，大端法表示就是符号+指数+有效数字小数部分\n- 因为有效数字必须满足 $1\\le frac<2$，所以二进制的小数点前的一位总是1，所以省略不写\n- 因为指数不仅需要表示正数次幂，也需要能表示负数次幂，可能是字节对齐的缘故（for the sake of ），所以指数部分不能采用补码形式表示，而是采用IEEE 754规定采用找中间数的方法，中间数总是$\\lfloor\\frac{2^{EMax}-1}{2}\\rfloor$，比如8位指数，中间数就是$\\lfloor\\frac{2^8-1}{2}\\rfloor=127$。在表示的时候需要将真实值＋中间数。\n- E的规定\n  - E不全为0并且不全为1。浮点数的值就是E减去中间数127得到指数真实值，然后有效数字小数部分M前面加上1\n  - E全为0。浮点数的指数为1-中间数（32位浮点数为1-127），有效数字前不再＋1，这样就为0.xxxx的小数，而且可以表示非常接近于0的数。\n  - E全为1。如果有效数字全为0，则表示$\\pm\\infty$；否则就表示这不是一个数 ***NaN***。\n\n### 双精度浮点数的存储格式\n\n解析方法与单精度浮点数相同，存储格式类似。\n下面的表格便是64位浮点数大端法表示的存储格式：\n\n| sign（符号） | exp（指数） | frac（有效数字小数部分） |\n| :----------: | :---------: | :----------------------: |\n|     1位      |    11位     |           52位           |\n\n\n## 例题题解\n\n```c\n\n#include <stdio.h>\n\nvoid main(void){\n\n　　int num=9; /* num是整型变量，设为9 */\n\n　　float* pFloat=&num; /* pFloat表示num的内存地址，但是设为浮点数 */\n\n　　printf(\"num的值为：%d\\n\",num); /* 显示num的整型值 */\n\n　　printf(\"*pFloat的值为：%f\\n\",*pFloat); /* 显示num的浮点值 */\n\n　　*pFloat=9.0; /* 将num的值改为浮点数 */\n\n　　printf(\"num的值为：%d\\n\",num); /* 显示num的整型值 */\n\n　　printf(\"*pFloat的值为：%f\\n\",*pFloat); /* 显示num的浮点值 */\n\n}\n```\n\n```bash\ncoral@xx:~/workspace/csapp$ ./float\nnum的值为：9\n*pFloat的值为：0.000000\nnum的值为：1091567616\n*pFloat的值为：9.000000\n\n```\n\n1. 第二行，为什么是0.00000？\n\n{% note success%}\n\n执行`printf(\"*pFloat的值为：%f\\n\",*pFloat);`语句时，变量存储空间内是存储的int类型的9，二进制表示为0000-0000-0000-0000-0000-0000-0000-1001，但是输出使用float指针类型索引，所以按照此类型解析的话，二进制解析为0-00000000-00000000000000000001001，所以指数E为全0。浮点数真值为：\n\n\n$$\nV=(-1)^0×0.00000000000000000001001×2^{-126}=1.001×2^{-146}\n$$\n数值几乎为0，所以答案就明了了。\n\n{% endnote %}\n\n2. 第三行，为什么是1091567616？\n\n{% note success%}\n\n这个同理了，只不过是反向思考。\n\n首先用float指针将数值设置为9.0。9的二进制表示为1001，用”二进制“科学计数法表示为$1.001\\times2^3$，所以S为0，E为3+127=130（二进制为10000010），有效数为001，所以变量存储的内容为0-10000010-00100000000000000000000，然后将这个值用int类型解析，0100-0001-0001-0000-0000-0000-0000-0000，结果为1091567616。\n\n{% endnote %}","source":"_posts/float-think.md","raw":"---\ntitle: 有关计算机浮点数的思考。\nmathjax: true\ncopyright: true\ncomment: true\ndate: 2019-03-03 19:40:40\ntags:\n- Computer Science\n- CSAPP\ncategories:\n- Computer Science\n\n---\n\n{% note warning %}\n计算机的浮点数只能近似表示一些非常精确的数。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n本篇文章是对{% label primary@阮一峰%}的[《浮点数的二进制表示》](http://www.ruanyifeng.com/blog/2010/06/ieee_floating-point_representation.html)的思考过程。\n\n\n## 前言\n\n本来是想对CSAPP的的信息表示的浮点数表示做一下总结的，不过写了几百字后放弃了，主要是对浮点数还不够了解。不过看过阮一峰大神的文章之后，不禁大叹一声。这篇文章就想总结一下自己对浮点数的理解。\n\n## 由一个题目说起\n\n有一道C语言的练习题，是这样的\n\n```c\n\n#include <stdio.h>\n\nvoid main(void){\n\n　　int num=9; /* num是整型变量，设为9 */\n\n　　float* pFloat=&num; /* pFloat表示num的内存地址，但是设为浮点数 */\n\n　　printf(\"num的值为：%d\\n\",num); /* 显示num的整型值 */\n\n　　printf(\"*pFloat的值为：%f\\n\",*pFloat); /* 显示num的浮点值 */\n\n　　*pFloat=9.0; /* 将num的值改为浮点数 */\n\n　　printf(\"num的值为：%d\\n\",num); /* 显示num的整型值 */\n\n　　printf(\"*pFloat的值为：%f\\n\",*pFloat); /* 显示num的浮点值 */\n\n}\n```\n\n运行结果如下：\n\n```bash\ncoral@xx:~/workspace/csapp$ ./float\nnum的值为：9\n*pFloat的值为：0.000000\nnum的值为：1091567616\n*pFloat的值为：9.000000\n\n```\n\n- 第一行，直接输出num的值，这个毫无疑问是对的。\n- 第二行，输出为什么为0？\n> float和int类型的变量存储空间都是4个字节。令一个float类型的指针指向num的地址，然后通过`*float` 的方式访问，会将num地址内存储的内容以4字节浮点数解析。\n\n\n- 第三行，输出为什么是一个类似乱码的数值？\n> 将原来num变量的内容通过float类型的指针采取`*float`的方式赋值为9.0，然而输出的时候按照int的方式输出，所以解析错误，出现乱码。\n\n- 第四行，这个就没有疑问了\n> 通过float类型指针，然后通过float类型指针访问，所以解析方式是相同的，所以答案正如所料。\n\n\n总之，这个题就是需要考虑int类型和float类型的存储格式。如果按照不同的方式解析肯定会出现错误。\n\n\n## 一句话\n\n内存只是一个字节数组而已，不管是float、int还是其他类型的变量，不过是内存中需要的大小或者是存储格式不同而已，无其他区别。\n\n## int的存储格式\n\nint是4字节类型，也就是32位。int的存储格式就是32位补码。这个不必多言，很好理解。这篇文章重点写浮点数的存储格式。 \n\n## float的存储格式\n\nfloat的存储格式正如下图，在这里我们只考虑简单的单精度浮点数和双精度浮点数：\n\n![](float-think/float.png)\n\n### 科学计数法\n\n因为浮点数的需求是要表示小数、特大数和非常接近零的数。当然由于浮点数精度总是有限的，所以有一些数值只能近似表示，而不能完全相等。\n\n下面再来回想一下科学计数法，当然这我们很早之前就学过，比如下面这个数:\n\n$$\n    5.21\\times10^{1314}\n$$\n\n如果我们不使用科学计数法的话就需要用1313位数字来表示，这样就太麻烦了。所以就采用了科学计数法来表示，用于节省“空间”。\n\n### “二进制”科学计数法\n\n与此目的相同，计算机为了表示一些数，就采用了“二进制”版本的科学计数法，比如数值7.0，就可以用以下“二进制”科学计数法表示：\n\n$$\n    1.11\\times2^2\n$$\n\n它是怎么来的呢？因为7.0的二进制表示为111，将小数点左移两位，相应的就需要乘上$2^2$来使其相等。\n\n浮点数的存储格式的想法就来自于此，因为这样能够大大减少存储空间，另外一个好处就是能够在误差允许的范围内表示非常大的数（$\\pm\\infty$）或者非常接近于0的数($f\\to0$)。\n\n浮点数一般用如下方式表示：\n\n$$\n(-1)^S\\times M\\times2^E\n$$\n\n- S用于表示浮点数的符号\n- M用于表示有效数字，$1\\leq M<2$\n- E用于表示指数\n\n所以计算机只需要存储这三部分即可。\n\n### 单精度浮点数的存储格式\n\n与想象的方式还有点不同，除了一些优化外，还需要遵守（abicd）一些约定。\n\n下面的表格便是32位浮点数大端法表示的存储格式：\n\n| sign（符号） | exp（指数） | frac（有效数字小数部分） |\n| :----------: | :---------: | :----------------------: |\n|     1位      |     8位     |           23位           |\n\n\n\n- 32位浮点数的存储格式，大端法表示就是符号+指数+有效数字小数部分\n- 因为有效数字必须满足 $1\\le frac<2$，所以二进制的小数点前的一位总是1，所以省略不写\n- 因为指数不仅需要表示正数次幂，也需要能表示负数次幂，可能是字节对齐的缘故（for the sake of ），所以指数部分不能采用补码形式表示，而是采用IEEE 754规定采用找中间数的方法，中间数总是$\\lfloor\\frac{2^{EMax}-1}{2}\\rfloor$，比如8位指数，中间数就是$\\lfloor\\frac{2^8-1}{2}\\rfloor=127$。在表示的时候需要将真实值＋中间数。\n- E的规定\n  - E不全为0并且不全为1。浮点数的值就是E减去中间数127得到指数真实值，然后有效数字小数部分M前面加上1\n  - E全为0。浮点数的指数为1-中间数（32位浮点数为1-127），有效数字前不再＋1，这样就为0.xxxx的小数，而且可以表示非常接近于0的数。\n  - E全为1。如果有效数字全为0，则表示$\\pm\\infty$；否则就表示这不是一个数 ***NaN***。\n\n### 双精度浮点数的存储格式\n\n解析方法与单精度浮点数相同，存储格式类似。\n下面的表格便是64位浮点数大端法表示的存储格式：\n\n| sign（符号） | exp（指数） | frac（有效数字小数部分） |\n| :----------: | :---------: | :----------------------: |\n|     1位      |    11位     |           52位           |\n\n\n## 例题题解\n\n```c\n\n#include <stdio.h>\n\nvoid main(void){\n\n　　int num=9; /* num是整型变量，设为9 */\n\n　　float* pFloat=&num; /* pFloat表示num的内存地址，但是设为浮点数 */\n\n　　printf(\"num的值为：%d\\n\",num); /* 显示num的整型值 */\n\n　　printf(\"*pFloat的值为：%f\\n\",*pFloat); /* 显示num的浮点值 */\n\n　　*pFloat=9.0; /* 将num的值改为浮点数 */\n\n　　printf(\"num的值为：%d\\n\",num); /* 显示num的整型值 */\n\n　　printf(\"*pFloat的值为：%f\\n\",*pFloat); /* 显示num的浮点值 */\n\n}\n```\n\n```bash\ncoral@xx:~/workspace/csapp$ ./float\nnum的值为：9\n*pFloat的值为：0.000000\nnum的值为：1091567616\n*pFloat的值为：9.000000\n\n```\n\n1. 第二行，为什么是0.00000？\n\n{% note success%}\n\n执行`printf(\"*pFloat的值为：%f\\n\",*pFloat);`语句时，变量存储空间内是存储的int类型的9，二进制表示为0000-0000-0000-0000-0000-0000-0000-1001，但是输出使用float指针类型索引，所以按照此类型解析的话，二进制解析为0-00000000-00000000000000000001001，所以指数E为全0。浮点数真值为：\n\n\n$$\nV=(-1)^0×0.00000000000000000001001×2^{-126}=1.001×2^{-146}\n$$\n数值几乎为0，所以答案就明了了。\n\n{% endnote %}\n\n2. 第三行，为什么是1091567616？\n\n{% note success%}\n\n这个同理了，只不过是反向思考。\n\n首先用float指针将数值设置为9.0。9的二进制表示为1001，用”二进制“科学计数法表示为$1.001\\times2^3$，所以S为0，E为3+127=130（二进制为10000010），有效数为001，所以变量存储的内容为0-10000010-00100000000000000000000，然后将这个值用int类型解析，0100-0001-0001-0000-0000-0000-0000-0000，结果为1091567616。\n\n{% endnote %}","slug":"float-think","published":1,"updated":"2022-01-06T04:09:12.425Z","_id":"cksq5v7mk001xn0pu2f26b5su","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note warning\"><p>计算机的浮点数只能近似表示一些非常精确的数。</p>\n</div>\n\n<span id=\"more\"></span>\n\n<hr>\n<p>本篇文章是对<mark class=\"label primary\">阮一峰</mark>的<a href=\"http://www.ruanyifeng.com/blog/2010/06/ieee_floating-point_representation.html\">《浮点数的二进制表示》</a>的思考过程。</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本来是想对CSAPP的的信息表示的浮点数表示做一下总结的，不过写了几百字后放弃了，主要是对浮点数还不够了解。不过看过阮一峰大神的文章之后，不禁大叹一声。这篇文章就想总结一下自己对浮点数的理解。</p>\n<h2 id=\"由一个题目说起\"><a href=\"#由一个题目说起\" class=\"headerlink\" title=\"由一个题目说起\"></a>由一个题目说起</h2><p>有一道C语言的练习题，是这样的</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"keyword\">int</span> num=<span class=\"number\">9</span>; <span class=\"comment\">/* num是整型变量，设为9 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"keyword\">float</span>* pFloat=&amp;num; <span class=\"comment\">/* pFloat表示num的内存地址，但是设为浮点数 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;num的值为：%d\\n&quot;</span>,num); <span class=\"comment\">/* 显示num的整型值 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;*pFloat的值为：%f\\n&quot;</span>,*pFloat); <span class=\"comment\">/* 显示num的浮点值 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　*pFloat=<span class=\"number\">9.0</span>; <span class=\"comment\">/* 将num的值改为浮点数 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;num的值为：%d\\n&quot;</span>,num); <span class=\"comment\">/* 显示num的整型值 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;*pFloat的值为：%f\\n&quot;</span>,*pFloat); <span class=\"comment\">/* 显示num的浮点值 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">coral@xx:~/workspace/csapp$ ./<span class=\"built_in\">float</span></span><br><span class=\"line\">num的值为：9</span><br><span class=\"line\">*pFloat的值为：0.000000</span><br><span class=\"line\">num的值为：1091567616</span><br><span class=\"line\">*pFloat的值为：9.000000</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>第一行，直接输出num的值，这个毫无疑问是对的。</li>\n<li>第二行，输出为什么为0？<blockquote>\n<p>float和int类型的变量存储空间都是4个字节。令一个float类型的指针指向num的地址，然后通过<code>*float</code> 的方式访问，会将num地址内存储的内容以4字节浮点数解析。</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><p>第三行，输出为什么是一个类似乱码的数值？</p>\n<blockquote>\n<p>将原来num变量的内容通过float类型的指针采取<code>*float</code>的方式赋值为9.0，然而输出的时候按照int的方式输出，所以解析错误，出现乱码。</p>\n</blockquote>\n</li>\n<li><p>第四行，这个就没有疑问了</p>\n<blockquote>\n<p>通过float类型指针，然后通过float类型指针访问，所以解析方式是相同的，所以答案正如所料。</p>\n</blockquote>\n</li>\n</ul>\n<p>总之，这个题就是需要考虑int类型和float类型的存储格式。如果按照不同的方式解析肯定会出现错误。</p>\n<h2 id=\"一句话\"><a href=\"#一句话\" class=\"headerlink\" title=\"一句话\"></a>一句话</h2><p>内存只是一个字节数组而已，不管是float、int还是其他类型的变量，不过是内存中需要的大小或者是存储格式不同而已，无其他区别。</p>\n<h2 id=\"int的存储格式\"><a href=\"#int的存储格式\" class=\"headerlink\" title=\"int的存储格式\"></a>int的存储格式</h2><p>int是4字节类型，也就是32位。int的存储格式就是32位补码。这个不必多言，很好理解。这篇文章重点写浮点数的存储格式。 </p>\n<h2 id=\"float的存储格式\"><a href=\"#float的存储格式\" class=\"headerlink\" title=\"float的存储格式\"></a>float的存储格式</h2><p>float的存储格式正如下图，在这里我们只考虑简单的单精度浮点数和双精度浮点数：</p>\n<p><img data-src=\"float-think/float.png\"></p>\n<h3 id=\"科学计数法\"><a href=\"#科学计数法\" class=\"headerlink\" title=\"科学计数法\"></a>科学计数法</h3><p>因为浮点数的需求是要表示小数、特大数和非常接近零的数。当然由于浮点数精度总是有限的，所以有一些数值只能近似表示，而不能完全相等。</p>\n<p>下面再来回想一下科学计数法，当然这我们很早之前就学过，比如下面这个数:</p>\n<p>$$<br>    5.21\\times10^{1314}<br>$$</p>\n<p>如果我们不使用科学计数法的话就需要用1313位数字来表示，这样就太麻烦了。所以就采用了科学计数法来表示，用于节省“空间”。</p>\n<h3 id=\"“二进制”科学计数法\"><a href=\"#“二进制”科学计数法\" class=\"headerlink\" title=\"“二进制”科学计数法\"></a>“二进制”科学计数法</h3><p>与此目的相同，计算机为了表示一些数，就采用了“二进制”版本的科学计数法，比如数值7.0，就可以用以下“二进制”科学计数法表示：</p>\n<p>$$<br>    1.11\\times2^2<br>$$</p>\n<p>它是怎么来的呢？因为7.0的二进制表示为111，将小数点左移两位，相应的就需要乘上$2^2$来使其相等。</p>\n<p>浮点数的存储格式的想法就来自于此，因为这样能够大大减少存储空间，另外一个好处就是能够在误差允许的范围内表示非常大的数（$\\pm\\infty$）或者非常接近于0的数($f\\to0$)。</p>\n<p>浮点数一般用如下方式表示：</p>\n<p>$$<br>(-1)^S\\times M\\times2^E<br>$$</p>\n<ul>\n<li>S用于表示浮点数的符号</li>\n<li>M用于表示有效数字，$1\\leq M&lt;2$</li>\n<li>E用于表示指数</li>\n</ul>\n<p>所以计算机只需要存储这三部分即可。</p>\n<h3 id=\"单精度浮点数的存储格式\"><a href=\"#单精度浮点数的存储格式\" class=\"headerlink\" title=\"单精度浮点数的存储格式\"></a>单精度浮点数的存储格式</h3><p>与想象的方式还有点不同，除了一些优化外，还需要遵守（abicd）一些约定。</p>\n<p>下面的表格便是32位浮点数大端法表示的存储格式：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">sign（符号）</th>\n<th align=\"center\">exp（指数）</th>\n<th align=\"center\">frac（有效数字小数部分）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1位</td>\n<td align=\"center\">8位</td>\n<td align=\"center\">23位</td>\n</tr>\n</tbody></table>\n<ul>\n<li>32位浮点数的存储格式，大端法表示就是符号+指数+有效数字小数部分</li>\n<li>因为有效数字必须满足 $1\\le frac&lt;2$，所以二进制的小数点前的一位总是1，所以省略不写</li>\n<li>因为指数不仅需要表示正数次幂，也需要能表示负数次幂，可能是字节对齐的缘故（for the sake of ），所以指数部分不能采用补码形式表示，而是采用IEEE 754规定采用找中间数的方法，中间数总是$\\lfloor\\frac{2^{EMax}-1}{2}\\rfloor$，比如8位指数，中间数就是$\\lfloor\\frac{2^8-1}{2}\\rfloor=127$。在表示的时候需要将真实值＋中间数。</li>\n<li>E的规定<ul>\n<li>E不全为0并且不全为1。浮点数的值就是E减去中间数127得到指数真实值，然后有效数字小数部分M前面加上1</li>\n<li>E全为0。浮点数的指数为1-中间数（32位浮点数为1-127），有效数字前不再＋1，这样就为0.xxxx的小数，而且可以表示非常接近于0的数。</li>\n<li>E全为1。如果有效数字全为0，则表示$\\pm\\infty$；否则就表示这不是一个数 <em><strong>NaN</strong></em>。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"双精度浮点数的存储格式\"><a href=\"#双精度浮点数的存储格式\" class=\"headerlink\" title=\"双精度浮点数的存储格式\"></a>双精度浮点数的存储格式</h3><p>解析方法与单精度浮点数相同，存储格式类似。<br>下面的表格便是64位浮点数大端法表示的存储格式：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">sign（符号）</th>\n<th align=\"center\">exp（指数）</th>\n<th align=\"center\">frac（有效数字小数部分）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1位</td>\n<td align=\"center\">11位</td>\n<td align=\"center\">52位</td>\n</tr>\n</tbody></table>\n<h2 id=\"例题题解\"><a href=\"#例题题解\" class=\"headerlink\" title=\"例题题解\"></a>例题题解</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"keyword\">int</span> num=<span class=\"number\">9</span>; <span class=\"comment\">/* num是整型变量，设为9 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"keyword\">float</span>* pFloat=&amp;num; <span class=\"comment\">/* pFloat表示num的内存地址，但是设为浮点数 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;num的值为：%d\\n&quot;</span>,num); <span class=\"comment\">/* 显示num的整型值 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;*pFloat的值为：%f\\n&quot;</span>,*pFloat); <span class=\"comment\">/* 显示num的浮点值 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　*pFloat=<span class=\"number\">9.0</span>; <span class=\"comment\">/* 将num的值改为浮点数 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;num的值为：%d\\n&quot;</span>,num); <span class=\"comment\">/* 显示num的整型值 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;*pFloat的值为：%f\\n&quot;</span>,*pFloat); <span class=\"comment\">/* 显示num的浮点值 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">coral@xx:~/workspace/csapp$ ./<span class=\"built_in\">float</span></span><br><span class=\"line\">num的值为：9</span><br><span class=\"line\">*pFloat的值为：0.000000</span><br><span class=\"line\">num的值为：1091567616</span><br><span class=\"line\">*pFloat的值为：9.000000</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>第二行，为什么是0.00000？</li>\n</ol>\n<div class=\"note success\"><p>执行<code>printf(&quot;*pFloat的值为：%f\\n&quot;,*pFloat);</code>语句时，变量存储空间内是存储的int类型的9，二进制表示为0000-0000-0000-0000-0000-0000-0000-1001，但是输出使用float指针类型索引，所以按照此类型解析的话，二进制解析为0-00000000-00000000000000000001001，所以指数E为全0。浮点数真值为：</p>\n<p>$$<br>V=(-1)^0×0.00000000000000000001001×2^{-126}=1.001×2^{-146}<br>$$<br>数值几乎为0，所以答案就明了了。</p>\n</div>\n\n<ol start=\"2\">\n<li>第三行，为什么是1091567616？</li>\n</ol>\n<div class=\"note success\"><p>这个同理了，只不过是反向思考。</p>\n<p>首先用float指针将数值设置为9.0。9的二进制表示为1001，用”二进制“科学计数法表示为$1.001\\times2^3$，所以S为0，E为3+127=130（二进制为10000010），有效数为001，所以变量存储的内容为0-10000010-00100000000000000000000，然后将这个值用int类型解析，0100-0001-0001-0000-0000-0000-0000-0000，结果为1091567616。</p>\n</div>","site":{"data":{}},"excerpt":"<div class=\"note warning\"><p>计算机的浮点数只能近似表示一些非常精确的数。</p>\n</div>","more":"<hr>\n<p>本篇文章是对<mark class=\"label primary\">阮一峰</mark>的<a href=\"http://www.ruanyifeng.com/blog/2010/06/ieee_floating-point_representation.html\">《浮点数的二进制表示》</a>的思考过程。</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本来是想对CSAPP的的信息表示的浮点数表示做一下总结的，不过写了几百字后放弃了，主要是对浮点数还不够了解。不过看过阮一峰大神的文章之后，不禁大叹一声。这篇文章就想总结一下自己对浮点数的理解。</p>\n<h2 id=\"由一个题目说起\"><a href=\"#由一个题目说起\" class=\"headerlink\" title=\"由一个题目说起\"></a>由一个题目说起</h2><p>有一道C语言的练习题，是这样的</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"keyword\">int</span> num=<span class=\"number\">9</span>; <span class=\"comment\">/* num是整型变量，设为9 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"keyword\">float</span>* pFloat=&amp;num; <span class=\"comment\">/* pFloat表示num的内存地址，但是设为浮点数 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;num的值为：%d\\n&quot;</span>,num); <span class=\"comment\">/* 显示num的整型值 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;*pFloat的值为：%f\\n&quot;</span>,*pFloat); <span class=\"comment\">/* 显示num的浮点值 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　*pFloat=<span class=\"number\">9.0</span>; <span class=\"comment\">/* 将num的值改为浮点数 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;num的值为：%d\\n&quot;</span>,num); <span class=\"comment\">/* 显示num的整型值 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;*pFloat的值为：%f\\n&quot;</span>,*pFloat); <span class=\"comment\">/* 显示num的浮点值 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">coral@xx:~/workspace/csapp$ ./<span class=\"built_in\">float</span></span><br><span class=\"line\">num的值为：9</span><br><span class=\"line\">*pFloat的值为：0.000000</span><br><span class=\"line\">num的值为：1091567616</span><br><span class=\"line\">*pFloat的值为：9.000000</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>第一行，直接输出num的值，这个毫无疑问是对的。</li>\n<li>第二行，输出为什么为0？<blockquote>\n<p>float和int类型的变量存储空间都是4个字节。令一个float类型的指针指向num的地址，然后通过<code>*float</code> 的方式访问，会将num地址内存储的内容以4字节浮点数解析。</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><p>第三行，输出为什么是一个类似乱码的数值？</p>\n<blockquote>\n<p>将原来num变量的内容通过float类型的指针采取<code>*float</code>的方式赋值为9.0，然而输出的时候按照int的方式输出，所以解析错误，出现乱码。</p>\n</blockquote>\n</li>\n<li><p>第四行，这个就没有疑问了</p>\n<blockquote>\n<p>通过float类型指针，然后通过float类型指针访问，所以解析方式是相同的，所以答案正如所料。</p>\n</blockquote>\n</li>\n</ul>\n<p>总之，这个题就是需要考虑int类型和float类型的存储格式。如果按照不同的方式解析肯定会出现错误。</p>\n<h2 id=\"一句话\"><a href=\"#一句话\" class=\"headerlink\" title=\"一句话\"></a>一句话</h2><p>内存只是一个字节数组而已，不管是float、int还是其他类型的变量，不过是内存中需要的大小或者是存储格式不同而已，无其他区别。</p>\n<h2 id=\"int的存储格式\"><a href=\"#int的存储格式\" class=\"headerlink\" title=\"int的存储格式\"></a>int的存储格式</h2><p>int是4字节类型，也就是32位。int的存储格式就是32位补码。这个不必多言，很好理解。这篇文章重点写浮点数的存储格式。 </p>\n<h2 id=\"float的存储格式\"><a href=\"#float的存储格式\" class=\"headerlink\" title=\"float的存储格式\"></a>float的存储格式</h2><p>float的存储格式正如下图，在这里我们只考虑简单的单精度浮点数和双精度浮点数：</p>\n<p><img data-src=\"float-think/float.png\"></p>\n<h3 id=\"科学计数法\"><a href=\"#科学计数法\" class=\"headerlink\" title=\"科学计数法\"></a>科学计数法</h3><p>因为浮点数的需求是要表示小数、特大数和非常接近零的数。当然由于浮点数精度总是有限的，所以有一些数值只能近似表示，而不能完全相等。</p>\n<p>下面再来回想一下科学计数法，当然这我们很早之前就学过，比如下面这个数:</p>\n<p>$$<br>    5.21\\times10^{1314}<br>$$</p>\n<p>如果我们不使用科学计数法的话就需要用1313位数字来表示，这样就太麻烦了。所以就采用了科学计数法来表示，用于节省“空间”。</p>\n<h3 id=\"“二进制”科学计数法\"><a href=\"#“二进制”科学计数法\" class=\"headerlink\" title=\"“二进制”科学计数法\"></a>“二进制”科学计数法</h3><p>与此目的相同，计算机为了表示一些数，就采用了“二进制”版本的科学计数法，比如数值7.0，就可以用以下“二进制”科学计数法表示：</p>\n<p>$$<br>    1.11\\times2^2<br>$$</p>\n<p>它是怎么来的呢？因为7.0的二进制表示为111，将小数点左移两位，相应的就需要乘上$2^2$来使其相等。</p>\n<p>浮点数的存储格式的想法就来自于此，因为这样能够大大减少存储空间，另外一个好处就是能够在误差允许的范围内表示非常大的数（$\\pm\\infty$）或者非常接近于0的数($f\\to0$)。</p>\n<p>浮点数一般用如下方式表示：</p>\n<p>$$<br>(-1)^S\\times M\\times2^E<br>$$</p>\n<ul>\n<li>S用于表示浮点数的符号</li>\n<li>M用于表示有效数字，$1\\leq M&lt;2$</li>\n<li>E用于表示指数</li>\n</ul>\n<p>所以计算机只需要存储这三部分即可。</p>\n<h3 id=\"单精度浮点数的存储格式\"><a href=\"#单精度浮点数的存储格式\" class=\"headerlink\" title=\"单精度浮点数的存储格式\"></a>单精度浮点数的存储格式</h3><p>与想象的方式还有点不同，除了一些优化外，还需要遵守（abicd）一些约定。</p>\n<p>下面的表格便是32位浮点数大端法表示的存储格式：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">sign（符号）</th>\n<th align=\"center\">exp（指数）</th>\n<th align=\"center\">frac（有效数字小数部分）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1位</td>\n<td align=\"center\">8位</td>\n<td align=\"center\">23位</td>\n</tr>\n</tbody></table>\n<ul>\n<li>32位浮点数的存储格式，大端法表示就是符号+指数+有效数字小数部分</li>\n<li>因为有效数字必须满足 $1\\le frac&lt;2$，所以二进制的小数点前的一位总是1，所以省略不写</li>\n<li>因为指数不仅需要表示正数次幂，也需要能表示负数次幂，可能是字节对齐的缘故（for the sake of ），所以指数部分不能采用补码形式表示，而是采用IEEE 754规定采用找中间数的方法，中间数总是$\\lfloor\\frac{2^{EMax}-1}{2}\\rfloor$，比如8位指数，中间数就是$\\lfloor\\frac{2^8-1}{2}\\rfloor=127$。在表示的时候需要将真实值＋中间数。</li>\n<li>E的规定<ul>\n<li>E不全为0并且不全为1。浮点数的值就是E减去中间数127得到指数真实值，然后有效数字小数部分M前面加上1</li>\n<li>E全为0。浮点数的指数为1-中间数（32位浮点数为1-127），有效数字前不再＋1，这样就为0.xxxx的小数，而且可以表示非常接近于0的数。</li>\n<li>E全为1。如果有效数字全为0，则表示$\\pm\\infty$；否则就表示这不是一个数 <em><strong>NaN</strong></em>。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"双精度浮点数的存储格式\"><a href=\"#双精度浮点数的存储格式\" class=\"headerlink\" title=\"双精度浮点数的存储格式\"></a>双精度浮点数的存储格式</h3><p>解析方法与单精度浮点数相同，存储格式类似。<br>下面的表格便是64位浮点数大端法表示的存储格式：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">sign（符号）</th>\n<th align=\"center\">exp（指数）</th>\n<th align=\"center\">frac（有效数字小数部分）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1位</td>\n<td align=\"center\">11位</td>\n<td align=\"center\">52位</td>\n</tr>\n</tbody></table>\n<h2 id=\"例题题解\"><a href=\"#例题题解\" class=\"headerlink\" title=\"例题题解\"></a>例题题解</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"keyword\">int</span> num=<span class=\"number\">9</span>; <span class=\"comment\">/* num是整型变量，设为9 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"keyword\">float</span>* pFloat=&amp;num; <span class=\"comment\">/* pFloat表示num的内存地址，但是设为浮点数 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;num的值为：%d\\n&quot;</span>,num); <span class=\"comment\">/* 显示num的整型值 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;*pFloat的值为：%f\\n&quot;</span>,*pFloat); <span class=\"comment\">/* 显示num的浮点值 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　*pFloat=<span class=\"number\">9.0</span>; <span class=\"comment\">/* 将num的值改为浮点数 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;num的值为：%d\\n&quot;</span>,num); <span class=\"comment\">/* 显示num的整型值 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;*pFloat的值为：%f\\n&quot;</span>,*pFloat); <span class=\"comment\">/* 显示num的浮点值 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">coral@xx:~/workspace/csapp$ ./<span class=\"built_in\">float</span></span><br><span class=\"line\">num的值为：9</span><br><span class=\"line\">*pFloat的值为：0.000000</span><br><span class=\"line\">num的值为：1091567616</span><br><span class=\"line\">*pFloat的值为：9.000000</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>第二行，为什么是0.00000？</li>\n</ol>\n<div class=\"note success\"><p>执行<code>printf(&quot;*pFloat的值为：%f\\n&quot;,*pFloat);</code>语句时，变量存储空间内是存储的int类型的9，二进制表示为0000-0000-0000-0000-0000-0000-0000-1001，但是输出使用float指针类型索引，所以按照此类型解析的话，二进制解析为0-00000000-00000000000000000001001，所以指数E为全0。浮点数真值为：</p>\n<p>$$<br>V=(-1)^0×0.00000000000000000001001×2^{-126}=1.001×2^{-146}<br>$$<br>数值几乎为0，所以答案就明了了。</p>\n</div>\n\n<ol start=\"2\">\n<li>第三行，为什么是1091567616？</li>\n</ol>\n<div class=\"note success\"><p>这个同理了，只不过是反向思考。</p>\n<p>首先用float指针将数值设置为9.0。9的二进制表示为1001，用”二进制“科学计数法表示为$1.001\\times2^3$，所以S为0，E为3+127=130（二进制为10000010），有效数为001，所以变量存储的内容为0-10000010-00100000000000000000000，然后将这个值用int类型解析，0100-0001-0001-0000-0000-0000-0000-0000，结果为1091567616。</p>\n</div>"},{"title":"《Git三剑客》学习笔记：个人使用场景","mathjax":false,"copyright":true,"comment":true,"date":"2020-02-26T06:55:17.000Z","_content":"\n{% note primary %}\nGit个人使用的场景，需要的命令和知识点。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 前言\n\n本篇主要总结一下一些个人使用Git时遇到的常见场景问题及需要的常见命令。\n\n\n## 场景分析\n\n### 0x01 删除不必要的分支\n\n```bash\ngit branch -d branch-name #只能删除完全merge的分支\ngit branch -D branch-name #强制删除分支\n```\n\n### 0x02 修改最新commit的message\n\n```bash\ngit commit --amend\n```\n\n### 0x03 修改老旧commit的message\n\n利用交互式的`rebase`命令，其中rebase的对象是目标commit的父commit。**交互式rebase的时候需要使用`reword`命令将目标commit选取出来并进行message的修改。**\n**因为修改了一个commit的message，因此会更新这个commit的id**\n```bash\ngit rebase -i parentCommitId\n```\n\n下面是一个实例：\n\n```bash\n$ git log -3\ncommit c3d6d73712cabfb21df172d2f4f673cbf909f974 (HEAD -> master)\nAuthor: lmy <lmy@lmy.lmy>\nDate:   Sat Feb 22 16:35:04 2020 +0800\n\n    Modify style.scss content\n\ncommit abb8e578c1ceba076fa23fdfdc9ae2f302ae2877 (tag: testTag)\nAuthor: lmy <lmy@lmy.lmy>\nDate:   Sat Feb 22 13:27:21 2020 +0800\n\n    Move style.css to style.scss                       #### 将 Move 改为 Rename\n\ncommit f4d1584be08bf36f31b3c4442604a233ba811eb9\nAuthor: lmy <lmy@lmy.lmy>\nDate:   Sat Feb 22 13:13:33 2020 +0800\n\n    Add style.css\n\n##########################################################################################\n\n$ git rebase -i f4d1584be08bf36f31b3c4442604a233ba811eb9\n[detached HEAD 575eb32] Rename style.css to style.scss\n Date: Sat Feb 22 13:27:21 2020 +0800\n 1 file changed, 0 insertions(+), 0 deletions(-)\n rename style.css => style.scss (100%)\nSuccessfully rebased and updated refs/heads/master.\n\n###########################################################################################\n$ git log -3\ncommit 4689f4d16251bd9c692f182ddcf8fa744e7c3040 (HEAD -> master)\nAuthor: lmy <lmy@lmy.lmy>\nDate:   Sat Feb 22 16:35:04 2020 +0800\n\n    Modify style.scss content\n\ncommit 575eb324d6933565c26c75d8e198c9348b3f482f  ### commitId发生变化\nAuthor: lmy <lmy@lmy.lmy>\nDate:   Sat Feb 22 13:27:21 2020 +0800\n\n    Rename style.css to style.scss  ########### 已经修改\n\ncommit f4d1584be08bf36f31b3c4442604a233ba811eb9\nAuthor: lmy <lmy@lmy.lmy>\nDate:   Sat Feb 22 13:13:33 2020 +0800\n\n    Add style.css\n\n```\n\n### 0x04 合并多个连续的commit\n\n和修改之前的commit message的情景有些类似。也是使用`rebase`命令的交互式。**选择要合并连续commit的父commit进行rebase，并把将要合并的commit进行`squash`命令操作（挤压）。**\n\n```bash\ngit rebase -i parentCommitId\n```\n\n以下是一个实例\n```bash\n$ git log\ncommit 4689f4d16251bd9c692f182ddcf8fa744e7c3040 (HEAD -> master)\nAuthor: lmy <lmy@lmy.lmy>\nDate:   Sat Feb 22 16:35:04 2020 +0800\n\n    Modify style.scss content\n\ncommit 575eb324d6933565c26c75d8e198c9348b3f482f\nAuthor: lmy <lmy@lmy.lmy>\nDate:   Sat Feb 22 13:27:21 2020 +0800\n\n    Rename style.css to style.scss\n\ncommit f4d1584be08bf36f31b3c4442604a233ba811eb9\nAuthor: lmy <lmy@lmy.lmy>\nDate:   Sat Feb 22 13:13:33 2020 +0800\n\n    Add style.css\n\ncommit 8df90bcccc65ee27aee90166ca65887d6415bc3b\nAuthor: ScarboroughCoral <3249977074@qq.com>\nDate:   Sat Feb 22 13:09:25 2020 +0800\n\n    Add index+logo\n##################################################################\n$ git rebase -i 8df90 #################################### 将除了最早的commit合并\n[detached HEAD ae9bbaf] create a complete web page\n Date: Sat Feb 22 13:13:33 2020 +0800\n 1 file changed, 7 insertions(+)\n create mode 100644 style.scss\nSuccessfully rebased and updated refs/heads/master.\n###########################################################################\n$ git log\ncommit ae9bbaf72e24972246579de21136c72328a3c94b (HEAD -> master)\nAuthor: lmy <lmy@lmy.lmy>\nDate:   Sat Feb 22 13:13:33 2020 +0800\n\n    create a complete web page\n\n    Add style.css\n\n    Rename style.css to style.scss\n\n    Modify style.scss content\n\ncommit 8df90bcccc65ee27aee90166ca65887d6415bc3b\nAuthor: ScarboroughCoral <3249977074@qq.com>\nDate:   Sat Feb 22 13:09:25 2020 +0800\n\n    Add index+logo\n\n```\n\n### 0x05 合并多个间隔的commit\n和合并连续的commit类似。还是对commit的父commit进行reabse。**在rebase交互界面中将需要合并的间隔的commit放在一起（连续），将后续的commit进行squash即可。**\n**不过在第二步添加commit message时出现问题跳出交互界面，按照提示进行`git rebase --continue`进行操作即可。**\n\n```bash\ngit rebase -i parentCommitId\n```\n\n下面是一个实例：\n\n```bash\n$ git log\ncommit 6e5d8a876236c8bff77508be608303b600f83a74 (HEAD -> temp)\nAuthor: lmy <lmy@lmy.lmy>\nDate:   Sat Feb 22 13:41:29 2020 +0800 \n\n    Add test ################################################# 将当前commit和最早的一个commit合并\n\ncommit f4d1584be08bf36f31b3c4442604a233ba811eb9\nAuthor: lmy <lmy@lmy.lmy>\nDate:   Sat Feb 22 13:13:33 2020 +0800\n\n    Add style.css\n\ncommit 8df90bcccc65ee27aee90166ca65887d6415bc3b\nAuthor: ScarboroughCoral <3249977074@qq.com>\nDate:   Sat Feb 22 13:09:25 2020 +0800\n\n    Add index+logo\n############################################################################\n\n$ git rebase -i 8df90bcc\ninteractive rebase in progress; onto 8df90bc\nLast command done (1 command done):\n   pick 8df90bc\nNext commands to do (2 remaining commands):\n   squash 6e5d8a8 Add test\n   pick f4d1584 Add style.css\nYou are currently rebasing branch 'temp' on '8df90bc'.\n\nnothing to commit, working tree clean\nThe previous cherry-pick is now empty, possibly due to conflict resolution.\nIf you wish to commit it anyway, use:\n\n    git commit --allow-empty\n\nOtherwise, please use 'git reset'\nCould not apply 8df90bc... \n\n####################################################################\n$ git status\ninteractive rebase in progress; onto 8df90bc\nLast command done (1 command done):\n   pick 8df90bc\nNext commands to do (2 remaining commands):\n   squash 6e5d8a8 Add test\n   pick f4d1584 Add style.css\n  (use \"git rebase --edit-todo\" to view and edit)\nYou are currently rebasing branch 'temp' on '8df90bc'.\n  (all conflicts fixed: run \"git rebase --continue\") ############################ 出现问题，使用 rebase --continue命令继续交互\n#######################################################################\n$ git rebase --continue\n[detached HEAD 5c248b3] add index & test\n Author: ScarboroughCoral <3249977074@qq.com>\n Date: Sat Feb 22 13:09:25 2020 +0800\n 2 files changed, 19 insertions(+)\n create mode 100644 index.html\n create mode 100644 readme.md\nSuccessfully rebased and updated refs/heads/temp.\n```\n\n\n\n## Reference\n\n- 苏玲，《Git三剑客》","source":"_posts/git-learning-1.md","raw":"---\ntitle: 《Git三剑客》学习笔记：个人使用场景\nmathjax: false\ncopyright: true\ncomment: true\ndate: 2020-02-26 14:55:17\ntags:\n- Git\ncategories:\n- Tools\n- Git\n\n---\n\n{% note primary %}\nGit个人使用的场景，需要的命令和知识点。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 前言\n\n本篇主要总结一下一些个人使用Git时遇到的常见场景问题及需要的常见命令。\n\n\n## 场景分析\n\n### 0x01 删除不必要的分支\n\n```bash\ngit branch -d branch-name #只能删除完全merge的分支\ngit branch -D branch-name #强制删除分支\n```\n\n### 0x02 修改最新commit的message\n\n```bash\ngit commit --amend\n```\n\n### 0x03 修改老旧commit的message\n\n利用交互式的`rebase`命令，其中rebase的对象是目标commit的父commit。**交互式rebase的时候需要使用`reword`命令将目标commit选取出来并进行message的修改。**\n**因为修改了一个commit的message，因此会更新这个commit的id**\n```bash\ngit rebase -i parentCommitId\n```\n\n下面是一个实例：\n\n```bash\n$ git log -3\ncommit c3d6d73712cabfb21df172d2f4f673cbf909f974 (HEAD -> master)\nAuthor: lmy <lmy@lmy.lmy>\nDate:   Sat Feb 22 16:35:04 2020 +0800\n\n    Modify style.scss content\n\ncommit abb8e578c1ceba076fa23fdfdc9ae2f302ae2877 (tag: testTag)\nAuthor: lmy <lmy@lmy.lmy>\nDate:   Sat Feb 22 13:27:21 2020 +0800\n\n    Move style.css to style.scss                       #### 将 Move 改为 Rename\n\ncommit f4d1584be08bf36f31b3c4442604a233ba811eb9\nAuthor: lmy <lmy@lmy.lmy>\nDate:   Sat Feb 22 13:13:33 2020 +0800\n\n    Add style.css\n\n##########################################################################################\n\n$ git rebase -i f4d1584be08bf36f31b3c4442604a233ba811eb9\n[detached HEAD 575eb32] Rename style.css to style.scss\n Date: Sat Feb 22 13:27:21 2020 +0800\n 1 file changed, 0 insertions(+), 0 deletions(-)\n rename style.css => style.scss (100%)\nSuccessfully rebased and updated refs/heads/master.\n\n###########################################################################################\n$ git log -3\ncommit 4689f4d16251bd9c692f182ddcf8fa744e7c3040 (HEAD -> master)\nAuthor: lmy <lmy@lmy.lmy>\nDate:   Sat Feb 22 16:35:04 2020 +0800\n\n    Modify style.scss content\n\ncommit 575eb324d6933565c26c75d8e198c9348b3f482f  ### commitId发生变化\nAuthor: lmy <lmy@lmy.lmy>\nDate:   Sat Feb 22 13:27:21 2020 +0800\n\n    Rename style.css to style.scss  ########### 已经修改\n\ncommit f4d1584be08bf36f31b3c4442604a233ba811eb9\nAuthor: lmy <lmy@lmy.lmy>\nDate:   Sat Feb 22 13:13:33 2020 +0800\n\n    Add style.css\n\n```\n\n### 0x04 合并多个连续的commit\n\n和修改之前的commit message的情景有些类似。也是使用`rebase`命令的交互式。**选择要合并连续commit的父commit进行rebase，并把将要合并的commit进行`squash`命令操作（挤压）。**\n\n```bash\ngit rebase -i parentCommitId\n```\n\n以下是一个实例\n```bash\n$ git log\ncommit 4689f4d16251bd9c692f182ddcf8fa744e7c3040 (HEAD -> master)\nAuthor: lmy <lmy@lmy.lmy>\nDate:   Sat Feb 22 16:35:04 2020 +0800\n\n    Modify style.scss content\n\ncommit 575eb324d6933565c26c75d8e198c9348b3f482f\nAuthor: lmy <lmy@lmy.lmy>\nDate:   Sat Feb 22 13:27:21 2020 +0800\n\n    Rename style.css to style.scss\n\ncommit f4d1584be08bf36f31b3c4442604a233ba811eb9\nAuthor: lmy <lmy@lmy.lmy>\nDate:   Sat Feb 22 13:13:33 2020 +0800\n\n    Add style.css\n\ncommit 8df90bcccc65ee27aee90166ca65887d6415bc3b\nAuthor: ScarboroughCoral <3249977074@qq.com>\nDate:   Sat Feb 22 13:09:25 2020 +0800\n\n    Add index+logo\n##################################################################\n$ git rebase -i 8df90 #################################### 将除了最早的commit合并\n[detached HEAD ae9bbaf] create a complete web page\n Date: Sat Feb 22 13:13:33 2020 +0800\n 1 file changed, 7 insertions(+)\n create mode 100644 style.scss\nSuccessfully rebased and updated refs/heads/master.\n###########################################################################\n$ git log\ncommit ae9bbaf72e24972246579de21136c72328a3c94b (HEAD -> master)\nAuthor: lmy <lmy@lmy.lmy>\nDate:   Sat Feb 22 13:13:33 2020 +0800\n\n    create a complete web page\n\n    Add style.css\n\n    Rename style.css to style.scss\n\n    Modify style.scss content\n\ncommit 8df90bcccc65ee27aee90166ca65887d6415bc3b\nAuthor: ScarboroughCoral <3249977074@qq.com>\nDate:   Sat Feb 22 13:09:25 2020 +0800\n\n    Add index+logo\n\n```\n\n### 0x05 合并多个间隔的commit\n和合并连续的commit类似。还是对commit的父commit进行reabse。**在rebase交互界面中将需要合并的间隔的commit放在一起（连续），将后续的commit进行squash即可。**\n**不过在第二步添加commit message时出现问题跳出交互界面，按照提示进行`git rebase --continue`进行操作即可。**\n\n```bash\ngit rebase -i parentCommitId\n```\n\n下面是一个实例：\n\n```bash\n$ git log\ncommit 6e5d8a876236c8bff77508be608303b600f83a74 (HEAD -> temp)\nAuthor: lmy <lmy@lmy.lmy>\nDate:   Sat Feb 22 13:41:29 2020 +0800 \n\n    Add test ################################################# 将当前commit和最早的一个commit合并\n\ncommit f4d1584be08bf36f31b3c4442604a233ba811eb9\nAuthor: lmy <lmy@lmy.lmy>\nDate:   Sat Feb 22 13:13:33 2020 +0800\n\n    Add style.css\n\ncommit 8df90bcccc65ee27aee90166ca65887d6415bc3b\nAuthor: ScarboroughCoral <3249977074@qq.com>\nDate:   Sat Feb 22 13:09:25 2020 +0800\n\n    Add index+logo\n############################################################################\n\n$ git rebase -i 8df90bcc\ninteractive rebase in progress; onto 8df90bc\nLast command done (1 command done):\n   pick 8df90bc\nNext commands to do (2 remaining commands):\n   squash 6e5d8a8 Add test\n   pick f4d1584 Add style.css\nYou are currently rebasing branch 'temp' on '8df90bc'.\n\nnothing to commit, working tree clean\nThe previous cherry-pick is now empty, possibly due to conflict resolution.\nIf you wish to commit it anyway, use:\n\n    git commit --allow-empty\n\nOtherwise, please use 'git reset'\nCould not apply 8df90bc... \n\n####################################################################\n$ git status\ninteractive rebase in progress; onto 8df90bc\nLast command done (1 command done):\n   pick 8df90bc\nNext commands to do (2 remaining commands):\n   squash 6e5d8a8 Add test\n   pick f4d1584 Add style.css\n  (use \"git rebase --edit-todo\" to view and edit)\nYou are currently rebasing branch 'temp' on '8df90bc'.\n  (all conflicts fixed: run \"git rebase --continue\") ############################ 出现问题，使用 rebase --continue命令继续交互\n#######################################################################\n$ git rebase --continue\n[detached HEAD 5c248b3] add index & test\n Author: ScarboroughCoral <3249977074@qq.com>\n Date: Sat Feb 22 13:09:25 2020 +0800\n 2 files changed, 19 insertions(+)\n create mode 100644 index.html\n create mode 100644 readme.md\nSuccessfully rebased and updated refs/heads/temp.\n```\n\n\n\n## Reference\n\n- 苏玲，《Git三剑客》","slug":"git-learning-1","published":1,"updated":"2022-01-06T04:09:12.427Z","_id":"cksq5v7mk0020n0pu9t7phkvw","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note primary\"><p>Git个人使用的场景，需要的命令和知识点。</p>\n</div>\n\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本篇主要总结一下一些个人使用Git时遇到的常见场景问题及需要的常见命令。</p>\n<h2 id=\"场景分析\"><a href=\"#场景分析\" class=\"headerlink\" title=\"场景分析\"></a>场景分析</h2><h3 id=\"0x01-删除不必要的分支\"><a href=\"#0x01-删除不必要的分支\" class=\"headerlink\" title=\"0x01 删除不必要的分支\"></a>0x01 删除不必要的分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d branch-name <span class=\"comment\">#只能删除完全merge的分支</span></span><br><span class=\"line\">git branch -D branch-name <span class=\"comment\">#强制删除分支</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"0x02-修改最新commit的message\"><a href=\"#0x02-修改最新commit的message\" class=\"headerlink\" title=\"0x02 修改最新commit的message\"></a>0x02 修改最新commit的message</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit --amend</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"0x03-修改老旧commit的message\"><a href=\"#0x03-修改老旧commit的message\" class=\"headerlink\" title=\"0x03 修改老旧commit的message\"></a>0x03 修改老旧commit的message</h3><p>利用交互式的<code>rebase</code>命令，其中rebase的对象是目标commit的父commit。<strong>交互式rebase的时候需要使用<code>reword</code>命令将目标commit选取出来并进行message的修改。</strong><br><strong>因为修改了一个commit的message，因此会更新这个commit的id</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase -i parentCommitId</span><br></pre></td></tr></table></figure>\n\n<p>下面是一个实例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">log</span> -3</span><br><span class=\"line\">commit c3d6d73712cabfb21df172d2f4f673cbf909f974 (HEAD -&gt; master)</span><br><span class=\"line\">Author: lmy &lt;lmy@lmy.lmy&gt;</span><br><span class=\"line\">Date:   Sat Feb 22 16:35:04 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    Modify style.scss content</span><br><span class=\"line\"></span><br><span class=\"line\">commit abb8e578c1ceba076fa23fdfdc9ae2f302ae2877 (tag: testTag)</span><br><span class=\"line\">Author: lmy &lt;lmy@lmy.lmy&gt;</span><br><span class=\"line\">Date:   Sat Feb 22 13:27:21 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    Move style.css to style.scss                       <span class=\"comment\">#### 将 Move 改为 Rename</span></span><br><span class=\"line\"></span><br><span class=\"line\">commit f4d1584be08bf36f31b3c4442604a233ba811eb9</span><br><span class=\"line\">Author: lmy &lt;lmy@lmy.lmy&gt;</span><br><span class=\"line\">Date:   Sat Feb 22 13:13:33 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    Add style.css</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##########################################################################################</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ git rebase -i f4d1584be08bf36f31b3c4442604a233ba811eb9</span><br><span class=\"line\">[detached HEAD 575eb32] Rename style.css to style.scss</span><br><span class=\"line\"> Date: Sat Feb 22 13:27:21 2020 +0800</span><br><span class=\"line\"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class=\"line\"> rename style.css =&gt; style.scss (100%)</span><br><span class=\"line\">Successfully rebased and updated refs/heads/master.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">###########################################################################################</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> -3</span><br><span class=\"line\">commit 4689f4d16251bd9c692f182ddcf8fa744e7c3040 (HEAD -&gt; master)</span><br><span class=\"line\">Author: lmy &lt;lmy@lmy.lmy&gt;</span><br><span class=\"line\">Date:   Sat Feb 22 16:35:04 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    Modify style.scss content</span><br><span class=\"line\"></span><br><span class=\"line\">commit 575eb324d6933565c26c75d8e198c9348b3f482f  <span class=\"comment\">### commitId发生变化</span></span><br><span class=\"line\">Author: lmy &lt;lmy@lmy.lmy&gt;</span><br><span class=\"line\">Date:   Sat Feb 22 13:27:21 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    Rename style.css to style.scss  <span class=\"comment\">########### 已经修改</span></span><br><span class=\"line\"></span><br><span class=\"line\">commit f4d1584be08bf36f31b3c4442604a233ba811eb9</span><br><span class=\"line\">Author: lmy &lt;lmy@lmy.lmy&gt;</span><br><span class=\"line\">Date:   Sat Feb 22 13:13:33 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    Add style.css</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"0x04-合并多个连续的commit\"><a href=\"#0x04-合并多个连续的commit\" class=\"headerlink\" title=\"0x04 合并多个连续的commit\"></a>0x04 合并多个连续的commit</h3><p>和修改之前的commit message的情景有些类似。也是使用<code>rebase</code>命令的交互式。<strong>选择要合并连续commit的父commit进行rebase，并把将要合并的commit进行<code>squash</code>命令操作（挤压）。</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase -i parentCommitId</span><br></pre></td></tr></table></figure>\n\n<p>以下是一个实例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">log</span></span><br><span class=\"line\">commit 4689f4d16251bd9c692f182ddcf8fa744e7c3040 (HEAD -&gt; master)</span><br><span class=\"line\">Author: lmy &lt;lmy@lmy.lmy&gt;</span><br><span class=\"line\">Date:   Sat Feb 22 16:35:04 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    Modify style.scss content</span><br><span class=\"line\"></span><br><span class=\"line\">commit 575eb324d6933565c26c75d8e198c9348b3f482f</span><br><span class=\"line\">Author: lmy &lt;lmy@lmy.lmy&gt;</span><br><span class=\"line\">Date:   Sat Feb 22 13:27:21 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    Rename style.css to style.scss</span><br><span class=\"line\"></span><br><span class=\"line\">commit f4d1584be08bf36f31b3c4442604a233ba811eb9</span><br><span class=\"line\">Author: lmy &lt;lmy@lmy.lmy&gt;</span><br><span class=\"line\">Date:   Sat Feb 22 13:13:33 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    Add style.css</span><br><span class=\"line\"></span><br><span class=\"line\">commit 8df90bcccc65ee27aee90166ca65887d6415bc3b</span><br><span class=\"line\">Author: ScarboroughCoral &lt;3249977074@qq.com&gt;</span><br><span class=\"line\">Date:   Sat Feb 22 13:09:25 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    Add index+logo</span><br><span class=\"line\"><span class=\"comment\">##################################################################</span></span><br><span class=\"line\">$ git rebase -i 8df90 <span class=\"comment\">#################################### 将除了最早的commit合并</span></span><br><span class=\"line\">[detached HEAD ae9bbaf] create a complete web page</span><br><span class=\"line\"> Date: Sat Feb 22 13:13:33 2020 +0800</span><br><span class=\"line\"> 1 file changed, 7 insertions(+)</span><br><span class=\"line\"> create mode 100644 style.scss</span><br><span class=\"line\">Successfully rebased and updated refs/heads/master.</span><br><span class=\"line\"><span class=\"comment\">###########################################################################</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span></span><br><span class=\"line\">commit ae9bbaf72e24972246579de21136c72328a3c94b (HEAD -&gt; master)</span><br><span class=\"line\">Author: lmy &lt;lmy@lmy.lmy&gt;</span><br><span class=\"line\">Date:   Sat Feb 22 13:13:33 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    create a complete web page</span><br><span class=\"line\"></span><br><span class=\"line\">    Add style.css</span><br><span class=\"line\"></span><br><span class=\"line\">    Rename style.css to style.scss</span><br><span class=\"line\"></span><br><span class=\"line\">    Modify style.scss content</span><br><span class=\"line\"></span><br><span class=\"line\">commit 8df90bcccc65ee27aee90166ca65887d6415bc3b</span><br><span class=\"line\">Author: ScarboroughCoral &lt;3249977074@qq.com&gt;</span><br><span class=\"line\">Date:   Sat Feb 22 13:09:25 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    Add index+logo</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"0x05-合并多个间隔的commit\"><a href=\"#0x05-合并多个间隔的commit\" class=\"headerlink\" title=\"0x05 合并多个间隔的commit\"></a>0x05 合并多个间隔的commit</h3><p>和合并连续的commit类似。还是对commit的父commit进行reabse。<strong>在rebase交互界面中将需要合并的间隔的commit放在一起（连续），将后续的commit进行squash即可。</strong><br><strong>不过在第二步添加commit message时出现问题跳出交互界面，按照提示进行<code>git rebase --continue</code>进行操作即可。</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase -i parentCommitId</span><br></pre></td></tr></table></figure>\n\n<p>下面是一个实例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">log</span></span><br><span class=\"line\">commit 6e5d8a876236c8bff77508be608303b600f83a74 (HEAD -&gt; temp)</span><br><span class=\"line\">Author: lmy &lt;lmy@lmy.lmy&gt;</span><br><span class=\"line\">Date:   Sat Feb 22 13:41:29 2020 +0800 </span><br><span class=\"line\"></span><br><span class=\"line\">    Add <span class=\"built_in\">test</span> <span class=\"comment\">################################################# 将当前commit和最早的一个commit合并</span></span><br><span class=\"line\"></span><br><span class=\"line\">commit f4d1584be08bf36f31b3c4442604a233ba811eb9</span><br><span class=\"line\">Author: lmy &lt;lmy@lmy.lmy&gt;</span><br><span class=\"line\">Date:   Sat Feb 22 13:13:33 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    Add style.css</span><br><span class=\"line\"></span><br><span class=\"line\">commit 8df90bcccc65ee27aee90166ca65887d6415bc3b</span><br><span class=\"line\">Author: ScarboroughCoral &lt;3249977074@qq.com&gt;</span><br><span class=\"line\">Date:   Sat Feb 22 13:09:25 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    Add index+logo</span><br><span class=\"line\"><span class=\"comment\">############################################################################</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ git rebase -i 8df90bcc</span><br><span class=\"line\">interactive rebase <span class=\"keyword\">in</span> progress; onto 8df90bc</span><br><span class=\"line\">Last <span class=\"built_in\">command</span> <span class=\"keyword\">done</span> (1 <span class=\"built_in\">command</span> <span class=\"keyword\">done</span>):</span><br><span class=\"line\">   pick 8df90bc</span><br><span class=\"line\">Next commands to <span class=\"keyword\">do</span> (2 remaining commands):</span><br><span class=\"line\">   squash 6e5d8a8 Add <span class=\"built_in\">test</span></span><br><span class=\"line\">   pick f4d1584 Add style.css</span><br><span class=\"line\">You are currently rebasing branch <span class=\"string\">&#x27;temp&#x27;</span> on <span class=\"string\">&#x27;8df90bc&#x27;</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">nothing to commit, working tree clean</span><br><span class=\"line\">The previous cherry-pick is now empty, possibly due to conflict resolution.</span><br><span class=\"line\">If you wish to commit it anyway, use:</span><br><span class=\"line\"></span><br><span class=\"line\">    git commit --allow-empty</span><br><span class=\"line\"></span><br><span class=\"line\">Otherwise, please use <span class=\"string\">&#x27;git reset&#x27;</span></span><br><span class=\"line\">Could not apply 8df90bc... </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################################################################</span></span><br><span class=\"line\">$ git status</span><br><span class=\"line\">interactive rebase <span class=\"keyword\">in</span> progress; onto 8df90bc</span><br><span class=\"line\">Last <span class=\"built_in\">command</span> <span class=\"keyword\">done</span> (1 <span class=\"built_in\">command</span> <span class=\"keyword\">done</span>):</span><br><span class=\"line\">   pick 8df90bc</span><br><span class=\"line\">Next commands to <span class=\"keyword\">do</span> (2 remaining commands):</span><br><span class=\"line\">   squash 6e5d8a8 Add <span class=\"built_in\">test</span></span><br><span class=\"line\">   pick f4d1584 Add style.css</span><br><span class=\"line\">  (use <span class=\"string\">&quot;git rebase --edit-todo&quot;</span> to view and edit)</span><br><span class=\"line\">You are currently rebasing branch <span class=\"string\">&#x27;temp&#x27;</span> on <span class=\"string\">&#x27;8df90bc&#x27;</span>.</span><br><span class=\"line\">  (all conflicts fixed: run <span class=\"string\">&quot;git rebase --continue&quot;</span>) <span class=\"comment\">############################ 出现问题，使用 rebase --continue命令继续交互</span></span><br><span class=\"line\"><span class=\"comment\">#######################################################################</span></span><br><span class=\"line\">$ git rebase --<span class=\"built_in\">continue</span></span><br><span class=\"line\">[detached HEAD 5c248b3] add index &amp; <span class=\"built_in\">test</span></span><br><span class=\"line\"> Author: ScarboroughCoral &lt;3249977074@qq.com&gt;</span><br><span class=\"line\"> Date: Sat Feb 22 13:09:25 2020 +0800</span><br><span class=\"line\"> 2 files changed, 19 insertions(+)</span><br><span class=\"line\"> create mode 100644 index.html</span><br><span class=\"line\"> create mode 100644 readme.md</span><br><span class=\"line\">Successfully rebased and updated refs/heads/temp.</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li>苏玲，《Git三剑客》</li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note primary\"><p>Git个人使用的场景，需要的命令和知识点。</p>\n</div>","more":"<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本篇主要总结一下一些个人使用Git时遇到的常见场景问题及需要的常见命令。</p>\n<h2 id=\"场景分析\"><a href=\"#场景分析\" class=\"headerlink\" title=\"场景分析\"></a>场景分析</h2><h3 id=\"0x01-删除不必要的分支\"><a href=\"#0x01-删除不必要的分支\" class=\"headerlink\" title=\"0x01 删除不必要的分支\"></a>0x01 删除不必要的分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d branch-name <span class=\"comment\">#只能删除完全merge的分支</span></span><br><span class=\"line\">git branch -D branch-name <span class=\"comment\">#强制删除分支</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"0x02-修改最新commit的message\"><a href=\"#0x02-修改最新commit的message\" class=\"headerlink\" title=\"0x02 修改最新commit的message\"></a>0x02 修改最新commit的message</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit --amend</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"0x03-修改老旧commit的message\"><a href=\"#0x03-修改老旧commit的message\" class=\"headerlink\" title=\"0x03 修改老旧commit的message\"></a>0x03 修改老旧commit的message</h3><p>利用交互式的<code>rebase</code>命令，其中rebase的对象是目标commit的父commit。<strong>交互式rebase的时候需要使用<code>reword</code>命令将目标commit选取出来并进行message的修改。</strong><br><strong>因为修改了一个commit的message，因此会更新这个commit的id</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase -i parentCommitId</span><br></pre></td></tr></table></figure>\n\n<p>下面是一个实例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">log</span> -3</span><br><span class=\"line\">commit c3d6d73712cabfb21df172d2f4f673cbf909f974 (HEAD -&gt; master)</span><br><span class=\"line\">Author: lmy &lt;lmy@lmy.lmy&gt;</span><br><span class=\"line\">Date:   Sat Feb 22 16:35:04 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    Modify style.scss content</span><br><span class=\"line\"></span><br><span class=\"line\">commit abb8e578c1ceba076fa23fdfdc9ae2f302ae2877 (tag: testTag)</span><br><span class=\"line\">Author: lmy &lt;lmy@lmy.lmy&gt;</span><br><span class=\"line\">Date:   Sat Feb 22 13:27:21 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    Move style.css to style.scss                       <span class=\"comment\">#### 将 Move 改为 Rename</span></span><br><span class=\"line\"></span><br><span class=\"line\">commit f4d1584be08bf36f31b3c4442604a233ba811eb9</span><br><span class=\"line\">Author: lmy &lt;lmy@lmy.lmy&gt;</span><br><span class=\"line\">Date:   Sat Feb 22 13:13:33 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    Add style.css</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##########################################################################################</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ git rebase -i f4d1584be08bf36f31b3c4442604a233ba811eb9</span><br><span class=\"line\">[detached HEAD 575eb32] Rename style.css to style.scss</span><br><span class=\"line\"> Date: Sat Feb 22 13:27:21 2020 +0800</span><br><span class=\"line\"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class=\"line\"> rename style.css =&gt; style.scss (100%)</span><br><span class=\"line\">Successfully rebased and updated refs/heads/master.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">###########################################################################################</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> -3</span><br><span class=\"line\">commit 4689f4d16251bd9c692f182ddcf8fa744e7c3040 (HEAD -&gt; master)</span><br><span class=\"line\">Author: lmy &lt;lmy@lmy.lmy&gt;</span><br><span class=\"line\">Date:   Sat Feb 22 16:35:04 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    Modify style.scss content</span><br><span class=\"line\"></span><br><span class=\"line\">commit 575eb324d6933565c26c75d8e198c9348b3f482f  <span class=\"comment\">### commitId发生变化</span></span><br><span class=\"line\">Author: lmy &lt;lmy@lmy.lmy&gt;</span><br><span class=\"line\">Date:   Sat Feb 22 13:27:21 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    Rename style.css to style.scss  <span class=\"comment\">########### 已经修改</span></span><br><span class=\"line\"></span><br><span class=\"line\">commit f4d1584be08bf36f31b3c4442604a233ba811eb9</span><br><span class=\"line\">Author: lmy &lt;lmy@lmy.lmy&gt;</span><br><span class=\"line\">Date:   Sat Feb 22 13:13:33 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    Add style.css</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"0x04-合并多个连续的commit\"><a href=\"#0x04-合并多个连续的commit\" class=\"headerlink\" title=\"0x04 合并多个连续的commit\"></a>0x04 合并多个连续的commit</h3><p>和修改之前的commit message的情景有些类似。也是使用<code>rebase</code>命令的交互式。<strong>选择要合并连续commit的父commit进行rebase，并把将要合并的commit进行<code>squash</code>命令操作（挤压）。</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase -i parentCommitId</span><br></pre></td></tr></table></figure>\n\n<p>以下是一个实例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">log</span></span><br><span class=\"line\">commit 4689f4d16251bd9c692f182ddcf8fa744e7c3040 (HEAD -&gt; master)</span><br><span class=\"line\">Author: lmy &lt;lmy@lmy.lmy&gt;</span><br><span class=\"line\">Date:   Sat Feb 22 16:35:04 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    Modify style.scss content</span><br><span class=\"line\"></span><br><span class=\"line\">commit 575eb324d6933565c26c75d8e198c9348b3f482f</span><br><span class=\"line\">Author: lmy &lt;lmy@lmy.lmy&gt;</span><br><span class=\"line\">Date:   Sat Feb 22 13:27:21 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    Rename style.css to style.scss</span><br><span class=\"line\"></span><br><span class=\"line\">commit f4d1584be08bf36f31b3c4442604a233ba811eb9</span><br><span class=\"line\">Author: lmy &lt;lmy@lmy.lmy&gt;</span><br><span class=\"line\">Date:   Sat Feb 22 13:13:33 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    Add style.css</span><br><span class=\"line\"></span><br><span class=\"line\">commit 8df90bcccc65ee27aee90166ca65887d6415bc3b</span><br><span class=\"line\">Author: ScarboroughCoral &lt;3249977074@qq.com&gt;</span><br><span class=\"line\">Date:   Sat Feb 22 13:09:25 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    Add index+logo</span><br><span class=\"line\"><span class=\"comment\">##################################################################</span></span><br><span class=\"line\">$ git rebase -i 8df90 <span class=\"comment\">#################################### 将除了最早的commit合并</span></span><br><span class=\"line\">[detached HEAD ae9bbaf] create a complete web page</span><br><span class=\"line\"> Date: Sat Feb 22 13:13:33 2020 +0800</span><br><span class=\"line\"> 1 file changed, 7 insertions(+)</span><br><span class=\"line\"> create mode 100644 style.scss</span><br><span class=\"line\">Successfully rebased and updated refs/heads/master.</span><br><span class=\"line\"><span class=\"comment\">###########################################################################</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span></span><br><span class=\"line\">commit ae9bbaf72e24972246579de21136c72328a3c94b (HEAD -&gt; master)</span><br><span class=\"line\">Author: lmy &lt;lmy@lmy.lmy&gt;</span><br><span class=\"line\">Date:   Sat Feb 22 13:13:33 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    create a complete web page</span><br><span class=\"line\"></span><br><span class=\"line\">    Add style.css</span><br><span class=\"line\"></span><br><span class=\"line\">    Rename style.css to style.scss</span><br><span class=\"line\"></span><br><span class=\"line\">    Modify style.scss content</span><br><span class=\"line\"></span><br><span class=\"line\">commit 8df90bcccc65ee27aee90166ca65887d6415bc3b</span><br><span class=\"line\">Author: ScarboroughCoral &lt;3249977074@qq.com&gt;</span><br><span class=\"line\">Date:   Sat Feb 22 13:09:25 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    Add index+logo</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"0x05-合并多个间隔的commit\"><a href=\"#0x05-合并多个间隔的commit\" class=\"headerlink\" title=\"0x05 合并多个间隔的commit\"></a>0x05 合并多个间隔的commit</h3><p>和合并连续的commit类似。还是对commit的父commit进行reabse。<strong>在rebase交互界面中将需要合并的间隔的commit放在一起（连续），将后续的commit进行squash即可。</strong><br><strong>不过在第二步添加commit message时出现问题跳出交互界面，按照提示进行<code>git rebase --continue</code>进行操作即可。</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase -i parentCommitId</span><br></pre></td></tr></table></figure>\n\n<p>下面是一个实例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">log</span></span><br><span class=\"line\">commit 6e5d8a876236c8bff77508be608303b600f83a74 (HEAD -&gt; temp)</span><br><span class=\"line\">Author: lmy &lt;lmy@lmy.lmy&gt;</span><br><span class=\"line\">Date:   Sat Feb 22 13:41:29 2020 +0800 </span><br><span class=\"line\"></span><br><span class=\"line\">    Add <span class=\"built_in\">test</span> <span class=\"comment\">################################################# 将当前commit和最早的一个commit合并</span></span><br><span class=\"line\"></span><br><span class=\"line\">commit f4d1584be08bf36f31b3c4442604a233ba811eb9</span><br><span class=\"line\">Author: lmy &lt;lmy@lmy.lmy&gt;</span><br><span class=\"line\">Date:   Sat Feb 22 13:13:33 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    Add style.css</span><br><span class=\"line\"></span><br><span class=\"line\">commit 8df90bcccc65ee27aee90166ca65887d6415bc3b</span><br><span class=\"line\">Author: ScarboroughCoral &lt;3249977074@qq.com&gt;</span><br><span class=\"line\">Date:   Sat Feb 22 13:09:25 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    Add index+logo</span><br><span class=\"line\"><span class=\"comment\">############################################################################</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ git rebase -i 8df90bcc</span><br><span class=\"line\">interactive rebase <span class=\"keyword\">in</span> progress; onto 8df90bc</span><br><span class=\"line\">Last <span class=\"built_in\">command</span> <span class=\"keyword\">done</span> (1 <span class=\"built_in\">command</span> <span class=\"keyword\">done</span>):</span><br><span class=\"line\">   pick 8df90bc</span><br><span class=\"line\">Next commands to <span class=\"keyword\">do</span> (2 remaining commands):</span><br><span class=\"line\">   squash 6e5d8a8 Add <span class=\"built_in\">test</span></span><br><span class=\"line\">   pick f4d1584 Add style.css</span><br><span class=\"line\">You are currently rebasing branch <span class=\"string\">&#x27;temp&#x27;</span> on <span class=\"string\">&#x27;8df90bc&#x27;</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">nothing to commit, working tree clean</span><br><span class=\"line\">The previous cherry-pick is now empty, possibly due to conflict resolution.</span><br><span class=\"line\">If you wish to commit it anyway, use:</span><br><span class=\"line\"></span><br><span class=\"line\">    git commit --allow-empty</span><br><span class=\"line\"></span><br><span class=\"line\">Otherwise, please use <span class=\"string\">&#x27;git reset&#x27;</span></span><br><span class=\"line\">Could not apply 8df90bc... </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################################################################</span></span><br><span class=\"line\">$ git status</span><br><span class=\"line\">interactive rebase <span class=\"keyword\">in</span> progress; onto 8df90bc</span><br><span class=\"line\">Last <span class=\"built_in\">command</span> <span class=\"keyword\">done</span> (1 <span class=\"built_in\">command</span> <span class=\"keyword\">done</span>):</span><br><span class=\"line\">   pick 8df90bc</span><br><span class=\"line\">Next commands to <span class=\"keyword\">do</span> (2 remaining commands):</span><br><span class=\"line\">   squash 6e5d8a8 Add <span class=\"built_in\">test</span></span><br><span class=\"line\">   pick f4d1584 Add style.css</span><br><span class=\"line\">  (use <span class=\"string\">&quot;git rebase --edit-todo&quot;</span> to view and edit)</span><br><span class=\"line\">You are currently rebasing branch <span class=\"string\">&#x27;temp&#x27;</span> on <span class=\"string\">&#x27;8df90bc&#x27;</span>.</span><br><span class=\"line\">  (all conflicts fixed: run <span class=\"string\">&quot;git rebase --continue&quot;</span>) <span class=\"comment\">############################ 出现问题，使用 rebase --continue命令继续交互</span></span><br><span class=\"line\"><span class=\"comment\">#######################################################################</span></span><br><span class=\"line\">$ git rebase --<span class=\"built_in\">continue</span></span><br><span class=\"line\">[detached HEAD 5c248b3] add index &amp; <span class=\"built_in\">test</span></span><br><span class=\"line\"> Author: ScarboroughCoral &lt;3249977074@qq.com&gt;</span><br><span class=\"line\"> Date: Sat Feb 22 13:09:25 2020 +0800</span><br><span class=\"line\"> 2 files changed, 19 insertions(+)</span><br><span class=\"line\"> create mode 100644 index.html</span><br><span class=\"line\"> create mode 100644 readme.md</span><br><span class=\"line\">Successfully rebased and updated refs/heads/temp.</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li>苏玲，《Git三剑客》</li>\n</ul>"},{"title":"《Git三剑客》学习笔记：基础","mathjax":false,"copyright":true,"comment":true,"date":"2020-02-22T05:48:48.000Z","_content":"\n{% note primary %}\nGit 基础和基本命令。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 前言\n\n是时候系统地学一下git了。这篇文章主要了解git的基本知识及基础命令。\n\n## 基本知识\n\n### 暂存区\n\nworkspace->stage->local storage\n\n### `.git`目录\n\n- `HEAD`文件是一个引用，引用当前工作的分支（即指代当前工作分支的最新commit。或者是引用任意commit，此时应该是head detach分离头指针状态）。**常用用法可以使用HEAD进行指代commit**\n- `config`文件保存一些配置。比如`git config --local user.name 'lmy'`会保存到`config`文件。\n- `refs`文件夹下回保存一些引用id，一般包含`heads`文件夹和`tags`文件夹\n  - `heads`文件夹保存的是分支引用文件，每个文件保存着目标分支的最新commit id\n  - `tags`文件夹保存的是历史标签引用文件，每个文件保存着目标标签commit的引用\n- `objects`文件夹保存一些`git object`，里面的文件夹名和内部文件名共同组成一个哈希值。其中常见有如下三个对象：\n  - `commit`对象\n  - `blob`对象\n  - `tree`对象\n\n#### `commit`,`blob`,`tree`之间的关系\n\n- 每个commit会保存一些信息，其中包含一个tree字段，这实际上保存的是当前commit整个项目的一个快照。你可以使用`git cat-file -p commitId`来查看commit的内容。\n  ```bash\n    $ git cat-file -p ee41693d74c26fff545574804aa716148d90d2fb\n    tree 63f224293af826081ddb830cb7818b4291ef7f50 #指向项目根目录\n    parent abb8e578c1ceba076fa23fdfdc9ae2f302ae2877 #父commit\n    author lmy <lmy@lmy.lmy> 1582360504 +0800 #作者\n    committer lmy <lmy@lmy.lmy> 1582360504 +0800 #提交者\n\n    Modify style.scss\n\n  ```\n- 每个tree可以看做一个树，他可以有叶子节点即blob，也可以有子树（另一个tree）。\n- blob就是当前commit下的当前文件的快照。\n\n## 基础篇常用命令\n\n### `gitk`\n\n一个查看历史日志的强大工具。可以想象为基于`git log`和`git grep`的图形工具。\n\n### `git gui`\n\n相比于`gitk`，`git gui`是偏向于创建commit的辅助工具\n\n### `git checkout`\n\n- `git checkout -b branchName commitId`可以由commitId所在的commit创建一个名为branchName的分支且切换到此。\n\n### `git add`\n\n- `-u`参数可以一次性提交已经被add的文件到暂存区。\n\n### `git mv`\n\n- `git mv 1 2`命令可以直接重命名马上commit而不需要add（比重命名之后再添加简单，因为那样认为你是删除了原文件添加了新文件）\n\n### `git log`\n\n- `--oneline`参数可以让每个commit只展现一行\n- `--all`参数可以显示所有分支的所有commit，不仅仅包含当前分支\n- `--graph`参数可以以图的方式展现包含commit的父子关系\n- `--n[x]`参数可以显示时间上最近的x个commit日志\n\n### `git diff`\n\n- `git diff commitId1 commitId2`比较两个commit的差异\n- HEAD指代，比如`git diff HEAD HEAD^`（当前commit和父commit比较），`git diff HEAD HEAD^^`（当前commit和祖父commit比较）。以上两个命令也可以分别用`git diff HEAD HEAD~1`和`git diff HEAD HEAD~2`来比较\n\n## 场景\n\n### HEAD Detach（分离头指针）\n> 切换分支时切换到某个commit而不是某个分支。\n\n- 好处\n你可以利用分离头指针做一些测试commit，可以切换回原来的分支来舍弃这些测试commit\n\n- 坏处\n容易不小心舍弃一些commit，一般在操作时会有warning。\n  - 如果不小心切换到head detach的状态，可以使用`git checkout -b new-name`来保存这些测试。\n  - 如果不小心切换到head detach状态并且提交commit后又切换到其他分支，可以使用`git branch branch-name commitId`来保存\n\n## 总结\n\n- HEAD指向当前commit\n- 分支实际上指向当前分支的最新commit\n- 标签就是给某个commit做了一个标记\n- commit中有一个tree属性指向项目根目录。\n- tree可以看做是文件夹，文件夹中可以包含其他文件夹（tree），也可以包含文件（blob）\n- `.git/config`文件保存了一些局部配置（`git config --local xxx xxx`）\n\n## Reference\n\n- 苏玲，《Git三剑客》","source":"_posts/git-learning.md","raw":"---\ntitle: 《Git三剑客》学习笔记：基础\nmathjax: false\ncopyright: true\ncomment: true\ndate: 2020-02-22 13:48:48\ntags:\n- Git\ncategories:\n- Tools\n- Git\n\n---\n\n{% note primary %}\nGit 基础和基本命令。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 前言\n\n是时候系统地学一下git了。这篇文章主要了解git的基本知识及基础命令。\n\n## 基本知识\n\n### 暂存区\n\nworkspace->stage->local storage\n\n### `.git`目录\n\n- `HEAD`文件是一个引用，引用当前工作的分支（即指代当前工作分支的最新commit。或者是引用任意commit，此时应该是head detach分离头指针状态）。**常用用法可以使用HEAD进行指代commit**\n- `config`文件保存一些配置。比如`git config --local user.name 'lmy'`会保存到`config`文件。\n- `refs`文件夹下回保存一些引用id，一般包含`heads`文件夹和`tags`文件夹\n  - `heads`文件夹保存的是分支引用文件，每个文件保存着目标分支的最新commit id\n  - `tags`文件夹保存的是历史标签引用文件，每个文件保存着目标标签commit的引用\n- `objects`文件夹保存一些`git object`，里面的文件夹名和内部文件名共同组成一个哈希值。其中常见有如下三个对象：\n  - `commit`对象\n  - `blob`对象\n  - `tree`对象\n\n#### `commit`,`blob`,`tree`之间的关系\n\n- 每个commit会保存一些信息，其中包含一个tree字段，这实际上保存的是当前commit整个项目的一个快照。你可以使用`git cat-file -p commitId`来查看commit的内容。\n  ```bash\n    $ git cat-file -p ee41693d74c26fff545574804aa716148d90d2fb\n    tree 63f224293af826081ddb830cb7818b4291ef7f50 #指向项目根目录\n    parent abb8e578c1ceba076fa23fdfdc9ae2f302ae2877 #父commit\n    author lmy <lmy@lmy.lmy> 1582360504 +0800 #作者\n    committer lmy <lmy@lmy.lmy> 1582360504 +0800 #提交者\n\n    Modify style.scss\n\n  ```\n- 每个tree可以看做一个树，他可以有叶子节点即blob，也可以有子树（另一个tree）。\n- blob就是当前commit下的当前文件的快照。\n\n## 基础篇常用命令\n\n### `gitk`\n\n一个查看历史日志的强大工具。可以想象为基于`git log`和`git grep`的图形工具。\n\n### `git gui`\n\n相比于`gitk`，`git gui`是偏向于创建commit的辅助工具\n\n### `git checkout`\n\n- `git checkout -b branchName commitId`可以由commitId所在的commit创建一个名为branchName的分支且切换到此。\n\n### `git add`\n\n- `-u`参数可以一次性提交已经被add的文件到暂存区。\n\n### `git mv`\n\n- `git mv 1 2`命令可以直接重命名马上commit而不需要add（比重命名之后再添加简单，因为那样认为你是删除了原文件添加了新文件）\n\n### `git log`\n\n- `--oneline`参数可以让每个commit只展现一行\n- `--all`参数可以显示所有分支的所有commit，不仅仅包含当前分支\n- `--graph`参数可以以图的方式展现包含commit的父子关系\n- `--n[x]`参数可以显示时间上最近的x个commit日志\n\n### `git diff`\n\n- `git diff commitId1 commitId2`比较两个commit的差异\n- HEAD指代，比如`git diff HEAD HEAD^`（当前commit和父commit比较），`git diff HEAD HEAD^^`（当前commit和祖父commit比较）。以上两个命令也可以分别用`git diff HEAD HEAD~1`和`git diff HEAD HEAD~2`来比较\n\n## 场景\n\n### HEAD Detach（分离头指针）\n> 切换分支时切换到某个commit而不是某个分支。\n\n- 好处\n你可以利用分离头指针做一些测试commit，可以切换回原来的分支来舍弃这些测试commit\n\n- 坏处\n容易不小心舍弃一些commit，一般在操作时会有warning。\n  - 如果不小心切换到head detach的状态，可以使用`git checkout -b new-name`来保存这些测试。\n  - 如果不小心切换到head detach状态并且提交commit后又切换到其他分支，可以使用`git branch branch-name commitId`来保存\n\n## 总结\n\n- HEAD指向当前commit\n- 分支实际上指向当前分支的最新commit\n- 标签就是给某个commit做了一个标记\n- commit中有一个tree属性指向项目根目录。\n- tree可以看做是文件夹，文件夹中可以包含其他文件夹（tree），也可以包含文件（blob）\n- `.git/config`文件保存了一些局部配置（`git config --local xxx xxx`）\n\n## Reference\n\n- 苏玲，《Git三剑客》","slug":"git-learning","published":1,"updated":"2022-01-06T04:09:12.427Z","_id":"cksq5v7ml0025n0pu0ce400fd","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note primary\"><p>Git 基础和基本命令。</p>\n</div>\n\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>是时候系统地学一下git了。这篇文章主要了解git的基本知识及基础命令。</p>\n<h2 id=\"基本知识\"><a href=\"#基本知识\" class=\"headerlink\" title=\"基本知识\"></a>基本知识</h2><h3 id=\"暂存区\"><a href=\"#暂存区\" class=\"headerlink\" title=\"暂存区\"></a>暂存区</h3><p>workspace-&gt;stage-&gt;local storage</p>\n<h3 id=\"git目录\"><a href=\"#git目录\" class=\"headerlink\" title=\".git目录\"></a><code>.git</code>目录</h3><ul>\n<li><code>HEAD</code>文件是一个引用，引用当前工作的分支（即指代当前工作分支的最新commit。或者是引用任意commit，此时应该是head detach分离头指针状态）。<strong>常用用法可以使用HEAD进行指代commit</strong></li>\n<li><code>config</code>文件保存一些配置。比如<code>git config --local user.name &#39;lmy&#39;</code>会保存到<code>config</code>文件。</li>\n<li><code>refs</code>文件夹下回保存一些引用id，一般包含<code>heads</code>文件夹和<code>tags</code>文件夹<ul>\n<li><code>heads</code>文件夹保存的是分支引用文件，每个文件保存着目标分支的最新commit id</li>\n<li><code>tags</code>文件夹保存的是历史标签引用文件，每个文件保存着目标标签commit的引用</li>\n</ul>\n</li>\n<li><code>objects</code>文件夹保存一些<code>git object</code>，里面的文件夹名和内部文件名共同组成一个哈希值。其中常见有如下三个对象：<ul>\n<li><code>commit</code>对象</li>\n<li><code>blob</code>对象</li>\n<li><code>tree</code>对象</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"commit-blob-tree之间的关系\"><a href=\"#commit-blob-tree之间的关系\" class=\"headerlink\" title=\"commit,blob,tree之间的关系\"></a><code>commit</code>,<code>blob</code>,<code>tree</code>之间的关系</h4><ul>\n<li>每个commit会保存一些信息，其中包含一个tree字段，这实际上保存的是当前commit整个项目的一个快照。你可以使用<code>git cat-file -p commitId</code>来查看commit的内容。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git cat-file -p ee41693d74c26fff545574804aa716148d90d2fb</span><br><span class=\"line\">tree 63f224293af826081ddb830cb7818b4291ef7f50 <span class=\"comment\">#指向项目根目录</span></span><br><span class=\"line\">parent abb8e578c1ceba076fa23fdfdc9ae2f302ae2877 <span class=\"comment\">#父commit</span></span><br><span class=\"line\">author lmy &lt;lmy@lmy.lmy&gt; 1582360504 +0800 <span class=\"comment\">#作者</span></span><br><span class=\"line\">committer lmy &lt;lmy@lmy.lmy&gt; 1582360504 +0800 <span class=\"comment\">#提交者</span></span><br><span class=\"line\"></span><br><span class=\"line\">Modify style.scss</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>每个tree可以看做一个树，他可以有叶子节点即blob，也可以有子树（另一个tree）。</li>\n<li>blob就是当前commit下的当前文件的快照。</li>\n</ul>\n<h2 id=\"基础篇常用命令\"><a href=\"#基础篇常用命令\" class=\"headerlink\" title=\"基础篇常用命令\"></a>基础篇常用命令</h2><h3 id=\"gitk\"><a href=\"#gitk\" class=\"headerlink\" title=\"gitk\"></a><code>gitk</code></h3><p>一个查看历史日志的强大工具。可以想象为基于<code>git log</code>和<code>git grep</code>的图形工具。</p>\n<h3 id=\"git-gui\"><a href=\"#git-gui\" class=\"headerlink\" title=\"git gui\"></a><code>git gui</code></h3><p>相比于<code>gitk</code>，<code>git gui</code>是偏向于创建commit的辅助工具</p>\n<h3 id=\"git-checkout\"><a href=\"#git-checkout\" class=\"headerlink\" title=\"git checkout\"></a><code>git checkout</code></h3><ul>\n<li><code>git checkout -b branchName commitId</code>可以由commitId所在的commit创建一个名为branchName的分支且切换到此。</li>\n</ul>\n<h3 id=\"git-add\"><a href=\"#git-add\" class=\"headerlink\" title=\"git add\"></a><code>git add</code></h3><ul>\n<li><code>-u</code>参数可以一次性提交已经被add的文件到暂存区。</li>\n</ul>\n<h3 id=\"git-mv\"><a href=\"#git-mv\" class=\"headerlink\" title=\"git mv\"></a><code>git mv</code></h3><ul>\n<li><code>git mv 1 2</code>命令可以直接重命名马上commit而不需要add（比重命名之后再添加简单，因为那样认为你是删除了原文件添加了新文件）</li>\n</ul>\n<h3 id=\"git-log\"><a href=\"#git-log\" class=\"headerlink\" title=\"git log\"></a><code>git log</code></h3><ul>\n<li><code>--oneline</code>参数可以让每个commit只展现一行</li>\n<li><code>--all</code>参数可以显示所有分支的所有commit，不仅仅包含当前分支</li>\n<li><code>--graph</code>参数可以以图的方式展现包含commit的父子关系</li>\n<li><code>--n[x]</code>参数可以显示时间上最近的x个commit日志</li>\n</ul>\n<h3 id=\"git-diff\"><a href=\"#git-diff\" class=\"headerlink\" title=\"git diff\"></a><code>git diff</code></h3><ul>\n<li><code>git diff commitId1 commitId2</code>比较两个commit的差异</li>\n<li>HEAD指代，比如<code>git diff HEAD HEAD^</code>（当前commit和父commit比较），<code>git diff HEAD HEAD^^</code>（当前commit和祖父commit比较）。以上两个命令也可以分别用<code>git diff HEAD HEAD~1</code>和<code>git diff HEAD HEAD~2</code>来比较</li>\n</ul>\n<h2 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h2><h3 id=\"HEAD-Detach（分离头指针）\"><a href=\"#HEAD-Detach（分离头指针）\" class=\"headerlink\" title=\"HEAD Detach（分离头指针）\"></a>HEAD Detach（分离头指针）</h3><blockquote>\n<p>切换分支时切换到某个commit而不是某个分支。</p>\n</blockquote>\n<ul>\n<li><p>好处<br>你可以利用分离头指针做一些测试commit，可以切换回原来的分支来舍弃这些测试commit</p>\n</li>\n<li><p>坏处<br>容易不小心舍弃一些commit，一般在操作时会有warning。</p>\n<ul>\n<li>如果不小心切换到head detach的状态，可以使用<code>git checkout -b new-name</code>来保存这些测试。</li>\n<li>如果不小心切换到head detach状态并且提交commit后又切换到其他分支，可以使用<code>git branch branch-name commitId</code>来保存</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>HEAD指向当前commit</li>\n<li>分支实际上指向当前分支的最新commit</li>\n<li>标签就是给某个commit做了一个标记</li>\n<li>commit中有一个tree属性指向项目根目录。</li>\n<li>tree可以看做是文件夹，文件夹中可以包含其他文件夹（tree），也可以包含文件（blob）</li>\n<li><code>.git/config</code>文件保存了一些局部配置（<code>git config --local xxx xxx</code>）</li>\n</ul>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li>苏玲，《Git三剑客》</li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note primary\"><p>Git 基础和基本命令。</p>\n</div>","more":"<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>是时候系统地学一下git了。这篇文章主要了解git的基本知识及基础命令。</p>\n<h2 id=\"基本知识\"><a href=\"#基本知识\" class=\"headerlink\" title=\"基本知识\"></a>基本知识</h2><h3 id=\"暂存区\"><a href=\"#暂存区\" class=\"headerlink\" title=\"暂存区\"></a>暂存区</h3><p>workspace-&gt;stage-&gt;local storage</p>\n<h3 id=\"git目录\"><a href=\"#git目录\" class=\"headerlink\" title=\".git目录\"></a><code>.git</code>目录</h3><ul>\n<li><code>HEAD</code>文件是一个引用，引用当前工作的分支（即指代当前工作分支的最新commit。或者是引用任意commit，此时应该是head detach分离头指针状态）。<strong>常用用法可以使用HEAD进行指代commit</strong></li>\n<li><code>config</code>文件保存一些配置。比如<code>git config --local user.name &#39;lmy&#39;</code>会保存到<code>config</code>文件。</li>\n<li><code>refs</code>文件夹下回保存一些引用id，一般包含<code>heads</code>文件夹和<code>tags</code>文件夹<ul>\n<li><code>heads</code>文件夹保存的是分支引用文件，每个文件保存着目标分支的最新commit id</li>\n<li><code>tags</code>文件夹保存的是历史标签引用文件，每个文件保存着目标标签commit的引用</li>\n</ul>\n</li>\n<li><code>objects</code>文件夹保存一些<code>git object</code>，里面的文件夹名和内部文件名共同组成一个哈希值。其中常见有如下三个对象：<ul>\n<li><code>commit</code>对象</li>\n<li><code>blob</code>对象</li>\n<li><code>tree</code>对象</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"commit-blob-tree之间的关系\"><a href=\"#commit-blob-tree之间的关系\" class=\"headerlink\" title=\"commit,blob,tree之间的关系\"></a><code>commit</code>,<code>blob</code>,<code>tree</code>之间的关系</h4><ul>\n<li>每个commit会保存一些信息，其中包含一个tree字段，这实际上保存的是当前commit整个项目的一个快照。你可以使用<code>git cat-file -p commitId</code>来查看commit的内容。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git cat-file -p ee41693d74c26fff545574804aa716148d90d2fb</span><br><span class=\"line\">tree 63f224293af826081ddb830cb7818b4291ef7f50 <span class=\"comment\">#指向项目根目录</span></span><br><span class=\"line\">parent abb8e578c1ceba076fa23fdfdc9ae2f302ae2877 <span class=\"comment\">#父commit</span></span><br><span class=\"line\">author lmy &lt;lmy@lmy.lmy&gt; 1582360504 +0800 <span class=\"comment\">#作者</span></span><br><span class=\"line\">committer lmy &lt;lmy@lmy.lmy&gt; 1582360504 +0800 <span class=\"comment\">#提交者</span></span><br><span class=\"line\"></span><br><span class=\"line\">Modify style.scss</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>每个tree可以看做一个树，他可以有叶子节点即blob，也可以有子树（另一个tree）。</li>\n<li>blob就是当前commit下的当前文件的快照。</li>\n</ul>\n<h2 id=\"基础篇常用命令\"><a href=\"#基础篇常用命令\" class=\"headerlink\" title=\"基础篇常用命令\"></a>基础篇常用命令</h2><h3 id=\"gitk\"><a href=\"#gitk\" class=\"headerlink\" title=\"gitk\"></a><code>gitk</code></h3><p>一个查看历史日志的强大工具。可以想象为基于<code>git log</code>和<code>git grep</code>的图形工具。</p>\n<h3 id=\"git-gui\"><a href=\"#git-gui\" class=\"headerlink\" title=\"git gui\"></a><code>git gui</code></h3><p>相比于<code>gitk</code>，<code>git gui</code>是偏向于创建commit的辅助工具</p>\n<h3 id=\"git-checkout\"><a href=\"#git-checkout\" class=\"headerlink\" title=\"git checkout\"></a><code>git checkout</code></h3><ul>\n<li><code>git checkout -b branchName commitId</code>可以由commitId所在的commit创建一个名为branchName的分支且切换到此。</li>\n</ul>\n<h3 id=\"git-add\"><a href=\"#git-add\" class=\"headerlink\" title=\"git add\"></a><code>git add</code></h3><ul>\n<li><code>-u</code>参数可以一次性提交已经被add的文件到暂存区。</li>\n</ul>\n<h3 id=\"git-mv\"><a href=\"#git-mv\" class=\"headerlink\" title=\"git mv\"></a><code>git mv</code></h3><ul>\n<li><code>git mv 1 2</code>命令可以直接重命名马上commit而不需要add（比重命名之后再添加简单，因为那样认为你是删除了原文件添加了新文件）</li>\n</ul>\n<h3 id=\"git-log\"><a href=\"#git-log\" class=\"headerlink\" title=\"git log\"></a><code>git log</code></h3><ul>\n<li><code>--oneline</code>参数可以让每个commit只展现一行</li>\n<li><code>--all</code>参数可以显示所有分支的所有commit，不仅仅包含当前分支</li>\n<li><code>--graph</code>参数可以以图的方式展现包含commit的父子关系</li>\n<li><code>--n[x]</code>参数可以显示时间上最近的x个commit日志</li>\n</ul>\n<h3 id=\"git-diff\"><a href=\"#git-diff\" class=\"headerlink\" title=\"git diff\"></a><code>git diff</code></h3><ul>\n<li><code>git diff commitId1 commitId2</code>比较两个commit的差异</li>\n<li>HEAD指代，比如<code>git diff HEAD HEAD^</code>（当前commit和父commit比较），<code>git diff HEAD HEAD^^</code>（当前commit和祖父commit比较）。以上两个命令也可以分别用<code>git diff HEAD HEAD~1</code>和<code>git diff HEAD HEAD~2</code>来比较</li>\n</ul>\n<h2 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h2><h3 id=\"HEAD-Detach（分离头指针）\"><a href=\"#HEAD-Detach（分离头指针）\" class=\"headerlink\" title=\"HEAD Detach（分离头指针）\"></a>HEAD Detach（分离头指针）</h3><blockquote>\n<p>切换分支时切换到某个commit而不是某个分支。</p>\n</blockquote>\n<ul>\n<li><p>好处<br>你可以利用分离头指针做一些测试commit，可以切换回原来的分支来舍弃这些测试commit</p>\n</li>\n<li><p>坏处<br>容易不小心舍弃一些commit，一般在操作时会有warning。</p>\n<ul>\n<li>如果不小心切换到head detach的状态，可以使用<code>git checkout -b new-name</code>来保存这些测试。</li>\n<li>如果不小心切换到head detach状态并且提交commit后又切换到其他分支，可以使用<code>git branch branch-name commitId</code>来保存</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>HEAD指向当前commit</li>\n<li>分支实际上指向当前分支的最新commit</li>\n<li>标签就是给某个commit做了一个标记</li>\n<li>commit中有一个tree属性指向项目根目录。</li>\n<li>tree可以看做是文件夹，文件夹中可以包含其他文件夹（tree），也可以包含文件（blob）</li>\n<li><code>.git/config</code>文件保存了一些局部配置（<code>git config --local xxx xxx</code>）</li>\n</ul>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li>苏玲，《Git三剑客》</li>\n</ul>"},{"title":"直方图处理","mathjax":true,"copyright":true,"comment":true,"date":"2019-03-13T06:44:35.000Z","_content":"\n{% note default %}\n\n就像望远镜之于天文学，计算机科学不仅仅是计算机。—— Edsger Dijkstra\n\n{% endnote %}\n\n<!-- more -->\n\n---\n\n\n## 前言\n\n了解了BMP文件的格式，下面就开始真正的进行图像处理了，首先是图像增强，本文主要写灰度直方图和根据灰度直方图均衡化8位灰度图\n\n\n## 直方图统计\n\n\n\n### 什么是灰度直方图\n\n\n\n灰度直方图用于显示图片各像素灰度的分布情况，即各个灰度级有多少个像素点。\n\n\n\n### 直方图的作用\n\n\n\n能够看到直方图的灰度分布，以观测图像的各类属性，比如图像偏亮还是偏暗，图像灰度是否集中等。\n\n\n\n![1552526052073](grayscale-histogram-resolver/1552526052073.png)\n\n\n\n### 如何获得直方图\n\n> 用C语言手撸BMP图片真是shxt。。\n\n\n\n1. 24位真彩色需要计算得到8位灰度图\n2. 统计各灰度级像素个数\n3. 计算各灰度级概率密度\n4. 获得直方图\n\n\n\n## 直方图均衡化\n\n\n### 什么是直方图均衡化\n\n**直方图均衡化**是[图像处理](https://zh.wikipedia.org/wiki/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86)领域中利用[图像](https://zh.wikipedia.org/wiki/%E5%9B%BE%E5%83%8F)[直方图](https://zh.wikipedia.org/wiki/%E7%9B%B4%E6%96%B9%E5%9B%BE)对[对比度](https://zh.wikipedia.org/wiki/%E5%B0%8D%E6%AF%94%E5%BA%A6)进行调整的方法。\n\n### 为什么要均衡化\n\n> 摘自[维基百科][1]\n\n这种方法通常用来增加许多图像的全局对比度，尤其是当图像的有用数据的对比度相当接近的时候。通过这种方法，亮度可以更好地在直方图上分布。这样就可以用于增强局部的对比度而不影响整体的对比度，直方图均衡化通过有效地扩展常用的亮度来实现这种功能。\n\n这种方法对于背景和前景都太亮或者太暗的图像非常有用，这种方法尤其是可以带来X光图像中更好的骨骼结构显示以及曝光过度或者曝光不足照片中更好的细节。这种方法的一个主要优势是它是一个相当直观的技术并且是可逆操作，如果已知均衡化函数，那么就可以恢复原始的直方图，并且计算量也不大。这种方法的一个缺点是它对处理的数据不加选择，它可能会增加背景噪声的对比度并且降低有用信号的对比度。\n\n### 如何均衡化\n\n{% note primary %}\n\n**本例使用灰度[累积分布函数](https://zh.wikipedia.org/wiki/%E7%B4%AF%E7%A7%AF%E5%88%86%E5%B8%83%E5%87%BD%E6%95%B0)均衡化**\n\n{% endnote %}\n\n1. 得到原图灰度级概率分布函数$P_r$（离散的）\n2. 计算原图灰度级累计分布函数（Cumulative distribution function，CDF）S\n3. 通过CDF和原图灰度级取近似得到新的灰度级\n\n\n\n![1552461156688](grayscale-histogram-resolver/1552461156688.png)\n\n\n\n## 实例\n\n> 版权问题请联系，侵删！\n\n\n\n### 24位真彩色（原图）\n\n![](grayscale-histogram-resolver/1.png)\n\n### 8位灰度图（转化后的8位灰度图）\n\n![](grayscale-histogram-resolver/2.png)\n\n### 均衡化8位灰度图（根据8位灰度图均衡化后的灰度图）\n\n![](grayscale-histogram-resolver/3.png)\n\n### 未均衡化8位灰度图的统计直方图\n\n![](grayscale-histogram-resolver/4.png)\n\n### 均衡化8位灰度图的统计直方图\n\n![](grayscale-histogram-resolver/5.png)\n\n\n\n## 不足之处\n\n未考虑24位真彩色的均衡化处理。\n\n> 实际上，对彩色分量rgb分别做均衡化，会产生奇异的点，图像不和谐。一般采用的是用[HSL和HSV色彩空间](https://zh.wikipedia.org/wiki/HSL%E5%92%8CHSV%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%97%B4)进行亮度的均衡即可。（摘自[维基百科][1]）\n\n\n\n\n\n## 代码\n\n\n\n{% note primary%}\n\n**全部代码请查看[GitHub](https://github.com/ScarboroughCoral/DIPModule)**\n\n{% endnote %}\n\n\n\n```c\n#include \"BMPHelper.h\"\n#include <stdio.h>\n\nvoid HistogramStatic() {\n\n\tconst int L = 256;\n\n\t\n\n\t// 24位真彩色转8位灰度\n\n\tBMP24To8Gray(\"1.bmp\", \"2.bmp\");\n\n\tBMFILEHEADER header;\n\tINFOHEADER info;\n\tunsigned char ** data = malloc(sizeof(RGBITEM*));\n\tRGBQUAD ** palette = malloc(sizeof(RGBQUAD*));\n\n\tunsigned pixelCounts = BMPReader8(\"2.bmp\", &header, &info, palette, data);\n\n\tint histogram[256] = { 0 };\n\tdouble grayscaleDistribution[256] = { 0 };\n\tdouble cumulativeDistribution[256] = { 0 };\n\n\n\t//8位灰度统计\n\tfor (size_t i = 0; i < pixelCounts; i++)\n\t{\n\t\t\n\t\thistogram[*(*data+i)]++;\n\t}\n\n\tfor (size_t i = 0; i < 256; i++)\n\t{\n\t\tgrayscaleDistribution[i] = histogram[i] * 1.0 / pixelCounts;\n\t\t//求cdf\n\t\tif (i==0)\n\t\t{\n\t\t\tcumulativeDistribution[i] = grayscaleDistribution[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcumulativeDistribution[i] = cumulativeDistribution[i - 1] + grayscaleDistribution[i];\n\t\t}\n\t/*\tif (grayscaleDistribution[i] * 100.0 <0.01)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tprintf(\"灰度级【%3d】统计像素概率：%4.2f%%\\n\", i, grayscaleDistribution[i]*100);*/\n\t}\n\n\tfor (size_t i = 0; i < pixelCounts; i++)\n\t{\n\t\t\n\t\tint newGray = (int)(cumulativeDistribution[*(*data + i)] * (L-1) + 0.5);\n\t\t*(*data + i) = newGray;\n\n\t}\n\n\tint histogramLatest[256] = { 0 };\n\tdouble grayscaleDistributionLatest[256] = { 0 };\n\tfor (size_t i = 0; i < pixelCounts; i++)\n\t{\n\n\t\thistogramLatest[*(*data + i)]++;\n\t}\n\tfor (size_t i = 0; i < 256; i++)\n\t{\n\t\tgrayscaleDistributionLatest[i] = histogramLatest[i] * 1.0 / pixelCounts;\n\t}\n\tBMPWriter8(\"3.bmp\", &header, &info, palette, data);\n\toutputGrayscaleHistogram(\"4.bmp\", grayscaleDistribution, &info);\n\toutputGrayscaleHistogram(\"5.bmp\", grayscaleDistributionLatest, &info);\n\tprintf(\"%f\\n\", cumulativeDistribution[L - 1]);\n\t//BMPWriter(\"histogramout.bmp\", &header, &info, palette, data);\n\n\n}\n```\n\n\n\n\n\n[1]: https://zh.wikipedia.org/wiki/%E7%9B%B4%E6%96%B9%E5%9B%BE%E5%9D%87%E8%A1%A1%E5%8C%96\n\n\n\n","source":"_posts/grayscale-histogram-resolver.md","raw":"---\ntitle: 直方图处理\nmathjax: true\ncopyright: true\ncomment: true\ndate: 2019-03-13 14:44:35\ntags:\n- Computer Graphics\n- DIP\ncategories: \n- Computer Science\n- Computer Graphics\n\n---\n\n{% note default %}\n\n就像望远镜之于天文学，计算机科学不仅仅是计算机。—— Edsger Dijkstra\n\n{% endnote %}\n\n<!-- more -->\n\n---\n\n\n## 前言\n\n了解了BMP文件的格式，下面就开始真正的进行图像处理了，首先是图像增强，本文主要写灰度直方图和根据灰度直方图均衡化8位灰度图\n\n\n## 直方图统计\n\n\n\n### 什么是灰度直方图\n\n\n\n灰度直方图用于显示图片各像素灰度的分布情况，即各个灰度级有多少个像素点。\n\n\n\n### 直方图的作用\n\n\n\n能够看到直方图的灰度分布，以观测图像的各类属性，比如图像偏亮还是偏暗，图像灰度是否集中等。\n\n\n\n![1552526052073](grayscale-histogram-resolver/1552526052073.png)\n\n\n\n### 如何获得直方图\n\n> 用C语言手撸BMP图片真是shxt。。\n\n\n\n1. 24位真彩色需要计算得到8位灰度图\n2. 统计各灰度级像素个数\n3. 计算各灰度级概率密度\n4. 获得直方图\n\n\n\n## 直方图均衡化\n\n\n### 什么是直方图均衡化\n\n**直方图均衡化**是[图像处理](https://zh.wikipedia.org/wiki/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86)领域中利用[图像](https://zh.wikipedia.org/wiki/%E5%9B%BE%E5%83%8F)[直方图](https://zh.wikipedia.org/wiki/%E7%9B%B4%E6%96%B9%E5%9B%BE)对[对比度](https://zh.wikipedia.org/wiki/%E5%B0%8D%E6%AF%94%E5%BA%A6)进行调整的方法。\n\n### 为什么要均衡化\n\n> 摘自[维基百科][1]\n\n这种方法通常用来增加许多图像的全局对比度，尤其是当图像的有用数据的对比度相当接近的时候。通过这种方法，亮度可以更好地在直方图上分布。这样就可以用于增强局部的对比度而不影响整体的对比度，直方图均衡化通过有效地扩展常用的亮度来实现这种功能。\n\n这种方法对于背景和前景都太亮或者太暗的图像非常有用，这种方法尤其是可以带来X光图像中更好的骨骼结构显示以及曝光过度或者曝光不足照片中更好的细节。这种方法的一个主要优势是它是一个相当直观的技术并且是可逆操作，如果已知均衡化函数，那么就可以恢复原始的直方图，并且计算量也不大。这种方法的一个缺点是它对处理的数据不加选择，它可能会增加背景噪声的对比度并且降低有用信号的对比度。\n\n### 如何均衡化\n\n{% note primary %}\n\n**本例使用灰度[累积分布函数](https://zh.wikipedia.org/wiki/%E7%B4%AF%E7%A7%AF%E5%88%86%E5%B8%83%E5%87%BD%E6%95%B0)均衡化**\n\n{% endnote %}\n\n1. 得到原图灰度级概率分布函数$P_r$（离散的）\n2. 计算原图灰度级累计分布函数（Cumulative distribution function，CDF）S\n3. 通过CDF和原图灰度级取近似得到新的灰度级\n\n\n\n![1552461156688](grayscale-histogram-resolver/1552461156688.png)\n\n\n\n## 实例\n\n> 版权问题请联系，侵删！\n\n\n\n### 24位真彩色（原图）\n\n![](grayscale-histogram-resolver/1.png)\n\n### 8位灰度图（转化后的8位灰度图）\n\n![](grayscale-histogram-resolver/2.png)\n\n### 均衡化8位灰度图（根据8位灰度图均衡化后的灰度图）\n\n![](grayscale-histogram-resolver/3.png)\n\n### 未均衡化8位灰度图的统计直方图\n\n![](grayscale-histogram-resolver/4.png)\n\n### 均衡化8位灰度图的统计直方图\n\n![](grayscale-histogram-resolver/5.png)\n\n\n\n## 不足之处\n\n未考虑24位真彩色的均衡化处理。\n\n> 实际上，对彩色分量rgb分别做均衡化，会产生奇异的点，图像不和谐。一般采用的是用[HSL和HSV色彩空间](https://zh.wikipedia.org/wiki/HSL%E5%92%8CHSV%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%97%B4)进行亮度的均衡即可。（摘自[维基百科][1]）\n\n\n\n\n\n## 代码\n\n\n\n{% note primary%}\n\n**全部代码请查看[GitHub](https://github.com/ScarboroughCoral/DIPModule)**\n\n{% endnote %}\n\n\n\n```c\n#include \"BMPHelper.h\"\n#include <stdio.h>\n\nvoid HistogramStatic() {\n\n\tconst int L = 256;\n\n\t\n\n\t// 24位真彩色转8位灰度\n\n\tBMP24To8Gray(\"1.bmp\", \"2.bmp\");\n\n\tBMFILEHEADER header;\n\tINFOHEADER info;\n\tunsigned char ** data = malloc(sizeof(RGBITEM*));\n\tRGBQUAD ** palette = malloc(sizeof(RGBQUAD*));\n\n\tunsigned pixelCounts = BMPReader8(\"2.bmp\", &header, &info, palette, data);\n\n\tint histogram[256] = { 0 };\n\tdouble grayscaleDistribution[256] = { 0 };\n\tdouble cumulativeDistribution[256] = { 0 };\n\n\n\t//8位灰度统计\n\tfor (size_t i = 0; i < pixelCounts; i++)\n\t{\n\t\t\n\t\thistogram[*(*data+i)]++;\n\t}\n\n\tfor (size_t i = 0; i < 256; i++)\n\t{\n\t\tgrayscaleDistribution[i] = histogram[i] * 1.0 / pixelCounts;\n\t\t//求cdf\n\t\tif (i==0)\n\t\t{\n\t\t\tcumulativeDistribution[i] = grayscaleDistribution[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcumulativeDistribution[i] = cumulativeDistribution[i - 1] + grayscaleDistribution[i];\n\t\t}\n\t/*\tif (grayscaleDistribution[i] * 100.0 <0.01)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tprintf(\"灰度级【%3d】统计像素概率：%4.2f%%\\n\", i, grayscaleDistribution[i]*100);*/\n\t}\n\n\tfor (size_t i = 0; i < pixelCounts; i++)\n\t{\n\t\t\n\t\tint newGray = (int)(cumulativeDistribution[*(*data + i)] * (L-1) + 0.5);\n\t\t*(*data + i) = newGray;\n\n\t}\n\n\tint histogramLatest[256] = { 0 };\n\tdouble grayscaleDistributionLatest[256] = { 0 };\n\tfor (size_t i = 0; i < pixelCounts; i++)\n\t{\n\n\t\thistogramLatest[*(*data + i)]++;\n\t}\n\tfor (size_t i = 0; i < 256; i++)\n\t{\n\t\tgrayscaleDistributionLatest[i] = histogramLatest[i] * 1.0 / pixelCounts;\n\t}\n\tBMPWriter8(\"3.bmp\", &header, &info, palette, data);\n\toutputGrayscaleHistogram(\"4.bmp\", grayscaleDistribution, &info);\n\toutputGrayscaleHistogram(\"5.bmp\", grayscaleDistributionLatest, &info);\n\tprintf(\"%f\\n\", cumulativeDistribution[L - 1]);\n\t//BMPWriter(\"histogramout.bmp\", &header, &info, palette, data);\n\n\n}\n```\n\n\n\n\n\n[1]: https://zh.wikipedia.org/wiki/%E7%9B%B4%E6%96%B9%E5%9B%BE%E5%9D%87%E8%A1%A1%E5%8C%96\n\n\n\n","slug":"grayscale-histogram-resolver","published":1,"updated":"2022-01-06T04:09:12.428Z","_id":"cksq5v7mm0028n0pu7kyk8sg6","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note default\"><p>就像望远镜之于天文学，计算机科学不仅仅是计算机。—— Edsger Dijkstra</p>\n</div>\n\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>了解了BMP文件的格式，下面就开始真正的进行图像处理了，首先是图像增强，本文主要写灰度直方图和根据灰度直方图均衡化8位灰度图</p>\n<h2 id=\"直方图统计\"><a href=\"#直方图统计\" class=\"headerlink\" title=\"直方图统计\"></a>直方图统计</h2><h3 id=\"什么是灰度直方图\"><a href=\"#什么是灰度直方图\" class=\"headerlink\" title=\"什么是灰度直方图\"></a>什么是灰度直方图</h3><p>灰度直方图用于显示图片各像素灰度的分布情况，即各个灰度级有多少个像素点。</p>\n<h3 id=\"直方图的作用\"><a href=\"#直方图的作用\" class=\"headerlink\" title=\"直方图的作用\"></a>直方图的作用</h3><p>能够看到直方图的灰度分布，以观测图像的各类属性，比如图像偏亮还是偏暗，图像灰度是否集中等。</p>\n<p><img data-src=\"grayscale-histogram-resolver/1552526052073.png\" alt=\"1552526052073\"></p>\n<h3 id=\"如何获得直方图\"><a href=\"#如何获得直方图\" class=\"headerlink\" title=\"如何获得直方图\"></a>如何获得直方图</h3><blockquote>\n<p>用C语言手撸BMP图片真是shxt。。</p>\n</blockquote>\n<ol>\n<li>24位真彩色需要计算得到8位灰度图</li>\n<li>统计各灰度级像素个数</li>\n<li>计算各灰度级概率密度</li>\n<li>获得直方图</li>\n</ol>\n<h2 id=\"直方图均衡化\"><a href=\"#直方图均衡化\" class=\"headerlink\" title=\"直方图均衡化\"></a>直方图均衡化</h2><h3 id=\"什么是直方图均衡化\"><a href=\"#什么是直方图均衡化\" class=\"headerlink\" title=\"什么是直方图均衡化\"></a>什么是直方图均衡化</h3><p><strong>直方图均衡化</strong>是<a href=\"https://zh.wikipedia.org/wiki/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86\">图像处理</a>领域中利用<a href=\"https://zh.wikipedia.org/wiki/%E5%9B%BE%E5%83%8F\">图像</a><a href=\"https://zh.wikipedia.org/wiki/%E7%9B%B4%E6%96%B9%E5%9B%BE\">直方图</a>对<a href=\"https://zh.wikipedia.org/wiki/%E5%B0%8D%E6%AF%94%E5%BA%A6\">对比度</a>进行调整的方法。</p>\n<h3 id=\"为什么要均衡化\"><a href=\"#为什么要均衡化\" class=\"headerlink\" title=\"为什么要均衡化\"></a>为什么要均衡化</h3><blockquote>\n<p>摘自<a href=\"https://zh.wikipedia.org/wiki/%E7%9B%B4%E6%96%B9%E5%9B%BE%E5%9D%87%E8%A1%A1%E5%8C%96\">维基百科</a></p>\n</blockquote>\n<p>这种方法通常用来增加许多图像的全局对比度，尤其是当图像的有用数据的对比度相当接近的时候。通过这种方法，亮度可以更好地在直方图上分布。这样就可以用于增强局部的对比度而不影响整体的对比度，直方图均衡化通过有效地扩展常用的亮度来实现这种功能。</p>\n<p>这种方法对于背景和前景都太亮或者太暗的图像非常有用，这种方法尤其是可以带来X光图像中更好的骨骼结构显示以及曝光过度或者曝光不足照片中更好的细节。这种方法的一个主要优势是它是一个相当直观的技术并且是可逆操作，如果已知均衡化函数，那么就可以恢复原始的直方图，并且计算量也不大。这种方法的一个缺点是它对处理的数据不加选择，它可能会增加背景噪声的对比度并且降低有用信号的对比度。</p>\n<h3 id=\"如何均衡化\"><a href=\"#如何均衡化\" class=\"headerlink\" title=\"如何均衡化\"></a>如何均衡化</h3><div class=\"note primary\"><p><strong>本例使用灰度<a href=\"https://zh.wikipedia.org/wiki/%E7%B4%AF%E7%A7%AF%E5%88%86%E5%B8%83%E5%87%BD%E6%95%B0\">累积分布函数</a>均衡化</strong></p>\n</div>\n\n<ol>\n<li>得到原图灰度级概率分布函数$P_r$（离散的）</li>\n<li>计算原图灰度级累计分布函数（Cumulative distribution function，CDF）S</li>\n<li>通过CDF和原图灰度级取近似得到新的灰度级</li>\n</ol>\n<p><img data-src=\"grayscale-histogram-resolver/1552461156688.png\" alt=\"1552461156688\"></p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><blockquote>\n<p>版权问题请联系，侵删！</p>\n</blockquote>\n<h3 id=\"24位真彩色（原图）\"><a href=\"#24位真彩色（原图）\" class=\"headerlink\" title=\"24位真彩色（原图）\"></a>24位真彩色（原图）</h3><p><img data-src=\"grayscale-histogram-resolver/1.png\"></p>\n<h3 id=\"8位灰度图（转化后的8位灰度图）\"><a href=\"#8位灰度图（转化后的8位灰度图）\" class=\"headerlink\" title=\"8位灰度图（转化后的8位灰度图）\"></a>8位灰度图（转化后的8位灰度图）</h3><p><img data-src=\"grayscale-histogram-resolver/2.png\"></p>\n<h3 id=\"均衡化8位灰度图（根据8位灰度图均衡化后的灰度图）\"><a href=\"#均衡化8位灰度图（根据8位灰度图均衡化后的灰度图）\" class=\"headerlink\" title=\"均衡化8位灰度图（根据8位灰度图均衡化后的灰度图）\"></a>均衡化8位灰度图（根据8位灰度图均衡化后的灰度图）</h3><p><img data-src=\"grayscale-histogram-resolver/3.png\"></p>\n<h3 id=\"未均衡化8位灰度图的统计直方图\"><a href=\"#未均衡化8位灰度图的统计直方图\" class=\"headerlink\" title=\"未均衡化8位灰度图的统计直方图\"></a>未均衡化8位灰度图的统计直方图</h3><p><img data-src=\"grayscale-histogram-resolver/4.png\"></p>\n<h3 id=\"均衡化8位灰度图的统计直方图\"><a href=\"#均衡化8位灰度图的统计直方图\" class=\"headerlink\" title=\"均衡化8位灰度图的统计直方图\"></a>均衡化8位灰度图的统计直方图</h3><p><img data-src=\"grayscale-histogram-resolver/5.png\"></p>\n<h2 id=\"不足之处\"><a href=\"#不足之处\" class=\"headerlink\" title=\"不足之处\"></a>不足之处</h2><p>未考虑24位真彩色的均衡化处理。</p>\n<blockquote>\n<p>实际上，对彩色分量rgb分别做均衡化，会产生奇异的点，图像不和谐。一般采用的是用<a href=\"https://zh.wikipedia.org/wiki/HSL%E5%92%8CHSV%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%97%B4\">HSL和HSV色彩空间</a>进行亮度的均衡即可。（摘自<a href=\"https://zh.wikipedia.org/wiki/%E7%9B%B4%E6%96%B9%E5%9B%BE%E5%9D%87%E8%A1%A1%E5%8C%96\">维基百科</a>）</p>\n</blockquote>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><div class=\"note primary\"><p><strong>全部代码请查看<a href=\"https://github.com/ScarboroughCoral/DIPModule\">GitHub</a></strong></p>\n</div>\n\n\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;BMPHelper.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">HistogramStatic</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> L = <span class=\"number\">256</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 24位真彩色转8位灰度</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tBMP24To8Gray(<span class=\"string\">&quot;1.bmp&quot;</span>, <span class=\"string\">&quot;2.bmp&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tBMFILEHEADER header;</span><br><span class=\"line\">\tINFOHEADER info;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> ** data = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(RGBITEM*));</span><br><span class=\"line\">\tRGBQUAD ** palette = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(RGBQUAD*));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> pixelCounts = BMPReader8(<span class=\"string\">&quot;2.bmp&quot;</span>, &amp;header, &amp;info, palette, data);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> histogram[<span class=\"number\">256</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> grayscaleDistribution[<span class=\"number\">256</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> cumulativeDistribution[<span class=\"number\">256</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//8位灰度统计</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; pixelCounts; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\thistogram[*(*data+i)]++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">256</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tgrayscaleDistribution[i] = histogram[i] * <span class=\"number\">1.0</span> / pixelCounts;</span><br><span class=\"line\">\t\t<span class=\"comment\">//求cdf</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i==<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcumulativeDistribution[i] = grayscaleDistribution[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcumulativeDistribution[i] = cumulativeDistribution[i - <span class=\"number\">1</span>] + grayscaleDistribution[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/*\tif (grayscaleDistribution[i] * 100.0 &lt;0.01)</span></span><br><span class=\"line\"><span class=\"comment\">\t\t&#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\tcontinue;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tprintf(&quot;灰度级【%3d】统计像素概率：%4.2f%%\\n&quot;, i, grayscaleDistribution[i]*100);*/</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; pixelCounts; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> newGray = (<span class=\"keyword\">int</span>)(cumulativeDistribution[*(*data + i)] * (L<span class=\"number\">-1</span>) + <span class=\"number\">0.5</span>);</span><br><span class=\"line\">\t\t*(*data + i) = newGray;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> histogramLatest[<span class=\"number\">256</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> grayscaleDistributionLatest[<span class=\"number\">256</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; pixelCounts; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\thistogramLatest[*(*data + i)]++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">256</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tgrayscaleDistributionLatest[i] = histogramLatest[i] * <span class=\"number\">1.0</span> / pixelCounts;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tBMPWriter8(<span class=\"string\">&quot;3.bmp&quot;</span>, &amp;header, &amp;info, palette, data);</span><br><span class=\"line\">\toutputGrayscaleHistogram(<span class=\"string\">&quot;4.bmp&quot;</span>, grayscaleDistribution, &amp;info);</span><br><span class=\"line\">\toutputGrayscaleHistogram(<span class=\"string\">&quot;5.bmp&quot;</span>, grayscaleDistributionLatest, &amp;info);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%f\\n&quot;</span>, cumulativeDistribution[L - <span class=\"number\">1</span>]);</span><br><span class=\"line\">\t<span class=\"comment\">//BMPWriter(&quot;histogramout.bmp&quot;, &amp;header, &amp;info, palette, data);</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n","site":{"data":{}},"excerpt":"<div class=\"note default\"><p>就像望远镜之于天文学，计算机科学不仅仅是计算机。—— Edsger Dijkstra</p>\n</div>","more":"<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>了解了BMP文件的格式，下面就开始真正的进行图像处理了，首先是图像增强，本文主要写灰度直方图和根据灰度直方图均衡化8位灰度图</p>\n<h2 id=\"直方图统计\"><a href=\"#直方图统计\" class=\"headerlink\" title=\"直方图统计\"></a>直方图统计</h2><h3 id=\"什么是灰度直方图\"><a href=\"#什么是灰度直方图\" class=\"headerlink\" title=\"什么是灰度直方图\"></a>什么是灰度直方图</h3><p>灰度直方图用于显示图片各像素灰度的分布情况，即各个灰度级有多少个像素点。</p>\n<h3 id=\"直方图的作用\"><a href=\"#直方图的作用\" class=\"headerlink\" title=\"直方图的作用\"></a>直方图的作用</h3><p>能够看到直方图的灰度分布，以观测图像的各类属性，比如图像偏亮还是偏暗，图像灰度是否集中等。</p>\n<p><img data-src=\"grayscale-histogram-resolver/1552526052073.png\" alt=\"1552526052073\"></p>\n<h3 id=\"如何获得直方图\"><a href=\"#如何获得直方图\" class=\"headerlink\" title=\"如何获得直方图\"></a>如何获得直方图</h3><blockquote>\n<p>用C语言手撸BMP图片真是shxt。。</p>\n</blockquote>\n<ol>\n<li>24位真彩色需要计算得到8位灰度图</li>\n<li>统计各灰度级像素个数</li>\n<li>计算各灰度级概率密度</li>\n<li>获得直方图</li>\n</ol>\n<h2 id=\"直方图均衡化\"><a href=\"#直方图均衡化\" class=\"headerlink\" title=\"直方图均衡化\"></a>直方图均衡化</h2><h3 id=\"什么是直方图均衡化\"><a href=\"#什么是直方图均衡化\" class=\"headerlink\" title=\"什么是直方图均衡化\"></a>什么是直方图均衡化</h3><p><strong>直方图均衡化</strong>是<a href=\"https://zh.wikipedia.org/wiki/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86\">图像处理</a>领域中利用<a href=\"https://zh.wikipedia.org/wiki/%E5%9B%BE%E5%83%8F\">图像</a><a href=\"https://zh.wikipedia.org/wiki/%E7%9B%B4%E6%96%B9%E5%9B%BE\">直方图</a>对<a href=\"https://zh.wikipedia.org/wiki/%E5%B0%8D%E6%AF%94%E5%BA%A6\">对比度</a>进行调整的方法。</p>\n<h3 id=\"为什么要均衡化\"><a href=\"#为什么要均衡化\" class=\"headerlink\" title=\"为什么要均衡化\"></a>为什么要均衡化</h3><blockquote>\n<p>摘自<a href=\"https://zh.wikipedia.org/wiki/%E7%9B%B4%E6%96%B9%E5%9B%BE%E5%9D%87%E8%A1%A1%E5%8C%96\">维基百科</a></p>\n</blockquote>\n<p>这种方法通常用来增加许多图像的全局对比度，尤其是当图像的有用数据的对比度相当接近的时候。通过这种方法，亮度可以更好地在直方图上分布。这样就可以用于增强局部的对比度而不影响整体的对比度，直方图均衡化通过有效地扩展常用的亮度来实现这种功能。</p>\n<p>这种方法对于背景和前景都太亮或者太暗的图像非常有用，这种方法尤其是可以带来X光图像中更好的骨骼结构显示以及曝光过度或者曝光不足照片中更好的细节。这种方法的一个主要优势是它是一个相当直观的技术并且是可逆操作，如果已知均衡化函数，那么就可以恢复原始的直方图，并且计算量也不大。这种方法的一个缺点是它对处理的数据不加选择，它可能会增加背景噪声的对比度并且降低有用信号的对比度。</p>\n<h3 id=\"如何均衡化\"><a href=\"#如何均衡化\" class=\"headerlink\" title=\"如何均衡化\"></a>如何均衡化</h3><div class=\"note primary\"><p><strong>本例使用灰度<a href=\"https://zh.wikipedia.org/wiki/%E7%B4%AF%E7%A7%AF%E5%88%86%E5%B8%83%E5%87%BD%E6%95%B0\">累积分布函数</a>均衡化</strong></p>\n</div>\n\n<ol>\n<li>得到原图灰度级概率分布函数$P_r$（离散的）</li>\n<li>计算原图灰度级累计分布函数（Cumulative distribution function，CDF）S</li>\n<li>通过CDF和原图灰度级取近似得到新的灰度级</li>\n</ol>\n<p><img data-src=\"grayscale-histogram-resolver/1552461156688.png\" alt=\"1552461156688\"></p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><blockquote>\n<p>版权问题请联系，侵删！</p>\n</blockquote>\n<h3 id=\"24位真彩色（原图）\"><a href=\"#24位真彩色（原图）\" class=\"headerlink\" title=\"24位真彩色（原图）\"></a>24位真彩色（原图）</h3><p><img data-src=\"grayscale-histogram-resolver/1.png\"></p>\n<h3 id=\"8位灰度图（转化后的8位灰度图）\"><a href=\"#8位灰度图（转化后的8位灰度图）\" class=\"headerlink\" title=\"8位灰度图（转化后的8位灰度图）\"></a>8位灰度图（转化后的8位灰度图）</h3><p><img data-src=\"grayscale-histogram-resolver/2.png\"></p>\n<h3 id=\"均衡化8位灰度图（根据8位灰度图均衡化后的灰度图）\"><a href=\"#均衡化8位灰度图（根据8位灰度图均衡化后的灰度图）\" class=\"headerlink\" title=\"均衡化8位灰度图（根据8位灰度图均衡化后的灰度图）\"></a>均衡化8位灰度图（根据8位灰度图均衡化后的灰度图）</h3><p><img data-src=\"grayscale-histogram-resolver/3.png\"></p>\n<h3 id=\"未均衡化8位灰度图的统计直方图\"><a href=\"#未均衡化8位灰度图的统计直方图\" class=\"headerlink\" title=\"未均衡化8位灰度图的统计直方图\"></a>未均衡化8位灰度图的统计直方图</h3><p><img data-src=\"grayscale-histogram-resolver/4.png\"></p>\n<h3 id=\"均衡化8位灰度图的统计直方图\"><a href=\"#均衡化8位灰度图的统计直方图\" class=\"headerlink\" title=\"均衡化8位灰度图的统计直方图\"></a>均衡化8位灰度图的统计直方图</h3><p><img data-src=\"grayscale-histogram-resolver/5.png\"></p>\n<h2 id=\"不足之处\"><a href=\"#不足之处\" class=\"headerlink\" title=\"不足之处\"></a>不足之处</h2><p>未考虑24位真彩色的均衡化处理。</p>\n<blockquote>\n<p>实际上，对彩色分量rgb分别做均衡化，会产生奇异的点，图像不和谐。一般采用的是用<a href=\"https://zh.wikipedia.org/wiki/HSL%E5%92%8CHSV%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%97%B4\">HSL和HSV色彩空间</a>进行亮度的均衡即可。（摘自<a href=\"https://zh.wikipedia.org/wiki/%E7%9B%B4%E6%96%B9%E5%9B%BE%E5%9D%87%E8%A1%A1%E5%8C%96\">维基百科</a>）</p>\n</blockquote>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><div class=\"note primary\"><p><strong>全部代码请查看<a href=\"https://github.com/ScarboroughCoral/DIPModule\">GitHub</a></strong></p>\n</div>\n\n\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;BMPHelper.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">HistogramStatic</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> L = <span class=\"number\">256</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 24位真彩色转8位灰度</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tBMP24To8Gray(<span class=\"string\">&quot;1.bmp&quot;</span>, <span class=\"string\">&quot;2.bmp&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tBMFILEHEADER header;</span><br><span class=\"line\">\tINFOHEADER info;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> ** data = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(RGBITEM*));</span><br><span class=\"line\">\tRGBQUAD ** palette = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(RGBQUAD*));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> pixelCounts = BMPReader8(<span class=\"string\">&quot;2.bmp&quot;</span>, &amp;header, &amp;info, palette, data);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> histogram[<span class=\"number\">256</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> grayscaleDistribution[<span class=\"number\">256</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> cumulativeDistribution[<span class=\"number\">256</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//8位灰度统计</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; pixelCounts; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\thistogram[*(*data+i)]++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">256</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tgrayscaleDistribution[i] = histogram[i] * <span class=\"number\">1.0</span> / pixelCounts;</span><br><span class=\"line\">\t\t<span class=\"comment\">//求cdf</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i==<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcumulativeDistribution[i] = grayscaleDistribution[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcumulativeDistribution[i] = cumulativeDistribution[i - <span class=\"number\">1</span>] + grayscaleDistribution[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/*\tif (grayscaleDistribution[i] * 100.0 &lt;0.01)</span></span><br><span class=\"line\"><span class=\"comment\">\t\t&#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\tcontinue;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tprintf(&quot;灰度级【%3d】统计像素概率：%4.2f%%\\n&quot;, i, grayscaleDistribution[i]*100);*/</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; pixelCounts; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> newGray = (<span class=\"keyword\">int</span>)(cumulativeDistribution[*(*data + i)] * (L<span class=\"number\">-1</span>) + <span class=\"number\">0.5</span>);</span><br><span class=\"line\">\t\t*(*data + i) = newGray;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> histogramLatest[<span class=\"number\">256</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> grayscaleDistributionLatest[<span class=\"number\">256</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; pixelCounts; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\thistogramLatest[*(*data + i)]++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">256</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tgrayscaleDistributionLatest[i] = histogramLatest[i] * <span class=\"number\">1.0</span> / pixelCounts;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tBMPWriter8(<span class=\"string\">&quot;3.bmp&quot;</span>, &amp;header, &amp;info, palette, data);</span><br><span class=\"line\">\toutputGrayscaleHistogram(<span class=\"string\">&quot;4.bmp&quot;</span>, grayscaleDistribution, &amp;info);</span><br><span class=\"line\">\toutputGrayscaleHistogram(<span class=\"string\">&quot;5.bmp&quot;</span>, grayscaleDistributionLatest, &amp;info);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%f\\n&quot;</span>, cumulativeDistribution[L - <span class=\"number\">1</span>]);</span><br><span class=\"line\">\t<span class=\"comment\">//BMPWriter(&quot;histogramout.bmp&quot;, &amp;header, &amp;info, palette, data);</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"协议系列：HTTP历史版本特性更改关键点总结","mathjax":false,"copyright":true,"comment":true,"date":"2019-11-22T09:02:00.000Z","_content":"\n{% note primary %}\nHTTP1.0、HTTP1.0、HTTP2.0、HTTP3\n{% endnote %}\n\n<!-- more -->\n\n---\n\n\n## 前言\n\n最近在维基百科看HTTP状态码的时候看到了HTTP的版本历史，发现了一些不知道的东西，今天就来总结一下这部分内容。\n\n一些详细的历史内容比如说谁发布的标准等等，在本篇文章中并不会涉及，读者有兴趣可以自行Google，本篇文章重点是HTTP版本的关键特性变化。\n\n如果有关键内容没有提及或者说有错误的话，请右下方小窗我或者文章右上角修改文件在GitHub发起pr。\n\n- [前言](#%e5%89%8d%e8%a8%80)\n- [HTTP1.1](#http11)\n- [HTTP2](#http2)\n- [HTTP3](#http3)\n- [HTTPS](#https)\n- [总结](#%e6%80%bb%e7%bb%93)\n- [Reference](#reference)\n\n\n## HTTP1.1\n\n相较于HTTP1.0发生了如下改变：\n\n- 持久连接。HTTP1.0每次TCP连接只允许一次资源请求，一个request——response的pair。HTTP1.1允许每次连接都有多个请求响应pair。这样也利用了TCP的慢启动策略，速度上有明显的提升。\n- pipelining流水线。HTTP1.1发送请求后不再等待响应后再请求其他资源，允许一次发送多个请求。\n- Byte Range Serving。顾名思义，HTTP1.1允许客户端请求资源的一部分。这个和Chunked transfer encoding可以互相替代。\n- Chunked transfer encoding，一种数据流机制。HTTP1.1允许将数据分割成块，这些块独立的进行传输。HTTP2已经不用这种方法了。\n\n\n\n## HTTP2\n\n向前兼容，HTTP3没有隔离以前的重要版本，能够运行基于HTTP1.0和1.1的应用程序。\n\n- 不支持HTTP1.1的Chunked transfer encoding，自己提供了另一种类似的数据流机制。\n\n## HTTP3\n\n向前兼容的，HTTP3没有隔离以前的重要版本，能够运行基于HTTP2的应用程序。今年一些浏览器比如Google、Firefox已经开始支持HTTP3了。\n\n- 传输层级基于UDP\n\n\n## HTTPS\n\n\n\n## 总结\n\n暂时就总结这么多，以后遇到时再来添加。\n\n## Reference\n\n- [Hypertext Transfer Protocol](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol)","source":"_posts/http-change-history.md","raw":"---\ntitle: 协议系列：HTTP历史版本特性更改关键点总结\nmathjax: false\ncopyright: true\ncomment: true\ndate: 2019-11-22 17:02:00\ntags:\n- Protocol\n- HTTP\ncategories:\n- Protocol\n- HTTP\n\n---\n\n{% note primary %}\nHTTP1.0、HTTP1.0、HTTP2.0、HTTP3\n{% endnote %}\n\n<!-- more -->\n\n---\n\n\n## 前言\n\n最近在维基百科看HTTP状态码的时候看到了HTTP的版本历史，发现了一些不知道的东西，今天就来总结一下这部分内容。\n\n一些详细的历史内容比如说谁发布的标准等等，在本篇文章中并不会涉及，读者有兴趣可以自行Google，本篇文章重点是HTTP版本的关键特性变化。\n\n如果有关键内容没有提及或者说有错误的话，请右下方小窗我或者文章右上角修改文件在GitHub发起pr。\n\n- [前言](#%e5%89%8d%e8%a8%80)\n- [HTTP1.1](#http11)\n- [HTTP2](#http2)\n- [HTTP3](#http3)\n- [HTTPS](#https)\n- [总结](#%e6%80%bb%e7%bb%93)\n- [Reference](#reference)\n\n\n## HTTP1.1\n\n相较于HTTP1.0发生了如下改变：\n\n- 持久连接。HTTP1.0每次TCP连接只允许一次资源请求，一个request——response的pair。HTTP1.1允许每次连接都有多个请求响应pair。这样也利用了TCP的慢启动策略，速度上有明显的提升。\n- pipelining流水线。HTTP1.1发送请求后不再等待响应后再请求其他资源，允许一次发送多个请求。\n- Byte Range Serving。顾名思义，HTTP1.1允许客户端请求资源的一部分。这个和Chunked transfer encoding可以互相替代。\n- Chunked transfer encoding，一种数据流机制。HTTP1.1允许将数据分割成块，这些块独立的进行传输。HTTP2已经不用这种方法了。\n\n\n\n## HTTP2\n\n向前兼容，HTTP3没有隔离以前的重要版本，能够运行基于HTTP1.0和1.1的应用程序。\n\n- 不支持HTTP1.1的Chunked transfer encoding，自己提供了另一种类似的数据流机制。\n\n## HTTP3\n\n向前兼容的，HTTP3没有隔离以前的重要版本，能够运行基于HTTP2的应用程序。今年一些浏览器比如Google、Firefox已经开始支持HTTP3了。\n\n- 传输层级基于UDP\n\n\n## HTTPS\n\n\n\n## 总结\n\n暂时就总结这么多，以后遇到时再来添加。\n\n## Reference\n\n- [Hypertext Transfer Protocol](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol)","slug":"http-change-history","published":1,"updated":"2022-01-06T04:09:12.462Z","_id":"cksq5v7mn002cn0pu2hsq9m0q","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note primary\"><p>HTTP1.0、HTTP1.0、HTTP2.0、HTTP3</p>\n</div>\n\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近在维基百科看HTTP状态码的时候看到了HTTP的版本历史，发现了一些不知道的东西，今天就来总结一下这部分内容。</p>\n<p>一些详细的历史内容比如说谁发布的标准等等，在本篇文章中并不会涉及，读者有兴趣可以自行Google，本篇文章重点是HTTP版本的关键特性变化。</p>\n<p>如果有关键内容没有提及或者说有错误的话，请右下方小窗我或者文章右上角修改文件在GitHub发起pr。</p>\n<ul>\n<li><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li><a href=\"#http11\">HTTP1.1</a></li>\n<li><a href=\"#http2\">HTTP2</a></li>\n<li><a href=\"#http3\">HTTP3</a></li>\n<li><a href=\"#https\">HTTPS</a></li>\n<li><a href=\"#%E6%80%BB%E7%BB%93\">总结</a></li>\n<li><a href=\"#reference\">Reference</a></li>\n</ul>\n<h2 id=\"HTTP1-1\"><a href=\"#HTTP1-1\" class=\"headerlink\" title=\"HTTP1.1\"></a>HTTP1.1</h2><p>相较于HTTP1.0发生了如下改变：</p>\n<ul>\n<li>持久连接。HTTP1.0每次TCP连接只允许一次资源请求，一个request——response的pair。HTTP1.1允许每次连接都有多个请求响应pair。这样也利用了TCP的慢启动策略，速度上有明显的提升。</li>\n<li>pipelining流水线。HTTP1.1发送请求后不再等待响应后再请求其他资源，允许一次发送多个请求。</li>\n<li>Byte Range Serving。顾名思义，HTTP1.1允许客户端请求资源的一部分。这个和Chunked transfer encoding可以互相替代。</li>\n<li>Chunked transfer encoding，一种数据流机制。HTTP1.1允许将数据分割成块，这些块独立的进行传输。HTTP2已经不用这种方法了。</li>\n</ul>\n<h2 id=\"HTTP2\"><a href=\"#HTTP2\" class=\"headerlink\" title=\"HTTP2\"></a>HTTP2</h2><p>向前兼容，HTTP3没有隔离以前的重要版本，能够运行基于HTTP1.0和1.1的应用程序。</p>\n<ul>\n<li>不支持HTTP1.1的Chunked transfer encoding，自己提供了另一种类似的数据流机制。</li>\n</ul>\n<h2 id=\"HTTP3\"><a href=\"#HTTP3\" class=\"headerlink\" title=\"HTTP3\"></a>HTTP3</h2><p>向前兼容的，HTTP3没有隔离以前的重要版本，能够运行基于HTTP2的应用程序。今年一些浏览器比如Google、Firefox已经开始支持HTTP3了。</p>\n<ul>\n<li>传输层级基于UDP</li>\n</ul>\n<h2 id=\"HTTPS\"><a href=\"#HTTPS\" class=\"headerlink\" title=\"HTTPS\"></a>HTTPS</h2><h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>暂时就总结这么多，以后遇到时再来添加。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol\">Hypertext Transfer Protocol</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note primary\"><p>HTTP1.0、HTTP1.0、HTTP2.0、HTTP3</p>\n</div>","more":"<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近在维基百科看HTTP状态码的时候看到了HTTP的版本历史，发现了一些不知道的东西，今天就来总结一下这部分内容。</p>\n<p>一些详细的历史内容比如说谁发布的标准等等，在本篇文章中并不会涉及，读者有兴趣可以自行Google，本篇文章重点是HTTP版本的关键特性变化。</p>\n<p>如果有关键内容没有提及或者说有错误的话，请右下方小窗我或者文章右上角修改文件在GitHub发起pr。</p>\n<ul>\n<li><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li><a href=\"#http11\">HTTP1.1</a></li>\n<li><a href=\"#http2\">HTTP2</a></li>\n<li><a href=\"#http3\">HTTP3</a></li>\n<li><a href=\"#https\">HTTPS</a></li>\n<li><a href=\"#%E6%80%BB%E7%BB%93\">总结</a></li>\n<li><a href=\"#reference\">Reference</a></li>\n</ul>\n<h2 id=\"HTTP1-1\"><a href=\"#HTTP1-1\" class=\"headerlink\" title=\"HTTP1.1\"></a>HTTP1.1</h2><p>相较于HTTP1.0发生了如下改变：</p>\n<ul>\n<li>持久连接。HTTP1.0每次TCP连接只允许一次资源请求，一个request——response的pair。HTTP1.1允许每次连接都有多个请求响应pair。这样也利用了TCP的慢启动策略，速度上有明显的提升。</li>\n<li>pipelining流水线。HTTP1.1发送请求后不再等待响应后再请求其他资源，允许一次发送多个请求。</li>\n<li>Byte Range Serving。顾名思义，HTTP1.1允许客户端请求资源的一部分。这个和Chunked transfer encoding可以互相替代。</li>\n<li>Chunked transfer encoding，一种数据流机制。HTTP1.1允许将数据分割成块，这些块独立的进行传输。HTTP2已经不用这种方法了。</li>\n</ul>\n<h2 id=\"HTTP2\"><a href=\"#HTTP2\" class=\"headerlink\" title=\"HTTP2\"></a>HTTP2</h2><p>向前兼容，HTTP3没有隔离以前的重要版本，能够运行基于HTTP1.0和1.1的应用程序。</p>\n<ul>\n<li>不支持HTTP1.1的Chunked transfer encoding，自己提供了另一种类似的数据流机制。</li>\n</ul>\n<h2 id=\"HTTP3\"><a href=\"#HTTP3\" class=\"headerlink\" title=\"HTTP3\"></a>HTTP3</h2><p>向前兼容的，HTTP3没有隔离以前的重要版本，能够运行基于HTTP2的应用程序。今年一些浏览器比如Google、Firefox已经开始支持HTTP3了。</p>\n<ul>\n<li>传输层级基于UDP</li>\n</ul>\n<h2 id=\"HTTPS\"><a href=\"#HTTPS\" class=\"headerlink\" title=\"HTTPS\"></a>HTTPS</h2><h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>暂时就总结这么多，以后遇到时再来添加。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol\">Hypertext Transfer Protocol</a></li>\n</ul>"},{"title":"协议系列：HTTP常见请求方式和状态码总结","mathjax":false,"copyright":true,"comment":true,"date":"2019-11-20T07:37:45.000Z","_content":"\n{% note primary %}\n404 not found。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 前言\n\n最近在看[同源策略和跨域问题](secure-same-origin-policy.html)时，看到CORS的解决方案是需要prefight，跨域时先向目标源发送一个OPTIONS请求，就发现这部分知识没有系统的了解过。今天就来总结一下常见的HTTP请求方式和HTTP状态码。\n\n- [前言](#%e5%89%8d%e8%a8%80)\n- [常见HTTP请求方式](#%e5%b8%b8%e8%a7%81http%e8%af%b7%e6%b1%82%e6%96%b9%e5%bc%8f)\n- [常见HTTP状态码](#%e5%b8%b8%e8%a7%81http%e7%8a%b6%e6%80%81%e7%a0%81)\n  - [1xx informational response，信息响应](#1xx-informational-response%e4%bf%a1%e6%81%af%e5%93%8d%e5%ba%94)\n  - [2xx success，成功](#2xx-success%e6%88%90%e5%8a%9f)\n  - [3xx redirection，重定位](#3xx-redirection%e9%87%8d%e5%ae%9a%e4%bd%8d)\n  - [4xx client errors，客户端错误](#4xx-client-errors%e5%ae%a2%e6%88%b7%e7%ab%af%e9%94%99%e8%af%af)\n  - [5xx server errors，服务器错误](#5xx-server-errors%e6%9c%8d%e5%8a%a1%e5%99%a8%e9%94%99%e8%af%af)\n- [总结](#%e6%80%bb%e7%bb%93)\n- [Reference](#reference)\n\n\n## 常见HTTP请求方式\n\n这些请求方式是case-sensitive的，但是一些请求工具或请求框架可能已经做了toUpperCase处理。\n\n- GET（HTTP1.0）。这个是最常见的请求方式了，只读资源而不产生副作用。\n- POST（HTTP1.0）。请求数据通常来自于表单。\n- OPTIONS（HTTP1.1）。请求返回服务器对特定资源支持哪些请求方式。\n- HEAD（HTTP1.0）。和Get类似之只读资源并不产生副作用。区别是响应无响应体，只想获取一些响应头中的元信息。\n- PUT（HTTP1.1）。指定URI，如果对应资源存在则修改（替代）；如果不存在则创建。不带验证机制。\n- DELETE（HTTP1.1）。删除指定资源。不带验证机制。\n- TRACE（HTTP1.1）。使用 SSL（Secure Sockets Layer，安全套接层）和 TLS（Transport Layer Security，传输层安全）协议把通信内容加密后经网络隧道传输。\n- CONNECT（HTTP1.1）。服务器会将通信路径返回给客户端。\n- PATCH。对资源进行部分修改，区别于PUT。不带验证机制。\n\n## 常见HTTP状态码\n\n- 1xx informational response，信息响应。接收的请求正在处理。\n- 2xx success，成功。请求正常处理完毕。\n- 3xx redirection，重定位。需要进行附加操作以完成请求。\n- 4xx client errors，客户端错误\n- 5xx server errors，服务器错误\n\n### 1xx informational response，信息响应\n\n### 2xx success，成功\n\n### 3xx redirection，重定位\n\n- 304 Not modified。请求方通过`If-Modified-Since`或者`If-None-Match`请求头知道请求的资源并未改变，服务器无需重传，客户端使用缓存的版本即可。\n\n### 4xx client errors，客户端错误\n\n- 400 Bad Request。客户端错误导致服务器无法处理，比如请求格式错误、数据太大等。\n- 401 Unauthorized。类似403。\n- 403 Forbidden。客户端请求时包含非法数据，服务器理解请求但是拒绝处理。可能是因为用户无权限，或者请求了一个禁止的行为（比如创建重复记录）。\n- 404 Not Found。资源未找到。\n- 405 Method Not Allowed。请求方法不允许。比如使用PUT方法访问只读资源，应该使用POST而使用GET。\n- 415 Unsupported Media Type。媒体文件格式不支持。比如客户端上传图片使用`images/svg+xml`，而服务器需要另外的图片格式。\n\n### 5xx server errors，服务器错误\n\n- 500 Internal Server Error。服务器内部错误，需要查看服务器报错日志。\n- 502 Bad Gateway。请求的服务器是作为一个网关或者代理运行的。上流服务器返回的响应是非法的。\n- 503 Service Unavailable ：服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。\n\n## 总结\n\n这部分内容只是简单地总结。一些状态码和方法并没有实际的用过，因此用于回查。\n\n\n## Reference\n\n- [List of HTTP status codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes)\n- [Hypertext Transfer Protocol](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol)\n- [CyC2018 HTTP](https://github.com/CyC2018/CS-Notes/blob/master/notes/HTTP.md)","source":"_posts/http-status-code.md","raw":"---\ntitle: 协议系列：HTTP常见请求方式和状态码总结\nmathjax: false\ncopyright: true\ncomment: true\ndate: 2019-11-20 15:37:45\ntags:\n- Protocol\n- HTTP\ncategories:\n- Protocol\n- HTTP\n\n---\n\n{% note primary %}\n404 not found。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 前言\n\n最近在看[同源策略和跨域问题](secure-same-origin-policy.html)时，看到CORS的解决方案是需要prefight，跨域时先向目标源发送一个OPTIONS请求，就发现这部分知识没有系统的了解过。今天就来总结一下常见的HTTP请求方式和HTTP状态码。\n\n- [前言](#%e5%89%8d%e8%a8%80)\n- [常见HTTP请求方式](#%e5%b8%b8%e8%a7%81http%e8%af%b7%e6%b1%82%e6%96%b9%e5%bc%8f)\n- [常见HTTP状态码](#%e5%b8%b8%e8%a7%81http%e7%8a%b6%e6%80%81%e7%a0%81)\n  - [1xx informational response，信息响应](#1xx-informational-response%e4%bf%a1%e6%81%af%e5%93%8d%e5%ba%94)\n  - [2xx success，成功](#2xx-success%e6%88%90%e5%8a%9f)\n  - [3xx redirection，重定位](#3xx-redirection%e9%87%8d%e5%ae%9a%e4%bd%8d)\n  - [4xx client errors，客户端错误](#4xx-client-errors%e5%ae%a2%e6%88%b7%e7%ab%af%e9%94%99%e8%af%af)\n  - [5xx server errors，服务器错误](#5xx-server-errors%e6%9c%8d%e5%8a%a1%e5%99%a8%e9%94%99%e8%af%af)\n- [总结](#%e6%80%bb%e7%bb%93)\n- [Reference](#reference)\n\n\n## 常见HTTP请求方式\n\n这些请求方式是case-sensitive的，但是一些请求工具或请求框架可能已经做了toUpperCase处理。\n\n- GET（HTTP1.0）。这个是最常见的请求方式了，只读资源而不产生副作用。\n- POST（HTTP1.0）。请求数据通常来自于表单。\n- OPTIONS（HTTP1.1）。请求返回服务器对特定资源支持哪些请求方式。\n- HEAD（HTTP1.0）。和Get类似之只读资源并不产生副作用。区别是响应无响应体，只想获取一些响应头中的元信息。\n- PUT（HTTP1.1）。指定URI，如果对应资源存在则修改（替代）；如果不存在则创建。不带验证机制。\n- DELETE（HTTP1.1）。删除指定资源。不带验证机制。\n- TRACE（HTTP1.1）。使用 SSL（Secure Sockets Layer，安全套接层）和 TLS（Transport Layer Security，传输层安全）协议把通信内容加密后经网络隧道传输。\n- CONNECT（HTTP1.1）。服务器会将通信路径返回给客户端。\n- PATCH。对资源进行部分修改，区别于PUT。不带验证机制。\n\n## 常见HTTP状态码\n\n- 1xx informational response，信息响应。接收的请求正在处理。\n- 2xx success，成功。请求正常处理完毕。\n- 3xx redirection，重定位。需要进行附加操作以完成请求。\n- 4xx client errors，客户端错误\n- 5xx server errors，服务器错误\n\n### 1xx informational response，信息响应\n\n### 2xx success，成功\n\n### 3xx redirection，重定位\n\n- 304 Not modified。请求方通过`If-Modified-Since`或者`If-None-Match`请求头知道请求的资源并未改变，服务器无需重传，客户端使用缓存的版本即可。\n\n### 4xx client errors，客户端错误\n\n- 400 Bad Request。客户端错误导致服务器无法处理，比如请求格式错误、数据太大等。\n- 401 Unauthorized。类似403。\n- 403 Forbidden。客户端请求时包含非法数据，服务器理解请求但是拒绝处理。可能是因为用户无权限，或者请求了一个禁止的行为（比如创建重复记录）。\n- 404 Not Found。资源未找到。\n- 405 Method Not Allowed。请求方法不允许。比如使用PUT方法访问只读资源，应该使用POST而使用GET。\n- 415 Unsupported Media Type。媒体文件格式不支持。比如客户端上传图片使用`images/svg+xml`，而服务器需要另外的图片格式。\n\n### 5xx server errors，服务器错误\n\n- 500 Internal Server Error。服务器内部错误，需要查看服务器报错日志。\n- 502 Bad Gateway。请求的服务器是作为一个网关或者代理运行的。上流服务器返回的响应是非法的。\n- 503 Service Unavailable ：服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。\n\n## 总结\n\n这部分内容只是简单地总结。一些状态码和方法并没有实际的用过，因此用于回查。\n\n\n## Reference\n\n- [List of HTTP status codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes)\n- [Hypertext Transfer Protocol](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol)\n- [CyC2018 HTTP](https://github.com/CyC2018/CS-Notes/blob/master/notes/HTTP.md)","slug":"http-status-code","published":1,"updated":"2022-01-06T04:09:12.462Z","_id":"cksq5v7mn002fn0pu6328f62r","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note primary\"><p>404 not found。</p>\n</div>\n\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近在看<a href=\"secure-same-origin-policy.html\">同源策略和跨域问题</a>时，看到CORS的解决方案是需要prefight，跨域时先向目标源发送一个OPTIONS请求，就发现这部分知识没有系统的了解过。今天就来总结一下常见的HTTP请求方式和HTTP状态码。</p>\n<ul>\n<li><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li><a href=\"#%E5%B8%B8%E8%A7%81http%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F\">常见HTTP请求方式</a></li>\n<li><a href=\"#%E5%B8%B8%E8%A7%81http%E7%8A%B6%E6%80%81%E7%A0%81\">常见HTTP状态码</a><ul>\n<li><a href=\"#1xx-informational-response%E4%BF%A1%E6%81%AF%E5%93%8D%E5%BA%94\">1xx informational response，信息响应</a></li>\n<li><a href=\"#2xx-success%E6%88%90%E5%8A%9F\">2xx success，成功</a></li>\n<li><a href=\"#3xx-redirection%E9%87%8D%E5%AE%9A%E4%BD%8D\">3xx redirection，重定位</a></li>\n<li><a href=\"#4xx-client-errors%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%94%99%E8%AF%AF\">4xx client errors，客户端错误</a></li>\n<li><a href=\"#5xx-server-errors%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%94%99%E8%AF%AF\">5xx server errors，服务器错误</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%80%BB%E7%BB%93\">总结</a></li>\n<li><a href=\"#reference\">Reference</a></li>\n</ul>\n<h2 id=\"常见HTTP请求方式\"><a href=\"#常见HTTP请求方式\" class=\"headerlink\" title=\"常见HTTP请求方式\"></a>常见HTTP请求方式</h2><p>这些请求方式是case-sensitive的，但是一些请求工具或请求框架可能已经做了toUpperCase处理。</p>\n<ul>\n<li>GET（HTTP1.0）。这个是最常见的请求方式了，只读资源而不产生副作用。</li>\n<li>POST（HTTP1.0）。请求数据通常来自于表单。</li>\n<li>OPTIONS（HTTP1.1）。请求返回服务器对特定资源支持哪些请求方式。</li>\n<li>HEAD（HTTP1.0）。和Get类似之只读资源并不产生副作用。区别是响应无响应体，只想获取一些响应头中的元信息。</li>\n<li>PUT（HTTP1.1）。指定URI，如果对应资源存在则修改（替代）；如果不存在则创建。不带验证机制。</li>\n<li>DELETE（HTTP1.1）。删除指定资源。不带验证机制。</li>\n<li>TRACE（HTTP1.1）。使用 SSL（Secure Sockets Layer，安全套接层）和 TLS（Transport Layer Security，传输层安全）协议把通信内容加密后经网络隧道传输。</li>\n<li>CONNECT（HTTP1.1）。服务器会将通信路径返回给客户端。</li>\n<li>PATCH。对资源进行部分修改，区别于PUT。不带验证机制。</li>\n</ul>\n<h2 id=\"常见HTTP状态码\"><a href=\"#常见HTTP状态码\" class=\"headerlink\" title=\"常见HTTP状态码\"></a>常见HTTP状态码</h2><ul>\n<li>1xx informational response，信息响应。接收的请求正在处理。</li>\n<li>2xx success，成功。请求正常处理完毕。</li>\n<li>3xx redirection，重定位。需要进行附加操作以完成请求。</li>\n<li>4xx client errors，客户端错误</li>\n<li>5xx server errors，服务器错误</li>\n</ul>\n<h3 id=\"1xx-informational-response，信息响应\"><a href=\"#1xx-informational-response，信息响应\" class=\"headerlink\" title=\"1xx informational response，信息响应\"></a>1xx informational response，信息响应</h3><h3 id=\"2xx-success，成功\"><a href=\"#2xx-success，成功\" class=\"headerlink\" title=\"2xx success，成功\"></a>2xx success，成功</h3><h3 id=\"3xx-redirection，重定位\"><a href=\"#3xx-redirection，重定位\" class=\"headerlink\" title=\"3xx redirection，重定位\"></a>3xx redirection，重定位</h3><ul>\n<li>304 Not modified。请求方通过<code>If-Modified-Since</code>或者<code>If-None-Match</code>请求头知道请求的资源并未改变，服务器无需重传，客户端使用缓存的版本即可。</li>\n</ul>\n<h3 id=\"4xx-client-errors，客户端错误\"><a href=\"#4xx-client-errors，客户端错误\" class=\"headerlink\" title=\"4xx client errors，客户端错误\"></a>4xx client errors，客户端错误</h3><ul>\n<li>400 Bad Request。客户端错误导致服务器无法处理，比如请求格式错误、数据太大等。</li>\n<li>401 Unauthorized。类似403。</li>\n<li>403 Forbidden。客户端请求时包含非法数据，服务器理解请求但是拒绝处理。可能是因为用户无权限，或者请求了一个禁止的行为（比如创建重复记录）。</li>\n<li>404 Not Found。资源未找到。</li>\n<li>405 Method Not Allowed。请求方法不允许。比如使用PUT方法访问只读资源，应该使用POST而使用GET。</li>\n<li>415 Unsupported Media Type。媒体文件格式不支持。比如客户端上传图片使用<code>images/svg+xml</code>，而服务器需要另外的图片格式。</li>\n</ul>\n<h3 id=\"5xx-server-errors，服务器错误\"><a href=\"#5xx-server-errors，服务器错误\" class=\"headerlink\" title=\"5xx server errors，服务器错误\"></a>5xx server errors，服务器错误</h3><ul>\n<li>500 Internal Server Error。服务器内部错误，需要查看服务器报错日志。</li>\n<li>502 Bad Gateway。请求的服务器是作为一个网关或者代理运行的。上流服务器返回的响应是非法的。</li>\n<li>503 Service Unavailable ：服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这部分内容只是简单地总结。一些状态码和方法并没有实际的用过，因此用于回查。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\">List of HTTP status codes</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol\">Hypertext Transfer Protocol</a></li>\n<li><a href=\"https://github.com/CyC2018/CS-Notes/blob/master/notes/HTTP.md\">CyC2018 HTTP</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note primary\"><p>404 not found。</p>\n</div>","more":"<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近在看<a href=\"secure-same-origin-policy.html\">同源策略和跨域问题</a>时，看到CORS的解决方案是需要prefight，跨域时先向目标源发送一个OPTIONS请求，就发现这部分知识没有系统的了解过。今天就来总结一下常见的HTTP请求方式和HTTP状态码。</p>\n<ul>\n<li><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li><a href=\"#%E5%B8%B8%E8%A7%81http%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F\">常见HTTP请求方式</a></li>\n<li><a href=\"#%E5%B8%B8%E8%A7%81http%E7%8A%B6%E6%80%81%E7%A0%81\">常见HTTP状态码</a><ul>\n<li><a href=\"#1xx-informational-response%E4%BF%A1%E6%81%AF%E5%93%8D%E5%BA%94\">1xx informational response，信息响应</a></li>\n<li><a href=\"#2xx-success%E6%88%90%E5%8A%9F\">2xx success，成功</a></li>\n<li><a href=\"#3xx-redirection%E9%87%8D%E5%AE%9A%E4%BD%8D\">3xx redirection，重定位</a></li>\n<li><a href=\"#4xx-client-errors%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%94%99%E8%AF%AF\">4xx client errors，客户端错误</a></li>\n<li><a href=\"#5xx-server-errors%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%94%99%E8%AF%AF\">5xx server errors，服务器错误</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%80%BB%E7%BB%93\">总结</a></li>\n<li><a href=\"#reference\">Reference</a></li>\n</ul>\n<h2 id=\"常见HTTP请求方式\"><a href=\"#常见HTTP请求方式\" class=\"headerlink\" title=\"常见HTTP请求方式\"></a>常见HTTP请求方式</h2><p>这些请求方式是case-sensitive的，但是一些请求工具或请求框架可能已经做了toUpperCase处理。</p>\n<ul>\n<li>GET（HTTP1.0）。这个是最常见的请求方式了，只读资源而不产生副作用。</li>\n<li>POST（HTTP1.0）。请求数据通常来自于表单。</li>\n<li>OPTIONS（HTTP1.1）。请求返回服务器对特定资源支持哪些请求方式。</li>\n<li>HEAD（HTTP1.0）。和Get类似之只读资源并不产生副作用。区别是响应无响应体，只想获取一些响应头中的元信息。</li>\n<li>PUT（HTTP1.1）。指定URI，如果对应资源存在则修改（替代）；如果不存在则创建。不带验证机制。</li>\n<li>DELETE（HTTP1.1）。删除指定资源。不带验证机制。</li>\n<li>TRACE（HTTP1.1）。使用 SSL（Secure Sockets Layer，安全套接层）和 TLS（Transport Layer Security，传输层安全）协议把通信内容加密后经网络隧道传输。</li>\n<li>CONNECT（HTTP1.1）。服务器会将通信路径返回给客户端。</li>\n<li>PATCH。对资源进行部分修改，区别于PUT。不带验证机制。</li>\n</ul>\n<h2 id=\"常见HTTP状态码\"><a href=\"#常见HTTP状态码\" class=\"headerlink\" title=\"常见HTTP状态码\"></a>常见HTTP状态码</h2><ul>\n<li>1xx informational response，信息响应。接收的请求正在处理。</li>\n<li>2xx success，成功。请求正常处理完毕。</li>\n<li>3xx redirection，重定位。需要进行附加操作以完成请求。</li>\n<li>4xx client errors，客户端错误</li>\n<li>5xx server errors，服务器错误</li>\n</ul>\n<h3 id=\"1xx-informational-response，信息响应\"><a href=\"#1xx-informational-response，信息响应\" class=\"headerlink\" title=\"1xx informational response，信息响应\"></a>1xx informational response，信息响应</h3><h3 id=\"2xx-success，成功\"><a href=\"#2xx-success，成功\" class=\"headerlink\" title=\"2xx success，成功\"></a>2xx success，成功</h3><h3 id=\"3xx-redirection，重定位\"><a href=\"#3xx-redirection，重定位\" class=\"headerlink\" title=\"3xx redirection，重定位\"></a>3xx redirection，重定位</h3><ul>\n<li>304 Not modified。请求方通过<code>If-Modified-Since</code>或者<code>If-None-Match</code>请求头知道请求的资源并未改变，服务器无需重传，客户端使用缓存的版本即可。</li>\n</ul>\n<h3 id=\"4xx-client-errors，客户端错误\"><a href=\"#4xx-client-errors，客户端错误\" class=\"headerlink\" title=\"4xx client errors，客户端错误\"></a>4xx client errors，客户端错误</h3><ul>\n<li>400 Bad Request。客户端错误导致服务器无法处理，比如请求格式错误、数据太大等。</li>\n<li>401 Unauthorized。类似403。</li>\n<li>403 Forbidden。客户端请求时包含非法数据，服务器理解请求但是拒绝处理。可能是因为用户无权限，或者请求了一个禁止的行为（比如创建重复记录）。</li>\n<li>404 Not Found。资源未找到。</li>\n<li>405 Method Not Allowed。请求方法不允许。比如使用PUT方法访问只读资源，应该使用POST而使用GET。</li>\n<li>415 Unsupported Media Type。媒体文件格式不支持。比如客户端上传图片使用<code>images/svg+xml</code>，而服务器需要另外的图片格式。</li>\n</ul>\n<h3 id=\"5xx-server-errors，服务器错误\"><a href=\"#5xx-server-errors，服务器错误\" class=\"headerlink\" title=\"5xx server errors，服务器错误\"></a>5xx server errors，服务器错误</h3><ul>\n<li>500 Internal Server Error。服务器内部错误，需要查看服务器报错日志。</li>\n<li>502 Bad Gateway。请求的服务器是作为一个网关或者代理运行的。上流服务器返回的响应是非法的。</li>\n<li>503 Service Unavailable ：服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这部分内容只是简单地总结。一些状态码和方法并没有实际的用过，因此用于回查。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\">List of HTTP status codes</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol\">Hypertext Transfer Protocol</a></li>\n<li><a href=\"https://github.com/CyC2018/CS-Notes/blob/master/notes/HTTP.md\">CyC2018 HTTP</a></li>\n</ul>"},{"title":"IEEE754实例——JS中的Number类型","mathjax":true,"copyright":true,"comment":true,"date":"2019-10-21T12:49:43.000Z","_content":"\n{% note primary %}\n用IEEE754标准具体看JS中的Number类型。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n\n\n本文参考了MDN的js primitive type中的[number type](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Primitive_values)，想自己思考可以直接看。\n\n\n首先JS使用的是64位IEEE754标准，根据标准，有1位符号位、11位指数和52位尾数。\n\n![ieee754](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1571672841313&di=e2e5d1348fca590fd1685521ca677dc6&imgtype=jpg&src=http%3A%2F%2Fimg0.imgtn.bdimg.com%2Fit%2Fu%3D1405953990%2C784895530%26fm%3D214%26gp%3D0.jpg)\n\n\nJS的Number type给定范围是($-(2^{53}-1),2^{53}-1$)，当然给定的是安全的整数范围。\n\n让我们来看看为什么是这个范围。\n\n根据IEEE754规定，对于规格化数，存储时省略了小数点前面的1，所以可以精确表示的范围是首位是1然后52个0，到首位是1然后52个1（此时指数值应该为52，暂不考虑偏移）；然后将指数值化为更小的指数，并且尾数越界部分置0，此时可假设尾数后移一位，这样可看做表示数的范围是从首位是0然后52个0，到首位是0然后52个1。\n\n因此表示的范围就是如此。\n\nJS中有两个常量`Number.MAX_SAFE_INTEGER`和`Number.MIN_SAFE_INTEGER`给出的正是能够安全表示的上下界。也有一个函数`Number.isSafeInteger()`用于判断某个数是否安全。对于这个界限之外的无法精确表示的只能粗略表示，**毕竟尾数不够了**。\n\n对于在安全表示界限数之外的，JS给出了解决方案，即使用BigInt类型，可以使用构造函数创建实例或者加后缀n。\n比如\n```javascript\nlet big=2n**70n;//1180591620717411303424n\n```\n\n+/-Infinity和NaN表示也如同IEEE754标准一样，指数部分全1（考虑偏移）：尾数部分全0则Infinity，正负看符号；尾数部分非全0则NaN。\n\n另外，JS也有两个常数表示能够表示的最大和最小数：`Number.MAX_VALUE`和`Number.MIN_VALUE`。其中最大数是比Infinity小点的数，它的二进制表示是指数除了最低一位是0其他全1，尾数全1；最小数则是最接近0的数，即指数全0（考虑偏移），尾数最低位为1其他全0，计算结果如图，偏移在上次[浮点数博客](float-think.html)中讲过，即$\\lfloor\\frac{2^{EMax}-1}{2}\\rfloor$，比如11位指数，中间数就是$\\lfloor\\frac{2^{11}-1}{2}\\rfloor=1023$。。\n\n![](ieee754-float-instance-js/754-js.png)\n\n\n","source":"_posts/ieee754-float-instance-js.md","raw":"---\ntitle: IEEE754实例——JS中的Number类型\nmathjax: true\ncopyright: true\ncomment: true\ndate: 2019-10-21 20:49:43\ntags:\n- JavaScript\ncategories:\n- Front-End Development\n- JavaScript\n\n---\n\n{% note primary %}\n用IEEE754标准具体看JS中的Number类型。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n\n\n本文参考了MDN的js primitive type中的[number type](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Primitive_values)，想自己思考可以直接看。\n\n\n首先JS使用的是64位IEEE754标准，根据标准，有1位符号位、11位指数和52位尾数。\n\n![ieee754](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1571672841313&di=e2e5d1348fca590fd1685521ca677dc6&imgtype=jpg&src=http%3A%2F%2Fimg0.imgtn.bdimg.com%2Fit%2Fu%3D1405953990%2C784895530%26fm%3D214%26gp%3D0.jpg)\n\n\nJS的Number type给定范围是($-(2^{53}-1),2^{53}-1$)，当然给定的是安全的整数范围。\n\n让我们来看看为什么是这个范围。\n\n根据IEEE754规定，对于规格化数，存储时省略了小数点前面的1，所以可以精确表示的范围是首位是1然后52个0，到首位是1然后52个1（此时指数值应该为52，暂不考虑偏移）；然后将指数值化为更小的指数，并且尾数越界部分置0，此时可假设尾数后移一位，这样可看做表示数的范围是从首位是0然后52个0，到首位是0然后52个1。\n\n因此表示的范围就是如此。\n\nJS中有两个常量`Number.MAX_SAFE_INTEGER`和`Number.MIN_SAFE_INTEGER`给出的正是能够安全表示的上下界。也有一个函数`Number.isSafeInteger()`用于判断某个数是否安全。对于这个界限之外的无法精确表示的只能粗略表示，**毕竟尾数不够了**。\n\n对于在安全表示界限数之外的，JS给出了解决方案，即使用BigInt类型，可以使用构造函数创建实例或者加后缀n。\n比如\n```javascript\nlet big=2n**70n;//1180591620717411303424n\n```\n\n+/-Infinity和NaN表示也如同IEEE754标准一样，指数部分全1（考虑偏移）：尾数部分全0则Infinity，正负看符号；尾数部分非全0则NaN。\n\n另外，JS也有两个常数表示能够表示的最大和最小数：`Number.MAX_VALUE`和`Number.MIN_VALUE`。其中最大数是比Infinity小点的数，它的二进制表示是指数除了最低一位是0其他全1，尾数全1；最小数则是最接近0的数，即指数全0（考虑偏移），尾数最低位为1其他全0，计算结果如图，偏移在上次[浮点数博客](float-think.html)中讲过，即$\\lfloor\\frac{2^{EMax}-1}{2}\\rfloor$，比如11位指数，中间数就是$\\lfloor\\frac{2^{11}-1}{2}\\rfloor=1023$。。\n\n![](ieee754-float-instance-js/754-js.png)\n\n\n","slug":"ieee754-float-instance-js","published":1,"updated":"2022-01-06T04:09:12.462Z","_id":"cksq5v7mo002kn0pu12ow9zl5","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note primary\"><p>用IEEE754标准具体看JS中的Number类型。</p>\n</div>\n\n<span id=\"more\"></span>\n\n<hr>\n<p>本文参考了MDN的js primitive type中的<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Primitive_values\">number type</a>，想自己思考可以直接看。</p>\n<p>首先JS使用的是64位IEEE754标准，根据标准，有1位符号位、11位指数和52位尾数。</p>\n<p><img data-src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1571672841313&di=e2e5d1348fca590fd1685521ca677dc6&imgtype=jpg&src=http://img0.imgtn.bdimg.com/it/u=1405953990,784895530&fm=214&gp=0.jpg\" alt=\"ieee754\"></p>\n<p>JS的Number type给定范围是($-(2^{53}-1),2^{53}-1$)，当然给定的是安全的整数范围。</p>\n<p>让我们来看看为什么是这个范围。</p>\n<p>根据IEEE754规定，对于规格化数，存储时省略了小数点前面的1，所以可以精确表示的范围是首位是1然后52个0，到首位是1然后52个1（此时指数值应该为52，暂不考虑偏移）；然后将指数值化为更小的指数，并且尾数越界部分置0，此时可假设尾数后移一位，这样可看做表示数的范围是从首位是0然后52个0，到首位是0然后52个1。</p>\n<p>因此表示的范围就是如此。</p>\n<p>JS中有两个常量<code>Number.MAX_SAFE_INTEGER</code>和<code>Number.MIN_SAFE_INTEGER</code>给出的正是能够安全表示的上下界。也有一个函数<code>Number.isSafeInteger()</code>用于判断某个数是否安全。对于这个界限之外的无法精确表示的只能粗略表示，<strong>毕竟尾数不够了</strong>。</p>\n<p>对于在安全表示界限数之外的，JS给出了解决方案，即使用BigInt类型，可以使用构造函数创建实例或者加后缀n。<br>比如</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> big=<span class=\"number\">2n</span>**<span class=\"number\">70n</span>;<span class=\"comment\">//1180591620717411303424n</span></span><br></pre></td></tr></table></figure>\n\n<p>+/-Infinity和NaN表示也如同IEEE754标准一样，指数部分全1（考虑偏移）：尾数部分全0则Infinity，正负看符号；尾数部分非全0则NaN。</p>\n<p>另外，JS也有两个常数表示能够表示的最大和最小数：<code>Number.MAX_VALUE</code>和<code>Number.MIN_VALUE</code>。其中最大数是比Infinity小点的数，它的二进制表示是指数除了最低一位是0其他全1，尾数全1；最小数则是最接近0的数，即指数全0（考虑偏移），尾数最低位为1其他全0，计算结果如图，偏移在上次<a href=\"float-think.html\">浮点数博客</a>中讲过，即$\\lfloor\\frac{2^{EMax}-1}{2}\\rfloor$，比如11位指数，中间数就是$\\lfloor\\frac{2^{11}-1}{2}\\rfloor=1023$。。</p>\n<p><img data-src=\"ieee754-float-instance-js/754-js.png\"></p>\n","site":{"data":{}},"excerpt":"<div class=\"note primary\"><p>用IEEE754标准具体看JS中的Number类型。</p>\n</div>","more":"<hr>\n<p>本文参考了MDN的js primitive type中的<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Primitive_values\">number type</a>，想自己思考可以直接看。</p>\n<p>首先JS使用的是64位IEEE754标准，根据标准，有1位符号位、11位指数和52位尾数。</p>\n<p><img data-src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1571672841313&di=e2e5d1348fca590fd1685521ca677dc6&imgtype=jpg&src=http://img0.imgtn.bdimg.com/it/u=1405953990,784895530&fm=214&gp=0.jpg\" alt=\"ieee754\"></p>\n<p>JS的Number type给定范围是($-(2^{53}-1),2^{53}-1$)，当然给定的是安全的整数范围。</p>\n<p>让我们来看看为什么是这个范围。</p>\n<p>根据IEEE754规定，对于规格化数，存储时省略了小数点前面的1，所以可以精确表示的范围是首位是1然后52个0，到首位是1然后52个1（此时指数值应该为52，暂不考虑偏移）；然后将指数值化为更小的指数，并且尾数越界部分置0，此时可假设尾数后移一位，这样可看做表示数的范围是从首位是0然后52个0，到首位是0然后52个1。</p>\n<p>因此表示的范围就是如此。</p>\n<p>JS中有两个常量<code>Number.MAX_SAFE_INTEGER</code>和<code>Number.MIN_SAFE_INTEGER</code>给出的正是能够安全表示的上下界。也有一个函数<code>Number.isSafeInteger()</code>用于判断某个数是否安全。对于这个界限之外的无法精确表示的只能粗略表示，<strong>毕竟尾数不够了</strong>。</p>\n<p>对于在安全表示界限数之外的，JS给出了解决方案，即使用BigInt类型，可以使用构造函数创建实例或者加后缀n。<br>比如</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> big=<span class=\"number\">2n</span>**<span class=\"number\">70n</span>;<span class=\"comment\">//1180591620717411303424n</span></span><br></pre></td></tr></table></figure>\n\n<p>+/-Infinity和NaN表示也如同IEEE754标准一样，指数部分全1（考虑偏移）：尾数部分全0则Infinity，正负看符号；尾数部分非全0则NaN。</p>\n<p>另外，JS也有两个常数表示能够表示的最大和最小数：<code>Number.MAX_VALUE</code>和<code>Number.MIN_VALUE</code>。其中最大数是比Infinity小点的数，它的二进制表示是指数除了最低一位是0其他全1，尾数全1；最小数则是最接近0的数，即指数全0（考虑偏移），尾数最低位为1其他全0，计算结果如图，偏移在上次<a href=\"float-think.html\">浮点数博客</a>中讲过，即$\\lfloor\\frac{2^{EMax}-1}{2}\\rfloor$，比如11位指数，中间数就是$\\lfloor\\frac{2^{11}-1}{2}\\rfloor=1023$。。</p>\n<p><img data-src=\"ieee754-float-instance-js/754-js.png\"></p>"},{"title":"JavaScript必知33个概念系列：函数调用栈（执行上下文）","mathjax":false,"copyright":true,"comment":true,"date":"2019-11-14T07:21:48.000Z","_content":"\n{% note primary %}\nJavaScript的执行上下文。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 前言\n\n因为看过CSAPP这本书，关于C语言的函数栈已经了解的比较透彻。实际上JavaScript的函数调用栈也是类似的。\n\n![](stackframe.png)\n\n再来总结一下：\n- 一个函数被调用时，就会构造这个函数调用所需要的栈帧\n- 栈帧内包含这个函数所使用的局部变量和函数调用结束后返回的地址。\n- 函数调用结束后，该函数的栈帧会被弹出，即一些局部变量会失效。\n\n\n## JavaScript的函数调用栈（执行上下文）\n\n一些关键点：\n\n1. JavaScript引擎是一个单线程解释器（是指针对单个JavaScript引擎线程来说，比如单个浏览器窗口），还包含堆和唯一的函数栈。\n2. JavaScript代码从上向下执行（当然是同步代码），同一时刻只有一个函数在执行。\n3. JavaScript异步代码（asynchronized code）的回调函数最终也会被时间循环加入到这个函数栈中来执行。\n\n## 总结\n\n关键的就是这么多，如果你想深入了解函数栈的机制，不仅仅是JavaScript，那推荐你去做CSAPP的`Bomb Lab`和`Attack Lab`。关键字搜“cmu cs213 csapp lab”。\n\n我已经完成了这两个实验，[链接](http://blog.scarboroughcoral.top/tags/CSAPP-Lab/)","source":"_posts/js-concept-1.md","raw":"---\ntitle: JavaScript必知33个概念系列：函数调用栈（执行上下文）\nmathjax: false\ncopyright: true\ncomment: true\ndate: 2019-11-14 15:21:48\ntags:\n- JavaScript\n- 33 JS Concept\ncategories:\n- Front-End Development\n- JavaScript\n\n---\n\n{% note primary %}\nJavaScript的执行上下文。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 前言\n\n因为看过CSAPP这本书，关于C语言的函数栈已经了解的比较透彻。实际上JavaScript的函数调用栈也是类似的。\n\n![](stackframe.png)\n\n再来总结一下：\n- 一个函数被调用时，就会构造这个函数调用所需要的栈帧\n- 栈帧内包含这个函数所使用的局部变量和函数调用结束后返回的地址。\n- 函数调用结束后，该函数的栈帧会被弹出，即一些局部变量会失效。\n\n\n## JavaScript的函数调用栈（执行上下文）\n\n一些关键点：\n\n1. JavaScript引擎是一个单线程解释器（是指针对单个JavaScript引擎线程来说，比如单个浏览器窗口），还包含堆和唯一的函数栈。\n2. JavaScript代码从上向下执行（当然是同步代码），同一时刻只有一个函数在执行。\n3. JavaScript异步代码（asynchronized code）的回调函数最终也会被时间循环加入到这个函数栈中来执行。\n\n## 总结\n\n关键的就是这么多，如果你想深入了解函数栈的机制，不仅仅是JavaScript，那推荐你去做CSAPP的`Bomb Lab`和`Attack Lab`。关键字搜“cmu cs213 csapp lab”。\n\n我已经完成了这两个实验，[链接](http://blog.scarboroughcoral.top/tags/CSAPP-Lab/)","slug":"js-concept-1","published":1,"updated":"2022-01-06T04:09:12.463Z","_id":"cksq5v7mp002nn0pu1kz289vo","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note primary\"><p>JavaScript的执行上下文。</p>\n</div>\n\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>因为看过CSAPP这本书，关于C语言的函数栈已经了解的比较透彻。实际上JavaScript的函数调用栈也是类似的。</p>\n<p><img data-src=\"stackframe.png\"></p>\n<p>再来总结一下：</p>\n<ul>\n<li>一个函数被调用时，就会构造这个函数调用所需要的栈帧</li>\n<li>栈帧内包含这个函数所使用的局部变量和函数调用结束后返回的地址。</li>\n<li>函数调用结束后，该函数的栈帧会被弹出，即一些局部变量会失效。</li>\n</ul>\n<h2 id=\"JavaScript的函数调用栈（执行上下文）\"><a href=\"#JavaScript的函数调用栈（执行上下文）\" class=\"headerlink\" title=\"JavaScript的函数调用栈（执行上下文）\"></a>JavaScript的函数调用栈（执行上下文）</h2><p>一些关键点：</p>\n<ol>\n<li>JavaScript引擎是一个单线程解释器（是指针对单个JavaScript引擎线程来说，比如单个浏览器窗口），还包含堆和唯一的函数栈。</li>\n<li>JavaScript代码从上向下执行（当然是同步代码），同一时刻只有一个函数在执行。</li>\n<li>JavaScript异步代码（asynchronized code）的回调函数最终也会被时间循环加入到这个函数栈中来执行。</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>关键的就是这么多，如果你想深入了解函数栈的机制，不仅仅是JavaScript，那推荐你去做CSAPP的<code>Bomb Lab</code>和<code>Attack Lab</code>。关键字搜“cmu cs213 csapp lab”。</p>\n<p>我已经完成了这两个实验，<a href=\"http://blog.scarboroughcoral.top/tags/CSAPP-Lab/\">链接</a></p>\n","site":{"data":{}},"excerpt":"<div class=\"note primary\"><p>JavaScript的执行上下文。</p>\n</div>","more":"<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>因为看过CSAPP这本书，关于C语言的函数栈已经了解的比较透彻。实际上JavaScript的函数调用栈也是类似的。</p>\n<p><img data-src=\"stackframe.png\"></p>\n<p>再来总结一下：</p>\n<ul>\n<li>一个函数被调用时，就会构造这个函数调用所需要的栈帧</li>\n<li>栈帧内包含这个函数所使用的局部变量和函数调用结束后返回的地址。</li>\n<li>函数调用结束后，该函数的栈帧会被弹出，即一些局部变量会失效。</li>\n</ul>\n<h2 id=\"JavaScript的函数调用栈（执行上下文）\"><a href=\"#JavaScript的函数调用栈（执行上下文）\" class=\"headerlink\" title=\"JavaScript的函数调用栈（执行上下文）\"></a>JavaScript的函数调用栈（执行上下文）</h2><p>一些关键点：</p>\n<ol>\n<li>JavaScript引擎是一个单线程解释器（是指针对单个JavaScript引擎线程来说，比如单个浏览器窗口），还包含堆和唯一的函数栈。</li>\n<li>JavaScript代码从上向下执行（当然是同步代码），同一时刻只有一个函数在执行。</li>\n<li>JavaScript异步代码（asynchronized code）的回调函数最终也会被时间循环加入到这个函数栈中来执行。</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>关键的就是这么多，如果你想深入了解函数栈的机制，不仅仅是JavaScript，那推荐你去做CSAPP的<code>Bomb Lab</code>和<code>Attack Lab</code>。关键字搜“cmu cs213 csapp lab”。</p>\n<p>我已经完成了这两个实验，<a href=\"http://blog.scarboroughcoral.top/tags/CSAPP-Lab/\">链接</a></p>"},{"title":"JavaScript必知33个概念系列：this、call、bind、apply","mathjax":false,"copyright":true,"comment":true,"date":"2019-11-16T07:45:00.000Z","_content":"\n{% note primary %}\nthis、call、bind、apply\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 前言\n\nJavaScript的灵活性也导致了规则的多样性。今天来总结一下JavaScript中的`this`关键字，及其相关话题`bind,call,apply`\n\n## JavaScript中的this\n\n以前学其他语言比如说Java或者CPP时，那时理解的`this`就是当前对象，当调用构造函数创建对象时，`this`会绑定到创建的对象上。关于JavaScript中的`this`并没有过多的关注。\n\n### JavaScript中this的5个绑定规则\n> 函数在哪里调用，`this`的引用就来自于这里。\n\n- 隐式绑定\n- 显示绑定\n- new 绑定\n- 词法绑定\n- window 绑定\n\n接下来我们一一解释。\n\n#### 隐式绑定\n\n如下代码，大多数`this`绑定的情况都是如此，你只需要判断调用函数的对象就知道this指的谁，**即“.”左侧**。下面例子中`this`分别指的是`user`和`user.mother`。\n```javascript\nconst user = {\n  name: 'Tyler',\n  age: 27,\n  greet() {\n    alert(`Hello, my name is ${this.name}`);\n  },\n  mother: {\n    name: 'Stacey',\n    greet() {\n      alert(`Hello, my name is ${this.name}`);\n    }\n  }\n}\nuser.greet();\nuser.mother.greet();\n```\n\n#### 显示绑定\n\n显示绑定就用到`bind,call,apply`方法了。这三个方法来自于`Function.prototype`。所以说每个函数都会有这三个方法。其中`call,apply`来自于ES3，`bind`来自于ES5。\n\n##### call\n\n> “call” is a method on every function that allows you to invoke the function specifying in what context the function will be invoked.\n\n如下代码，当调用`greet`函数的时候并不知道这个`this`引用的哪个对象，无法通过`user.greet(x,x,x)`来调用，因为`user`并没有这个函数对象。那么我们只能单独的调用这个函数，我们可以通过`call`的方式来指定调用当前函数的对象，第一个参数就是`this`引用的对象，剩余的参数是函数调用所需要的参数。\n\n```javascript\nfunction greet (l1, l2, l3) {\n  alert(\n    `Hello, my name is ${this.name} and I know ${l1}, ${l2}, and ${l3}`\n  )\n}\n\nconst user = {\n  name: 'Tyler',\n  age: 27,\n}\n\nconst languages = ['JavaScript', 'Ruby', 'Python']\n\ngreet.call(user, languages[0], languages[1], languages[2])\n```\n\n##### apply\n\n`apply`和`call`类似，只不过`apply`解决了`call`一个问题，就像上面那个例子，当调用的函数需要接受很多参数的时候，需要一个一个将参数传入，如果我们有10个参数就需要单独输入10个参数。而`apply`只需要将参数当做数组传入，不必一个一个传入。\n\n```javascript\nconst languages = ['JavaScript', 'Ruby', 'Python']\n\n// greet.call(user, languages[0], languages[1], languages[2])\ngreet.apply(user, languages)\n```\n\n##### bind\n\n`bind`和`call`也是类似的，只不过他不会立即调用函数，而是返回一个新函数，这个新函数绑定了一系列参数，其中第一个参数就是`this`的引用对象，其余参数是函数调用时所需要的参数，当你调用新函数时，仅需要将未绑定的参数（如果已全部绑定就无需传参）传入就行了。\n\n还是上面的例子\n\n```javascript\nfunction greet (l1, l2, l3) {\n  alert(\n    `Hello, my name is ${this.name} and I know ${l1}, ${l2}, and ${l3}`\n  )\n}\n\nconst user = {\n  name: 'Tyler',\n  age: 27,\n}\n\nconst languages = ['JavaScript', 'Ruby', 'Python']\n\nconst newFn = greet.bind(user, languages[0], languages[1], languages[2])\nnewFn() // alerts \"Hello, my name is Tyler and I know JavaScript, Ruby, and Python\"\n```\n\n#### new 绑定\n> 当使用`new`创建对象时，`JavaScript Interpretor`就会创建一个对象，这个对象叫`this`，也就是说`this`的引用对象就是新创建的对象。\n\n如下代码\n```javascript\nfunction User (name, age) {\n  /*\n    Under the hood, JavaScript creates a new object called `this`\n    which delegates to the User's prototype on failed lookups. If a\n    function is called with the new keyword, then it's this new object\n    that interpretor created that the this keyword is referencing.\n  */\n\n  this.name = name\n  this.age = age\n}\n\nconst me = new User('Tyler', 27)\n```\n\n#### 词法绑定\n\n所谓的词法绑定就是“你主观认为`this`的引用对象就是所绑定的对象”\n\n\n例子如下，我们使用`reduce`函数，传入一个回调函数，这个回调函数中使用的`this`会引用哪个对象？当我们使用`function`定义时会创建`context`，`this`是引用的这个`context`，就如同下面的代码，这是有问题的。\n\n```javascript\nconst user = {\n  name: 'Tyler',\n  age: 27,\n  languages: ['JavaScript', 'Ruby', 'Python'],\n  greet() {\n    const hello = `Hello, my name is ${this.name} and I know`\n\n    const langs = this.languages.reduce(function (str, lang, i) {\n      if (i === this.languages.length - 1) {\n        return `${str} and ${lang}.`\n      }\n\n      return `${str} ${lang},`\n    }, \"\")\n\n    alert(hello + langs)\n  }\n}\nuser.greet()//Uncaught TypeError: Cannot read property 'length' of undefined. \n```\n\n**然后，怎么解决？**\n答案是使用箭头函数，箭头函数不会为`this`创建`context`，因此会引用外部的`context`，这是一个闭包。下面的代码就能正常工作了。\n\n```javascript\nconst user = {\n  name: 'Tyler',\n  age: 27,\n  languages: ['JavaScript', 'Ruby', 'Python'],\n  greet() {\n    const hello = `Hello, my name is ${this.name} and I know`\n\n    const langs = this.languages.reduce((str, lang, i) => {\n      if (i === this.languages.length - 1) {\n        return `${str} and ${lang}.`\n      }\n\n      return `${str} ${lang},`\n    }, \"\")\n\n    alert(hello + langs)\n  }\n}\n```\n\n\n#### window 绑定\n\n当不满足前几种绑定时，那`this`就会绑定window（用于catch-all）。\n\n如下代码，此情况`this`的引用对象就是window，因为window对象下没有age这个属性，所以undefined。如果定义了这个属性那就会输出这个属性。\n\n```javascript\nfunction sayAge () {\n  console.log(`My age is ${this.age}`)\n}\n\nconst user = {\n  name: 'Tyler',\n  age: 27\n}\nsayAge() // My age is undefined\n\nwindow.age=27\nsayAge() // My age is 27\n```\n\n当然，如果你不想产生这种效果，不想让`this`绑定到window对象，那么你可以使用`use strict`声明来避免，window会认为`this`是undefined，如同下面的代码：\n\n```javascript\n'use strict'\n\nwindow.age = 27\n\nfunction sayAge () {\n  console.log(`My age is ${this.age}`)\n}\n\nsayAge() // TypeError: Cannot read property 'age' of undefined\n```\n\n\n#### 判断套路\n\n1. 检查函数要在哪里被调用\n2. `this`是否在箭头函数内部，如果是，那么`this`有可能词法绑定，引用父亲作用域的`this`（产生了闭包\n3. 函数是否使用了`new`创建对象，如果有，那么`this`引用这个创建的对象。\n4. 函数是否使用了`call,apply,bind`，如果有，那么`this`引用显示绑定的对象。\n5. 函数左侧有无“.”，如果有，那么`this`就引用这个对象。\n6. 你是否使用了`use strict`，如果有，那么`this`是`undefined`\n7. `this`引用了`window`对象\n\n## 相关话题\n\n### 箭头函数的this\n箭头函数没有在函数调用创建函数执行上下文的时候创建`this`对象。详情请看[JavaScript 必知 33 个概念系列：执行上下文（栈帧）、作用域、闭包、this 之间的关系](js-concept-7-scope-2.html)\n\n## Reference\n\n- [Understanding the \"this\" keyword, call, apply, and bind in JavaScript](https://tylermcginnis.com/this-keyword-call-apply-bind-javascript/)","source":"_posts/js-concept-15-this-call-bind-apply.md","raw":"---\ntitle: JavaScript必知33个概念系列：this、call、bind、apply\nmathjax: false\ncopyright: true\ncomment: true\ndate: 2019-11-16 15:45:00\ntags:\n- JavaScript\n- 33 JS Concept\ncategories:\n- Front-End Development\n- JavaScript\n\n---\n\n{% note primary %}\nthis、call、bind、apply\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 前言\n\nJavaScript的灵活性也导致了规则的多样性。今天来总结一下JavaScript中的`this`关键字，及其相关话题`bind,call,apply`\n\n## JavaScript中的this\n\n以前学其他语言比如说Java或者CPP时，那时理解的`this`就是当前对象，当调用构造函数创建对象时，`this`会绑定到创建的对象上。关于JavaScript中的`this`并没有过多的关注。\n\n### JavaScript中this的5个绑定规则\n> 函数在哪里调用，`this`的引用就来自于这里。\n\n- 隐式绑定\n- 显示绑定\n- new 绑定\n- 词法绑定\n- window 绑定\n\n接下来我们一一解释。\n\n#### 隐式绑定\n\n如下代码，大多数`this`绑定的情况都是如此，你只需要判断调用函数的对象就知道this指的谁，**即“.”左侧**。下面例子中`this`分别指的是`user`和`user.mother`。\n```javascript\nconst user = {\n  name: 'Tyler',\n  age: 27,\n  greet() {\n    alert(`Hello, my name is ${this.name}`);\n  },\n  mother: {\n    name: 'Stacey',\n    greet() {\n      alert(`Hello, my name is ${this.name}`);\n    }\n  }\n}\nuser.greet();\nuser.mother.greet();\n```\n\n#### 显示绑定\n\n显示绑定就用到`bind,call,apply`方法了。这三个方法来自于`Function.prototype`。所以说每个函数都会有这三个方法。其中`call,apply`来自于ES3，`bind`来自于ES5。\n\n##### call\n\n> “call” is a method on every function that allows you to invoke the function specifying in what context the function will be invoked.\n\n如下代码，当调用`greet`函数的时候并不知道这个`this`引用的哪个对象，无法通过`user.greet(x,x,x)`来调用，因为`user`并没有这个函数对象。那么我们只能单独的调用这个函数，我们可以通过`call`的方式来指定调用当前函数的对象，第一个参数就是`this`引用的对象，剩余的参数是函数调用所需要的参数。\n\n```javascript\nfunction greet (l1, l2, l3) {\n  alert(\n    `Hello, my name is ${this.name} and I know ${l1}, ${l2}, and ${l3}`\n  )\n}\n\nconst user = {\n  name: 'Tyler',\n  age: 27,\n}\n\nconst languages = ['JavaScript', 'Ruby', 'Python']\n\ngreet.call(user, languages[0], languages[1], languages[2])\n```\n\n##### apply\n\n`apply`和`call`类似，只不过`apply`解决了`call`一个问题，就像上面那个例子，当调用的函数需要接受很多参数的时候，需要一个一个将参数传入，如果我们有10个参数就需要单独输入10个参数。而`apply`只需要将参数当做数组传入，不必一个一个传入。\n\n```javascript\nconst languages = ['JavaScript', 'Ruby', 'Python']\n\n// greet.call(user, languages[0], languages[1], languages[2])\ngreet.apply(user, languages)\n```\n\n##### bind\n\n`bind`和`call`也是类似的，只不过他不会立即调用函数，而是返回一个新函数，这个新函数绑定了一系列参数，其中第一个参数就是`this`的引用对象，其余参数是函数调用时所需要的参数，当你调用新函数时，仅需要将未绑定的参数（如果已全部绑定就无需传参）传入就行了。\n\n还是上面的例子\n\n```javascript\nfunction greet (l1, l2, l3) {\n  alert(\n    `Hello, my name is ${this.name} and I know ${l1}, ${l2}, and ${l3}`\n  )\n}\n\nconst user = {\n  name: 'Tyler',\n  age: 27,\n}\n\nconst languages = ['JavaScript', 'Ruby', 'Python']\n\nconst newFn = greet.bind(user, languages[0], languages[1], languages[2])\nnewFn() // alerts \"Hello, my name is Tyler and I know JavaScript, Ruby, and Python\"\n```\n\n#### new 绑定\n> 当使用`new`创建对象时，`JavaScript Interpretor`就会创建一个对象，这个对象叫`this`，也就是说`this`的引用对象就是新创建的对象。\n\n如下代码\n```javascript\nfunction User (name, age) {\n  /*\n    Under the hood, JavaScript creates a new object called `this`\n    which delegates to the User's prototype on failed lookups. If a\n    function is called with the new keyword, then it's this new object\n    that interpretor created that the this keyword is referencing.\n  */\n\n  this.name = name\n  this.age = age\n}\n\nconst me = new User('Tyler', 27)\n```\n\n#### 词法绑定\n\n所谓的词法绑定就是“你主观认为`this`的引用对象就是所绑定的对象”\n\n\n例子如下，我们使用`reduce`函数，传入一个回调函数，这个回调函数中使用的`this`会引用哪个对象？当我们使用`function`定义时会创建`context`，`this`是引用的这个`context`，就如同下面的代码，这是有问题的。\n\n```javascript\nconst user = {\n  name: 'Tyler',\n  age: 27,\n  languages: ['JavaScript', 'Ruby', 'Python'],\n  greet() {\n    const hello = `Hello, my name is ${this.name} and I know`\n\n    const langs = this.languages.reduce(function (str, lang, i) {\n      if (i === this.languages.length - 1) {\n        return `${str} and ${lang}.`\n      }\n\n      return `${str} ${lang},`\n    }, \"\")\n\n    alert(hello + langs)\n  }\n}\nuser.greet()//Uncaught TypeError: Cannot read property 'length' of undefined. \n```\n\n**然后，怎么解决？**\n答案是使用箭头函数，箭头函数不会为`this`创建`context`，因此会引用外部的`context`，这是一个闭包。下面的代码就能正常工作了。\n\n```javascript\nconst user = {\n  name: 'Tyler',\n  age: 27,\n  languages: ['JavaScript', 'Ruby', 'Python'],\n  greet() {\n    const hello = `Hello, my name is ${this.name} and I know`\n\n    const langs = this.languages.reduce((str, lang, i) => {\n      if (i === this.languages.length - 1) {\n        return `${str} and ${lang}.`\n      }\n\n      return `${str} ${lang},`\n    }, \"\")\n\n    alert(hello + langs)\n  }\n}\n```\n\n\n#### window 绑定\n\n当不满足前几种绑定时，那`this`就会绑定window（用于catch-all）。\n\n如下代码，此情况`this`的引用对象就是window，因为window对象下没有age这个属性，所以undefined。如果定义了这个属性那就会输出这个属性。\n\n```javascript\nfunction sayAge () {\n  console.log(`My age is ${this.age}`)\n}\n\nconst user = {\n  name: 'Tyler',\n  age: 27\n}\nsayAge() // My age is undefined\n\nwindow.age=27\nsayAge() // My age is 27\n```\n\n当然，如果你不想产生这种效果，不想让`this`绑定到window对象，那么你可以使用`use strict`声明来避免，window会认为`this`是undefined，如同下面的代码：\n\n```javascript\n'use strict'\n\nwindow.age = 27\n\nfunction sayAge () {\n  console.log(`My age is ${this.age}`)\n}\n\nsayAge() // TypeError: Cannot read property 'age' of undefined\n```\n\n\n#### 判断套路\n\n1. 检查函数要在哪里被调用\n2. `this`是否在箭头函数内部，如果是，那么`this`有可能词法绑定，引用父亲作用域的`this`（产生了闭包\n3. 函数是否使用了`new`创建对象，如果有，那么`this`引用这个创建的对象。\n4. 函数是否使用了`call,apply,bind`，如果有，那么`this`引用显示绑定的对象。\n5. 函数左侧有无“.”，如果有，那么`this`就引用这个对象。\n6. 你是否使用了`use strict`，如果有，那么`this`是`undefined`\n7. `this`引用了`window`对象\n\n## 相关话题\n\n### 箭头函数的this\n箭头函数没有在函数调用创建函数执行上下文的时候创建`this`对象。详情请看[JavaScript 必知 33 个概念系列：执行上下文（栈帧）、作用域、闭包、this 之间的关系](js-concept-7-scope-2.html)\n\n## Reference\n\n- [Understanding the \"this\" keyword, call, apply, and bind in JavaScript](https://tylermcginnis.com/this-keyword-call-apply-bind-javascript/)","slug":"js-concept-15-this-call-bind-apply","published":1,"updated":"2022-01-06T04:09:12.464Z","_id":"cksq5v7mp002rn0pubk440tf0","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note primary\"><p>this、call、bind、apply</p>\n</div>\n\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>JavaScript的灵活性也导致了规则的多样性。今天来总结一下JavaScript中的<code>this</code>关键字，及其相关话题<code>bind,call,apply</code></p>\n<h2 id=\"JavaScript中的this\"><a href=\"#JavaScript中的this\" class=\"headerlink\" title=\"JavaScript中的this\"></a>JavaScript中的this</h2><p>以前学其他语言比如说Java或者CPP时，那时理解的<code>this</code>就是当前对象，当调用构造函数创建对象时，<code>this</code>会绑定到创建的对象上。关于JavaScript中的<code>this</code>并没有过多的关注。</p>\n<h3 id=\"JavaScript中this的5个绑定规则\"><a href=\"#JavaScript中this的5个绑定规则\" class=\"headerlink\" title=\"JavaScript中this的5个绑定规则\"></a>JavaScript中this的5个绑定规则</h3><blockquote>\n<p>函数在哪里调用，<code>this</code>的引用就来自于这里。</p>\n</blockquote>\n<ul>\n<li>隐式绑定</li>\n<li>显示绑定</li>\n<li>new 绑定</li>\n<li>词法绑定</li>\n<li>window 绑定</li>\n</ul>\n<p>接下来我们一一解释。</p>\n<h4 id=\"隐式绑定\"><a href=\"#隐式绑定\" class=\"headerlink\" title=\"隐式绑定\"></a>隐式绑定</h4><p>如下代码，大多数<code>this</code>绑定的情况都是如此，你只需要判断调用函数的对象就知道this指的谁，<strong>即“.”左侧</strong>。下面例子中<code>this</code>分别指的是<code>user</code>和<code>user.mother</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> user = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Tyler&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">27</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">greet</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">`Hello, my name is <span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.name&#125;</span>`</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">mother</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Stacey&#x27;</span>,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">greet</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">      alert(<span class=\"string\">`Hello, my name is <span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.name&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">user.greet();</span><br><span class=\"line\">user.mother.greet();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示绑定\"><a href=\"#显示绑定\" class=\"headerlink\" title=\"显示绑定\"></a>显示绑定</h4><p>显示绑定就用到<code>bind,call,apply</code>方法了。这三个方法来自于<code>Function.prototype</code>。所以说每个函数都会有这三个方法。其中<code>call,apply</code>来自于ES3，<code>bind</code>来自于ES5。</p>\n<h5 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call\"></a>call</h5><blockquote>\n<p>“call” is a method on every function that allows you to invoke the function specifying in what context the function will be invoked.</p>\n</blockquote>\n<p>如下代码，当调用<code>greet</code>函数的时候并不知道这个<code>this</code>引用的哪个对象，无法通过<code>user.greet(x,x,x)</code>来调用，因为<code>user</code>并没有这个函数对象。那么我们只能单独的调用这个函数，我们可以通过<code>call</code>的方式来指定调用当前函数的对象，第一个参数就是<code>this</code>引用的对象，剩余的参数是函数调用所需要的参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">greet</span> (<span class=\"params\">l1, l2, l3</span>) </span>&#123;</span><br><span class=\"line\">  alert(</span><br><span class=\"line\">    <span class=\"string\">`Hello, my name is <span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.name&#125;</span> and I know <span class=\"subst\">$&#123;l1&#125;</span>, <span class=\"subst\">$&#123;l2&#125;</span>, and <span class=\"subst\">$&#123;l3&#125;</span>`</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> user = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Tyler&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">27</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> languages = [<span class=\"string\">&#x27;JavaScript&#x27;</span>, <span class=\"string\">&#x27;Ruby&#x27;</span>, <span class=\"string\">&#x27;Python&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">greet.call(user, languages[<span class=\"number\">0</span>], languages[<span class=\"number\">1</span>], languages[<span class=\"number\">2</span>])</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply\"></a>apply</h5><p><code>apply</code>和<code>call</code>类似，只不过<code>apply</code>解决了<code>call</code>一个问题，就像上面那个例子，当调用的函数需要接受很多参数的时候，需要一个一个将参数传入，如果我们有10个参数就需要单独输入10个参数。而<code>apply</code>只需要将参数当做数组传入，不必一个一个传入。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> languages = [<span class=\"string\">&#x27;JavaScript&#x27;</span>, <span class=\"string\">&#x27;Ruby&#x27;</span>, <span class=\"string\">&#x27;Python&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// greet.call(user, languages[0], languages[1], languages[2])</span></span><br><span class=\"line\">greet.apply(user, languages)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind\"></a>bind</h5><p><code>bind</code>和<code>call</code>也是类似的，只不过他不会立即调用函数，而是返回一个新函数，这个新函数绑定了一系列参数，其中第一个参数就是<code>this</code>的引用对象，其余参数是函数调用时所需要的参数，当你调用新函数时，仅需要将未绑定的参数（如果已全部绑定就无需传参）传入就行了。</p>\n<p>还是上面的例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">greet</span> (<span class=\"params\">l1, l2, l3</span>) </span>&#123;</span><br><span class=\"line\">  alert(</span><br><span class=\"line\">    <span class=\"string\">`Hello, my name is <span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.name&#125;</span> and I know <span class=\"subst\">$&#123;l1&#125;</span>, <span class=\"subst\">$&#123;l2&#125;</span>, and <span class=\"subst\">$&#123;l3&#125;</span>`</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> user = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Tyler&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">27</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> languages = [<span class=\"string\">&#x27;JavaScript&#x27;</span>, <span class=\"string\">&#x27;Ruby&#x27;</span>, <span class=\"string\">&#x27;Python&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> newFn = greet.bind(user, languages[<span class=\"number\">0</span>], languages[<span class=\"number\">1</span>], languages[<span class=\"number\">2</span>])</span><br><span class=\"line\">newFn() <span class=\"comment\">// alerts &quot;Hello, my name is Tyler and I know JavaScript, Ruby, and Python&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"new-绑定\"><a href=\"#new-绑定\" class=\"headerlink\" title=\"new 绑定\"></a>new 绑定</h4><blockquote>\n<p>当使用<code>new</code>创建对象时，<code>JavaScript Interpretor</code>就会创建一个对象，这个对象叫<code>this</code>，也就是说<code>this</code>的引用对象就是新创建的对象。</p>\n</blockquote>\n<p>如下代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">User</span> (<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    Under the hood, JavaScript creates a new object called `this`</span></span><br><span class=\"line\"><span class=\"comment\">    which delegates to the User&#x27;s prototype on failed lookups. If a</span></span><br><span class=\"line\"><span class=\"comment\">    function is called with the new keyword, then it&#x27;s this new object</span></span><br><span class=\"line\"><span class=\"comment\">    that interpretor created that the this keyword is referencing.</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> me = <span class=\"keyword\">new</span> User(<span class=\"string\">&#x27;Tyler&#x27;</span>, <span class=\"number\">27</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"词法绑定\"><a href=\"#词法绑定\" class=\"headerlink\" title=\"词法绑定\"></a>词法绑定</h4><p>所谓的词法绑定就是“你主观认为<code>this</code>的引用对象就是所绑定的对象”</p>\n<p>例子如下，我们使用<code>reduce</code>函数，传入一个回调函数，这个回调函数中使用的<code>this</code>会引用哪个对象？当我们使用<code>function</code>定义时会创建<code>context</code>，<code>this</code>是引用的这个<code>context</code>，就如同下面的代码，这是有问题的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> user = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Tyler&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">27</span>,</span><br><span class=\"line\">  <span class=\"attr\">languages</span>: [<span class=\"string\">&#x27;JavaScript&#x27;</span>, <span class=\"string\">&#x27;Ruby&#x27;</span>, <span class=\"string\">&#x27;Python&#x27;</span>],</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">greet</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> hello = <span class=\"string\">`Hello, my name is <span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.name&#125;</span> and I know`</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> langs = <span class=\"built_in\">this</span>.languages.reduce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">str, lang, i</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i === <span class=\"built_in\">this</span>.languages.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;str&#125;</span> and <span class=\"subst\">$&#123;lang&#125;</span>.`</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;str&#125;</span> <span class=\"subst\">$&#123;lang&#125;</span>,`</span></span><br><span class=\"line\">    &#125;, <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    alert(hello + langs)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">user.greet()<span class=\"comment\">//Uncaught TypeError: Cannot read property &#x27;length&#x27; of undefined. </span></span><br></pre></td></tr></table></figure>\n\n<p><strong>然后，怎么解决？</strong><br>答案是使用箭头函数，箭头函数不会为<code>this</code>创建<code>context</code>，因此会引用外部的<code>context</code>，这是一个闭包。下面的代码就能正常工作了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> user = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Tyler&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">27</span>,</span><br><span class=\"line\">  <span class=\"attr\">languages</span>: [<span class=\"string\">&#x27;JavaScript&#x27;</span>, <span class=\"string\">&#x27;Ruby&#x27;</span>, <span class=\"string\">&#x27;Python&#x27;</span>],</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">greet</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> hello = <span class=\"string\">`Hello, my name is <span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.name&#125;</span> and I know`</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> langs = <span class=\"built_in\">this</span>.languages.reduce(<span class=\"function\">(<span class=\"params\">str, lang, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i === <span class=\"built_in\">this</span>.languages.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;str&#125;</span> and <span class=\"subst\">$&#123;lang&#125;</span>.`</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;str&#125;</span> <span class=\"subst\">$&#123;lang&#125;</span>,`</span></span><br><span class=\"line\">    &#125;, <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    alert(hello + langs)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"window-绑定\"><a href=\"#window-绑定\" class=\"headerlink\" title=\"window 绑定\"></a>window 绑定</h4><p>当不满足前几种绑定时，那<code>this</code>就会绑定window（用于catch-all）。</p>\n<p>如下代码，此情况<code>this</code>的引用对象就是window，因为window对象下没有age这个属性，所以undefined。如果定义了这个属性那就会输出这个属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayAge</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`My age is <span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.age&#125;</span>`</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> user = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Tyler&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">27</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sayAge() <span class=\"comment\">// My age is undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.age=<span class=\"number\">27</span></span><br><span class=\"line\">sayAge() <span class=\"comment\">// My age is 27</span></span><br></pre></td></tr></table></figure>\n\n<p>当然，如果你不想产生这种效果，不想让<code>this</code>绑定到window对象，那么你可以使用<code>use strict</code>声明来避免，window会认为<code>this</code>是undefined，如同下面的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.age = <span class=\"number\">27</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayAge</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`My age is <span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.age&#125;</span>`</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sayAge() <span class=\"comment\">// TypeError: Cannot read property &#x27;age&#x27; of undefined</span></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"判断套路\"><a href=\"#判断套路\" class=\"headerlink\" title=\"判断套路\"></a>判断套路</h4><ol>\n<li>检查函数要在哪里被调用</li>\n<li><code>this</code>是否在箭头函数内部，如果是，那么<code>this</code>有可能词法绑定，引用父亲作用域的<code>this</code>（产生了闭包</li>\n<li>函数是否使用了<code>new</code>创建对象，如果有，那么<code>this</code>引用这个创建的对象。</li>\n<li>函数是否使用了<code>call,apply,bind</code>，如果有，那么<code>this</code>引用显示绑定的对象。</li>\n<li>函数左侧有无“.”，如果有，那么<code>this</code>就引用这个对象。</li>\n<li>你是否使用了<code>use strict</code>，如果有，那么<code>this</code>是<code>undefined</code></li>\n<li><code>this</code>引用了<code>window</code>对象</li>\n</ol>\n<h2 id=\"相关话题\"><a href=\"#相关话题\" class=\"headerlink\" title=\"相关话题\"></a>相关话题</h2><h3 id=\"箭头函数的this\"><a href=\"#箭头函数的this\" class=\"headerlink\" title=\"箭头函数的this\"></a>箭头函数的this</h3><p>箭头函数没有在函数调用创建函数执行上下文的时候创建<code>this</code>对象。详情请看<a href=\"js-concept-7-scope-2.html\">JavaScript 必知 33 个概念系列：执行上下文（栈帧）、作用域、闭包、this 之间的关系</a></p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://tylermcginnis.com/this-keyword-call-apply-bind-javascript/\">Understanding the “this” keyword, call, apply, and bind in JavaScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note primary\"><p>this、call、bind、apply</p>\n</div>","more":"<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>JavaScript的灵活性也导致了规则的多样性。今天来总结一下JavaScript中的<code>this</code>关键字，及其相关话题<code>bind,call,apply</code></p>\n<h2 id=\"JavaScript中的this\"><a href=\"#JavaScript中的this\" class=\"headerlink\" title=\"JavaScript中的this\"></a>JavaScript中的this</h2><p>以前学其他语言比如说Java或者CPP时，那时理解的<code>this</code>就是当前对象，当调用构造函数创建对象时，<code>this</code>会绑定到创建的对象上。关于JavaScript中的<code>this</code>并没有过多的关注。</p>\n<h3 id=\"JavaScript中this的5个绑定规则\"><a href=\"#JavaScript中this的5个绑定规则\" class=\"headerlink\" title=\"JavaScript中this的5个绑定规则\"></a>JavaScript中this的5个绑定规则</h3><blockquote>\n<p>函数在哪里调用，<code>this</code>的引用就来自于这里。</p>\n</blockquote>\n<ul>\n<li>隐式绑定</li>\n<li>显示绑定</li>\n<li>new 绑定</li>\n<li>词法绑定</li>\n<li>window 绑定</li>\n</ul>\n<p>接下来我们一一解释。</p>\n<h4 id=\"隐式绑定\"><a href=\"#隐式绑定\" class=\"headerlink\" title=\"隐式绑定\"></a>隐式绑定</h4><p>如下代码，大多数<code>this</code>绑定的情况都是如此，你只需要判断调用函数的对象就知道this指的谁，<strong>即“.”左侧</strong>。下面例子中<code>this</code>分别指的是<code>user</code>和<code>user.mother</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> user = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Tyler&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">27</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">greet</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">`Hello, my name is <span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.name&#125;</span>`</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">mother</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Stacey&#x27;</span>,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">greet</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">      alert(<span class=\"string\">`Hello, my name is <span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.name&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">user.greet();</span><br><span class=\"line\">user.mother.greet();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示绑定\"><a href=\"#显示绑定\" class=\"headerlink\" title=\"显示绑定\"></a>显示绑定</h4><p>显示绑定就用到<code>bind,call,apply</code>方法了。这三个方法来自于<code>Function.prototype</code>。所以说每个函数都会有这三个方法。其中<code>call,apply</code>来自于ES3，<code>bind</code>来自于ES5。</p>\n<h5 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call\"></a>call</h5><blockquote>\n<p>“call” is a method on every function that allows you to invoke the function specifying in what context the function will be invoked.</p>\n</blockquote>\n<p>如下代码，当调用<code>greet</code>函数的时候并不知道这个<code>this</code>引用的哪个对象，无法通过<code>user.greet(x,x,x)</code>来调用，因为<code>user</code>并没有这个函数对象。那么我们只能单独的调用这个函数，我们可以通过<code>call</code>的方式来指定调用当前函数的对象，第一个参数就是<code>this</code>引用的对象，剩余的参数是函数调用所需要的参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">greet</span> (<span class=\"params\">l1, l2, l3</span>) </span>&#123;</span><br><span class=\"line\">  alert(</span><br><span class=\"line\">    <span class=\"string\">`Hello, my name is <span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.name&#125;</span> and I know <span class=\"subst\">$&#123;l1&#125;</span>, <span class=\"subst\">$&#123;l2&#125;</span>, and <span class=\"subst\">$&#123;l3&#125;</span>`</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> user = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Tyler&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">27</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> languages = [<span class=\"string\">&#x27;JavaScript&#x27;</span>, <span class=\"string\">&#x27;Ruby&#x27;</span>, <span class=\"string\">&#x27;Python&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">greet.call(user, languages[<span class=\"number\">0</span>], languages[<span class=\"number\">1</span>], languages[<span class=\"number\">2</span>])</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply\"></a>apply</h5><p><code>apply</code>和<code>call</code>类似，只不过<code>apply</code>解决了<code>call</code>一个问题，就像上面那个例子，当调用的函数需要接受很多参数的时候，需要一个一个将参数传入，如果我们有10个参数就需要单独输入10个参数。而<code>apply</code>只需要将参数当做数组传入，不必一个一个传入。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> languages = [<span class=\"string\">&#x27;JavaScript&#x27;</span>, <span class=\"string\">&#x27;Ruby&#x27;</span>, <span class=\"string\">&#x27;Python&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// greet.call(user, languages[0], languages[1], languages[2])</span></span><br><span class=\"line\">greet.apply(user, languages)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind\"></a>bind</h5><p><code>bind</code>和<code>call</code>也是类似的，只不过他不会立即调用函数，而是返回一个新函数，这个新函数绑定了一系列参数，其中第一个参数就是<code>this</code>的引用对象，其余参数是函数调用时所需要的参数，当你调用新函数时，仅需要将未绑定的参数（如果已全部绑定就无需传参）传入就行了。</p>\n<p>还是上面的例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">greet</span> (<span class=\"params\">l1, l2, l3</span>) </span>&#123;</span><br><span class=\"line\">  alert(</span><br><span class=\"line\">    <span class=\"string\">`Hello, my name is <span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.name&#125;</span> and I know <span class=\"subst\">$&#123;l1&#125;</span>, <span class=\"subst\">$&#123;l2&#125;</span>, and <span class=\"subst\">$&#123;l3&#125;</span>`</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> user = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Tyler&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">27</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> languages = [<span class=\"string\">&#x27;JavaScript&#x27;</span>, <span class=\"string\">&#x27;Ruby&#x27;</span>, <span class=\"string\">&#x27;Python&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> newFn = greet.bind(user, languages[<span class=\"number\">0</span>], languages[<span class=\"number\">1</span>], languages[<span class=\"number\">2</span>])</span><br><span class=\"line\">newFn() <span class=\"comment\">// alerts &quot;Hello, my name is Tyler and I know JavaScript, Ruby, and Python&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"new-绑定\"><a href=\"#new-绑定\" class=\"headerlink\" title=\"new 绑定\"></a>new 绑定</h4><blockquote>\n<p>当使用<code>new</code>创建对象时，<code>JavaScript Interpretor</code>就会创建一个对象，这个对象叫<code>this</code>，也就是说<code>this</code>的引用对象就是新创建的对象。</p>\n</blockquote>\n<p>如下代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">User</span> (<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    Under the hood, JavaScript creates a new object called `this`</span></span><br><span class=\"line\"><span class=\"comment\">    which delegates to the User&#x27;s prototype on failed lookups. If a</span></span><br><span class=\"line\"><span class=\"comment\">    function is called with the new keyword, then it&#x27;s this new object</span></span><br><span class=\"line\"><span class=\"comment\">    that interpretor created that the this keyword is referencing.</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> me = <span class=\"keyword\">new</span> User(<span class=\"string\">&#x27;Tyler&#x27;</span>, <span class=\"number\">27</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"词法绑定\"><a href=\"#词法绑定\" class=\"headerlink\" title=\"词法绑定\"></a>词法绑定</h4><p>所谓的词法绑定就是“你主观认为<code>this</code>的引用对象就是所绑定的对象”</p>\n<p>例子如下，我们使用<code>reduce</code>函数，传入一个回调函数，这个回调函数中使用的<code>this</code>会引用哪个对象？当我们使用<code>function</code>定义时会创建<code>context</code>，<code>this</code>是引用的这个<code>context</code>，就如同下面的代码，这是有问题的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> user = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Tyler&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">27</span>,</span><br><span class=\"line\">  <span class=\"attr\">languages</span>: [<span class=\"string\">&#x27;JavaScript&#x27;</span>, <span class=\"string\">&#x27;Ruby&#x27;</span>, <span class=\"string\">&#x27;Python&#x27;</span>],</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">greet</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> hello = <span class=\"string\">`Hello, my name is <span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.name&#125;</span> and I know`</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> langs = <span class=\"built_in\">this</span>.languages.reduce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">str, lang, i</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i === <span class=\"built_in\">this</span>.languages.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;str&#125;</span> and <span class=\"subst\">$&#123;lang&#125;</span>.`</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;str&#125;</span> <span class=\"subst\">$&#123;lang&#125;</span>,`</span></span><br><span class=\"line\">    &#125;, <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    alert(hello + langs)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">user.greet()<span class=\"comment\">//Uncaught TypeError: Cannot read property &#x27;length&#x27; of undefined. </span></span><br></pre></td></tr></table></figure>\n\n<p><strong>然后，怎么解决？</strong><br>答案是使用箭头函数，箭头函数不会为<code>this</code>创建<code>context</code>，因此会引用外部的<code>context</code>，这是一个闭包。下面的代码就能正常工作了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> user = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Tyler&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">27</span>,</span><br><span class=\"line\">  <span class=\"attr\">languages</span>: [<span class=\"string\">&#x27;JavaScript&#x27;</span>, <span class=\"string\">&#x27;Ruby&#x27;</span>, <span class=\"string\">&#x27;Python&#x27;</span>],</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">greet</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> hello = <span class=\"string\">`Hello, my name is <span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.name&#125;</span> and I know`</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> langs = <span class=\"built_in\">this</span>.languages.reduce(<span class=\"function\">(<span class=\"params\">str, lang, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i === <span class=\"built_in\">this</span>.languages.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;str&#125;</span> and <span class=\"subst\">$&#123;lang&#125;</span>.`</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;str&#125;</span> <span class=\"subst\">$&#123;lang&#125;</span>,`</span></span><br><span class=\"line\">    &#125;, <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    alert(hello + langs)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"window-绑定\"><a href=\"#window-绑定\" class=\"headerlink\" title=\"window 绑定\"></a>window 绑定</h4><p>当不满足前几种绑定时，那<code>this</code>就会绑定window（用于catch-all）。</p>\n<p>如下代码，此情况<code>this</code>的引用对象就是window，因为window对象下没有age这个属性，所以undefined。如果定义了这个属性那就会输出这个属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayAge</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`My age is <span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.age&#125;</span>`</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> user = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Tyler&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">27</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sayAge() <span class=\"comment\">// My age is undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.age=<span class=\"number\">27</span></span><br><span class=\"line\">sayAge() <span class=\"comment\">// My age is 27</span></span><br></pre></td></tr></table></figure>\n\n<p>当然，如果你不想产生这种效果，不想让<code>this</code>绑定到window对象，那么你可以使用<code>use strict</code>声明来避免，window会认为<code>this</code>是undefined，如同下面的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.age = <span class=\"number\">27</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayAge</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`My age is <span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.age&#125;</span>`</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sayAge() <span class=\"comment\">// TypeError: Cannot read property &#x27;age&#x27; of undefined</span></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"判断套路\"><a href=\"#判断套路\" class=\"headerlink\" title=\"判断套路\"></a>判断套路</h4><ol>\n<li>检查函数要在哪里被调用</li>\n<li><code>this</code>是否在箭头函数内部，如果是，那么<code>this</code>有可能词法绑定，引用父亲作用域的<code>this</code>（产生了闭包</li>\n<li>函数是否使用了<code>new</code>创建对象，如果有，那么<code>this</code>引用这个创建的对象。</li>\n<li>函数是否使用了<code>call,apply,bind</code>，如果有，那么<code>this</code>引用显示绑定的对象。</li>\n<li>函数左侧有无“.”，如果有，那么<code>this</code>就引用这个对象。</li>\n<li>你是否使用了<code>use strict</code>，如果有，那么<code>this</code>是<code>undefined</code></li>\n<li><code>this</code>引用了<code>window</code>对象</li>\n</ol>\n<h2 id=\"相关话题\"><a href=\"#相关话题\" class=\"headerlink\" title=\"相关话题\"></a>相关话题</h2><h3 id=\"箭头函数的this\"><a href=\"#箭头函数的this\" class=\"headerlink\" title=\"箭头函数的this\"></a>箭头函数的this</h3><p>箭头函数没有在函数调用创建函数执行上下文的时候创建<code>this</code>对象。详情请看<a href=\"js-concept-7-scope-2.html\">JavaScript 必知 33 个概念系列：执行上下文（栈帧）、作用域、闭包、this 之间的关系</a></p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://tylermcginnis.com/this-keyword-call-apply-bind-javascript/\">Understanding the “this” keyword, call, apply, and bind in JavaScript</a></li>\n</ul>"},{"title":"JavaScript必知33个概念系列：原型继承和原型链","mathjax":false,"copyright":true,"comment":true,"date":"2019-11-26T11:37:34.000Z","_content":"\n{% note primary %}\nprototype inheritance、prototype chain\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 前言\n\nJS中的继承是通过原型来实现的，这一部分内容看过很多次，但是一直没有总结，今天就来总结一下这一部分内容\n\n\n\n\n## 4个问题\n\n首先来看这四个判断，我们的内容会由这四个判断展开。\n\n```javascript\nObject instanceof Function//true\nObject instanceof Object//true\nFunction instanceof Object//true\nFunction instanceof Function//true\n```\n\n## 必须明确的几个关键点\n\n- 每个对象都可以访问一个`__proto__`属性，指向创建当前对象的构造函数的`prototype`对象。\n- 函数也是对象，可以称之为`function object`，即函数对象。\n- 每个函数都有一个`prototype`属性，指向原型对象。\n- 每个函数的`prototype`对象里都有一个`constructor`属性指向函数本身。\n- 原型链的尽头是`Object.prototype`，他没有`__proto__`属性，实际上有这个属性，但是为`null`\n\n\n## 一些例子\n\n### 例子1\n\n```javascript\nlet obj=new Object();\n//or\nlet o={};\n\nobj.__proto__===Object.prototype//true\n```\n\n因为`obj`是一个对象，所以它有一个`__proto__`属性，并且它由`Object`构造函数创建，`Object`函数有一个`prototype`属性，因此`obj.__proto__`和`Object.prototype`指向同一个对象。不妨自己动手打印一下，这两个对象是一样的。\n\n\n### 例子2\n\n```javascript\nObject.prototype.constructor === Object//true\n```\n\n因为每个函数的`prototype`属性都有一个`constructor`属性指向函数本身，因此`Object.prototype.constructor`指向`Object`函数。\n\n\n### 例子3\n\n```javascript\nObject.__proto__ === Function.prototype//true\n```\n\n因为函数也是对象（`function object`），因此它有一个`__proto__`属性，那这个属性指向哪呢？函数对象是由哪个构造函数创建的？很容易猜到，就是`Function`对象。因此`Object.__proto__`指向`Function.prototype`。\n\n\n### 例子4\n\n```javascript\nFunction.prototype === Function.__proto__//true\n```\n还是如此，函数也是对象。`Function`函数有一个`__proto__`属性，那它指向哪呢？因为`Function`也是一个函数，创建函数的很容易想到是`Function`，可能有点奇怪，不过就是如此。\n\n### 例子5\n\n```javascript\nFunction.prototype.constructor === Function//true\n```\n\n每个函数的原型对象都会有一个`constructor`属性指向函数本身，因此`Function.prototype.constructor`就是指向`Function`函数。\n\n### 例子6\n\n```javascript\nFunction.prototype.__proto__ == Object.prototype//true\n```\n\n某个函数的原型对象是一个对象，那么他的`__proto__`属性指向谁呢？因为`Object`函数用于创建对象，因此`Function.prototype.__proto__`就指向`Object.prototype`。\n\n\n\n## instanceof怎么判断的以及4个问题的答案\n\n就如下代码，`instanceof`的判断条件是，如果在`b.prototype`在`a`的原型链中就返回`true`，如果没有则`false`。\n\n```javascript\na instanceof b\n```\n\n因此一开始的4个问题的答案就很容易解答了。\n\n### 问题1\n\n```javascript\nObject instanceof Function//true\n```\n因为`Object.__proto__`指向`Function.prototype`，即`Function.prototype`在`Object`的原型链上。\n\n\n### 问题2\n\n```javascript\nObject instanceof Object//true\n```\n\n因为`Object.__proto__.__proto__`指向`Object.prototype`，即`Object.prototype`在`Object`的原型链上。\n\n\n### 问题3\n\n```javascript\nFunction instanceof Function//true\n```\n\n因为`Function.__proto__`指向`Function.prototype`，即`Function.prototype`在`Function`的原型链上。\n\n### 问题4\n\n```javascript\nFunction instanceof Object//true\n```\n\n因为`Function.__proto__.__proto__`指向`Object.prototype`，即`Object.prototype`在`Function`的原型链上。\n\n\n\n## 如何实现原型继承\n\n总共分3步（这没有实现静态方法的继承）：\n\n1. `super.call(this)`\n2. `child.prototype=Object.create(super.prototype)`\n3. `child.prototype.constructor=child`\n\n### 例子\n\n```javascript\nfunction Animal(name){\n    this.name=name;\n}\n\nfunction Cat(name,color){\n    Animal.call(this,name);//#1，构造父类属性\n    this.color=color;\n}\nCat.prototype=Object.create(Animal.prototype);//#2，实现原型链继承\nCat.prototype.constructor=Cat;//#3，设置构造函数\n```\n\n### 静态的继承\n\n在ES6的`class-extends`方式中，你可以指定静态`static`的方法和属性，如下：\n\n```javascript\nclass Animal{\n    constructor(){\n\n    }\n    static staticMethod(){\n        console.log(\"static method invoked!\");\n    }\n}\n\nclass Dog extends Animal{\n    constructor(){\n        super();\n    }\n}\nDog.staticMethod();//static method invoked!\n```\n\n因为`Dog`函数本身没有这个方法，那么肯定在它的原型链上，问题是Dog的原型根据ES5的写法应该`Dog.__proto__===Function.prototype`为`true`，然而这个例子中`Dog.__proto__===Animal`为`true`，这说明上面ES5的继承方法缺少了静态继承，**补全以上代码的话应该有4步**：\n\n1. `super.call(this)`\n2. `child.prototype=Object.create(super.prototype)`\n3. `child.prototype.constructor=child`\n4. `child.__proto__=Animal`\n```javascript\nfunction Animal(name){\n    this.name=name;\n}\n\nfunction Cat(name,color){\n    Animal.call(this,name);//#1，构造父类属性\n    this.color=color;\n}\nCat.prototype=Object.create(Animal.prototype);//#2，实现原型链继承\nCat.prototype.constructor=Cat;//#3，设置构造函数\nCat.__proto__=Animal//#4，实现静态继承\n```\n\n## 头条面经的几个问题\n\n在看头条面经时看到的问题，来一一分析一下。\n\n```javascript\n\nObject.prototype.a='Object'\nFunction.prototype.a = 'Function'\nfunction Person(){}\nvar child = new Person()\n \nconsole.log(Person.a)\nconsole.log(child.a)\nconsole.log(child.__proto__)\nconsole.log(child.__proto__.__proto__)\nconsole.log(child.__proto__.__proto__.constructor)\nconsole.log(child.__proto__.__proto__.constructor.constructor)\nconsole.log(child.__proto__.__proto__.constructor.constructor.constructor)\n```\n\n### 打印1\n\n```javascript\nconsole.log(Person.a)//Function\n```\n\n首先`Person`是一个函数对象，它本身没有`a`这个属性，因此需要沿着原型链向上找。函数是由`Function`创建的，因此`Person.__proto__`指向`Function.prototype`，而`Function.prototype`有属性`a`，值为“Function”因此结果为“Function”。\n\n### 打印2\n\n```javascript\nconsole.log(child.a)//Object\n```\n\n首先`child`对象本身没有这个属性，因此需要沿着原型链向上找。`child`由`Person`创建，因此`child.__proto__`指向`Person`的原型，`Person.prototype`没有这个属性，因此继续向上找，`Person.prototype`是由`Object`创建的，因此`Person.prototype.__proto__`指向`Object`的原型对象，而`Object.prototype.a`是“Object”，因此结果是“Object”\n\n\n### 打印3\n\n```javascript\nconsole.log(child.__proto__)//Person.prototype\n```\n\n`child`对象由`Person`创建，因此`child.__proto__`指向`Person.prototype`，打印的就是`Person.prototype`，不出意外的话里面有一个`constructor`属性指向`Person`，还有一个`__proto__`属性指向`Object.prototype`。\n\n### 打印4\n\n```javascript\nconsole.log(child.__proto__.__proto__)//Object.prototype\n```\n\n参考**打印3**，`child.__proto__`指向`Person.prototype`，因此就等价于打印`Person.prototype.__proto__`，而`Person.prototype`是由`Object`创建的，因此`Person.prototype.__proto__`指向`Object.prototype`因此打印的就是`Object.prototype`里面的内容。\n\n\n### 打印5\n\n```javascript\nconsole.log(child.__proto__.__proto__.constructor)//Object\n```\n\n参考**打印4**，直到`child.__proto__.proto__`指向`Object.prototype`，那它的`constructor`属性就指向`Object`函数本身。\n\n\n### 打印6\n\n```javascript\nconsole.log(child.__proto__.__proto__.constructor.constructor)//Function\n```\n\n参考**打印5**，知道`child.__proto__.__proto__.constructor`指向的是`Object`，那么`Object.constructor`指向的谁呢？首先`Object`本身没有`constructor`属性，那么就沿着原型链向上找，而`Object`是一个函数对象，即由`Function`创建，因此`Object.__proto__`指向`Function.prototype`，而`Function.prototype.constructor`是`Function`本身，因此结果就是“Function”。\n\n\n\n### 打印7\n\n```javascript\nconsole.log(child.__proto__.__proto__.constructor.constructor.constructor)//Function\n```\n\n参考**打印6**，因为`child.__proto__.__proto__.constructor.constructor`指向`Function`，因此等价于`Function.constructor`，而`Function`函数对象本身没有这个属性，于是沿着原型链向上找，`Function.__proto__`指向`Function.prototype`，而`Function.prototype.constructor`是`Function`本身，因此结果也是“Function”\n\n## 总结\n\n\n- 每个对象都可以访问一个`__proto__`属性，指向创建当前对象的构造函数的`prototype`对象。\n- 函数也是对象，可以称之为`function object`，即函数对象。\n- 每个函数都有一个`prototype`属性，指向原型对象。\n- 每个函数的`prototype`对象里都有一个`constructor`属性指向函数本身。\n- 原型链的尽头是`Object.prototype`，他没有`__proto__`属性，实际上有这个属性，但是为`null`\n\n## Reference\n\n- [Prototype in Javascript](https://www.codementor.io/sandeepranjan2007/prototype-in-javascipt-knbve0lqo)\n- [Prototypes in JavaScript](https://medium.com/better-programming/prototypes-in-javascript-5bba2990e04b)\n- [北京头条前端面经](https://www.nowcoder.com/discuss/346582?type=0&order=0&pos=15&page=0)\n- [Prototype in JavaScript: it’s quirky, but here’s how it works](https://www.freecodecamp.org/news/prototype-in-js-busted-5547ec68872/)","source":"_posts/js-concept-17-prototype-inheritance.md","raw":"---\ntitle: JavaScript必知33个概念系列：原型继承和原型链\nmathjax: false\ncopyright: true\ncomment: true\ndate: 2019-11-26 19:37:34\ntags:\n- JavaScript\n- 33 JS Concept\ncategories:\n- Front-End Development\n- JavaScript\n\n---\n\n{% note primary %}\nprototype inheritance、prototype chain\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 前言\n\nJS中的继承是通过原型来实现的，这一部分内容看过很多次，但是一直没有总结，今天就来总结一下这一部分内容\n\n\n\n\n## 4个问题\n\n首先来看这四个判断，我们的内容会由这四个判断展开。\n\n```javascript\nObject instanceof Function//true\nObject instanceof Object//true\nFunction instanceof Object//true\nFunction instanceof Function//true\n```\n\n## 必须明确的几个关键点\n\n- 每个对象都可以访问一个`__proto__`属性，指向创建当前对象的构造函数的`prototype`对象。\n- 函数也是对象，可以称之为`function object`，即函数对象。\n- 每个函数都有一个`prototype`属性，指向原型对象。\n- 每个函数的`prototype`对象里都有一个`constructor`属性指向函数本身。\n- 原型链的尽头是`Object.prototype`，他没有`__proto__`属性，实际上有这个属性，但是为`null`\n\n\n## 一些例子\n\n### 例子1\n\n```javascript\nlet obj=new Object();\n//or\nlet o={};\n\nobj.__proto__===Object.prototype//true\n```\n\n因为`obj`是一个对象，所以它有一个`__proto__`属性，并且它由`Object`构造函数创建，`Object`函数有一个`prototype`属性，因此`obj.__proto__`和`Object.prototype`指向同一个对象。不妨自己动手打印一下，这两个对象是一样的。\n\n\n### 例子2\n\n```javascript\nObject.prototype.constructor === Object//true\n```\n\n因为每个函数的`prototype`属性都有一个`constructor`属性指向函数本身，因此`Object.prototype.constructor`指向`Object`函数。\n\n\n### 例子3\n\n```javascript\nObject.__proto__ === Function.prototype//true\n```\n\n因为函数也是对象（`function object`），因此它有一个`__proto__`属性，那这个属性指向哪呢？函数对象是由哪个构造函数创建的？很容易猜到，就是`Function`对象。因此`Object.__proto__`指向`Function.prototype`。\n\n\n### 例子4\n\n```javascript\nFunction.prototype === Function.__proto__//true\n```\n还是如此，函数也是对象。`Function`函数有一个`__proto__`属性，那它指向哪呢？因为`Function`也是一个函数，创建函数的很容易想到是`Function`，可能有点奇怪，不过就是如此。\n\n### 例子5\n\n```javascript\nFunction.prototype.constructor === Function//true\n```\n\n每个函数的原型对象都会有一个`constructor`属性指向函数本身，因此`Function.prototype.constructor`就是指向`Function`函数。\n\n### 例子6\n\n```javascript\nFunction.prototype.__proto__ == Object.prototype//true\n```\n\n某个函数的原型对象是一个对象，那么他的`__proto__`属性指向谁呢？因为`Object`函数用于创建对象，因此`Function.prototype.__proto__`就指向`Object.prototype`。\n\n\n\n## instanceof怎么判断的以及4个问题的答案\n\n就如下代码，`instanceof`的判断条件是，如果在`b.prototype`在`a`的原型链中就返回`true`，如果没有则`false`。\n\n```javascript\na instanceof b\n```\n\n因此一开始的4个问题的答案就很容易解答了。\n\n### 问题1\n\n```javascript\nObject instanceof Function//true\n```\n因为`Object.__proto__`指向`Function.prototype`，即`Function.prototype`在`Object`的原型链上。\n\n\n### 问题2\n\n```javascript\nObject instanceof Object//true\n```\n\n因为`Object.__proto__.__proto__`指向`Object.prototype`，即`Object.prototype`在`Object`的原型链上。\n\n\n### 问题3\n\n```javascript\nFunction instanceof Function//true\n```\n\n因为`Function.__proto__`指向`Function.prototype`，即`Function.prototype`在`Function`的原型链上。\n\n### 问题4\n\n```javascript\nFunction instanceof Object//true\n```\n\n因为`Function.__proto__.__proto__`指向`Object.prototype`，即`Object.prototype`在`Function`的原型链上。\n\n\n\n## 如何实现原型继承\n\n总共分3步（这没有实现静态方法的继承）：\n\n1. `super.call(this)`\n2. `child.prototype=Object.create(super.prototype)`\n3. `child.prototype.constructor=child`\n\n### 例子\n\n```javascript\nfunction Animal(name){\n    this.name=name;\n}\n\nfunction Cat(name,color){\n    Animal.call(this,name);//#1，构造父类属性\n    this.color=color;\n}\nCat.prototype=Object.create(Animal.prototype);//#2，实现原型链继承\nCat.prototype.constructor=Cat;//#3，设置构造函数\n```\n\n### 静态的继承\n\n在ES6的`class-extends`方式中，你可以指定静态`static`的方法和属性，如下：\n\n```javascript\nclass Animal{\n    constructor(){\n\n    }\n    static staticMethod(){\n        console.log(\"static method invoked!\");\n    }\n}\n\nclass Dog extends Animal{\n    constructor(){\n        super();\n    }\n}\nDog.staticMethod();//static method invoked!\n```\n\n因为`Dog`函数本身没有这个方法，那么肯定在它的原型链上，问题是Dog的原型根据ES5的写法应该`Dog.__proto__===Function.prototype`为`true`，然而这个例子中`Dog.__proto__===Animal`为`true`，这说明上面ES5的继承方法缺少了静态继承，**补全以上代码的话应该有4步**：\n\n1. `super.call(this)`\n2. `child.prototype=Object.create(super.prototype)`\n3. `child.prototype.constructor=child`\n4. `child.__proto__=Animal`\n```javascript\nfunction Animal(name){\n    this.name=name;\n}\n\nfunction Cat(name,color){\n    Animal.call(this,name);//#1，构造父类属性\n    this.color=color;\n}\nCat.prototype=Object.create(Animal.prototype);//#2，实现原型链继承\nCat.prototype.constructor=Cat;//#3，设置构造函数\nCat.__proto__=Animal//#4，实现静态继承\n```\n\n## 头条面经的几个问题\n\n在看头条面经时看到的问题，来一一分析一下。\n\n```javascript\n\nObject.prototype.a='Object'\nFunction.prototype.a = 'Function'\nfunction Person(){}\nvar child = new Person()\n \nconsole.log(Person.a)\nconsole.log(child.a)\nconsole.log(child.__proto__)\nconsole.log(child.__proto__.__proto__)\nconsole.log(child.__proto__.__proto__.constructor)\nconsole.log(child.__proto__.__proto__.constructor.constructor)\nconsole.log(child.__proto__.__proto__.constructor.constructor.constructor)\n```\n\n### 打印1\n\n```javascript\nconsole.log(Person.a)//Function\n```\n\n首先`Person`是一个函数对象，它本身没有`a`这个属性，因此需要沿着原型链向上找。函数是由`Function`创建的，因此`Person.__proto__`指向`Function.prototype`，而`Function.prototype`有属性`a`，值为“Function”因此结果为“Function”。\n\n### 打印2\n\n```javascript\nconsole.log(child.a)//Object\n```\n\n首先`child`对象本身没有这个属性，因此需要沿着原型链向上找。`child`由`Person`创建，因此`child.__proto__`指向`Person`的原型，`Person.prototype`没有这个属性，因此继续向上找，`Person.prototype`是由`Object`创建的，因此`Person.prototype.__proto__`指向`Object`的原型对象，而`Object.prototype.a`是“Object”，因此结果是“Object”\n\n\n### 打印3\n\n```javascript\nconsole.log(child.__proto__)//Person.prototype\n```\n\n`child`对象由`Person`创建，因此`child.__proto__`指向`Person.prototype`，打印的就是`Person.prototype`，不出意外的话里面有一个`constructor`属性指向`Person`，还有一个`__proto__`属性指向`Object.prototype`。\n\n### 打印4\n\n```javascript\nconsole.log(child.__proto__.__proto__)//Object.prototype\n```\n\n参考**打印3**，`child.__proto__`指向`Person.prototype`，因此就等价于打印`Person.prototype.__proto__`，而`Person.prototype`是由`Object`创建的，因此`Person.prototype.__proto__`指向`Object.prototype`因此打印的就是`Object.prototype`里面的内容。\n\n\n### 打印5\n\n```javascript\nconsole.log(child.__proto__.__proto__.constructor)//Object\n```\n\n参考**打印4**，直到`child.__proto__.proto__`指向`Object.prototype`，那它的`constructor`属性就指向`Object`函数本身。\n\n\n### 打印6\n\n```javascript\nconsole.log(child.__proto__.__proto__.constructor.constructor)//Function\n```\n\n参考**打印5**，知道`child.__proto__.__proto__.constructor`指向的是`Object`，那么`Object.constructor`指向的谁呢？首先`Object`本身没有`constructor`属性，那么就沿着原型链向上找，而`Object`是一个函数对象，即由`Function`创建，因此`Object.__proto__`指向`Function.prototype`，而`Function.prototype.constructor`是`Function`本身，因此结果就是“Function”。\n\n\n\n### 打印7\n\n```javascript\nconsole.log(child.__proto__.__proto__.constructor.constructor.constructor)//Function\n```\n\n参考**打印6**，因为`child.__proto__.__proto__.constructor.constructor`指向`Function`，因此等价于`Function.constructor`，而`Function`函数对象本身没有这个属性，于是沿着原型链向上找，`Function.__proto__`指向`Function.prototype`，而`Function.prototype.constructor`是`Function`本身，因此结果也是“Function”\n\n## 总结\n\n\n- 每个对象都可以访问一个`__proto__`属性，指向创建当前对象的构造函数的`prototype`对象。\n- 函数也是对象，可以称之为`function object`，即函数对象。\n- 每个函数都有一个`prototype`属性，指向原型对象。\n- 每个函数的`prototype`对象里都有一个`constructor`属性指向函数本身。\n- 原型链的尽头是`Object.prototype`，他没有`__proto__`属性，实际上有这个属性，但是为`null`\n\n## Reference\n\n- [Prototype in Javascript](https://www.codementor.io/sandeepranjan2007/prototype-in-javascipt-knbve0lqo)\n- [Prototypes in JavaScript](https://medium.com/better-programming/prototypes-in-javascript-5bba2990e04b)\n- [北京头条前端面经](https://www.nowcoder.com/discuss/346582?type=0&order=0&pos=15&page=0)\n- [Prototype in JavaScript: it’s quirky, but here’s how it works](https://www.freecodecamp.org/news/prototype-in-js-busted-5547ec68872/)","slug":"js-concept-17-prototype-inheritance","published":1,"updated":"2022-01-06T04:09:12.464Z","_id":"cksq5v7mq002un0pu2hmb0ws4","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note primary\"><p>prototype inheritance、prototype chain</p>\n</div>\n\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>JS中的继承是通过原型来实现的，这一部分内容看过很多次，但是一直没有总结，今天就来总结一下这一部分内容</p>\n<h2 id=\"4个问题\"><a href=\"#4个问题\" class=\"headerlink\" title=\"4个问题\"></a>4个问题</h2><p>首先来看这四个判断，我们的内容会由这四个判断展开。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span><span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span><span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span><span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span><span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"必须明确的几个关键点\"><a href=\"#必须明确的几个关键点\" class=\"headerlink\" title=\"必须明确的几个关键点\"></a>必须明确的几个关键点</h2><ul>\n<li>每个对象都可以访问一个<code>__proto__</code>属性，指向创建当前对象的构造函数的<code>prototype</code>对象。</li>\n<li>函数也是对象，可以称之为<code>function object</code>，即函数对象。</li>\n<li>每个函数都有一个<code>prototype</code>属性，指向原型对象。</li>\n<li>每个函数的<code>prototype</code>对象里都有一个<code>constructor</code>属性指向函数本身。</li>\n<li>原型链的尽头是<code>Object.prototype</code>，他没有<code>__proto__</code>属性，实际上有这个属性，但是为<code>null</code></li>\n</ul>\n<h2 id=\"一些例子\"><a href=\"#一些例子\" class=\"headerlink\" title=\"一些例子\"></a>一些例子</h2><h3 id=\"例子1\"><a href=\"#例子1\" class=\"headerlink\" title=\"例子1\"></a>例子1</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj=<span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"><span class=\"comment\">//or</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> o=&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.__proto__===<span class=\"built_in\">Object</span>.prototype<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<p>因为<code>obj</code>是一个对象，所以它有一个<code>__proto__</code>属性，并且它由<code>Object</code>构造函数创建，<code>Object</code>函数有一个<code>prototype</code>属性，因此<code>obj.__proto__</code>和<code>Object.prototype</code>指向同一个对象。不妨自己动手打印一下，这两个对象是一样的。</p>\n<h3 id=\"例子2\"><a href=\"#例子2\" class=\"headerlink\" title=\"例子2\"></a>例子2</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.constructor === <span class=\"built_in\">Object</span><span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<p>因为每个函数的<code>prototype</code>属性都有一个<code>constructor</code>属性指向函数本身，因此<code>Object.prototype.constructor</code>指向<code>Object</code>函数。</p>\n<h3 id=\"例子3\"><a href=\"#例子3\" class=\"headerlink\" title=\"例子3\"></a>例子3</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.__proto__ === <span class=\"built_in\">Function</span>.prototype<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<p>因为函数也是对象（<code>function object</code>），因此它有一个<code>__proto__</code>属性，那这个属性指向哪呢？函数对象是由哪个构造函数创建的？很容易猜到，就是<code>Function</code>对象。因此<code>Object.__proto__</code>指向<code>Function.prototype</code>。</p>\n<h3 id=\"例子4\"><a href=\"#例子4\" class=\"headerlink\" title=\"例子4\"></a>例子4</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype === <span class=\"built_in\">Function</span>.__proto__<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>还是如此，函数也是对象。<code>Function</code>函数有一个<code>__proto__</code>属性，那它指向哪呢？因为<code>Function</code>也是一个函数，创建函数的很容易想到是<code>Function</code>，可能有点奇怪，不过就是如此。</p>\n<h3 id=\"例子5\"><a href=\"#例子5\" class=\"headerlink\" title=\"例子5\"></a>例子5</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.constructor === <span class=\"built_in\">Function</span><span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<p>每个函数的原型对象都会有一个<code>constructor</code>属性指向函数本身，因此<code>Function.prototype.constructor</code>就是指向<code>Function</code>函数。</p>\n<h3 id=\"例子6\"><a href=\"#例子6\" class=\"headerlink\" title=\"例子6\"></a>例子6</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.__proto__ == <span class=\"built_in\">Object</span>.prototype<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<p>某个函数的原型对象是一个对象，那么他的<code>__proto__</code>属性指向谁呢？因为<code>Object</code>函数用于创建对象，因此<code>Function.prototype.__proto__</code>就指向<code>Object.prototype</code>。</p>\n<h2 id=\"instanceof怎么判断的以及4个问题的答案\"><a href=\"#instanceof怎么判断的以及4个问题的答案\" class=\"headerlink\" title=\"instanceof怎么判断的以及4个问题的答案\"></a>instanceof怎么判断的以及4个问题的答案</h2><p>就如下代码，<code>instanceof</code>的判断条件是，如果在<code>b.prototype</code>在<code>a</code>的原型链中就返回<code>true</code>，如果没有则<code>false</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a <span class=\"keyword\">instanceof</span> b</span><br></pre></td></tr></table></figure>\n\n<p>因此一开始的4个问题的答案就很容易解答了。</p>\n<h3 id=\"问题1\"><a href=\"#问题1\" class=\"headerlink\" title=\"问题1\"></a>问题1</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span><span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>因为<code>Object.__proto__</code>指向<code>Function.prototype</code>，即<code>Function.prototype</code>在<code>Object</code>的原型链上。</p>\n<h3 id=\"问题2\"><a href=\"#问题2\" class=\"headerlink\" title=\"问题2\"></a>问题2</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span><span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<p>因为<code>Object.__proto__.__proto__</code>指向<code>Object.prototype</code>，即<code>Object.prototype</code>在<code>Object</code>的原型链上。</p>\n<h3 id=\"问题3\"><a href=\"#问题3\" class=\"headerlink\" title=\"问题3\"></a>问题3</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span><span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<p>因为<code>Function.__proto__</code>指向<code>Function.prototype</code>，即<code>Function.prototype</code>在<code>Function</code>的原型链上。</p>\n<h3 id=\"问题4\"><a href=\"#问题4\" class=\"headerlink\" title=\"问题4\"></a>问题4</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span><span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<p>因为<code>Function.__proto__.__proto__</code>指向<code>Object.prototype</code>，即<code>Object.prototype</code>在<code>Function</code>的原型链上。</p>\n<h2 id=\"如何实现原型继承\"><a href=\"#如何实现原型继承\" class=\"headerlink\" title=\"如何实现原型继承\"></a>如何实现原型继承</h2><p>总共分3步（这没有实现静态方法的继承）：</p>\n<ol>\n<li><code>super.call(this)</code></li>\n<li><code>child.prototype=Object.create(super.prototype)</code></li>\n<li><code>child.prototype.constructor=child</code></li>\n</ol>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name=name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Cat</span>(<span class=\"params\">name,color</span>)</span>&#123;</span><br><span class=\"line\">    Animal.call(<span class=\"built_in\">this</span>,name);<span class=\"comment\">//#1，构造父类属性</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.color=color;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Cat.prototype=<span class=\"built_in\">Object</span>.create(Animal.prototype);<span class=\"comment\">//#2，实现原型链继承</span></span><br><span class=\"line\">Cat.prototype.constructor=Cat;<span class=\"comment\">//#3，设置构造函数</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"静态的继承\"><a href=\"#静态的继承\" class=\"headerlink\" title=\"静态的继承\"></a>静态的继承</h3><p>在ES6的<code>class-extends</code>方式中，你可以指定静态<code>static</code>的方法和属性，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"title\">staticMethod</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;static method invoked!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Dog.staticMethod();<span class=\"comment\">//static method invoked!</span></span><br></pre></td></tr></table></figure>\n\n<p>因为<code>Dog</code>函数本身没有这个方法，那么肯定在它的原型链上，问题是Dog的原型根据ES5的写法应该<code>Dog.__proto__===Function.prototype</code>为<code>true</code>，然而这个例子中<code>Dog.__proto__===Animal</code>为<code>true</code>，这说明上面ES5的继承方法缺少了静态继承，<strong>补全以上代码的话应该有4步</strong>：</p>\n<ol>\n<li><code>super.call(this)</code></li>\n<li><code>child.prototype=Object.create(super.prototype)</code></li>\n<li><code>child.prototype.constructor=child</code></li>\n<li><code>child.__proto__=Animal</code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name=name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Cat</span>(<span class=\"params\">name,color</span>)</span>&#123;</span><br><span class=\"line\">    Animal.call(<span class=\"built_in\">this</span>,name);<span class=\"comment\">//#1，构造父类属性</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.color=color;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Cat.prototype=<span class=\"built_in\">Object</span>.create(Animal.prototype);<span class=\"comment\">//#2，实现原型链继承</span></span><br><span class=\"line\">Cat.prototype.constructor=Cat;<span class=\"comment\">//#3，设置构造函数</span></span><br><span class=\"line\">Cat.__proto__=Animal<span class=\"comment\">//#4，实现静态继承</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"头条面经的几个问题\"><a href=\"#头条面经的几个问题\" class=\"headerlink\" title=\"头条面经的几个问题\"></a>头条面经的几个问题</h2><p>在看头条面经时看到的问题，来一一分析一下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.a=<span class=\"string\">&#x27;Object&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.a = <span class=\"string\">&#x27;Function&#x27;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"keyword\">new</span> Person()</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Person.a)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child.a)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child.__proto__)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child.__proto__.__proto__)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child.__proto__.__proto__.constructor)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child.__proto__.__proto__.constructor.constructor)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child.__proto__.__proto__.constructor.constructor.constructor)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"打印1\"><a href=\"#打印1\" class=\"headerlink\" title=\"打印1\"></a>打印1</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(Person.a)<span class=\"comment\">//Function</span></span><br></pre></td></tr></table></figure>\n\n<p>首先<code>Person</code>是一个函数对象，它本身没有<code>a</code>这个属性，因此需要沿着原型链向上找。函数是由<code>Function</code>创建的，因此<code>Person.__proto__</code>指向<code>Function.prototype</code>，而<code>Function.prototype</code>有属性<code>a</code>，值为“Function”因此结果为“Function”。</p>\n<h3 id=\"打印2\"><a href=\"#打印2\" class=\"headerlink\" title=\"打印2\"></a>打印2</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(child.a)<span class=\"comment\">//Object</span></span><br></pre></td></tr></table></figure>\n\n<p>首先<code>child</code>对象本身没有这个属性，因此需要沿着原型链向上找。<code>child</code>由<code>Person</code>创建，因此<code>child.__proto__</code>指向<code>Person</code>的原型，<code>Person.prototype</code>没有这个属性，因此继续向上找，<code>Person.prototype</code>是由<code>Object</code>创建的，因此<code>Person.prototype.__proto__</code>指向<code>Object</code>的原型对象，而<code>Object.prototype.a</code>是“Object”，因此结果是“Object”</p>\n<h3 id=\"打印3\"><a href=\"#打印3\" class=\"headerlink\" title=\"打印3\"></a>打印3</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(child.__proto__)<span class=\"comment\">//Person.prototype</span></span><br></pre></td></tr></table></figure>\n\n<p><code>child</code>对象由<code>Person</code>创建，因此<code>child.__proto__</code>指向<code>Person.prototype</code>，打印的就是<code>Person.prototype</code>，不出意外的话里面有一个<code>constructor</code>属性指向<code>Person</code>，还有一个<code>__proto__</code>属性指向<code>Object.prototype</code>。</p>\n<h3 id=\"打印4\"><a href=\"#打印4\" class=\"headerlink\" title=\"打印4\"></a>打印4</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(child.__proto__.__proto__)<span class=\"comment\">//Object.prototype</span></span><br></pre></td></tr></table></figure>\n\n<p>参考<strong>打印3</strong>，<code>child.__proto__</code>指向<code>Person.prototype</code>，因此就等价于打印<code>Person.prototype.__proto__</code>，而<code>Person.prototype</code>是由<code>Object</code>创建的，因此<code>Person.prototype.__proto__</code>指向<code>Object.prototype</code>因此打印的就是<code>Object.prototype</code>里面的内容。</p>\n<h3 id=\"打印5\"><a href=\"#打印5\" class=\"headerlink\" title=\"打印5\"></a>打印5</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(child.__proto__.__proto__.constructor)<span class=\"comment\">//Object</span></span><br></pre></td></tr></table></figure>\n\n<p>参考<strong>打印4</strong>，直到<code>child.__proto__.proto__</code>指向<code>Object.prototype</code>，那它的<code>constructor</code>属性就指向<code>Object</code>函数本身。</p>\n<h3 id=\"打印6\"><a href=\"#打印6\" class=\"headerlink\" title=\"打印6\"></a>打印6</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(child.__proto__.__proto__.constructor.constructor)<span class=\"comment\">//Function</span></span><br></pre></td></tr></table></figure>\n\n<p>参考<strong>打印5</strong>，知道<code>child.__proto__.__proto__.constructor</code>指向的是<code>Object</code>，那么<code>Object.constructor</code>指向的谁呢？首先<code>Object</code>本身没有<code>constructor</code>属性，那么就沿着原型链向上找，而<code>Object</code>是一个函数对象，即由<code>Function</code>创建，因此<code>Object.__proto__</code>指向<code>Function.prototype</code>，而<code>Function.prototype.constructor</code>是<code>Function</code>本身，因此结果就是“Function”。</p>\n<h3 id=\"打印7\"><a href=\"#打印7\" class=\"headerlink\" title=\"打印7\"></a>打印7</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(child.__proto__.__proto__.constructor.constructor.constructor)<span class=\"comment\">//Function</span></span><br></pre></td></tr></table></figure>\n\n<p>参考<strong>打印6</strong>，因为<code>child.__proto__.__proto__.constructor.constructor</code>指向<code>Function</code>，因此等价于<code>Function.constructor</code>，而<code>Function</code>函数对象本身没有这个属性，于是沿着原型链向上找，<code>Function.__proto__</code>指向<code>Function.prototype</code>，而<code>Function.prototype.constructor</code>是<code>Function</code>本身，因此结果也是“Function”</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>每个对象都可以访问一个<code>__proto__</code>属性，指向创建当前对象的构造函数的<code>prototype</code>对象。</li>\n<li>函数也是对象，可以称之为<code>function object</code>，即函数对象。</li>\n<li>每个函数都有一个<code>prototype</code>属性，指向原型对象。</li>\n<li>每个函数的<code>prototype</code>对象里都有一个<code>constructor</code>属性指向函数本身。</li>\n<li>原型链的尽头是<code>Object.prototype</code>，他没有<code>__proto__</code>属性，实际上有这个属性，但是为<code>null</code></li>\n</ul>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://www.codementor.io/sandeepranjan2007/prototype-in-javascipt-knbve0lqo\">Prototype in Javascript</a></li>\n<li><a href=\"https://medium.com/better-programming/prototypes-in-javascript-5bba2990e04b\">Prototypes in JavaScript</a></li>\n<li><a href=\"https://www.nowcoder.com/discuss/346582?type=0&order=0&pos=15&page=0\">北京头条前端面经</a></li>\n<li><a href=\"https://www.freecodecamp.org/news/prototype-in-js-busted-5547ec68872/\">Prototype in JavaScript: it’s quirky, but here’s how it works</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note primary\"><p>prototype inheritance、prototype chain</p>\n</div>","more":"<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>JS中的继承是通过原型来实现的，这一部分内容看过很多次，但是一直没有总结，今天就来总结一下这一部分内容</p>\n<h2 id=\"4个问题\"><a href=\"#4个问题\" class=\"headerlink\" title=\"4个问题\"></a>4个问题</h2><p>首先来看这四个判断，我们的内容会由这四个判断展开。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span><span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span><span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span><span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span><span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"必须明确的几个关键点\"><a href=\"#必须明确的几个关键点\" class=\"headerlink\" title=\"必须明确的几个关键点\"></a>必须明确的几个关键点</h2><ul>\n<li>每个对象都可以访问一个<code>__proto__</code>属性，指向创建当前对象的构造函数的<code>prototype</code>对象。</li>\n<li>函数也是对象，可以称之为<code>function object</code>，即函数对象。</li>\n<li>每个函数都有一个<code>prototype</code>属性，指向原型对象。</li>\n<li>每个函数的<code>prototype</code>对象里都有一个<code>constructor</code>属性指向函数本身。</li>\n<li>原型链的尽头是<code>Object.prototype</code>，他没有<code>__proto__</code>属性，实际上有这个属性，但是为<code>null</code></li>\n</ul>\n<h2 id=\"一些例子\"><a href=\"#一些例子\" class=\"headerlink\" title=\"一些例子\"></a>一些例子</h2><h3 id=\"例子1\"><a href=\"#例子1\" class=\"headerlink\" title=\"例子1\"></a>例子1</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj=<span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"><span class=\"comment\">//or</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> o=&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.__proto__===<span class=\"built_in\">Object</span>.prototype<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<p>因为<code>obj</code>是一个对象，所以它有一个<code>__proto__</code>属性，并且它由<code>Object</code>构造函数创建，<code>Object</code>函数有一个<code>prototype</code>属性，因此<code>obj.__proto__</code>和<code>Object.prototype</code>指向同一个对象。不妨自己动手打印一下，这两个对象是一样的。</p>\n<h3 id=\"例子2\"><a href=\"#例子2\" class=\"headerlink\" title=\"例子2\"></a>例子2</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.constructor === <span class=\"built_in\">Object</span><span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<p>因为每个函数的<code>prototype</code>属性都有一个<code>constructor</code>属性指向函数本身，因此<code>Object.prototype.constructor</code>指向<code>Object</code>函数。</p>\n<h3 id=\"例子3\"><a href=\"#例子3\" class=\"headerlink\" title=\"例子3\"></a>例子3</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.__proto__ === <span class=\"built_in\">Function</span>.prototype<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<p>因为函数也是对象（<code>function object</code>），因此它有一个<code>__proto__</code>属性，那这个属性指向哪呢？函数对象是由哪个构造函数创建的？很容易猜到，就是<code>Function</code>对象。因此<code>Object.__proto__</code>指向<code>Function.prototype</code>。</p>\n<h3 id=\"例子4\"><a href=\"#例子4\" class=\"headerlink\" title=\"例子4\"></a>例子4</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype === <span class=\"built_in\">Function</span>.__proto__<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>还是如此，函数也是对象。<code>Function</code>函数有一个<code>__proto__</code>属性，那它指向哪呢？因为<code>Function</code>也是一个函数，创建函数的很容易想到是<code>Function</code>，可能有点奇怪，不过就是如此。</p>\n<h3 id=\"例子5\"><a href=\"#例子5\" class=\"headerlink\" title=\"例子5\"></a>例子5</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.constructor === <span class=\"built_in\">Function</span><span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<p>每个函数的原型对象都会有一个<code>constructor</code>属性指向函数本身，因此<code>Function.prototype.constructor</code>就是指向<code>Function</code>函数。</p>\n<h3 id=\"例子6\"><a href=\"#例子6\" class=\"headerlink\" title=\"例子6\"></a>例子6</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.__proto__ == <span class=\"built_in\">Object</span>.prototype<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<p>某个函数的原型对象是一个对象，那么他的<code>__proto__</code>属性指向谁呢？因为<code>Object</code>函数用于创建对象，因此<code>Function.prototype.__proto__</code>就指向<code>Object.prototype</code>。</p>\n<h2 id=\"instanceof怎么判断的以及4个问题的答案\"><a href=\"#instanceof怎么判断的以及4个问题的答案\" class=\"headerlink\" title=\"instanceof怎么判断的以及4个问题的答案\"></a>instanceof怎么判断的以及4个问题的答案</h2><p>就如下代码，<code>instanceof</code>的判断条件是，如果在<code>b.prototype</code>在<code>a</code>的原型链中就返回<code>true</code>，如果没有则<code>false</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a <span class=\"keyword\">instanceof</span> b</span><br></pre></td></tr></table></figure>\n\n<p>因此一开始的4个问题的答案就很容易解答了。</p>\n<h3 id=\"问题1\"><a href=\"#问题1\" class=\"headerlink\" title=\"问题1\"></a>问题1</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span><span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>因为<code>Object.__proto__</code>指向<code>Function.prototype</code>，即<code>Function.prototype</code>在<code>Object</code>的原型链上。</p>\n<h3 id=\"问题2\"><a href=\"#问题2\" class=\"headerlink\" title=\"问题2\"></a>问题2</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span><span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<p>因为<code>Object.__proto__.__proto__</code>指向<code>Object.prototype</code>，即<code>Object.prototype</code>在<code>Object</code>的原型链上。</p>\n<h3 id=\"问题3\"><a href=\"#问题3\" class=\"headerlink\" title=\"问题3\"></a>问题3</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span><span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<p>因为<code>Function.__proto__</code>指向<code>Function.prototype</code>，即<code>Function.prototype</code>在<code>Function</code>的原型链上。</p>\n<h3 id=\"问题4\"><a href=\"#问题4\" class=\"headerlink\" title=\"问题4\"></a>问题4</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span><span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<p>因为<code>Function.__proto__.__proto__</code>指向<code>Object.prototype</code>，即<code>Object.prototype</code>在<code>Function</code>的原型链上。</p>\n<h2 id=\"如何实现原型继承\"><a href=\"#如何实现原型继承\" class=\"headerlink\" title=\"如何实现原型继承\"></a>如何实现原型继承</h2><p>总共分3步（这没有实现静态方法的继承）：</p>\n<ol>\n<li><code>super.call(this)</code></li>\n<li><code>child.prototype=Object.create(super.prototype)</code></li>\n<li><code>child.prototype.constructor=child</code></li>\n</ol>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name=name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Cat</span>(<span class=\"params\">name,color</span>)</span>&#123;</span><br><span class=\"line\">    Animal.call(<span class=\"built_in\">this</span>,name);<span class=\"comment\">//#1，构造父类属性</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.color=color;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Cat.prototype=<span class=\"built_in\">Object</span>.create(Animal.prototype);<span class=\"comment\">//#2，实现原型链继承</span></span><br><span class=\"line\">Cat.prototype.constructor=Cat;<span class=\"comment\">//#3，设置构造函数</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"静态的继承\"><a href=\"#静态的继承\" class=\"headerlink\" title=\"静态的继承\"></a>静态的继承</h3><p>在ES6的<code>class-extends</code>方式中，你可以指定静态<code>static</code>的方法和属性，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"title\">staticMethod</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;static method invoked!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Dog.staticMethod();<span class=\"comment\">//static method invoked!</span></span><br></pre></td></tr></table></figure>\n\n<p>因为<code>Dog</code>函数本身没有这个方法，那么肯定在它的原型链上，问题是Dog的原型根据ES5的写法应该<code>Dog.__proto__===Function.prototype</code>为<code>true</code>，然而这个例子中<code>Dog.__proto__===Animal</code>为<code>true</code>，这说明上面ES5的继承方法缺少了静态继承，<strong>补全以上代码的话应该有4步</strong>：</p>\n<ol>\n<li><code>super.call(this)</code></li>\n<li><code>child.prototype=Object.create(super.prototype)</code></li>\n<li><code>child.prototype.constructor=child</code></li>\n<li><code>child.__proto__=Animal</code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name=name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Cat</span>(<span class=\"params\">name,color</span>)</span>&#123;</span><br><span class=\"line\">    Animal.call(<span class=\"built_in\">this</span>,name);<span class=\"comment\">//#1，构造父类属性</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.color=color;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Cat.prototype=<span class=\"built_in\">Object</span>.create(Animal.prototype);<span class=\"comment\">//#2，实现原型链继承</span></span><br><span class=\"line\">Cat.prototype.constructor=Cat;<span class=\"comment\">//#3，设置构造函数</span></span><br><span class=\"line\">Cat.__proto__=Animal<span class=\"comment\">//#4，实现静态继承</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"头条面经的几个问题\"><a href=\"#头条面经的几个问题\" class=\"headerlink\" title=\"头条面经的几个问题\"></a>头条面经的几个问题</h2><p>在看头条面经时看到的问题，来一一分析一下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.a=<span class=\"string\">&#x27;Object&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.a = <span class=\"string\">&#x27;Function&#x27;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"keyword\">new</span> Person()</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Person.a)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child.a)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child.__proto__)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child.__proto__.__proto__)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child.__proto__.__proto__.constructor)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child.__proto__.__proto__.constructor.constructor)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child.__proto__.__proto__.constructor.constructor.constructor)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"打印1\"><a href=\"#打印1\" class=\"headerlink\" title=\"打印1\"></a>打印1</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(Person.a)<span class=\"comment\">//Function</span></span><br></pre></td></tr></table></figure>\n\n<p>首先<code>Person</code>是一个函数对象，它本身没有<code>a</code>这个属性，因此需要沿着原型链向上找。函数是由<code>Function</code>创建的，因此<code>Person.__proto__</code>指向<code>Function.prototype</code>，而<code>Function.prototype</code>有属性<code>a</code>，值为“Function”因此结果为“Function”。</p>\n<h3 id=\"打印2\"><a href=\"#打印2\" class=\"headerlink\" title=\"打印2\"></a>打印2</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(child.a)<span class=\"comment\">//Object</span></span><br></pre></td></tr></table></figure>\n\n<p>首先<code>child</code>对象本身没有这个属性，因此需要沿着原型链向上找。<code>child</code>由<code>Person</code>创建，因此<code>child.__proto__</code>指向<code>Person</code>的原型，<code>Person.prototype</code>没有这个属性，因此继续向上找，<code>Person.prototype</code>是由<code>Object</code>创建的，因此<code>Person.prototype.__proto__</code>指向<code>Object</code>的原型对象，而<code>Object.prototype.a</code>是“Object”，因此结果是“Object”</p>\n<h3 id=\"打印3\"><a href=\"#打印3\" class=\"headerlink\" title=\"打印3\"></a>打印3</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(child.__proto__)<span class=\"comment\">//Person.prototype</span></span><br></pre></td></tr></table></figure>\n\n<p><code>child</code>对象由<code>Person</code>创建，因此<code>child.__proto__</code>指向<code>Person.prototype</code>，打印的就是<code>Person.prototype</code>，不出意外的话里面有一个<code>constructor</code>属性指向<code>Person</code>，还有一个<code>__proto__</code>属性指向<code>Object.prototype</code>。</p>\n<h3 id=\"打印4\"><a href=\"#打印4\" class=\"headerlink\" title=\"打印4\"></a>打印4</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(child.__proto__.__proto__)<span class=\"comment\">//Object.prototype</span></span><br></pre></td></tr></table></figure>\n\n<p>参考<strong>打印3</strong>，<code>child.__proto__</code>指向<code>Person.prototype</code>，因此就等价于打印<code>Person.prototype.__proto__</code>，而<code>Person.prototype</code>是由<code>Object</code>创建的，因此<code>Person.prototype.__proto__</code>指向<code>Object.prototype</code>因此打印的就是<code>Object.prototype</code>里面的内容。</p>\n<h3 id=\"打印5\"><a href=\"#打印5\" class=\"headerlink\" title=\"打印5\"></a>打印5</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(child.__proto__.__proto__.constructor)<span class=\"comment\">//Object</span></span><br></pre></td></tr></table></figure>\n\n<p>参考<strong>打印4</strong>，直到<code>child.__proto__.proto__</code>指向<code>Object.prototype</code>，那它的<code>constructor</code>属性就指向<code>Object</code>函数本身。</p>\n<h3 id=\"打印6\"><a href=\"#打印6\" class=\"headerlink\" title=\"打印6\"></a>打印6</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(child.__proto__.__proto__.constructor.constructor)<span class=\"comment\">//Function</span></span><br></pre></td></tr></table></figure>\n\n<p>参考<strong>打印5</strong>，知道<code>child.__proto__.__proto__.constructor</code>指向的是<code>Object</code>，那么<code>Object.constructor</code>指向的谁呢？首先<code>Object</code>本身没有<code>constructor</code>属性，那么就沿着原型链向上找，而<code>Object</code>是一个函数对象，即由<code>Function</code>创建，因此<code>Object.__proto__</code>指向<code>Function.prototype</code>，而<code>Function.prototype.constructor</code>是<code>Function</code>本身，因此结果就是“Function”。</p>\n<h3 id=\"打印7\"><a href=\"#打印7\" class=\"headerlink\" title=\"打印7\"></a>打印7</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(child.__proto__.__proto__.constructor.constructor.constructor)<span class=\"comment\">//Function</span></span><br></pre></td></tr></table></figure>\n\n<p>参考<strong>打印6</strong>，因为<code>child.__proto__.__proto__.constructor.constructor</code>指向<code>Function</code>，因此等价于<code>Function.constructor</code>，而<code>Function</code>函数对象本身没有这个属性，于是沿着原型链向上找，<code>Function.__proto__</code>指向<code>Function.prototype</code>，而<code>Function.prototype.constructor</code>是<code>Function</code>本身，因此结果也是“Function”</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>每个对象都可以访问一个<code>__proto__</code>属性，指向创建当前对象的构造函数的<code>prototype</code>对象。</li>\n<li>函数也是对象，可以称之为<code>function object</code>，即函数对象。</li>\n<li>每个函数都有一个<code>prototype</code>属性，指向原型对象。</li>\n<li>每个函数的<code>prototype</code>对象里都有一个<code>constructor</code>属性指向函数本身。</li>\n<li>原型链的尽头是<code>Object.prototype</code>，他没有<code>__proto__</code>属性，实际上有这个属性，但是为<code>null</code></li>\n</ul>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://www.codementor.io/sandeepranjan2007/prototype-in-javascipt-knbve0lqo\">Prototype in Javascript</a></li>\n<li><a href=\"https://medium.com/better-programming/prototypes-in-javascript-5bba2990e04b\">Prototypes in JavaScript</a></li>\n<li><a href=\"https://www.nowcoder.com/discuss/346582?type=0&order=0&pos=15&page=0\">北京头条前端面经</a></li>\n<li><a href=\"https://www.freecodecamp.org/news/prototype-in-js-busted-5547ec68872/\">Prototype in JavaScript: it’s quirky, but here’s how it works</a></li>\n</ul>"},{"title":"JavaScript必知33个概念系列：map、reduce、filter","mathjax":false,"copyright":true,"comment":true,"date":"2019-11-22T09:28:58.000Z","_content":"\n{% note primary %}\nmap、reduce、filter\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 前言\n\n终于来到这个主题了。这三个函数可以让你coding像飘柔般流畅。这是一种函数式编程。今天就来总结一下这三种函数的使用方法和使用场景。\n\n\n\n## map\n\nMDN的syntax：\n\n```javascript\nvar new_array = arr.map(function callback(currentValue[, index[, array]]) {\n    // Return element for new_array\n}[, thisArg])\n```\n\n- callback：回调函数\n  - currentValue：迭代的当前值\n  - 【optional】index：数组当前下标\n  - 【optional】array：数组对象\n- 【optional】thisArg：执行callback时this的引用对象\n\n\n### 使用场景\n\n定义一个对应关系，将原集合一一映射到新的集合。\n\n例如，矩阵的数乘：\n\n```javascript\nlet arr=[1,2,-4,9];\nlet vectorMultWithNum=(arr,num)=>arr.map(x=>x*num);\nlet result=vectorMultWithNum(arr,4);\nconsole.log(result)\n//[4, 8, -16, 36]\n```\n\n## filter\n\nMND的syntax：\n\n```javascript\nvar newArray = arr.filter(callback(element[, index[, array]])[, thisArg]);\n```\n\n\n- callback：回调函数\n  - element：迭代的当前值\n  - 【optional】index：数组当前下标\n  - 【optional】array：数组对象\n- 【optional】thisArg：执行callback时this的引用对象\n\n\n### 使用场景\n\n定义一个过滤条件函数，满足时返回true，否则false。\n\n例如，获得数组的所有偶数：\n\n```javascript\nlet arr=[1,3,5,7,9,10];\nlet result=arr.filter(x=>x%2===0);\nconsole.log(result);\n//[10]\n```\n\n\n## reduce\n\n\n\nMDN的syntax：\n\n```javascript\narr.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue])\n```\n\n- callback：回调函数\n  - accumulator：累加器，或者是上次合并后的结果。或者是initialValue\n  - currentValue：迭代的当前值\n  - 【optional】index：数组当前下标。注意是否提供了initialValue\n  - 【optional】array：数组对象\n- 【optional】initialValue：累加器的初始值。如果不指定初始值那就将数组第一个元素值当做初始值并跳过第一个元素。空数组不指定初始值会报错。\n\n### 使用场景\n\n这三个函数中，reduce是最有艺术感的，他能把数组中的所有元素值进行一个一个合并生成最后的结果。\n\n#### 简单sum求和\n\n```javascript\nlet arr=[1,2,3,4,5];\nlet result=arr.reduce((sum,cur)=>sum+cur);\nconsole.log(result);\n//15\n```\n\n#### 多次复合函数\n\n```javascript\nlet x=1;\nconst compose = (x,...fns)=>fns.reduceRight((f,g)=>g(f),x);\nconst fn1=x=>x**2;\nconst fn2=x=>x+11;\nlet result=compose(x,fn1,fn2);\nconsole.log(result);\n//(x+11)**2===(1+11)**2===144\n//144\n```\n\n### Promise Chain\n\n之前写过一篇关于使用JavaScript实现一个任务队列的。\n\n如果使用reduce的话会显得代码很简洁。\n\n```javascript\nclass Queue {\n    constructor() {\n        this.tasks = [];\n    }\n    task(delay, callback) {\n        this.tasks.push({ delay, callback });\n        return this;\n    }\n    start() {\n        if (this.tasks.length === 0) return;\n        this.tasks.reduce((s,x)=>{\n            return s.then(r=>{\n                return new Promise((resolve,reject)=>{\n                    setTimeout(()=>{\n                        x.callback();\n                        resolve();\n                    },x.delay);\n                });\n            });\n        },Promise.resolve()).then(x=>{\n            this.tasks=[];\n            return;\n        });\n    }\n\n}\n\nnew Queue()\n    .task(1000, () => {\n        console.log(1);\n    })\n    .task(2000, () => {\n        console.log(2);\n    })\n    .task(3000, () => {\n        console.log(3);\n    })\n    .start();\n\n\n\n```\n\n### 其他应用场景\n\n其他场景还有很多，关键点就是迭代合并操作。\n\n## 总结\n\n一些用法还不是很熟练，比如promise，接下来会加强这一部分的连接。再见！\n\n## Reference\n\n- [JavaScript Functional Programming — map, filter and reduce](https://medium.com/jsguru/javascript-functional-programming-map-filter-and-reduce-846ff9ba492d)\n","source":"_posts/js-concept-19-map-reduce-filter.md","raw":"---\ntitle: JavaScript必知33个概念系列：map、reduce、filter\nmathjax: false\ncopyright: true\ncomment: true\ndate: 2019-11-22 17:28:58\ntags:\n- JavaScript\n- 33 JS Concept\ncategories:\n- Front-End Development\n- JavaScript\n\n---\n\n{% note primary %}\nmap、reduce、filter\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 前言\n\n终于来到这个主题了。这三个函数可以让你coding像飘柔般流畅。这是一种函数式编程。今天就来总结一下这三种函数的使用方法和使用场景。\n\n\n\n## map\n\nMDN的syntax：\n\n```javascript\nvar new_array = arr.map(function callback(currentValue[, index[, array]]) {\n    // Return element for new_array\n}[, thisArg])\n```\n\n- callback：回调函数\n  - currentValue：迭代的当前值\n  - 【optional】index：数组当前下标\n  - 【optional】array：数组对象\n- 【optional】thisArg：执行callback时this的引用对象\n\n\n### 使用场景\n\n定义一个对应关系，将原集合一一映射到新的集合。\n\n例如，矩阵的数乘：\n\n```javascript\nlet arr=[1,2,-4,9];\nlet vectorMultWithNum=(arr,num)=>arr.map(x=>x*num);\nlet result=vectorMultWithNum(arr,4);\nconsole.log(result)\n//[4, 8, -16, 36]\n```\n\n## filter\n\nMND的syntax：\n\n```javascript\nvar newArray = arr.filter(callback(element[, index[, array]])[, thisArg]);\n```\n\n\n- callback：回调函数\n  - element：迭代的当前值\n  - 【optional】index：数组当前下标\n  - 【optional】array：数组对象\n- 【optional】thisArg：执行callback时this的引用对象\n\n\n### 使用场景\n\n定义一个过滤条件函数，满足时返回true，否则false。\n\n例如，获得数组的所有偶数：\n\n```javascript\nlet arr=[1,3,5,7,9,10];\nlet result=arr.filter(x=>x%2===0);\nconsole.log(result);\n//[10]\n```\n\n\n## reduce\n\n\n\nMDN的syntax：\n\n```javascript\narr.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue])\n```\n\n- callback：回调函数\n  - accumulator：累加器，或者是上次合并后的结果。或者是initialValue\n  - currentValue：迭代的当前值\n  - 【optional】index：数组当前下标。注意是否提供了initialValue\n  - 【optional】array：数组对象\n- 【optional】initialValue：累加器的初始值。如果不指定初始值那就将数组第一个元素值当做初始值并跳过第一个元素。空数组不指定初始值会报错。\n\n### 使用场景\n\n这三个函数中，reduce是最有艺术感的，他能把数组中的所有元素值进行一个一个合并生成最后的结果。\n\n#### 简单sum求和\n\n```javascript\nlet arr=[1,2,3,4,5];\nlet result=arr.reduce((sum,cur)=>sum+cur);\nconsole.log(result);\n//15\n```\n\n#### 多次复合函数\n\n```javascript\nlet x=1;\nconst compose = (x,...fns)=>fns.reduceRight((f,g)=>g(f),x);\nconst fn1=x=>x**2;\nconst fn2=x=>x+11;\nlet result=compose(x,fn1,fn2);\nconsole.log(result);\n//(x+11)**2===(1+11)**2===144\n//144\n```\n\n### Promise Chain\n\n之前写过一篇关于使用JavaScript实现一个任务队列的。\n\n如果使用reduce的话会显得代码很简洁。\n\n```javascript\nclass Queue {\n    constructor() {\n        this.tasks = [];\n    }\n    task(delay, callback) {\n        this.tasks.push({ delay, callback });\n        return this;\n    }\n    start() {\n        if (this.tasks.length === 0) return;\n        this.tasks.reduce((s,x)=>{\n            return s.then(r=>{\n                return new Promise((resolve,reject)=>{\n                    setTimeout(()=>{\n                        x.callback();\n                        resolve();\n                    },x.delay);\n                });\n            });\n        },Promise.resolve()).then(x=>{\n            this.tasks=[];\n            return;\n        });\n    }\n\n}\n\nnew Queue()\n    .task(1000, () => {\n        console.log(1);\n    })\n    .task(2000, () => {\n        console.log(2);\n    })\n    .task(3000, () => {\n        console.log(3);\n    })\n    .start();\n\n\n\n```\n\n### 其他应用场景\n\n其他场景还有很多，关键点就是迭代合并操作。\n\n## 总结\n\n一些用法还不是很熟练，比如promise，接下来会加强这一部分的连接。再见！\n\n## Reference\n\n- [JavaScript Functional Programming — map, filter and reduce](https://medium.com/jsguru/javascript-functional-programming-map-filter-and-reduce-846ff9ba492d)\n","slug":"js-concept-19-map-reduce-filter","published":1,"updated":"2022-01-06T04:09:12.464Z","_id":"cksq5v7mr002xn0pub13sdiuo","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note primary\"><p>map、reduce、filter</p>\n</div>\n\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>终于来到这个主题了。这三个函数可以让你coding像飘柔般流畅。这是一种函数式编程。今天就来总结一下这三种函数的使用方法和使用场景。</p>\n<h2 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h2><p>MDN的syntax：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> new_array = arr.map(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">currentValue[, index[, array]]</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Return element for new_array</span></span><br><span class=\"line\">&#125;[, thisArg])</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>callback：回调函数<ul>\n<li>currentValue：迭代的当前值</li>\n<li>【optional】index：数组当前下标</li>\n<li>【optional】array：数组对象</li>\n</ul>\n</li>\n<li>【optional】thisArg：执行callback时this的引用对象</li>\n</ul>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>定义一个对应关系，将原集合一一映射到新的集合。</p>\n<p>例如，矩阵的数乘：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,-<span class=\"number\">4</span>,<span class=\"number\">9</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> vectorMultWithNum=<span class=\"function\">(<span class=\"params\">arr,num</span>)=&gt;</span>arr.map(<span class=\"function\"><span class=\"params\">x</span>=&gt;</span>x*num);</span><br><span class=\"line\"><span class=\"keyword\">let</span> result=vectorMultWithNum(arr,<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\"><span class=\"comment\">//[4, 8, -16, 36]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h2><p>MND的syntax：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> newArray = arr.filter(callback(element[, index[, array]])[, thisArg]);</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>callback：回调函数<ul>\n<li>element：迭代的当前值</li>\n<li>【optional】index：数组当前下标</li>\n<li>【optional】array：数组对象</li>\n</ul>\n</li>\n<li>【optional】thisArg：执行callback时this的引用对象</li>\n</ul>\n<h3 id=\"使用场景-1\"><a href=\"#使用场景-1\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>定义一个过滤条件函数，满足时返回true，否则false。</p>\n<p>例如，获得数组的所有偶数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr=[<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> result=arr.filter(<span class=\"function\"><span class=\"params\">x</span>=&gt;</span>x%<span class=\"number\">2</span>===<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">//[10]</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce\"></a>reduce</h2><p>MDN的syntax：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue])</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>callback：回调函数<ul>\n<li>accumulator：累加器，或者是上次合并后的结果。或者是initialValue</li>\n<li>currentValue：迭代的当前值</li>\n<li>【optional】index：数组当前下标。注意是否提供了initialValue</li>\n<li>【optional】array：数组对象</li>\n</ul>\n</li>\n<li>【optional】initialValue：累加器的初始值。如果不指定初始值那就将数组第一个元素值当做初始值并跳过第一个元素。空数组不指定初始值会报错。</li>\n</ul>\n<h3 id=\"使用场景-2\"><a href=\"#使用场景-2\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>这三个函数中，reduce是最有艺术感的，他能把数组中的所有元素值进行一个一个合并生成最后的结果。</p>\n<h4 id=\"简单sum求和\"><a href=\"#简单sum求和\" class=\"headerlink\" title=\"简单sum求和\"></a>简单sum求和</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> result=arr.reduce(<span class=\"function\">(<span class=\"params\">sum,cur</span>)=&gt;</span>sum+cur);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">//15</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"多次复合函数\"><a href=\"#多次复合函数\" class=\"headerlink\" title=\"多次复合函数\"></a>多次复合函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> compose = <span class=\"function\">(<span class=\"params\">x,...fns</span>)=&gt;</span>fns.reduceRight(<span class=\"function\">(<span class=\"params\">f,g</span>)=&gt;</span>g(f),x);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fn1=<span class=\"function\"><span class=\"params\">x</span>=&gt;</span>x**<span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> fn2=<span class=\"function\"><span class=\"params\">x</span>=&gt;</span>x+<span class=\"number\">11</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> result=compose(x,fn1,fn2);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">//(x+11)**2===(1+11)**2===144</span></span><br><span class=\"line\"><span class=\"comment\">//144</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Promise-Chain\"><a href=\"#Promise-Chain\" class=\"headerlink\" title=\"Promise Chain\"></a>Promise Chain</h3><p>之前写过一篇关于使用JavaScript实现一个任务队列的。</p>\n<p>如果使用reduce的话会显得代码很简洁。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Queue</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.tasks = [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">task</span>(<span class=\"params\">delay, callback</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.tasks.push(&#123; delay, callback &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">start</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.tasks.length === <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.tasks.reduce(<span class=\"function\">(<span class=\"params\">s,x</span>)=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> s.then(<span class=\"function\"><span class=\"params\">r</span>=&gt;</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">                        x.callback();</span><br><span class=\"line\">                        resolve();</span><br><span class=\"line\">                    &#125;,x.delay);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;,<span class=\"built_in\">Promise</span>.resolve()).then(<span class=\"function\"><span class=\"params\">x</span>=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.tasks=[];</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Queue()</span><br><span class=\"line\">    .task(<span class=\"number\">1000</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .task(<span class=\"number\">2000</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .task(<span class=\"number\">3000</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .start();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其他应用场景\"><a href=\"#其他应用场景\" class=\"headerlink\" title=\"其他应用场景\"></a>其他应用场景</h3><p>其他场景还有很多，关键点就是迭代合并操作。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>一些用法还不是很熟练，比如promise，接下来会加强这一部分的连接。再见！</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://medium.com/jsguru/javascript-functional-programming-map-filter-and-reduce-846ff9ba492d\">JavaScript Functional Programming — map, filter and reduce</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note primary\"><p>map、reduce、filter</p>\n</div>","more":"<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>终于来到这个主题了。这三个函数可以让你coding像飘柔般流畅。这是一种函数式编程。今天就来总结一下这三种函数的使用方法和使用场景。</p>\n<h2 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h2><p>MDN的syntax：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> new_array = arr.map(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">currentValue[, index[, array]]</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Return element for new_array</span></span><br><span class=\"line\">&#125;[, thisArg])</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>callback：回调函数<ul>\n<li>currentValue：迭代的当前值</li>\n<li>【optional】index：数组当前下标</li>\n<li>【optional】array：数组对象</li>\n</ul>\n</li>\n<li>【optional】thisArg：执行callback时this的引用对象</li>\n</ul>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>定义一个对应关系，将原集合一一映射到新的集合。</p>\n<p>例如，矩阵的数乘：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,-<span class=\"number\">4</span>,<span class=\"number\">9</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> vectorMultWithNum=<span class=\"function\">(<span class=\"params\">arr,num</span>)=&gt;</span>arr.map(<span class=\"function\"><span class=\"params\">x</span>=&gt;</span>x*num);</span><br><span class=\"line\"><span class=\"keyword\">let</span> result=vectorMultWithNum(arr,<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result)</span><br><span class=\"line\"><span class=\"comment\">//[4, 8, -16, 36]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h2><p>MND的syntax：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> newArray = arr.filter(callback(element[, index[, array]])[, thisArg]);</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>callback：回调函数<ul>\n<li>element：迭代的当前值</li>\n<li>【optional】index：数组当前下标</li>\n<li>【optional】array：数组对象</li>\n</ul>\n</li>\n<li>【optional】thisArg：执行callback时this的引用对象</li>\n</ul>\n<h3 id=\"使用场景-1\"><a href=\"#使用场景-1\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>定义一个过滤条件函数，满足时返回true，否则false。</p>\n<p>例如，获得数组的所有偶数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr=[<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> result=arr.filter(<span class=\"function\"><span class=\"params\">x</span>=&gt;</span>x%<span class=\"number\">2</span>===<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">//[10]</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce\"></a>reduce</h2><p>MDN的syntax：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue])</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>callback：回调函数<ul>\n<li>accumulator：累加器，或者是上次合并后的结果。或者是initialValue</li>\n<li>currentValue：迭代的当前值</li>\n<li>【optional】index：数组当前下标。注意是否提供了initialValue</li>\n<li>【optional】array：数组对象</li>\n</ul>\n</li>\n<li>【optional】initialValue：累加器的初始值。如果不指定初始值那就将数组第一个元素值当做初始值并跳过第一个元素。空数组不指定初始值会报错。</li>\n</ul>\n<h3 id=\"使用场景-2\"><a href=\"#使用场景-2\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>这三个函数中，reduce是最有艺术感的，他能把数组中的所有元素值进行一个一个合并生成最后的结果。</p>\n<h4 id=\"简单sum求和\"><a href=\"#简单sum求和\" class=\"headerlink\" title=\"简单sum求和\"></a>简单sum求和</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> result=arr.reduce(<span class=\"function\">(<span class=\"params\">sum,cur</span>)=&gt;</span>sum+cur);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">//15</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"多次复合函数\"><a href=\"#多次复合函数\" class=\"headerlink\" title=\"多次复合函数\"></a>多次复合函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> compose = <span class=\"function\">(<span class=\"params\">x,...fns</span>)=&gt;</span>fns.reduceRight(<span class=\"function\">(<span class=\"params\">f,g</span>)=&gt;</span>g(f),x);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fn1=<span class=\"function\"><span class=\"params\">x</span>=&gt;</span>x**<span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> fn2=<span class=\"function\"><span class=\"params\">x</span>=&gt;</span>x+<span class=\"number\">11</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> result=compose(x,fn1,fn2);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">//(x+11)**2===(1+11)**2===144</span></span><br><span class=\"line\"><span class=\"comment\">//144</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Promise-Chain\"><a href=\"#Promise-Chain\" class=\"headerlink\" title=\"Promise Chain\"></a>Promise Chain</h3><p>之前写过一篇关于使用JavaScript实现一个任务队列的。</p>\n<p>如果使用reduce的话会显得代码很简洁。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Queue</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.tasks = [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">task</span>(<span class=\"params\">delay, callback</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.tasks.push(&#123; delay, callback &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">start</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.tasks.length === <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.tasks.reduce(<span class=\"function\">(<span class=\"params\">s,x</span>)=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> s.then(<span class=\"function\"><span class=\"params\">r</span>=&gt;</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">                        x.callback();</span><br><span class=\"line\">                        resolve();</span><br><span class=\"line\">                    &#125;,x.delay);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;,<span class=\"built_in\">Promise</span>.resolve()).then(<span class=\"function\"><span class=\"params\">x</span>=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.tasks=[];</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Queue()</span><br><span class=\"line\">    .task(<span class=\"number\">1000</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .task(<span class=\"number\">2000</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .task(<span class=\"number\">3000</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .start();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其他应用场景\"><a href=\"#其他应用场景\" class=\"headerlink\" title=\"其他应用场景\"></a>其他应用场景</h3><p>其他场景还有很多，关键点就是迭代合并操作。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>一些用法还不是很熟练，比如promise，接下来会加强这一部分的连接。再见！</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://medium.com/jsguru/javascript-functional-programming-map-filter-and-reduce-846ff9ba492d\">JavaScript Functional Programming — map, filter and reduce</a></li>\n</ul>"},{"title":"JavaScript必知33个概念系列：原始数据类型和对象属性【WIP】","mathjax":false,"copyright":true,"comment":true,"date":"2019-11-24T10:36:50.000Z","_content":"\n{% note primary %}\nnumber、boolean、null、undefined、string、bigint、symbol\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 前言\n\n这篇文章会总结一下JS的原始类型和对象属性相关的问题。关于类型隐式转换会在后续文章中总结。\n\n本篇文章大致会涉及以下内容：\n- 各种原始数据类型介绍\n- 原始数据类型的自动装箱和拆箱\n- 对象数据属性和对象访问属性\n- 对象属性描述符\n\n\n## 原始数据类型\n\n根据[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Primitive_values)的说法，ECMAScript标准定义了8种数据类型：\n\n- Seven data types that are primitives:\n  - Boolean\n  - Null\n  - Undefined\n  - Number\n  - BigInt\n  - String\n  - Symbol\n- and Object\n\n### Number Type&BigInt\n\n之前写过一篇文章，是关于JS的number类型的，JS中没有Integer，只有double-float（虽然关于位运算提供了一层32位抽象），关于IEEE754标准已经写过几篇文章了，这篇文章不会再提及。有兴趣的可以看一下这两篇文章：\n\n- [IEEE754 实例 ——JS 中的 Number 类型](/ieee754-float-instance-js.html)\n- [有关计算机浮点数的思考。](/float-think.html)\n\n接下来总结一些常用点：\n\n```javascript\nNaN!==NaN//true，规定\nNaN===NaN//false\n1>NaN//false\n1<=NaN//false\n```\n\n### Boolean\n> `true` or `false`\n\n```javascript\nBoolean(false)//false\nBoolean(\"false\")//true\nBoolean(new Boolean(false))//true\nBoolean(true)//true\nBoolean({})//true\nBoolean(undefined)//false\nBoolean(null)//false\nBoolean([])//true\n```\n\n### Null\n> `null`\n\n一般把`null`考虑为一个对象引用，这个对象引用为空。\n\n```javascript\ntypeof null//object\n```\n\n### Undefined\n> `undefined`\n\n一切声明但未初始化的变量值为`undefined`，对于`var`声明的变量仅在执行上下文创建时期引起的变量提升初值为`undefined`\n\n### String\n> immutable,too。不像C语言那样可以改。\n\n```javascript\nlet test=\"abc\";\ntest[0]='d';\ntest//abc\n```\n\n### Symbol\n\n> 独一无二，不可修改，可用作对象属性的key\n\n\n## Wrapper & Auto-Boxing\n\n原始类型没有对象类型的优点，比如内置属性方法什么的，所以就有了一些原始类型的封装类，称之为`Wrapper Object`。\n\n比如这些：\n- String\n- Boolean\n- Number\n- ...\n\n就以`String`函数举例，使用它有两种方式：\n\n- 以普通函数方式，将入参转换为字符串并返回对应String的原始类型\n  ```javascript\n  String(1337); // \"1337\"\n  String(true); // \"true\"\n  String(null); // \"null\"\n  String(undefined); // \"undefined\"\n  String(); // \"\"\n  String(\"dog\") === \"dog\" // true\n  typeof String(\"dog\"); // \"string\"\n  ```\n- 以构造函数方式，创建一个对应类型的封装对象`wrapper object`\n  ```javascript\n  const pet = new String(\"dog\")\n  typeof pet; // \"object\"\n  pet === \"dog\"; // false\n  //pet是一个对象\n  /*\n  {\n    0: \"d\",\n    1: \"o\",\n    2: \"g\",\n    length: 3\n  }\n  */\n  ```\n  \n\n## Data property & accessor property\n\n## Property Descriptor\n\n## Reference\n\n- [(Not) Everything in JavaScript is an Object](http://blog.brew.com.hk/not-everything-in-javascript-is-an-object/)\n- [The Secret Life of JavaScript Primitives](https://javascriptweblog.wordpress.com/2010/09/27/the-secret-life-of-javascript-primitives/)\n- [Diving Deeper in JavaScripts Objects](https://blog.bitsrc.io/diving-deeper-in-javascripts-objects-318b1e13dc12)\n- [The differences between Object.freeze() vs Const in JavaScript](https://medium.com/@bolajiayodejithe-differences-between-object-freeze-vs-const-in-javascript-4eacea534d7c)","source":"_posts/js-concept-2-primitive-type.md","raw":"---\ntitle: JavaScript必知33个概念系列：原始数据类型和对象属性【WIP】\nmathjax: false\ncopyright: true\ncomment: true\ndate: 2019-11-24 18:36:50\ntags:\n- JavaScript\n- 33 JS Concept\ncategories:\n- Front-End Development\n- JavaScript\n\n---\n\n{% note primary %}\nnumber、boolean、null、undefined、string、bigint、symbol\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 前言\n\n这篇文章会总结一下JS的原始类型和对象属性相关的问题。关于类型隐式转换会在后续文章中总结。\n\n本篇文章大致会涉及以下内容：\n- 各种原始数据类型介绍\n- 原始数据类型的自动装箱和拆箱\n- 对象数据属性和对象访问属性\n- 对象属性描述符\n\n\n## 原始数据类型\n\n根据[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Primitive_values)的说法，ECMAScript标准定义了8种数据类型：\n\n- Seven data types that are primitives:\n  - Boolean\n  - Null\n  - Undefined\n  - Number\n  - BigInt\n  - String\n  - Symbol\n- and Object\n\n### Number Type&BigInt\n\n之前写过一篇文章，是关于JS的number类型的，JS中没有Integer，只有double-float（虽然关于位运算提供了一层32位抽象），关于IEEE754标准已经写过几篇文章了，这篇文章不会再提及。有兴趣的可以看一下这两篇文章：\n\n- [IEEE754 实例 ——JS 中的 Number 类型](/ieee754-float-instance-js.html)\n- [有关计算机浮点数的思考。](/float-think.html)\n\n接下来总结一些常用点：\n\n```javascript\nNaN!==NaN//true，规定\nNaN===NaN//false\n1>NaN//false\n1<=NaN//false\n```\n\n### Boolean\n> `true` or `false`\n\n```javascript\nBoolean(false)//false\nBoolean(\"false\")//true\nBoolean(new Boolean(false))//true\nBoolean(true)//true\nBoolean({})//true\nBoolean(undefined)//false\nBoolean(null)//false\nBoolean([])//true\n```\n\n### Null\n> `null`\n\n一般把`null`考虑为一个对象引用，这个对象引用为空。\n\n```javascript\ntypeof null//object\n```\n\n### Undefined\n> `undefined`\n\n一切声明但未初始化的变量值为`undefined`，对于`var`声明的变量仅在执行上下文创建时期引起的变量提升初值为`undefined`\n\n### String\n> immutable,too。不像C语言那样可以改。\n\n```javascript\nlet test=\"abc\";\ntest[0]='d';\ntest//abc\n```\n\n### Symbol\n\n> 独一无二，不可修改，可用作对象属性的key\n\n\n## Wrapper & Auto-Boxing\n\n原始类型没有对象类型的优点，比如内置属性方法什么的，所以就有了一些原始类型的封装类，称之为`Wrapper Object`。\n\n比如这些：\n- String\n- Boolean\n- Number\n- ...\n\n就以`String`函数举例，使用它有两种方式：\n\n- 以普通函数方式，将入参转换为字符串并返回对应String的原始类型\n  ```javascript\n  String(1337); // \"1337\"\n  String(true); // \"true\"\n  String(null); // \"null\"\n  String(undefined); // \"undefined\"\n  String(); // \"\"\n  String(\"dog\") === \"dog\" // true\n  typeof String(\"dog\"); // \"string\"\n  ```\n- 以构造函数方式，创建一个对应类型的封装对象`wrapper object`\n  ```javascript\n  const pet = new String(\"dog\")\n  typeof pet; // \"object\"\n  pet === \"dog\"; // false\n  //pet是一个对象\n  /*\n  {\n    0: \"d\",\n    1: \"o\",\n    2: \"g\",\n    length: 3\n  }\n  */\n  ```\n  \n\n## Data property & accessor property\n\n## Property Descriptor\n\n## Reference\n\n- [(Not) Everything in JavaScript is an Object](http://blog.brew.com.hk/not-everything-in-javascript-is-an-object/)\n- [The Secret Life of JavaScript Primitives](https://javascriptweblog.wordpress.com/2010/09/27/the-secret-life-of-javascript-primitives/)\n- [Diving Deeper in JavaScripts Objects](https://blog.bitsrc.io/diving-deeper-in-javascripts-objects-318b1e13dc12)\n- [The differences between Object.freeze() vs Const in JavaScript](https://medium.com/@bolajiayodejithe-differences-between-object-freeze-vs-const-in-javascript-4eacea534d7c)","slug":"js-concept-2-primitive-type","published":1,"updated":"2022-01-06T04:09:12.464Z","_id":"cksq5v7mr0030n0pu14kdascj","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note primary\"><p>number、boolean、null、undefined、string、bigint、symbol</p>\n</div>\n\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>这篇文章会总结一下JS的原始类型和对象属性相关的问题。关于类型隐式转换会在后续文章中总结。</p>\n<p>本篇文章大致会涉及以下内容：</p>\n<ul>\n<li>各种原始数据类型介绍</li>\n<li>原始数据类型的自动装箱和拆箱</li>\n<li>对象数据属性和对象访问属性</li>\n<li>对象属性描述符</li>\n</ul>\n<h2 id=\"原始数据类型\"><a href=\"#原始数据类型\" class=\"headerlink\" title=\"原始数据类型\"></a>原始数据类型</h2><p>根据<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Primitive_values\">MDN</a>的说法，ECMAScript标准定义了8种数据类型：</p>\n<ul>\n<li>Seven data types that are primitives:<ul>\n<li>Boolean</li>\n<li>Null</li>\n<li>Undefined</li>\n<li>Number</li>\n<li>BigInt</li>\n<li>String</li>\n<li>Symbol</li>\n</ul>\n</li>\n<li>and Object</li>\n</ul>\n<h3 id=\"Number-Type-amp-BigInt\"><a href=\"#Number-Type-amp-BigInt\" class=\"headerlink\" title=\"Number Type&amp;BigInt\"></a>Number Type&amp;BigInt</h3><p>之前写过一篇文章，是关于JS的number类型的，JS中没有Integer，只有double-float（虽然关于位运算提供了一层32位抽象），关于IEEE754标准已经写过几篇文章了，这篇文章不会再提及。有兴趣的可以看一下这两篇文章：</p>\n<ul>\n<li><a href=\"/ieee754-float-instance-js.html\">IEEE754 实例 ——JS 中的 Number 类型</a></li>\n<li><a href=\"/float-think.html\">有关计算机浮点数的思考。</a></li>\n</ul>\n<p>接下来总结一些常用点：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">NaN</span>!==<span class=\"literal\">NaN</span><span class=\"comment\">//true，规定</span></span><br><span class=\"line\"><span class=\"literal\">NaN</span>===<span class=\"literal\">NaN</span><span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"number\">1</span>&gt;<span class=\"literal\">NaN</span><span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"number\">1</span>&lt;=<span class=\"literal\">NaN</span><span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Boolean\"><a href=\"#Boolean\" class=\"headerlink\" title=\"Boolean\"></a>Boolean</h3><blockquote>\n<p><code>true</code> or <code>false</code></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Boolean</span>(<span class=\"literal\">false</span>)<span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">Boolean</span>(<span class=\"string\">&quot;false&quot;</span>)<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">Boolean</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">Boolean</span>(<span class=\"literal\">false</span>))<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">Boolean</span>(<span class=\"literal\">true</span>)<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">Boolean</span>(&#123;&#125;)<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">Boolean</span>(<span class=\"literal\">undefined</span>)<span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">Boolean</span>(<span class=\"literal\">null</span>)<span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">Boolean</span>([])<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Null\"><a href=\"#Null\" class=\"headerlink\" title=\"Null\"></a>Null</h3><blockquote>\n<p><code>null</code></p>\n</blockquote>\n<p>一般把<code>null</code>考虑为一个对象引用，这个对象引用为空。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">null</span><span class=\"comment\">//object</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Undefined\"><a href=\"#Undefined\" class=\"headerlink\" title=\"Undefined\"></a>Undefined</h3><blockquote>\n<p><code>undefined</code></p>\n</blockquote>\n<p>一切声明但未初始化的变量值为<code>undefined</code>，对于<code>var</code>声明的变量仅在执行上下文创建时期引起的变量提升初值为<code>undefined</code></p>\n<h3 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h3><blockquote>\n<p>immutable,too。不像C语言那样可以改。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> test=<span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\">test[<span class=\"number\">0</span>]=<span class=\"string\">&#x27;d&#x27;</span>;</span><br><span class=\"line\">test<span class=\"comment\">//abc</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Symbol\"><a href=\"#Symbol\" class=\"headerlink\" title=\"Symbol\"></a>Symbol</h3><blockquote>\n<p>独一无二，不可修改，可用作对象属性的key</p>\n</blockquote>\n<h2 id=\"Wrapper-amp-Auto-Boxing\"><a href=\"#Wrapper-amp-Auto-Boxing\" class=\"headerlink\" title=\"Wrapper &amp; Auto-Boxing\"></a>Wrapper &amp; Auto-Boxing</h2><p>原始类型没有对象类型的优点，比如内置属性方法什么的，所以就有了一些原始类型的封装类，称之为<code>Wrapper Object</code>。</p>\n<p>比如这些：</p>\n<ul>\n<li>String</li>\n<li>Boolean</li>\n<li>Number</li>\n<li>…</li>\n</ul>\n<p>就以<code>String</code>函数举例，使用它有两种方式：</p>\n<ul>\n<li>以普通函数方式，将入参转换为字符串并返回对应String的原始类型<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>(<span class=\"number\">1337</span>); <span class=\"comment\">// &quot;1337&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>(<span class=\"literal\">true</span>); <span class=\"comment\">// &quot;true&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>(<span class=\"literal\">null</span>); <span class=\"comment\">// &quot;null&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>(<span class=\"literal\">undefined</span>); <span class=\"comment\">// &quot;undefined&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>(); <span class=\"comment\">// &quot;&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>(<span class=\"string\">&quot;dog&quot;</span>) === <span class=\"string\">&quot;dog&quot;</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"built_in\">String</span>(<span class=\"string\">&quot;dog&quot;</span>); <span class=\"comment\">// &quot;string&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li>以构造函数方式，创建一个对应类型的封装对象<code>wrapper object</code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> pet = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">&quot;dog&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">typeof</span> pet; <span class=\"comment\">// &quot;object&quot;</span></span><br><span class=\"line\">pet === <span class=\"string\">&quot;dog&quot;</span>; <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"comment\">//pet是一个对象</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">  0: &quot;d&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">  1: &quot;o&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">  2: &quot;g&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">  length: 3</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"Data-property-amp-accessor-property\"><a href=\"#Data-property-amp-accessor-property\" class=\"headerlink\" title=\"Data property &amp; accessor property\"></a>Data property &amp; accessor property</h2><h2 id=\"Property-Descriptor\"><a href=\"#Property-Descriptor\" class=\"headerlink\" title=\"Property Descriptor\"></a>Property Descriptor</h2><h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"http://blog.brew.com.hk/not-everything-in-javascript-is-an-object/\">(Not) Everything in JavaScript is an Object</a></li>\n<li><a href=\"https://javascriptweblog.wordpress.com/2010/09/27/the-secret-life-of-javascript-primitives/\">The Secret Life of JavaScript Primitives</a></li>\n<li><a href=\"https://blog.bitsrc.io/diving-deeper-in-javascripts-objects-318b1e13dc12\">Diving Deeper in JavaScripts Objects</a></li>\n<li><a href=\"https://medium.com/@bolajiayodejithe-differences-between-object-freeze-vs-const-in-javascript-4eacea534d7c\">The differences between Object.freeze() vs Const in JavaScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note primary\"><p>number、boolean、null、undefined、string、bigint、symbol</p>\n</div>","more":"<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>这篇文章会总结一下JS的原始类型和对象属性相关的问题。关于类型隐式转换会在后续文章中总结。</p>\n<p>本篇文章大致会涉及以下内容：</p>\n<ul>\n<li>各种原始数据类型介绍</li>\n<li>原始数据类型的自动装箱和拆箱</li>\n<li>对象数据属性和对象访问属性</li>\n<li>对象属性描述符</li>\n</ul>\n<h2 id=\"原始数据类型\"><a href=\"#原始数据类型\" class=\"headerlink\" title=\"原始数据类型\"></a>原始数据类型</h2><p>根据<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Primitive_values\">MDN</a>的说法，ECMAScript标准定义了8种数据类型：</p>\n<ul>\n<li>Seven data types that are primitives:<ul>\n<li>Boolean</li>\n<li>Null</li>\n<li>Undefined</li>\n<li>Number</li>\n<li>BigInt</li>\n<li>String</li>\n<li>Symbol</li>\n</ul>\n</li>\n<li>and Object</li>\n</ul>\n<h3 id=\"Number-Type-amp-BigInt\"><a href=\"#Number-Type-amp-BigInt\" class=\"headerlink\" title=\"Number Type&amp;BigInt\"></a>Number Type&amp;BigInt</h3><p>之前写过一篇文章，是关于JS的number类型的，JS中没有Integer，只有double-float（虽然关于位运算提供了一层32位抽象），关于IEEE754标准已经写过几篇文章了，这篇文章不会再提及。有兴趣的可以看一下这两篇文章：</p>\n<ul>\n<li><a href=\"/ieee754-float-instance-js.html\">IEEE754 实例 ——JS 中的 Number 类型</a></li>\n<li><a href=\"/float-think.html\">有关计算机浮点数的思考。</a></li>\n</ul>\n<p>接下来总结一些常用点：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">NaN</span>!==<span class=\"literal\">NaN</span><span class=\"comment\">//true，规定</span></span><br><span class=\"line\"><span class=\"literal\">NaN</span>===<span class=\"literal\">NaN</span><span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"number\">1</span>&gt;<span class=\"literal\">NaN</span><span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"number\">1</span>&lt;=<span class=\"literal\">NaN</span><span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Boolean\"><a href=\"#Boolean\" class=\"headerlink\" title=\"Boolean\"></a>Boolean</h3><blockquote>\n<p><code>true</code> or <code>false</code></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Boolean</span>(<span class=\"literal\">false</span>)<span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">Boolean</span>(<span class=\"string\">&quot;false&quot;</span>)<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">Boolean</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">Boolean</span>(<span class=\"literal\">false</span>))<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">Boolean</span>(<span class=\"literal\">true</span>)<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">Boolean</span>(&#123;&#125;)<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">Boolean</span>(<span class=\"literal\">undefined</span>)<span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">Boolean</span>(<span class=\"literal\">null</span>)<span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">Boolean</span>([])<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Null\"><a href=\"#Null\" class=\"headerlink\" title=\"Null\"></a>Null</h3><blockquote>\n<p><code>null</code></p>\n</blockquote>\n<p>一般把<code>null</code>考虑为一个对象引用，这个对象引用为空。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">null</span><span class=\"comment\">//object</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Undefined\"><a href=\"#Undefined\" class=\"headerlink\" title=\"Undefined\"></a>Undefined</h3><blockquote>\n<p><code>undefined</code></p>\n</blockquote>\n<p>一切声明但未初始化的变量值为<code>undefined</code>，对于<code>var</code>声明的变量仅在执行上下文创建时期引起的变量提升初值为<code>undefined</code></p>\n<h3 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h3><blockquote>\n<p>immutable,too。不像C语言那样可以改。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> test=<span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\">test[<span class=\"number\">0</span>]=<span class=\"string\">&#x27;d&#x27;</span>;</span><br><span class=\"line\">test<span class=\"comment\">//abc</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Symbol\"><a href=\"#Symbol\" class=\"headerlink\" title=\"Symbol\"></a>Symbol</h3><blockquote>\n<p>独一无二，不可修改，可用作对象属性的key</p>\n</blockquote>\n<h2 id=\"Wrapper-amp-Auto-Boxing\"><a href=\"#Wrapper-amp-Auto-Boxing\" class=\"headerlink\" title=\"Wrapper &amp; Auto-Boxing\"></a>Wrapper &amp; Auto-Boxing</h2><p>原始类型没有对象类型的优点，比如内置属性方法什么的，所以就有了一些原始类型的封装类，称之为<code>Wrapper Object</code>。</p>\n<p>比如这些：</p>\n<ul>\n<li>String</li>\n<li>Boolean</li>\n<li>Number</li>\n<li>…</li>\n</ul>\n<p>就以<code>String</code>函数举例，使用它有两种方式：</p>\n<ul>\n<li>以普通函数方式，将入参转换为字符串并返回对应String的原始类型<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>(<span class=\"number\">1337</span>); <span class=\"comment\">// &quot;1337&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>(<span class=\"literal\">true</span>); <span class=\"comment\">// &quot;true&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>(<span class=\"literal\">null</span>); <span class=\"comment\">// &quot;null&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>(<span class=\"literal\">undefined</span>); <span class=\"comment\">// &quot;undefined&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>(); <span class=\"comment\">// &quot;&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>(<span class=\"string\">&quot;dog&quot;</span>) === <span class=\"string\">&quot;dog&quot;</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"built_in\">String</span>(<span class=\"string\">&quot;dog&quot;</span>); <span class=\"comment\">// &quot;string&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li>以构造函数方式，创建一个对应类型的封装对象<code>wrapper object</code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> pet = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">&quot;dog&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">typeof</span> pet; <span class=\"comment\">// &quot;object&quot;</span></span><br><span class=\"line\">pet === <span class=\"string\">&quot;dog&quot;</span>; <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"comment\">//pet是一个对象</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">  0: &quot;d&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">  1: &quot;o&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">  2: &quot;g&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">  length: 3</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"Data-property-amp-accessor-property\"><a href=\"#Data-property-amp-accessor-property\" class=\"headerlink\" title=\"Data property &amp; accessor property\"></a>Data property &amp; accessor property</h2><h2 id=\"Property-Descriptor\"><a href=\"#Property-Descriptor\" class=\"headerlink\" title=\"Property Descriptor\"></a>Property Descriptor</h2><h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"http://blog.brew.com.hk/not-everything-in-javascript-is-an-object/\">(Not) Everything in JavaScript is an Object</a></li>\n<li><a href=\"https://javascriptweblog.wordpress.com/2010/09/27/the-secret-life-of-javascript-primitives/\">The Secret Life of JavaScript Primitives</a></li>\n<li><a href=\"https://blog.bitsrc.io/diving-deeper-in-javascripts-objects-318b1e13dc12\">Diving Deeper in JavaScripts Objects</a></li>\n<li><a href=\"https://medium.com/@bolajiayodejithe-differences-between-object-freeze-vs-const-in-javascript-4eacea534d7c\">The differences between Object.freeze() vs Const in JavaScript</a></li>\n</ul>"},{"title":"JavaScript必知33个概念系列：闭包","mathjax":false,"copyright":true,"comment":true,"date":"2019-11-15T08:18:57.000Z","_content":"\n{% note primary %}\n闭包是函数及其创建时保存的状态环境。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n\n## 前言\n\nJavaScript中的闭包是区别于离散数学中的闭包。让我们仔细探讨一下JavaScript中的闭包吧。\n\n## 闭包\n\n### 什么是闭包\n> A closure is the combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment). In other words, a closure gives you access to an outer function’s scope from an inner function. In JavaScript, closures are created every time a function is created, at function creation time.(MDN)\n\n也就是说，闭包是函数及其创建时保存的引用状态环境。\n\n### 用闭包模拟私有方法\n\n例如**Java**允许定义私有方法，这样只允许类内的其他方法使用，无法通过类的实例访问。\n有如下代码\n```java\nclass Counter{\n    private int privateCounter=0;\n    private void changeBy(int val){\n        this.privateCounter+=val;\n    }\n    public void increment(){\n        changeBy(1);\n    }\n    public void decrement(){\n        changeBy(-1);\n    }\n    public int value(){\n        return privateCounter;\n    }\n}\n```\n\n我们可以使用JavaScript来实现。\n\n```javascript\nvar makeCounter = function() {\n  var privateCounter = 0;\n  function changeBy(val) {\n    privateCounter += val;\n  }\n  return {\n    increment: function() {\n      changeBy(1);\n    },\n    decrement: function() {\n      changeBy(-1);\n    },\n    value: function() {\n      return privateCounter;\n    }\n  };\n};\nvar counter = makeCounter();\nconsole.log(counter.value()); // logs 0\ncounter.increment();\ncounter.increment();\nconsole.log(counter.value()); // logs 2\ncounter.decrement();\nconsole.log(counter.value()); // logs 1\n```\n\n\n\n\n### 闭包作用域链\n\n关于作用域链可以查看以前的文章：[JavaScript必知33个概念系列：作用域](http://blog.scarboroughcoral.topjs-concept-7-scope.html)\n\n每个闭包的作用域分为三个：\n- 闭包自己的作用域\n- 外部函数作用域\n- 全局作用域\n\n```javascript\n// global scope\nvar e = 10;\nfunction sum(a){\n  return function(b){\n    return function(c){\n      // outer functions scope\n      return function(d){\n        // local scope\n        return a + b + c + d + e;\n      }\n    }\n  }\n}\n\nconsole.log(sum(1)(2)(3)(4)); // log 20\n```\n\n每个函数都能访问外部函数作用域和全局作用域，即每个函数都能够访问作用域链上游作用域的全部变量。\n\n### 闭包的典型错误问题：循环创建闭包\n\n如下代码：\n\n```html\n<p id=\"help\">Helpful notes will appear here</p>\n<p>E-mail: <input type=\"text\" id=\"email\" name=\"email\"></p>\n<p>Name: <input type=\"text\" id=\"name\" name=\"name\"></p>\n<p>Age: <input type=\"text\" id=\"age\" name=\"age\"></p>\n```\n\n```javascript\nfunction showHelp(help) {\n  document.getElementById('help').innerHTML = help;\n}\n\nfunction setupHelp() {\n  var helpText = [\n      {'id': 'email', 'help': 'Your e-mail address'},\n      {'id': 'name', 'help': 'Your full name'},\n      {'id': 'age', 'help': 'Your age (you must be over 16)'}\n    ];\n\n  for (var i = 0; i < helpText.length; i++) {\n    var item = helpText[i];\n    document.getElementById(item.id).onfocus = function() {\n      showHelp(item.help);\n    }\n  }\n}\n\nsetupHelp();\n```\n\n以上执行结果就是总是弹出最后一项内容提示，因为`var`是函数作用域的，所有创建的闭包都是引用的同一个对象item。\n\n**解决办法就是使用`let`或者是立即执行函数，`foreach`迭代也可以**\n\n### 闭包性能问题\n\n- 不必要的闭包会影响脚本效率，包括处理速度和内存消耗。\n\n比较下面两组代码：\n\n```javascript text1\nfunction MyObject(name, message) {\n  this.name = name.toString();\n  this.message = message.toString();\n  this.getName = function() {\n    return this.name;\n  };\n\n  this.getMessage = function() {\n    return this.message;\n  };\n}\n```\n\n```javascript text2\nfunction MyObject(name, message) {\n  this.name = name.toString();\n  this.message = message.toString();\n}\nMyObject.prototype.getName = function() {\n  return this.name;\n};\nMyObject.prototype.getMessage = function() {\n  return this.message;\n};\n```\n\ntext1在构造函数内部创建了闭包，而且每次创建一个对象都会创建一个函数对象 。\ntext2使用原型定义函数，不同的对象只有一个函数对象副本。\n\n\n## 总结\n还有一些深入话题没有总结，目前水平还不够，to be continued。\n\n\n## Reference\n\n- [Closures](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures)","source":"_posts/js-concept-21-closures.md","raw":"---\ntitle: JavaScript必知33个概念系列：闭包\nmathjax: false\ncopyright: true\ncomment: true\ndate: 2019-11-15 16:18:57\ntags:\n- JavaScript\n- 33 JS Concept\ncategories:\n- Front-End Development\n- JavaScript\n\n---\n\n{% note primary %}\n闭包是函数及其创建时保存的状态环境。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n\n## 前言\n\nJavaScript中的闭包是区别于离散数学中的闭包。让我们仔细探讨一下JavaScript中的闭包吧。\n\n## 闭包\n\n### 什么是闭包\n> A closure is the combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment). In other words, a closure gives you access to an outer function’s scope from an inner function. In JavaScript, closures are created every time a function is created, at function creation time.(MDN)\n\n也就是说，闭包是函数及其创建时保存的引用状态环境。\n\n### 用闭包模拟私有方法\n\n例如**Java**允许定义私有方法，这样只允许类内的其他方法使用，无法通过类的实例访问。\n有如下代码\n```java\nclass Counter{\n    private int privateCounter=0;\n    private void changeBy(int val){\n        this.privateCounter+=val;\n    }\n    public void increment(){\n        changeBy(1);\n    }\n    public void decrement(){\n        changeBy(-1);\n    }\n    public int value(){\n        return privateCounter;\n    }\n}\n```\n\n我们可以使用JavaScript来实现。\n\n```javascript\nvar makeCounter = function() {\n  var privateCounter = 0;\n  function changeBy(val) {\n    privateCounter += val;\n  }\n  return {\n    increment: function() {\n      changeBy(1);\n    },\n    decrement: function() {\n      changeBy(-1);\n    },\n    value: function() {\n      return privateCounter;\n    }\n  };\n};\nvar counter = makeCounter();\nconsole.log(counter.value()); // logs 0\ncounter.increment();\ncounter.increment();\nconsole.log(counter.value()); // logs 2\ncounter.decrement();\nconsole.log(counter.value()); // logs 1\n```\n\n\n\n\n### 闭包作用域链\n\n关于作用域链可以查看以前的文章：[JavaScript必知33个概念系列：作用域](http://blog.scarboroughcoral.topjs-concept-7-scope.html)\n\n每个闭包的作用域分为三个：\n- 闭包自己的作用域\n- 外部函数作用域\n- 全局作用域\n\n```javascript\n// global scope\nvar e = 10;\nfunction sum(a){\n  return function(b){\n    return function(c){\n      // outer functions scope\n      return function(d){\n        // local scope\n        return a + b + c + d + e;\n      }\n    }\n  }\n}\n\nconsole.log(sum(1)(2)(3)(4)); // log 20\n```\n\n每个函数都能访问外部函数作用域和全局作用域，即每个函数都能够访问作用域链上游作用域的全部变量。\n\n### 闭包的典型错误问题：循环创建闭包\n\n如下代码：\n\n```html\n<p id=\"help\">Helpful notes will appear here</p>\n<p>E-mail: <input type=\"text\" id=\"email\" name=\"email\"></p>\n<p>Name: <input type=\"text\" id=\"name\" name=\"name\"></p>\n<p>Age: <input type=\"text\" id=\"age\" name=\"age\"></p>\n```\n\n```javascript\nfunction showHelp(help) {\n  document.getElementById('help').innerHTML = help;\n}\n\nfunction setupHelp() {\n  var helpText = [\n      {'id': 'email', 'help': 'Your e-mail address'},\n      {'id': 'name', 'help': 'Your full name'},\n      {'id': 'age', 'help': 'Your age (you must be over 16)'}\n    ];\n\n  for (var i = 0; i < helpText.length; i++) {\n    var item = helpText[i];\n    document.getElementById(item.id).onfocus = function() {\n      showHelp(item.help);\n    }\n  }\n}\n\nsetupHelp();\n```\n\n以上执行结果就是总是弹出最后一项内容提示，因为`var`是函数作用域的，所有创建的闭包都是引用的同一个对象item。\n\n**解决办法就是使用`let`或者是立即执行函数，`foreach`迭代也可以**\n\n### 闭包性能问题\n\n- 不必要的闭包会影响脚本效率，包括处理速度和内存消耗。\n\n比较下面两组代码：\n\n```javascript text1\nfunction MyObject(name, message) {\n  this.name = name.toString();\n  this.message = message.toString();\n  this.getName = function() {\n    return this.name;\n  };\n\n  this.getMessage = function() {\n    return this.message;\n  };\n}\n```\n\n```javascript text2\nfunction MyObject(name, message) {\n  this.name = name.toString();\n  this.message = message.toString();\n}\nMyObject.prototype.getName = function() {\n  return this.name;\n};\nMyObject.prototype.getMessage = function() {\n  return this.message;\n};\n```\n\ntext1在构造函数内部创建了闭包，而且每次创建一个对象都会创建一个函数对象 。\ntext2使用原型定义函数，不同的对象只有一个函数对象副本。\n\n\n## 总结\n还有一些深入话题没有总结，目前水平还不够，to be continued。\n\n\n## Reference\n\n- [Closures](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures)","slug":"js-concept-21-closures","published":1,"updated":"2022-01-06T04:09:12.464Z","_id":"cksq5v7ms0034n0pucnnr9fca","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note primary\"><p>闭包是函数及其创建时保存的状态环境。</p>\n</div>\n\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>JavaScript中的闭包是区别于离散数学中的闭包。让我们仔细探讨一下JavaScript中的闭包吧。</p>\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><h3 id=\"什么是闭包\"><a href=\"#什么是闭包\" class=\"headerlink\" title=\"什么是闭包\"></a>什么是闭包</h3><blockquote>\n<p>A closure is the combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment). In other words, a closure gives you access to an outer function’s scope from an inner function. In JavaScript, closures are created every time a function is created, at function creation time.(MDN)</p>\n</blockquote>\n<p>也就是说，闭包是函数及其创建时保存的引用状态环境。</p>\n<h3 id=\"用闭包模拟私有方法\"><a href=\"#用闭包模拟私有方法\" class=\"headerlink\" title=\"用闭包模拟私有方法\"></a>用闭包模拟私有方法</h3><p>例如<strong>Java</strong>允许定义私有方法，这样只允许类内的其他方法使用，无法通过类的实例访问。<br>有如下代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Counter</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> privateCounter=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">changeBy</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.privateCounter+=val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">increment</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        changeBy(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">decrement</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        changeBy(-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">value</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> privateCounter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们可以使用JavaScript来实现。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> makeCounter = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> privateCounter = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeBy</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">    privateCounter += val;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">increment</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      changeBy(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">decrement</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      changeBy(-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">value</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> privateCounter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> counter = makeCounter();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(counter.value()); <span class=\"comment\">// logs 0</span></span><br><span class=\"line\">counter.increment();</span><br><span class=\"line\">counter.increment();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(counter.value()); <span class=\"comment\">// logs 2</span></span><br><span class=\"line\">counter.decrement();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(counter.value()); <span class=\"comment\">// logs 1</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n<h3 id=\"闭包作用域链\"><a href=\"#闭包作用域链\" class=\"headerlink\" title=\"闭包作用域链\"></a>闭包作用域链</h3><p>关于作用域链可以查看以前的文章：<a href=\"http://blog.scarboroughcoral.topjs-concept-7-scope.html/\">JavaScript必知33个概念系列：作用域</a></p>\n<p>每个闭包的作用域分为三个：</p>\n<ul>\n<li>闭包自己的作用域</li>\n<li>外部函数作用域</li>\n<li>全局作用域</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// global scope</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">a</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">c</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// outer functions scope</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// local scope</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + b + c + d + e;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>)(<span class=\"number\">4</span>)); <span class=\"comment\">// log 20</span></span><br></pre></td></tr></table></figure>\n\n<p>每个函数都能访问外部函数作用域和全局作用域，即每个函数都能够访问作用域链上游作用域的全部变量。</p>\n<h3 id=\"闭包的典型错误问题：循环创建闭包\"><a href=\"#闭包的典型错误问题：循环创建闭包\" class=\"headerlink\" title=\"闭包的典型错误问题：循环创建闭包\"></a>闭包的典型错误问题：循环创建闭包</h3><p>如下代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;help&quot;</span>&gt;</span>Helpful notes will appear here<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>E-mail: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;email&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;email&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Name: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Age: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;age&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;age&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showHelp</span>(<span class=\"params\">help</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;help&#x27;</span>).innerHTML = help;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setupHelp</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> helpText = [</span><br><span class=\"line\">      &#123;<span class=\"string\">&#x27;id&#x27;</span>: <span class=\"string\">&#x27;email&#x27;</span>, <span class=\"string\">&#x27;help&#x27;</span>: <span class=\"string\">&#x27;Your e-mail address&#x27;</span>&#125;,</span><br><span class=\"line\">      &#123;<span class=\"string\">&#x27;id&#x27;</span>: <span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;help&#x27;</span>: <span class=\"string\">&#x27;Your full name&#x27;</span>&#125;,</span><br><span class=\"line\">      &#123;<span class=\"string\">&#x27;id&#x27;</span>: <span class=\"string\">&#x27;age&#x27;</span>, <span class=\"string\">&#x27;help&#x27;</span>: <span class=\"string\">&#x27;Your age (you must be over 16)&#x27;</span>&#125;</span><br><span class=\"line\">    ];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; helpText.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> item = helpText[i];</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(item.id).onfocus = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      showHelp(item.help);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">setupHelp();</span><br></pre></td></tr></table></figure>\n\n<p>以上执行结果就是总是弹出最后一项内容提示，因为<code>var</code>是函数作用域的，所有创建的闭包都是引用的同一个对象item。</p>\n<p><strong>解决办法就是使用<code>let</code>或者是立即执行函数，<code>foreach</code>迭代也可以</strong></p>\n<h3 id=\"闭包性能问题\"><a href=\"#闭包性能问题\" class=\"headerlink\" title=\"闭包性能问题\"></a>闭包性能问题</h3><ul>\n<li>不必要的闭包会影响脚本效率，包括处理速度和内存消耗。</li>\n</ul>\n<p>比较下面两组代码：</p>\n<figure class=\"highlight javascript\"><figcaption><span>text1</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyObject</span>(<span class=\"params\">name, message</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name.toString();</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.message = message.toString();</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.getMessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.message;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><figcaption><span>text2</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyObject</span>(<span class=\"params\">name, message</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name.toString();</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.message = message.toString();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">MyObject.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">MyObject.prototype.getMessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.message;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>text1在构造函数内部创建了闭包，而且每次创建一个对象都会创建一个函数对象 。<br>text2使用原型定义函数，不同的对象只有一个函数对象副本。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>还有一些深入话题没有总结，目前水平还不够，to be continued。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures\">Closures</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note primary\"><p>闭包是函数及其创建时保存的状态环境。</p>\n</div>","more":"<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>JavaScript中的闭包是区别于离散数学中的闭包。让我们仔细探讨一下JavaScript中的闭包吧。</p>\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><h3 id=\"什么是闭包\"><a href=\"#什么是闭包\" class=\"headerlink\" title=\"什么是闭包\"></a>什么是闭包</h3><blockquote>\n<p>A closure is the combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment). In other words, a closure gives you access to an outer function’s scope from an inner function. In JavaScript, closures are created every time a function is created, at function creation time.(MDN)</p>\n</blockquote>\n<p>也就是说，闭包是函数及其创建时保存的引用状态环境。</p>\n<h3 id=\"用闭包模拟私有方法\"><a href=\"#用闭包模拟私有方法\" class=\"headerlink\" title=\"用闭包模拟私有方法\"></a>用闭包模拟私有方法</h3><p>例如<strong>Java</strong>允许定义私有方法，这样只允许类内的其他方法使用，无法通过类的实例访问。<br>有如下代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Counter</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> privateCounter=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">changeBy</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.privateCounter+=val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">increment</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        changeBy(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">decrement</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        changeBy(-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">value</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> privateCounter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们可以使用JavaScript来实现。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> makeCounter = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> privateCounter = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeBy</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">    privateCounter += val;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">increment</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      changeBy(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">decrement</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      changeBy(-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">value</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> privateCounter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> counter = makeCounter();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(counter.value()); <span class=\"comment\">// logs 0</span></span><br><span class=\"line\">counter.increment();</span><br><span class=\"line\">counter.increment();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(counter.value()); <span class=\"comment\">// logs 2</span></span><br><span class=\"line\">counter.decrement();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(counter.value()); <span class=\"comment\">// logs 1</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n<h3 id=\"闭包作用域链\"><a href=\"#闭包作用域链\" class=\"headerlink\" title=\"闭包作用域链\"></a>闭包作用域链</h3><p>关于作用域链可以查看以前的文章：<a href=\"http://blog.scarboroughcoral.topjs-concept-7-scope.html/\">JavaScript必知33个概念系列：作用域</a></p>\n<p>每个闭包的作用域分为三个：</p>\n<ul>\n<li>闭包自己的作用域</li>\n<li>外部函数作用域</li>\n<li>全局作用域</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// global scope</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">a</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">c</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// outer functions scope</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// local scope</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + b + c + d + e;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>)(<span class=\"number\">4</span>)); <span class=\"comment\">// log 20</span></span><br></pre></td></tr></table></figure>\n\n<p>每个函数都能访问外部函数作用域和全局作用域，即每个函数都能够访问作用域链上游作用域的全部变量。</p>\n<h3 id=\"闭包的典型错误问题：循环创建闭包\"><a href=\"#闭包的典型错误问题：循环创建闭包\" class=\"headerlink\" title=\"闭包的典型错误问题：循环创建闭包\"></a>闭包的典型错误问题：循环创建闭包</h3><p>如下代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;help&quot;</span>&gt;</span>Helpful notes will appear here<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>E-mail: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;email&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;email&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Name: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Age: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;age&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;age&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showHelp</span>(<span class=\"params\">help</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;help&#x27;</span>).innerHTML = help;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setupHelp</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> helpText = [</span><br><span class=\"line\">      &#123;<span class=\"string\">&#x27;id&#x27;</span>: <span class=\"string\">&#x27;email&#x27;</span>, <span class=\"string\">&#x27;help&#x27;</span>: <span class=\"string\">&#x27;Your e-mail address&#x27;</span>&#125;,</span><br><span class=\"line\">      &#123;<span class=\"string\">&#x27;id&#x27;</span>: <span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;help&#x27;</span>: <span class=\"string\">&#x27;Your full name&#x27;</span>&#125;,</span><br><span class=\"line\">      &#123;<span class=\"string\">&#x27;id&#x27;</span>: <span class=\"string\">&#x27;age&#x27;</span>, <span class=\"string\">&#x27;help&#x27;</span>: <span class=\"string\">&#x27;Your age (you must be over 16)&#x27;</span>&#125;</span><br><span class=\"line\">    ];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; helpText.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> item = helpText[i];</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(item.id).onfocus = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      showHelp(item.help);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">setupHelp();</span><br></pre></td></tr></table></figure>\n\n<p>以上执行结果就是总是弹出最后一项内容提示，因为<code>var</code>是函数作用域的，所有创建的闭包都是引用的同一个对象item。</p>\n<p><strong>解决办法就是使用<code>let</code>或者是立即执行函数，<code>foreach</code>迭代也可以</strong></p>\n<h3 id=\"闭包性能问题\"><a href=\"#闭包性能问题\" class=\"headerlink\" title=\"闭包性能问题\"></a>闭包性能问题</h3><ul>\n<li>不必要的闭包会影响脚本效率，包括处理速度和内存消耗。</li>\n</ul>\n<p>比较下面两组代码：</p>\n<figure class=\"highlight javascript\"><figcaption><span>text1</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyObject</span>(<span class=\"params\">name, message</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name.toString();</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.message = message.toString();</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.getMessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.message;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><figcaption><span>text2</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyObject</span>(<span class=\"params\">name, message</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name.toString();</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.message = message.toString();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">MyObject.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">MyObject.prototype.getMessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.message;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>text1在构造函数内部创建了闭包，而且每次创建一个对象都会创建一个函数对象 。<br>text2使用原型定义函数，不同的对象只有一个函数对象副本。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>还有一些深入话题没有总结，目前水平还不够，to be continued。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures\">Closures</a></li>\n</ul>"},{"title":"JavaScript必知33个概念系列：执行上下文（栈帧）、作用域、闭包、this之间的关系","mathjax":false,"copyright":true,"comment":true,"date":"2019-11-17T09:12:35.000Z","_content":"\n{% note primary %}\n执行上下文（栈帧）、作用域、闭包、this之间的关系。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 前言\n\n上一篇文章[《JavaScript必知33个概念系列：作用域》](js-concept-7-scope.html)总结的作用域问题，但是有一些关系还是没有整理清楚，本篇文章单独说明执行上下文（栈帧）、作用域、闭包、this之间的关系。\n\n## 执行上下文\n\n执行上下文大体可以分为两种：\n- 全局执行上下文\n- 函数执行上下文\n\n每个执行上下文有两个状态：\n- 创建状态\n- 执行状态\n\n### 全局执行上下文\n\n#### 创建状态\n\n- 创建一个global（window）对象\n- 创建this变量，默认指向window\n- 为全局执行上下文的变量分配内存\n- 为全局执行上下文内的变量赋值为`undefined`\n- 为全局执行上下文的函数分配内存，并将内容存入内存。\n\n#### 执行状态\n\n- 逐行执行\n\n### 函数执行上下文\n\n#### 创建状态\n\n- 创建一个argarguments（参数列表）对象\n- 创建this变量，默认指向window\n- 为当前函数执行上下文内的变量分配内存\n- 为当前函数执行上下文内的变量赋值为`undefined`\n- 为当前函数执行上下文的函数分配内存，并将内容存入内存。\n\n\n#### 执行状态\n\n- 逐行执行\n\n## 作用域\n> MDN 中定义作用域就是当前的执行上下文。\n\n如果在当前函数执行上下文下访问一个变量val，发现当前函数执行上下文内没有，那就向上层执行上下文内找。这条链就称为作用域链。\n\n## 闭包\n\n一个常见的例子\n\n```javascript\nvar count = 0\n\nfunction makeAdder(x) {\n  return function inner (y) {\n    return x + y;\n  };\n}\n\nvar add5 = makeAdder(5);\ncount += add5(2)\n```\n\n利用执行上下文来理解，当调用`makeAdder(5)`之后该函数的执行上下文（包括参数`x`）已经弹出了，但是函数`add5`调用时可以访问`x`，这是因为`makeAdder(5)`返回后创建了闭包，其中保存了`makeAdder`的执行上下文环境，当调用`add5`时，会在闭包环境下创建自己的执行上下文，那么变量就可以沿着作用域链访问了（就可以访问`x`）。\n\n\n## this\n\n`this`存在于当前执行上下文中，其引用会因绑定方式而决定，请看[JavaScript 必知 33 个概念系列：this、call、bind、apply](http://localhost:4000js-concept-15-this-call-bind-apply.html)。\n\n箭头函数创建执行上下文时不会创建`this`变量，所以内部访问变量时会沿着作用域链向上找。\n\n## Reference\n\n- [The Ultimate Guide to Hoisting, Scopes, and Closures in JavaScript](https://tylermcginnis.com/ultimate-guide-to-execution-contexts-hoisting-scopes-and-closures-in-javascript/)","source":"_posts/js-concept-7-scope-2.md","raw":"---\ntitle: JavaScript必知33个概念系列：执行上下文（栈帧）、作用域、闭包、this之间的关系\nmathjax: false\ncopyright: true\ncomment: true\ndate: 2019-11-17 17:12:35\ntags:\n- JavaScript\n- 33 JS Concept\ncategories:\n- Front-End Development\n- JavaScript\n\n---\n\n{% note primary %}\n执行上下文（栈帧）、作用域、闭包、this之间的关系。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 前言\n\n上一篇文章[《JavaScript必知33个概念系列：作用域》](js-concept-7-scope.html)总结的作用域问题，但是有一些关系还是没有整理清楚，本篇文章单独说明执行上下文（栈帧）、作用域、闭包、this之间的关系。\n\n## 执行上下文\n\n执行上下文大体可以分为两种：\n- 全局执行上下文\n- 函数执行上下文\n\n每个执行上下文有两个状态：\n- 创建状态\n- 执行状态\n\n### 全局执行上下文\n\n#### 创建状态\n\n- 创建一个global（window）对象\n- 创建this变量，默认指向window\n- 为全局执行上下文的变量分配内存\n- 为全局执行上下文内的变量赋值为`undefined`\n- 为全局执行上下文的函数分配内存，并将内容存入内存。\n\n#### 执行状态\n\n- 逐行执行\n\n### 函数执行上下文\n\n#### 创建状态\n\n- 创建一个argarguments（参数列表）对象\n- 创建this变量，默认指向window\n- 为当前函数执行上下文内的变量分配内存\n- 为当前函数执行上下文内的变量赋值为`undefined`\n- 为当前函数执行上下文的函数分配内存，并将内容存入内存。\n\n\n#### 执行状态\n\n- 逐行执行\n\n## 作用域\n> MDN 中定义作用域就是当前的执行上下文。\n\n如果在当前函数执行上下文下访问一个变量val，发现当前函数执行上下文内没有，那就向上层执行上下文内找。这条链就称为作用域链。\n\n## 闭包\n\n一个常见的例子\n\n```javascript\nvar count = 0\n\nfunction makeAdder(x) {\n  return function inner (y) {\n    return x + y;\n  };\n}\n\nvar add5 = makeAdder(5);\ncount += add5(2)\n```\n\n利用执行上下文来理解，当调用`makeAdder(5)`之后该函数的执行上下文（包括参数`x`）已经弹出了，但是函数`add5`调用时可以访问`x`，这是因为`makeAdder(5)`返回后创建了闭包，其中保存了`makeAdder`的执行上下文环境，当调用`add5`时，会在闭包环境下创建自己的执行上下文，那么变量就可以沿着作用域链访问了（就可以访问`x`）。\n\n\n## this\n\n`this`存在于当前执行上下文中，其引用会因绑定方式而决定，请看[JavaScript 必知 33 个概念系列：this、call、bind、apply](http://localhost:4000js-concept-15-this-call-bind-apply.html)。\n\n箭头函数创建执行上下文时不会创建`this`变量，所以内部访问变量时会沿着作用域链向上找。\n\n## Reference\n\n- [The Ultimate Guide to Hoisting, Scopes, and Closures in JavaScript](https://tylermcginnis.com/ultimate-guide-to-execution-contexts-hoisting-scopes-and-closures-in-javascript/)","slug":"js-concept-7-scope-2","published":1,"updated":"2022-01-06T04:09:12.464Z","_id":"cksq5v7mt0038n0puahjoc7z6","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note primary\"><p>执行上下文（栈帧）、作用域、闭包、this之间的关系。</p>\n</div>\n\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>上一篇文章<a href=\"js-concept-7-scope.html\">《JavaScript必知33个概念系列：作用域》</a>总结的作用域问题，但是有一些关系还是没有整理清楚，本篇文章单独说明执行上下文（栈帧）、作用域、闭包、this之间的关系。</p>\n<h2 id=\"执行上下文\"><a href=\"#执行上下文\" class=\"headerlink\" title=\"执行上下文\"></a>执行上下文</h2><p>执行上下文大体可以分为两种：</p>\n<ul>\n<li>全局执行上下文</li>\n<li>函数执行上下文</li>\n</ul>\n<p>每个执行上下文有两个状态：</p>\n<ul>\n<li>创建状态</li>\n<li>执行状态</li>\n</ul>\n<h3 id=\"全局执行上下文\"><a href=\"#全局执行上下文\" class=\"headerlink\" title=\"全局执行上下文\"></a>全局执行上下文</h3><h4 id=\"创建状态\"><a href=\"#创建状态\" class=\"headerlink\" title=\"创建状态\"></a>创建状态</h4><ul>\n<li>创建一个global（window）对象</li>\n<li>创建this变量，默认指向window</li>\n<li>为全局执行上下文的变量分配内存</li>\n<li>为全局执行上下文内的变量赋值为<code>undefined</code></li>\n<li>为全局执行上下文的函数分配内存，并将内容存入内存。</li>\n</ul>\n<h4 id=\"执行状态\"><a href=\"#执行状态\" class=\"headerlink\" title=\"执行状态\"></a>执行状态</h4><ul>\n<li>逐行执行</li>\n</ul>\n<h3 id=\"函数执行上下文\"><a href=\"#函数执行上下文\" class=\"headerlink\" title=\"函数执行上下文\"></a>函数执行上下文</h3><h4 id=\"创建状态-1\"><a href=\"#创建状态-1\" class=\"headerlink\" title=\"创建状态\"></a>创建状态</h4><ul>\n<li>创建一个argarguments（参数列表）对象</li>\n<li>创建this变量，默认指向window</li>\n<li>为当前函数执行上下文内的变量分配内存</li>\n<li>为当前函数执行上下文内的变量赋值为<code>undefined</code></li>\n<li>为当前函数执行上下文的函数分配内存，并将内容存入内存。</li>\n</ul>\n<h4 id=\"执行状态-1\"><a href=\"#执行状态-1\" class=\"headerlink\" title=\"执行状态\"></a>执行状态</h4><ul>\n<li>逐行执行</li>\n</ul>\n<h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><blockquote>\n<p>MDN 中定义作用域就是当前的执行上下文。</p>\n</blockquote>\n<p>如果在当前函数执行上下文下访问一个变量val，发现当前函数执行上下文内没有，那就向上层执行上下文内找。这条链就称为作用域链。</p>\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><p>一个常见的例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeAdder</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inner</span> (<span class=\"params\">y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> add5 = makeAdder(<span class=\"number\">5</span>);</span><br><span class=\"line\">count += add5(<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<p>利用执行上下文来理解，当调用<code>makeAdder(5)</code>之后该函数的执行上下文（包括参数<code>x</code>）已经弹出了，但是函数<code>add5</code>调用时可以访问<code>x</code>，这是因为<code>makeAdder(5)</code>返回后创建了闭包，其中保存了<code>makeAdder</code>的执行上下文环境，当调用<code>add5</code>时，会在闭包环境下创建自己的执行上下文，那么变量就可以沿着作用域链访问了（就可以访问<code>x</code>）。</p>\n<h2 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h2><p><code>this</code>存在于当前执行上下文中，其引用会因绑定方式而决定，请看<a href=\"http://localhost:4000js-concept-15-this-call-bind-apply.html\">JavaScript 必知 33 个概念系列：this、call、bind、apply</a>。</p>\n<p>箭头函数创建执行上下文时不会创建<code>this</code>变量，所以内部访问变量时会沿着作用域链向上找。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://tylermcginnis.com/ultimate-guide-to-execution-contexts-hoisting-scopes-and-closures-in-javascript/\">The Ultimate Guide to Hoisting, Scopes, and Closures in JavaScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note primary\"><p>执行上下文（栈帧）、作用域、闭包、this之间的关系。</p>\n</div>","more":"<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>上一篇文章<a href=\"js-concept-7-scope.html\">《JavaScript必知33个概念系列：作用域》</a>总结的作用域问题，但是有一些关系还是没有整理清楚，本篇文章单独说明执行上下文（栈帧）、作用域、闭包、this之间的关系。</p>\n<h2 id=\"执行上下文\"><a href=\"#执行上下文\" class=\"headerlink\" title=\"执行上下文\"></a>执行上下文</h2><p>执行上下文大体可以分为两种：</p>\n<ul>\n<li>全局执行上下文</li>\n<li>函数执行上下文</li>\n</ul>\n<p>每个执行上下文有两个状态：</p>\n<ul>\n<li>创建状态</li>\n<li>执行状态</li>\n</ul>\n<h3 id=\"全局执行上下文\"><a href=\"#全局执行上下文\" class=\"headerlink\" title=\"全局执行上下文\"></a>全局执行上下文</h3><h4 id=\"创建状态\"><a href=\"#创建状态\" class=\"headerlink\" title=\"创建状态\"></a>创建状态</h4><ul>\n<li>创建一个global（window）对象</li>\n<li>创建this变量，默认指向window</li>\n<li>为全局执行上下文的变量分配内存</li>\n<li>为全局执行上下文内的变量赋值为<code>undefined</code></li>\n<li>为全局执行上下文的函数分配内存，并将内容存入内存。</li>\n</ul>\n<h4 id=\"执行状态\"><a href=\"#执行状态\" class=\"headerlink\" title=\"执行状态\"></a>执行状态</h4><ul>\n<li>逐行执行</li>\n</ul>\n<h3 id=\"函数执行上下文\"><a href=\"#函数执行上下文\" class=\"headerlink\" title=\"函数执行上下文\"></a>函数执行上下文</h3><h4 id=\"创建状态-1\"><a href=\"#创建状态-1\" class=\"headerlink\" title=\"创建状态\"></a>创建状态</h4><ul>\n<li>创建一个argarguments（参数列表）对象</li>\n<li>创建this变量，默认指向window</li>\n<li>为当前函数执行上下文内的变量分配内存</li>\n<li>为当前函数执行上下文内的变量赋值为<code>undefined</code></li>\n<li>为当前函数执行上下文的函数分配内存，并将内容存入内存。</li>\n</ul>\n<h4 id=\"执行状态-1\"><a href=\"#执行状态-1\" class=\"headerlink\" title=\"执行状态\"></a>执行状态</h4><ul>\n<li>逐行执行</li>\n</ul>\n<h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><blockquote>\n<p>MDN 中定义作用域就是当前的执行上下文。</p>\n</blockquote>\n<p>如果在当前函数执行上下文下访问一个变量val，发现当前函数执行上下文内没有，那就向上层执行上下文内找。这条链就称为作用域链。</p>\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><p>一个常见的例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeAdder</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inner</span> (<span class=\"params\">y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> add5 = makeAdder(<span class=\"number\">5</span>);</span><br><span class=\"line\">count += add5(<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<p>利用执行上下文来理解，当调用<code>makeAdder(5)</code>之后该函数的执行上下文（包括参数<code>x</code>）已经弹出了，但是函数<code>add5</code>调用时可以访问<code>x</code>，这是因为<code>makeAdder(5)</code>返回后创建了闭包，其中保存了<code>makeAdder</code>的执行上下文环境，当调用<code>add5</code>时，会在闭包环境下创建自己的执行上下文，那么变量就可以沿着作用域链访问了（就可以访问<code>x</code>）。</p>\n<h2 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h2><p><code>this</code>存在于当前执行上下文中，其引用会因绑定方式而决定，请看<a href=\"http://localhost:4000js-concept-15-this-call-bind-apply.html\">JavaScript 必知 33 个概念系列：this、call、bind、apply</a>。</p>\n<p>箭头函数创建执行上下文时不会创建<code>this</code>变量，所以内部访问变量时会沿着作用域链向上找。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://tylermcginnis.com/ultimate-guide-to-execution-contexts-hoisting-scopes-and-closures-in-javascript/\">The Ultimate Guide to Hoisting, Scopes, and Closures in JavaScript</a></li>\n</ul>"},{"title":"JavaScript必知33个概念系列：作用域","mathjax":false,"copyright":true,"comment":true,"date":"2019-11-14T07:57:37.000Z","_content":"\n{% note primary %}\n函数作用域，块级作用域，词法作用域。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 前言\n\n我对于作用域一直处于一种感性的认识，有问题也是凭感觉去看。今天就打破这面镜子，看看镜子后面到底是什么。\n\n先说一下我现在的认知水平：\n首先函数作用域我是知道的，函数体内部就是函数作用域；\n然后块级作用域我大概知道，花括号内部？if、else、for这些？\n最后词法作用域？没听过。。\n\n接下来我们来探索一下这些术语（terminology）的语义吧。\n\n## 作用域\n\n作用域往往和变量挂钩，在谈作用域之前，我们先来看看声明变量的三种方法以及他们之间的区别。\n\n### var、let、const\n\n#### var\n\n**用`var`声明的对象是属于函数作用域（function scope）的，如果你不在函数作用域下声明，那这个变量就是*更高级函数作用域*或者全局的（global scope）。**\n\n看几个例子：\n\n```javascript\nfunction setWidth(){\n    var width = 100;\n    console.log(width);\n}\nwidth;\n// Returns:\n// Uncaught ReferenceError: width is not defined\n```\n因为`width`是在函数作用域（`setWIdth`函数）下用`var`声明的，所以他属于函数作用域，因此全局作用域下访问不到`width`\n\n\n```javascript\nvar age = 100;\nif (age > 12){\n  var dogYears = age * 7;\n  console.log(`You are ${dogYears} dog years old!`);\n}\ndogYears;\n// returns:\n700\n```\n因为用`var`声明的变量`dogYears`不是在函数作用域下声明的，因此在本例中会当做全局作用域。\n\n#### let和const\n**用`let`和`const`声明的变量是属于块级作用域的，而不是函数作用域。**\n\n**块级作用域就是大括号“{}”之间的部分。**\n\n类似的下面这个例子，我用`let`代替`var`来声明`dogYears`变量\n\n```javascript\nvar age = 100;\nif (age > 12){\n  let dogYears = age * 7;\n  console.log(`You are ${dogYears} dog years old!`);\n}\ndogYears;\n// returns:\n// Uncaught ReferenceError: dogYears is not defined\n```\n因为使用`let`定义`dogYears`变量，那么`dogYears`变量属于块级作用域，即if的作用域。\n\n### 函数作用域（function scope）\n> 函数体内部叫函数作用域。\n\n- 用`var`声明的对象是属于函数作用域（function scope）的，如果你不在函数作用域下声明，那这个变量就是*更高级函数作用域*或者全局的（global scope）\n\n### 块级作用域（block scope）\n> 大括号“{}”之间称为块级作用域，当然函数作用域也是块级作用域。\n\n- 用`let`和`const`声明的变量是属于块级作用域的，而不是函数作用域。（**实际上可以看做立即执行函数内部的`var`**\n\n### 词法作用域（lexical scope）\n>Variables in JavaScript are lexically scoped, so the static structure of a program determines the scope of a variable (it is not influenced by, say, where a function is called from).\n\n词法作用域就是可以通过源代码来看出哪个变量属于哪个作用域，不会根据函数被调用的上下文改变，词法和静态（static）可以看做是一样的。词法作用域根据声明变量的位置来确定该变量可被访问的位置。\n\n看个例子：\n\n```javascript\nfunction makeFunc() {\n  var name = 'Mozilla';\n  function displayName() {\n    alert(name);\n  }\n  return displayName;\n}\n\nvar myFunc = makeFunc();\nmyFunc();\n```\n\n`displayName`中可以访问外部函数`makeFunc`的变量`name`，而`displayName`实际调用时`makeFunc`的栈帧已经弹出，此时却还能访问`name`。词法作用域是通过静态代码看的，和具体执行无关。这其实是闭包提供的作用。\n\n\n\n### 作用域链\n> 当你在作用域S中访问父作用域的局部变量是可以的，而访问兄弟作用域的局部变量是不可以的。**这可以通过作用域链来理解**\n\n- 存在一个全局环境，里面存的是全局变量（函数）\n- 环境里的函数条目会指向函数对象\n- 函数对象通过内部的`[[Scope]]`属性来指向它的作用域\n- 函数被调用时，会为此函数作用域创建一个环境，这个环境通过`outer`属性指向父环境\n- 作用域会形成一条链\n\n如下图：\n\n![](http://speakingjs.com/es5/images/spjs_2001.png)\n\n函数执行栈是动态的，而作用域链可以看做静态的（或者说是词法的，Lexical）。\n\n## 相关话题\n\n### 变量提升（变量声明提升，variables declaration hoisted）\n> JavaScript将变量的声明提升到该变量的直接作用域下的开始处，变量的赋值并不提升（执行上下文创建时已经为变量分配空间并赋值为`undefined`，这就好像是“变量提升”了）。函数定义也会进行提升，因此作用域下函数定义在前在后没多大区别。\n\n\n**仅对于`var`声明的变量进行提升，对`const`、`let`声明的变量不适用。**\n\n看个例子：\n```javascript\nfunction f() {\n    console.log(bar);  // undefined\n    var bar = 'abc';\n    console.log(bar);  // abc\n}\n```\n\n函数`f()`的实现就好像如下定义一样：\n\n```javascript\nfunction f() {\n    var bar;\n    console.log(bar);  // undefined\n    bar = 'abc';\n    console.log(bar);  // abc\n}\n```\n\n### 关于“`var`是函数作用域的”引起的问题和解决办法\n\n举个例子，如下代码，假如说你不想在if语句后面使用`tmp`变量或者说你有一个新的同名的`tmp`变量，那你如何解决这个问题呢？\n\n```javascript\nfunction f() {\n    if (condition) {\n        var tmp = ...;\n        ...\n    }\n    // tmp still exists here\n    // => not what we want\n}\n```\n\n- 方法一：使用`let`（因为`let`是块级作用域的\n- 方法二：立即执行函数(`IIFE,Immediately Invoked Function Expression`)（利用`var`是函数作用域的，`ES5`时是一个常见的编程模式。**但是效率比较低**\n\n```javascript\nfunction f() {\n    if (condition) {\n        (function () {  // open block\n            var tmp = ...;\n            ...\n        }());  // close block\n    }\n}\n```\n\n### 关于“立即执行函数的问题”（立即执行函数表达式\n\n#### 一个注意事项\n\n看个例子，如果第一个立即执行函数后面不加分号，那么第二个立即执行函数会当做参数。**所以这种情况需要注意加分号**\n\n```javascript\n(function () {\n    ...\n}()) // no semicolon\n(function () {\n    ...\n}());\n```\n\n#### 利用`prefix operators`解决上述分号问题\n\n```javascript\n!function () { // open IIFE\n    // inside IIFE\n}(); // close IIFE\n\n//or\n\nvoid function () { // open IIFE\n    // inside IIFE\n}(); // close IIFE\n\n```\n\n#### 如果函数定义已经处于一个表达式中，那么可以直接调用\n\n```javascript\nvar File = function () { // open IIFE\n    var UNTITLED = 'Untitled';\n    function File(name) {\n        this.name = name || UNTITLED;\n    }\n    return File;\n}(); // close IIFE\n```\n\n\n## Reference\n\n- [The Difference Between Function and Block Scope in JavaScript](https://medium.com/@josephcardillo/the-difference-between-function-and-block-scope-in-javascript-4296b2322abe)\n- [What the Heck is Lexical Scope? (JavaScript)](https://www.youtube.com/watch?v=GhNA0r10MmA)\n- [Chapter 16. Variables: Scopes, Environments, and Closures](http://speakingjs.com/es5/ch16.html)\n","source":"_posts/js-concept-7-scope.md","raw":"---\ntitle: JavaScript必知33个概念系列：作用域\nmathjax: false\ncopyright: true\ncomment: true\ndate: 2019-11-14 15:57:37\ntags:\n- JavaScript\n- 33 JS Concept\ncategories:\n- Front-End Development\n- JavaScript\n\n---\n\n{% note primary %}\n函数作用域，块级作用域，词法作用域。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 前言\n\n我对于作用域一直处于一种感性的认识，有问题也是凭感觉去看。今天就打破这面镜子，看看镜子后面到底是什么。\n\n先说一下我现在的认知水平：\n首先函数作用域我是知道的，函数体内部就是函数作用域；\n然后块级作用域我大概知道，花括号内部？if、else、for这些？\n最后词法作用域？没听过。。\n\n接下来我们来探索一下这些术语（terminology）的语义吧。\n\n## 作用域\n\n作用域往往和变量挂钩，在谈作用域之前，我们先来看看声明变量的三种方法以及他们之间的区别。\n\n### var、let、const\n\n#### var\n\n**用`var`声明的对象是属于函数作用域（function scope）的，如果你不在函数作用域下声明，那这个变量就是*更高级函数作用域*或者全局的（global scope）。**\n\n看几个例子：\n\n```javascript\nfunction setWidth(){\n    var width = 100;\n    console.log(width);\n}\nwidth;\n// Returns:\n// Uncaught ReferenceError: width is not defined\n```\n因为`width`是在函数作用域（`setWIdth`函数）下用`var`声明的，所以他属于函数作用域，因此全局作用域下访问不到`width`\n\n\n```javascript\nvar age = 100;\nif (age > 12){\n  var dogYears = age * 7;\n  console.log(`You are ${dogYears} dog years old!`);\n}\ndogYears;\n// returns:\n700\n```\n因为用`var`声明的变量`dogYears`不是在函数作用域下声明的，因此在本例中会当做全局作用域。\n\n#### let和const\n**用`let`和`const`声明的变量是属于块级作用域的，而不是函数作用域。**\n\n**块级作用域就是大括号“{}”之间的部分。**\n\n类似的下面这个例子，我用`let`代替`var`来声明`dogYears`变量\n\n```javascript\nvar age = 100;\nif (age > 12){\n  let dogYears = age * 7;\n  console.log(`You are ${dogYears} dog years old!`);\n}\ndogYears;\n// returns:\n// Uncaught ReferenceError: dogYears is not defined\n```\n因为使用`let`定义`dogYears`变量，那么`dogYears`变量属于块级作用域，即if的作用域。\n\n### 函数作用域（function scope）\n> 函数体内部叫函数作用域。\n\n- 用`var`声明的对象是属于函数作用域（function scope）的，如果你不在函数作用域下声明，那这个变量就是*更高级函数作用域*或者全局的（global scope）\n\n### 块级作用域（block scope）\n> 大括号“{}”之间称为块级作用域，当然函数作用域也是块级作用域。\n\n- 用`let`和`const`声明的变量是属于块级作用域的，而不是函数作用域。（**实际上可以看做立即执行函数内部的`var`**\n\n### 词法作用域（lexical scope）\n>Variables in JavaScript are lexically scoped, so the static structure of a program determines the scope of a variable (it is not influenced by, say, where a function is called from).\n\n词法作用域就是可以通过源代码来看出哪个变量属于哪个作用域，不会根据函数被调用的上下文改变，词法和静态（static）可以看做是一样的。词法作用域根据声明变量的位置来确定该变量可被访问的位置。\n\n看个例子：\n\n```javascript\nfunction makeFunc() {\n  var name = 'Mozilla';\n  function displayName() {\n    alert(name);\n  }\n  return displayName;\n}\n\nvar myFunc = makeFunc();\nmyFunc();\n```\n\n`displayName`中可以访问外部函数`makeFunc`的变量`name`，而`displayName`实际调用时`makeFunc`的栈帧已经弹出，此时却还能访问`name`。词法作用域是通过静态代码看的，和具体执行无关。这其实是闭包提供的作用。\n\n\n\n### 作用域链\n> 当你在作用域S中访问父作用域的局部变量是可以的，而访问兄弟作用域的局部变量是不可以的。**这可以通过作用域链来理解**\n\n- 存在一个全局环境，里面存的是全局变量（函数）\n- 环境里的函数条目会指向函数对象\n- 函数对象通过内部的`[[Scope]]`属性来指向它的作用域\n- 函数被调用时，会为此函数作用域创建一个环境，这个环境通过`outer`属性指向父环境\n- 作用域会形成一条链\n\n如下图：\n\n![](http://speakingjs.com/es5/images/spjs_2001.png)\n\n函数执行栈是动态的，而作用域链可以看做静态的（或者说是词法的，Lexical）。\n\n## 相关话题\n\n### 变量提升（变量声明提升，variables declaration hoisted）\n> JavaScript将变量的声明提升到该变量的直接作用域下的开始处，变量的赋值并不提升（执行上下文创建时已经为变量分配空间并赋值为`undefined`，这就好像是“变量提升”了）。函数定义也会进行提升，因此作用域下函数定义在前在后没多大区别。\n\n\n**仅对于`var`声明的变量进行提升，对`const`、`let`声明的变量不适用。**\n\n看个例子：\n```javascript\nfunction f() {\n    console.log(bar);  // undefined\n    var bar = 'abc';\n    console.log(bar);  // abc\n}\n```\n\n函数`f()`的实现就好像如下定义一样：\n\n```javascript\nfunction f() {\n    var bar;\n    console.log(bar);  // undefined\n    bar = 'abc';\n    console.log(bar);  // abc\n}\n```\n\n### 关于“`var`是函数作用域的”引起的问题和解决办法\n\n举个例子，如下代码，假如说你不想在if语句后面使用`tmp`变量或者说你有一个新的同名的`tmp`变量，那你如何解决这个问题呢？\n\n```javascript\nfunction f() {\n    if (condition) {\n        var tmp = ...;\n        ...\n    }\n    // tmp still exists here\n    // => not what we want\n}\n```\n\n- 方法一：使用`let`（因为`let`是块级作用域的\n- 方法二：立即执行函数(`IIFE,Immediately Invoked Function Expression`)（利用`var`是函数作用域的，`ES5`时是一个常见的编程模式。**但是效率比较低**\n\n```javascript\nfunction f() {\n    if (condition) {\n        (function () {  // open block\n            var tmp = ...;\n            ...\n        }());  // close block\n    }\n}\n```\n\n### 关于“立即执行函数的问题”（立即执行函数表达式\n\n#### 一个注意事项\n\n看个例子，如果第一个立即执行函数后面不加分号，那么第二个立即执行函数会当做参数。**所以这种情况需要注意加分号**\n\n```javascript\n(function () {\n    ...\n}()) // no semicolon\n(function () {\n    ...\n}());\n```\n\n#### 利用`prefix operators`解决上述分号问题\n\n```javascript\n!function () { // open IIFE\n    // inside IIFE\n}(); // close IIFE\n\n//or\n\nvoid function () { // open IIFE\n    // inside IIFE\n}(); // close IIFE\n\n```\n\n#### 如果函数定义已经处于一个表达式中，那么可以直接调用\n\n```javascript\nvar File = function () { // open IIFE\n    var UNTITLED = 'Untitled';\n    function File(name) {\n        this.name = name || UNTITLED;\n    }\n    return File;\n}(); // close IIFE\n```\n\n\n## Reference\n\n- [The Difference Between Function and Block Scope in JavaScript](https://medium.com/@josephcardillo/the-difference-between-function-and-block-scope-in-javascript-4296b2322abe)\n- [What the Heck is Lexical Scope? (JavaScript)](https://www.youtube.com/watch?v=GhNA0r10MmA)\n- [Chapter 16. Variables: Scopes, Environments, and Closures](http://speakingjs.com/es5/ch16.html)\n","slug":"js-concept-7-scope","published":1,"updated":"2022-01-06T04:09:12.465Z","_id":"cksq5v7mu003cn0pu5y0dby6e","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note primary\"><p>函数作用域，块级作用域，词法作用域。</p>\n</div>\n\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>我对于作用域一直处于一种感性的认识，有问题也是凭感觉去看。今天就打破这面镜子，看看镜子后面到底是什么。</p>\n<p>先说一下我现在的认知水平：<br>首先函数作用域我是知道的，函数体内部就是函数作用域；<br>然后块级作用域我大概知道，花括号内部？if、else、for这些？<br>最后词法作用域？没听过。。</p>\n<p>接下来我们来探索一下这些术语（terminology）的语义吧。</p>\n<h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><p>作用域往往和变量挂钩，在谈作用域之前，我们先来看看声明变量的三种方法以及他们之间的区别。</p>\n<h3 id=\"var、let、const\"><a href=\"#var、let、const\" class=\"headerlink\" title=\"var、let、const\"></a>var、let、const</h3><h4 id=\"var\"><a href=\"#var\" class=\"headerlink\" title=\"var\"></a>var</h4><p><strong>用<code>var</code>声明的对象是属于函数作用域（function scope）的，如果你不在函数作用域下声明，那这个变量就是<em>更高级函数作用域</em>或者全局的（global scope）。</strong></p>\n<p>看几个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setWidth</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> width = <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(width);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">width;</span><br><span class=\"line\"><span class=\"comment\">// Returns:</span></span><br><span class=\"line\"><span class=\"comment\">// Uncaught ReferenceError: width is not defined</span></span><br></pre></td></tr></table></figure>\n<p>因为<code>width</code>是在函数作用域（<code>setWIdth</code>函数）下用<code>var</code>声明的，所以他属于函数作用域，因此全局作用域下访问不到<code>width</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (age &gt; <span class=\"number\">12</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dogYears = age * <span class=\"number\">7</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`You are <span class=\"subst\">$&#123;dogYears&#125;</span> dog years old!`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dogYears;</span><br><span class=\"line\"><span class=\"comment\">// returns:</span></span><br><span class=\"line\"><span class=\"number\">700</span></span><br></pre></td></tr></table></figure>\n<p>因为用<code>var</code>声明的变量<code>dogYears</code>不是在函数作用域下声明的，因此在本例中会当做全局作用域。</p>\n<h4 id=\"let和const\"><a href=\"#let和const\" class=\"headerlink\" title=\"let和const\"></a>let和const</h4><p><strong>用<code>let</code>和<code>const</code>声明的变量是属于块级作用域的，而不是函数作用域。</strong></p>\n<p><strong>块级作用域就是大括号“{}”之间的部分。</strong></p>\n<p>类似的下面这个例子，我用<code>let</code>代替<code>var</code>来声明<code>dogYears</code>变量</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (age &gt; <span class=\"number\">12</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dogYears = age * <span class=\"number\">7</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`You are <span class=\"subst\">$&#123;dogYears&#125;</span> dog years old!`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dogYears;</span><br><span class=\"line\"><span class=\"comment\">// returns:</span></span><br><span class=\"line\"><span class=\"comment\">// Uncaught ReferenceError: dogYears is not defined</span></span><br></pre></td></tr></table></figure>\n<p>因为使用<code>let</code>定义<code>dogYears</code>变量，那么<code>dogYears</code>变量属于块级作用域，即if的作用域。</p>\n<h3 id=\"函数作用域（function-scope）\"><a href=\"#函数作用域（function-scope）\" class=\"headerlink\" title=\"函数作用域（function scope）\"></a>函数作用域（function scope）</h3><blockquote>\n<p>函数体内部叫函数作用域。</p>\n</blockquote>\n<ul>\n<li>用<code>var</code>声明的对象是属于函数作用域（function scope）的，如果你不在函数作用域下声明，那这个变量就是<em>更高级函数作用域</em>或者全局的（global scope）</li>\n</ul>\n<h3 id=\"块级作用域（block-scope）\"><a href=\"#块级作用域（block-scope）\" class=\"headerlink\" title=\"块级作用域（block scope）\"></a>块级作用域（block scope）</h3><blockquote>\n<p>大括号“{}”之间称为块级作用域，当然函数作用域也是块级作用域。</p>\n</blockquote>\n<ul>\n<li>用<code>let</code>和<code>const</code>声明的变量是属于块级作用域的，而不是函数作用域。（<strong>实际上可以看做立即执行函数内部的<code>var</code></strong></li>\n</ul>\n<h3 id=\"词法作用域（lexical-scope）\"><a href=\"#词法作用域（lexical-scope）\" class=\"headerlink\" title=\"词法作用域（lexical scope）\"></a>词法作用域（lexical scope）</h3><blockquote>\n<p>Variables in JavaScript are lexically scoped, so the static structure of a program determines the scope of a variable (it is not influenced by, say, where a function is called from).</p>\n</blockquote>\n<p>词法作用域就是可以通过源代码来看出哪个变量属于哪个作用域，不会根据函数被调用的上下文改变，词法和静态（static）可以看做是一样的。词法作用域根据声明变量的位置来确定该变量可被访问的位置。</p>\n<p>看个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeFunc</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;Mozilla&#x27;</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">displayName</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> displayName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myFunc = makeFunc();</span><br><span class=\"line\">myFunc();</span><br></pre></td></tr></table></figure>\n\n<p><code>displayName</code>中可以访问外部函数<code>makeFunc</code>的变量<code>name</code>，而<code>displayName</code>实际调用时<code>makeFunc</code>的栈帧已经弹出，此时却还能访问<code>name</code>。词法作用域是通过静态代码看的，和具体执行无关。这其实是闭包提供的作用。</p>\n<h3 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h3><blockquote>\n<p>当你在作用域S中访问父作用域的局部变量是可以的，而访问兄弟作用域的局部变量是不可以的。<strong>这可以通过作用域链来理解</strong></p>\n</blockquote>\n<ul>\n<li>存在一个全局环境，里面存的是全局变量（函数）</li>\n<li>环境里的函数条目会指向函数对象</li>\n<li>函数对象通过内部的<code>[[Scope]]</code>属性来指向它的作用域</li>\n<li>函数被调用时，会为此函数作用域创建一个环境，这个环境通过<code>outer</code>属性指向父环境</li>\n<li>作用域会形成一条链</li>\n</ul>\n<p>如下图：</p>\n<p><img data-src=\"http://speakingjs.com/es5/images/spjs_2001.png\"></p>\n<p>函数执行栈是动态的，而作用域链可以看做静态的（或者说是词法的，Lexical）。</p>\n<h2 id=\"相关话题\"><a href=\"#相关话题\" class=\"headerlink\" title=\"相关话题\"></a>相关话题</h2><h3 id=\"变量提升（变量声明提升，variables-declaration-hoisted）\"><a href=\"#变量提升（变量声明提升，variables-declaration-hoisted）\" class=\"headerlink\" title=\"变量提升（变量声明提升，variables declaration hoisted）\"></a>变量提升（变量声明提升，variables declaration hoisted）</h3><blockquote>\n<p>JavaScript将变量的声明提升到该变量的直接作用域下的开始处，变量的赋值并不提升（执行上下文创建时已经为变量分配空间并赋值为<code>undefined</code>，这就好像是“变量提升”了）。函数定义也会进行提升，因此作用域下函数定义在前在后没多大区别。</p>\n</blockquote>\n<p><strong>仅对于<code>var</code>声明的变量进行提升，对<code>const</code>、<code>let</code>声明的变量不适用。</strong></p>\n<p>看个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(bar);  <span class=\"comment\">// undefined</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> bar = <span class=\"string\">&#x27;abc&#x27;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(bar);  <span class=\"comment\">// abc</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>函数<code>f()</code>的实现就好像如下定义一样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> bar;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(bar);  <span class=\"comment\">// undefined</span></span><br><span class=\"line\">    bar = <span class=\"string\">&#x27;abc&#x27;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(bar);  <span class=\"comment\">// abc</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"关于“var是函数作用域的”引起的问题和解决办法\"><a href=\"#关于“var是函数作用域的”引起的问题和解决办法\" class=\"headerlink\" title=\"关于“var是函数作用域的”引起的问题和解决办法\"></a>关于“<code>var</code>是函数作用域的”引起的问题和解决办法</h3><p>举个例子，如下代码，假如说你不想在if语句后面使用<code>tmp</code>变量或者说你有一个新的同名的<code>tmp</code>变量，那你如何解决这个问题呢？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> tmp = ...;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// tmp still exists here</span></span><br><span class=\"line\">    <span class=\"comment\">// =&gt; not what we want</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>方法一：使用<code>let</code>（因为<code>let</code>是块级作用域的</li>\n<li>方法二：立即执行函数(<code>IIFE,Immediately Invoked Function Expression</code>)（利用<code>var</code>是函数作用域的，<code>ES5</code>时是一个常见的编程模式。<strong>但是效率比较低</strong></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">        (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;  <span class=\"comment\">// open block</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> tmp = ...;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;());  <span class=\"comment\">// close block</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"关于“立即执行函数的问题”（立即执行函数表达式\"><a href=\"#关于“立即执行函数的问题”（立即执行函数表达式\" class=\"headerlink\" title=\"关于“立即执行函数的问题”（立即执行函数表达式\"></a>关于“立即执行函数的问题”（立即执行函数表达式</h3><h4 id=\"一个注意事项\"><a href=\"#一个注意事项\" class=\"headerlink\" title=\"一个注意事项\"></a>一个注意事项</h4><p>看个例子，如果第一个立即执行函数后面不加分号，那么第二个立即执行函数会当做参数。<strong>所以这种情况需要注意加分号</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;()) <span class=\"comment\">// no semicolon</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;());</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"利用prefix-operators解决上述分号问题\"><a href=\"#利用prefix-operators解决上述分号问题\" class=\"headerlink\" title=\"利用prefix operators解决上述分号问题\"></a>利用<code>prefix operators</code>解决上述分号问题</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// open IIFE</span></span><br><span class=\"line\">    <span class=\"comment\">// inside IIFE</span></span><br><span class=\"line\">&#125;(); <span class=\"comment\">// close IIFE</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//or</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// open IIFE</span></span><br><span class=\"line\">    <span class=\"comment\">// inside IIFE</span></span><br><span class=\"line\">&#125;(); <span class=\"comment\">// close IIFE</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"如果函数定义已经处于一个表达式中，那么可以直接调用\"><a href=\"#如果函数定义已经处于一个表达式中，那么可以直接调用\" class=\"headerlink\" title=\"如果函数定义已经处于一个表达式中，那么可以直接调用\"></a>如果函数定义已经处于一个表达式中，那么可以直接调用</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> File = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// open IIFE</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> UNTITLED = <span class=\"string\">&#x27;Untitled&#x27;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">File</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name || UNTITLED;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> File;</span><br><span class=\"line\">&#125;(); <span class=\"comment\">// close IIFE</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://medium.com/@josephcardillo/the-difference-between-function-and-block-scope-in-javascript-4296b2322abe\">The Difference Between Function and Block Scope in JavaScript</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=GhNA0r10MmA\">What the Heck is Lexical Scope? (JavaScript)</a></li>\n<li><a href=\"http://speakingjs.com/es5/ch16.html\">Chapter 16. Variables: Scopes, Environments, and Closures</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note primary\"><p>函数作用域，块级作用域，词法作用域。</p>\n</div>","more":"<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>我对于作用域一直处于一种感性的认识，有问题也是凭感觉去看。今天就打破这面镜子，看看镜子后面到底是什么。</p>\n<p>先说一下我现在的认知水平：<br>首先函数作用域我是知道的，函数体内部就是函数作用域；<br>然后块级作用域我大概知道，花括号内部？if、else、for这些？<br>最后词法作用域？没听过。。</p>\n<p>接下来我们来探索一下这些术语（terminology）的语义吧。</p>\n<h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><p>作用域往往和变量挂钩，在谈作用域之前，我们先来看看声明变量的三种方法以及他们之间的区别。</p>\n<h3 id=\"var、let、const\"><a href=\"#var、let、const\" class=\"headerlink\" title=\"var、let、const\"></a>var、let、const</h3><h4 id=\"var\"><a href=\"#var\" class=\"headerlink\" title=\"var\"></a>var</h4><p><strong>用<code>var</code>声明的对象是属于函数作用域（function scope）的，如果你不在函数作用域下声明，那这个变量就是<em>更高级函数作用域</em>或者全局的（global scope）。</strong></p>\n<p>看几个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setWidth</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> width = <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(width);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">width;</span><br><span class=\"line\"><span class=\"comment\">// Returns:</span></span><br><span class=\"line\"><span class=\"comment\">// Uncaught ReferenceError: width is not defined</span></span><br></pre></td></tr></table></figure>\n<p>因为<code>width</code>是在函数作用域（<code>setWIdth</code>函数）下用<code>var</code>声明的，所以他属于函数作用域，因此全局作用域下访问不到<code>width</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (age &gt; <span class=\"number\">12</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dogYears = age * <span class=\"number\">7</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`You are <span class=\"subst\">$&#123;dogYears&#125;</span> dog years old!`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dogYears;</span><br><span class=\"line\"><span class=\"comment\">// returns:</span></span><br><span class=\"line\"><span class=\"number\">700</span></span><br></pre></td></tr></table></figure>\n<p>因为用<code>var</code>声明的变量<code>dogYears</code>不是在函数作用域下声明的，因此在本例中会当做全局作用域。</p>\n<h4 id=\"let和const\"><a href=\"#let和const\" class=\"headerlink\" title=\"let和const\"></a>let和const</h4><p><strong>用<code>let</code>和<code>const</code>声明的变量是属于块级作用域的，而不是函数作用域。</strong></p>\n<p><strong>块级作用域就是大括号“{}”之间的部分。</strong></p>\n<p>类似的下面这个例子，我用<code>let</code>代替<code>var</code>来声明<code>dogYears</code>变量</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (age &gt; <span class=\"number\">12</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dogYears = age * <span class=\"number\">7</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`You are <span class=\"subst\">$&#123;dogYears&#125;</span> dog years old!`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dogYears;</span><br><span class=\"line\"><span class=\"comment\">// returns:</span></span><br><span class=\"line\"><span class=\"comment\">// Uncaught ReferenceError: dogYears is not defined</span></span><br></pre></td></tr></table></figure>\n<p>因为使用<code>let</code>定义<code>dogYears</code>变量，那么<code>dogYears</code>变量属于块级作用域，即if的作用域。</p>\n<h3 id=\"函数作用域（function-scope）\"><a href=\"#函数作用域（function-scope）\" class=\"headerlink\" title=\"函数作用域（function scope）\"></a>函数作用域（function scope）</h3><blockquote>\n<p>函数体内部叫函数作用域。</p>\n</blockquote>\n<ul>\n<li>用<code>var</code>声明的对象是属于函数作用域（function scope）的，如果你不在函数作用域下声明，那这个变量就是<em>更高级函数作用域</em>或者全局的（global scope）</li>\n</ul>\n<h3 id=\"块级作用域（block-scope）\"><a href=\"#块级作用域（block-scope）\" class=\"headerlink\" title=\"块级作用域（block scope）\"></a>块级作用域（block scope）</h3><blockquote>\n<p>大括号“{}”之间称为块级作用域，当然函数作用域也是块级作用域。</p>\n</blockquote>\n<ul>\n<li>用<code>let</code>和<code>const</code>声明的变量是属于块级作用域的，而不是函数作用域。（<strong>实际上可以看做立即执行函数内部的<code>var</code></strong></li>\n</ul>\n<h3 id=\"词法作用域（lexical-scope）\"><a href=\"#词法作用域（lexical-scope）\" class=\"headerlink\" title=\"词法作用域（lexical scope）\"></a>词法作用域（lexical scope）</h3><blockquote>\n<p>Variables in JavaScript are lexically scoped, so the static structure of a program determines the scope of a variable (it is not influenced by, say, where a function is called from).</p>\n</blockquote>\n<p>词法作用域就是可以通过源代码来看出哪个变量属于哪个作用域，不会根据函数被调用的上下文改变，词法和静态（static）可以看做是一样的。词法作用域根据声明变量的位置来确定该变量可被访问的位置。</p>\n<p>看个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeFunc</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;Mozilla&#x27;</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">displayName</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> displayName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myFunc = makeFunc();</span><br><span class=\"line\">myFunc();</span><br></pre></td></tr></table></figure>\n\n<p><code>displayName</code>中可以访问外部函数<code>makeFunc</code>的变量<code>name</code>，而<code>displayName</code>实际调用时<code>makeFunc</code>的栈帧已经弹出，此时却还能访问<code>name</code>。词法作用域是通过静态代码看的，和具体执行无关。这其实是闭包提供的作用。</p>\n<h3 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h3><blockquote>\n<p>当你在作用域S中访问父作用域的局部变量是可以的，而访问兄弟作用域的局部变量是不可以的。<strong>这可以通过作用域链来理解</strong></p>\n</blockquote>\n<ul>\n<li>存在一个全局环境，里面存的是全局变量（函数）</li>\n<li>环境里的函数条目会指向函数对象</li>\n<li>函数对象通过内部的<code>[[Scope]]</code>属性来指向它的作用域</li>\n<li>函数被调用时，会为此函数作用域创建一个环境，这个环境通过<code>outer</code>属性指向父环境</li>\n<li>作用域会形成一条链</li>\n</ul>\n<p>如下图：</p>\n<p><img data-src=\"http://speakingjs.com/es5/images/spjs_2001.png\"></p>\n<p>函数执行栈是动态的，而作用域链可以看做静态的（或者说是词法的，Lexical）。</p>\n<h2 id=\"相关话题\"><a href=\"#相关话题\" class=\"headerlink\" title=\"相关话题\"></a>相关话题</h2><h3 id=\"变量提升（变量声明提升，variables-declaration-hoisted）\"><a href=\"#变量提升（变量声明提升，variables-declaration-hoisted）\" class=\"headerlink\" title=\"变量提升（变量声明提升，variables declaration hoisted）\"></a>变量提升（变量声明提升，variables declaration hoisted）</h3><blockquote>\n<p>JavaScript将变量的声明提升到该变量的直接作用域下的开始处，变量的赋值并不提升（执行上下文创建时已经为变量分配空间并赋值为<code>undefined</code>，这就好像是“变量提升”了）。函数定义也会进行提升，因此作用域下函数定义在前在后没多大区别。</p>\n</blockquote>\n<p><strong>仅对于<code>var</code>声明的变量进行提升，对<code>const</code>、<code>let</code>声明的变量不适用。</strong></p>\n<p>看个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(bar);  <span class=\"comment\">// undefined</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> bar = <span class=\"string\">&#x27;abc&#x27;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(bar);  <span class=\"comment\">// abc</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>函数<code>f()</code>的实现就好像如下定义一样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> bar;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(bar);  <span class=\"comment\">// undefined</span></span><br><span class=\"line\">    bar = <span class=\"string\">&#x27;abc&#x27;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(bar);  <span class=\"comment\">// abc</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"关于“var是函数作用域的”引起的问题和解决办法\"><a href=\"#关于“var是函数作用域的”引起的问题和解决办法\" class=\"headerlink\" title=\"关于“var是函数作用域的”引起的问题和解决办法\"></a>关于“<code>var</code>是函数作用域的”引起的问题和解决办法</h3><p>举个例子，如下代码，假如说你不想在if语句后面使用<code>tmp</code>变量或者说你有一个新的同名的<code>tmp</code>变量，那你如何解决这个问题呢？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> tmp = ...;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// tmp still exists here</span></span><br><span class=\"line\">    <span class=\"comment\">// =&gt; not what we want</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>方法一：使用<code>let</code>（因为<code>let</code>是块级作用域的</li>\n<li>方法二：立即执行函数(<code>IIFE,Immediately Invoked Function Expression</code>)（利用<code>var</code>是函数作用域的，<code>ES5</code>时是一个常见的编程模式。<strong>但是效率比较低</strong></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">        (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;  <span class=\"comment\">// open block</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> tmp = ...;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;());  <span class=\"comment\">// close block</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"关于“立即执行函数的问题”（立即执行函数表达式\"><a href=\"#关于“立即执行函数的问题”（立即执行函数表达式\" class=\"headerlink\" title=\"关于“立即执行函数的问题”（立即执行函数表达式\"></a>关于“立即执行函数的问题”（立即执行函数表达式</h3><h4 id=\"一个注意事项\"><a href=\"#一个注意事项\" class=\"headerlink\" title=\"一个注意事项\"></a>一个注意事项</h4><p>看个例子，如果第一个立即执行函数后面不加分号，那么第二个立即执行函数会当做参数。<strong>所以这种情况需要注意加分号</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;()) <span class=\"comment\">// no semicolon</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;());</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"利用prefix-operators解决上述分号问题\"><a href=\"#利用prefix-operators解决上述分号问题\" class=\"headerlink\" title=\"利用prefix operators解决上述分号问题\"></a>利用<code>prefix operators</code>解决上述分号问题</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// open IIFE</span></span><br><span class=\"line\">    <span class=\"comment\">// inside IIFE</span></span><br><span class=\"line\">&#125;(); <span class=\"comment\">// close IIFE</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//or</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// open IIFE</span></span><br><span class=\"line\">    <span class=\"comment\">// inside IIFE</span></span><br><span class=\"line\">&#125;(); <span class=\"comment\">// close IIFE</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"如果函数定义已经处于一个表达式中，那么可以直接调用\"><a href=\"#如果函数定义已经处于一个表达式中，那么可以直接调用\" class=\"headerlink\" title=\"如果函数定义已经处于一个表达式中，那么可以直接调用\"></a>如果函数定义已经处于一个表达式中，那么可以直接调用</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> File = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// open IIFE</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> UNTITLED = <span class=\"string\">&#x27;Untitled&#x27;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">File</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name || UNTITLED;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> File;</span><br><span class=\"line\">&#125;(); <span class=\"comment\">// close IIFE</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://medium.com/@josephcardillo/the-difference-between-function-and-block-scope-in-javascript-4296b2322abe\">The Difference Between Function and Block Scope in JavaScript</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=GhNA0r10MmA\">What the Heck is Lexical Scope? (JavaScript)</a></li>\n<li><a href=\"http://speakingjs.com/es5/ch16.html\">Chapter 16. Variables: Scopes, Environments, and Closures</a></li>\n</ul>"},{"title":"恶心心JavaScript系列：节流和防抖","mathjax":false,"copyright":true,"comment":true,"date":"2019-12-17T09:18:57.000Z","_content":"\n{% note primary %}\nReduce event trigger rate by throttling & debouncing\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 前言\n\n节流和防抖都是为了解决一个问题——事件的触发率。事件的触发率，顾名思义就是单位时间内你的回调函数被调用的次数。这篇文章总结一下节流和防抖的使用场景和两者的定义与区别。\n\n\n## 事件的触发率\n\n什么时候关注事件的触发率呢？\n- 点击一个按钮的时候？这个时候触发率有多高？就算你点击的很快那也是比较小的，不够明显。\n- 在输入框内迅速的打字，输入框的改变事件触发率高吗？这个是比较明显的，最常见的一个例子就是在搜索引擎内输入时的自动提示。\n- 最明显的是什么事件？什么事件的触发率会很高？比如说`scroll`和`mousemove`事件触发率会非常高！\n\n\n## 使用场景\n\n如果你关注的某个事件的触发率比较高，那么你应该需要注意这个事件的回调函数。\n\n如果你的回调函数内几乎没做什么事，没有很大的计算，没有涉及很慢的操作（下面会说有哪些操作），那么你可以酌情忽略。\n\n如果某个事件的触发率比较高并且其事件回调函数内涉及如下操作，那么你就**需要考虑回流或者防抖**了。\n\n\n比如说：\n\n- XHR网络请求\n- 引起浏览器的回流或者重绘\n- 计算大量数据\n- ...\n\n{% note success %}\n节流和防抖就是为了减少事件的触发率来节省资源。这两种方式实际上就是在响应用户动作和最佳资源使用上的一个折中。\n{% endnote %}\n\n\n\n\n\n## 节流（throttling）\n\n节流，顾名思义就是限制流速，可以给定一个事件触发率的一个上限值，让频繁的事件触发变的稍慢一些。\n\n\n### 实现方式\n\n当然这个上限值可以通过多种方式来实现：\n\n- 通过每隔多少时间触发一次来设置\n- 通过每隔多少次触发当做一次触发来设置\n- 通过某个时间段内只能触发几次来设置\n\n重构项目时为了避免重写大量回调函数，我们可以封装一个wrapper函数，这个函数返回一个新的代理函数，原来的回调函数不变。\n\n```javascript\nfunction throttled(delay,fn){\n    let lastInvoke=0;\n    return function(...args){\n        const now=Date.now();\n        if(now-lastInvoke<delay) return;\n        lastInvoke=now;\n        return fn(...args);\n    }\n}\n```\n\n这个封装实际上就是用到了闭包来保存上次事件成功触发的时间。\n你可以通过如下方式使用：\n\n```javascript\n//原来的回调函数\nconst myHandler=(event)=>{\n    //do sth.\n}\n//新生成的代理函数\nconst tHandler=throttled(200,myHandler);\ndomNode.addEventListener('mousemove',tHandler);\n\n```\n\n这样事件实际触发的上限值是200ms触发一次，两次触发之间的所有无效触发都被忽略。\n当然这个`delay`所设置的时间需要有各种考虑，需要平衡网页的响应时间和流畅程度。**节流对于CSS的`transition`比较有效。**\n\n### 节流的应用场景\n\n需要追踪用户的动作，但是因为事件回调的负担，不能高频率触发事件。比如追踪`scroll`的位置来做出某些响应。\n\n## 防抖（debouncing）\n\n防抖，亦可顾名思义，就是防止抖动，把原来的一些列抖动当做一次平移。也就是说将一系列连续的事件触发结束后的一段时间内没有再触发，那么就真正的触发一次。再生动形象一点，就是等风平浪静之后只触发一次事件。\n\n\n\n### 防抖的实现\n\n\n防抖可以通过JS的计时器`setTimeout()`和`clearTimeout()`来实现。\n\n和节流的实现方式类似，我们用一个wrapper函数来创建一个代理函数，原来未防抖的回调函数不变。\n\n```javascript\nfunction debounced(delay,fn){\n    let timeId=null;\n    return function(...args){\n        if(timeId){\n            clearTimeout(timeId);\n        }\n        timeId=setTimeout(()=>{\n            fn(...args);\n            timeId=null;\n        },delay);\n    }\n}\n```\n\n使用方式和节流创建函数类似，如下：\n\n```javascript\nconst myHandler=(event)=>{\n    //do sth.\n};\nconst dHandler=debounced(200,myHandler);\ndomNode.addEventListener('input',dHandler);\n```\n\n\n### 防抖的应用场景\n\n防抖主要应用于那些不必时时刻刻追踪用户动作的事件触发。比如最常见的例子，Baidu搜索中用户输入的自动提示（假设不保存在本地，而需要XHR请求），你可以设置用户停止输入200ms后触发一次事件，如果两次用户输入小于200ms则不会触发并且需要重新计时。\n\n## 总结\n\n这些常见的节流和防抖的工具函数在一些常见的工具库中就能够找到，比如说[lodash](https://lodash.com/)，其中就有[throttle](https://lodash.com/docs/4.17.15#throttle)和[debounce](https://lodash.com/docs/4.17.15#debounce)函数。\n\n- 节流就是直接限制触发频率，或指定多长时间触发一次，或指定时间段内触发几次，或多次触发当做一次触发\n- 防抖是等风平浪静时再响应触发，风平浪静指的是时间触发后x毫秒后未再次触发。\n- 节流和防抖无法解决所有的问题，比如恶心冗杂的代码。因此在想用节流防抖来优化降低事件触发率之前先做好其他优化。\n- 节流和防抖对于一些场景下的高频事件触发并不适用，比如说某些滑动组件如果使用节流那就会出bug，用户也就感觉恶心心。\n\n## Reference\n\n- [Throttling and debouncing in JavaScript](https://codeburst.io/throttling-and-debouncing-in-javascript-646d076d0a44)","source":"_posts/js-debouncing-throttling.md","raw":"---\ntitle: 恶心心JavaScript系列：节流和防抖\nmathjax: false\ncopyright: true\ncomment: true\ndate: 2019-12-17 17:18:57\ntags:\n- JavaScript\ncategories:\n- Front-End Development\n- JavaScript\n\n---\n\n{% note primary %}\nReduce event trigger rate by throttling & debouncing\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 前言\n\n节流和防抖都是为了解决一个问题——事件的触发率。事件的触发率，顾名思义就是单位时间内你的回调函数被调用的次数。这篇文章总结一下节流和防抖的使用场景和两者的定义与区别。\n\n\n## 事件的触发率\n\n什么时候关注事件的触发率呢？\n- 点击一个按钮的时候？这个时候触发率有多高？就算你点击的很快那也是比较小的，不够明显。\n- 在输入框内迅速的打字，输入框的改变事件触发率高吗？这个是比较明显的，最常见的一个例子就是在搜索引擎内输入时的自动提示。\n- 最明显的是什么事件？什么事件的触发率会很高？比如说`scroll`和`mousemove`事件触发率会非常高！\n\n\n## 使用场景\n\n如果你关注的某个事件的触发率比较高，那么你应该需要注意这个事件的回调函数。\n\n如果你的回调函数内几乎没做什么事，没有很大的计算，没有涉及很慢的操作（下面会说有哪些操作），那么你可以酌情忽略。\n\n如果某个事件的触发率比较高并且其事件回调函数内涉及如下操作，那么你就**需要考虑回流或者防抖**了。\n\n\n比如说：\n\n- XHR网络请求\n- 引起浏览器的回流或者重绘\n- 计算大量数据\n- ...\n\n{% note success %}\n节流和防抖就是为了减少事件的触发率来节省资源。这两种方式实际上就是在响应用户动作和最佳资源使用上的一个折中。\n{% endnote %}\n\n\n\n\n\n## 节流（throttling）\n\n节流，顾名思义就是限制流速，可以给定一个事件触发率的一个上限值，让频繁的事件触发变的稍慢一些。\n\n\n### 实现方式\n\n当然这个上限值可以通过多种方式来实现：\n\n- 通过每隔多少时间触发一次来设置\n- 通过每隔多少次触发当做一次触发来设置\n- 通过某个时间段内只能触发几次来设置\n\n重构项目时为了避免重写大量回调函数，我们可以封装一个wrapper函数，这个函数返回一个新的代理函数，原来的回调函数不变。\n\n```javascript\nfunction throttled(delay,fn){\n    let lastInvoke=0;\n    return function(...args){\n        const now=Date.now();\n        if(now-lastInvoke<delay) return;\n        lastInvoke=now;\n        return fn(...args);\n    }\n}\n```\n\n这个封装实际上就是用到了闭包来保存上次事件成功触发的时间。\n你可以通过如下方式使用：\n\n```javascript\n//原来的回调函数\nconst myHandler=(event)=>{\n    //do sth.\n}\n//新生成的代理函数\nconst tHandler=throttled(200,myHandler);\ndomNode.addEventListener('mousemove',tHandler);\n\n```\n\n这样事件实际触发的上限值是200ms触发一次，两次触发之间的所有无效触发都被忽略。\n当然这个`delay`所设置的时间需要有各种考虑，需要平衡网页的响应时间和流畅程度。**节流对于CSS的`transition`比较有效。**\n\n### 节流的应用场景\n\n需要追踪用户的动作，但是因为事件回调的负担，不能高频率触发事件。比如追踪`scroll`的位置来做出某些响应。\n\n## 防抖（debouncing）\n\n防抖，亦可顾名思义，就是防止抖动，把原来的一些列抖动当做一次平移。也就是说将一系列连续的事件触发结束后的一段时间内没有再触发，那么就真正的触发一次。再生动形象一点，就是等风平浪静之后只触发一次事件。\n\n\n\n### 防抖的实现\n\n\n防抖可以通过JS的计时器`setTimeout()`和`clearTimeout()`来实现。\n\n和节流的实现方式类似，我们用一个wrapper函数来创建一个代理函数，原来未防抖的回调函数不变。\n\n```javascript\nfunction debounced(delay,fn){\n    let timeId=null;\n    return function(...args){\n        if(timeId){\n            clearTimeout(timeId);\n        }\n        timeId=setTimeout(()=>{\n            fn(...args);\n            timeId=null;\n        },delay);\n    }\n}\n```\n\n使用方式和节流创建函数类似，如下：\n\n```javascript\nconst myHandler=(event)=>{\n    //do sth.\n};\nconst dHandler=debounced(200,myHandler);\ndomNode.addEventListener('input',dHandler);\n```\n\n\n### 防抖的应用场景\n\n防抖主要应用于那些不必时时刻刻追踪用户动作的事件触发。比如最常见的例子，Baidu搜索中用户输入的自动提示（假设不保存在本地，而需要XHR请求），你可以设置用户停止输入200ms后触发一次事件，如果两次用户输入小于200ms则不会触发并且需要重新计时。\n\n## 总结\n\n这些常见的节流和防抖的工具函数在一些常见的工具库中就能够找到，比如说[lodash](https://lodash.com/)，其中就有[throttle](https://lodash.com/docs/4.17.15#throttle)和[debounce](https://lodash.com/docs/4.17.15#debounce)函数。\n\n- 节流就是直接限制触发频率，或指定多长时间触发一次，或指定时间段内触发几次，或多次触发当做一次触发\n- 防抖是等风平浪静时再响应触发，风平浪静指的是时间触发后x毫秒后未再次触发。\n- 节流和防抖无法解决所有的问题，比如恶心冗杂的代码。因此在想用节流防抖来优化降低事件触发率之前先做好其他优化。\n- 节流和防抖对于一些场景下的高频事件触发并不适用，比如说某些滑动组件如果使用节流那就会出bug，用户也就感觉恶心心。\n\n## Reference\n\n- [Throttling and debouncing in JavaScript](https://codeburst.io/throttling-and-debouncing-in-javascript-646d076d0a44)","slug":"js-debouncing-throttling","published":1,"updated":"2022-01-06T04:09:12.465Z","_id":"cksq5v7mu003fn0pucgy1a5yy","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note primary\"><p>Reduce event trigger rate by throttling &amp; debouncing</p>\n</div>\n\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>节流和防抖都是为了解决一个问题——事件的触发率。事件的触发率，顾名思义就是单位时间内你的回调函数被调用的次数。这篇文章总结一下节流和防抖的使用场景和两者的定义与区别。</p>\n<h2 id=\"事件的触发率\"><a href=\"#事件的触发率\" class=\"headerlink\" title=\"事件的触发率\"></a>事件的触发率</h2><p>什么时候关注事件的触发率呢？</p>\n<ul>\n<li>点击一个按钮的时候？这个时候触发率有多高？就算你点击的很快那也是比较小的，不够明显。</li>\n<li>在输入框内迅速的打字，输入框的改变事件触发率高吗？这个是比较明显的，最常见的一个例子就是在搜索引擎内输入时的自动提示。</li>\n<li>最明显的是什么事件？什么事件的触发率会很高？比如说<code>scroll</code>和<code>mousemove</code>事件触发率会非常高！</li>\n</ul>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><p>如果你关注的某个事件的触发率比较高，那么你应该需要注意这个事件的回调函数。</p>\n<p>如果你的回调函数内几乎没做什么事，没有很大的计算，没有涉及很慢的操作（下面会说有哪些操作），那么你可以酌情忽略。</p>\n<p>如果某个事件的触发率比较高并且其事件回调函数内涉及如下操作，那么你就<strong>需要考虑回流或者防抖</strong>了。</p>\n<p>比如说：</p>\n<ul>\n<li>XHR网络请求</li>\n<li>引起浏览器的回流或者重绘</li>\n<li>计算大量数据</li>\n<li>…</li>\n</ul>\n<div class=\"note success\"><p>节流和防抖就是为了减少事件的触发率来节省资源。这两种方式实际上就是在响应用户动作和最佳资源使用上的一个折中。</p>\n</div>\n\n\n\n\n\n<h2 id=\"节流（throttling）\"><a href=\"#节流（throttling）\" class=\"headerlink\" title=\"节流（throttling）\"></a>节流（throttling）</h2><p>节流，顾名思义就是限制流速，可以给定一个事件触发率的一个上限值，让频繁的事件触发变的稍慢一些。</p>\n<h3 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h3><p>当然这个上限值可以通过多种方式来实现：</p>\n<ul>\n<li>通过每隔多少时间触发一次来设置</li>\n<li>通过每隔多少次触发当做一次触发来设置</li>\n<li>通过某个时间段内只能触发几次来设置</li>\n</ul>\n<p>重构项目时为了避免重写大量回调函数，我们可以封装一个wrapper函数，这个函数返回一个新的代理函数，原来的回调函数不变。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttled</span>(<span class=\"params\">delay,fn</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> lastInvoke=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">...args</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> now=<span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(now-lastInvoke&lt;delay) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        lastInvoke=now;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fn(...args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个封装实际上就是用到了闭包来保存上次事件成功触发的时间。<br>你可以通过如下方式使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//原来的回调函数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> myHandler=<span class=\"function\">(<span class=\"params\">event</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//do sth.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//新生成的代理函数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> tHandler=throttled(<span class=\"number\">200</span>,myHandler);</span><br><span class=\"line\">domNode.addEventListener(<span class=\"string\">&#x27;mousemove&#x27;</span>,tHandler);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这样事件实际触发的上限值是200ms触发一次，两次触发之间的所有无效触发都被忽略。<br>当然这个<code>delay</code>所设置的时间需要有各种考虑，需要平衡网页的响应时间和流畅程度。<strong>节流对于CSS的<code>transition</code>比较有效。</strong></p>\n<h3 id=\"节流的应用场景\"><a href=\"#节流的应用场景\" class=\"headerlink\" title=\"节流的应用场景\"></a>节流的应用场景</h3><p>需要追踪用户的动作，但是因为事件回调的负担，不能高频率触发事件。比如追踪<code>scroll</code>的位置来做出某些响应。</p>\n<h2 id=\"防抖（debouncing）\"><a href=\"#防抖（debouncing）\" class=\"headerlink\" title=\"防抖（debouncing）\"></a>防抖（debouncing）</h2><p>防抖，亦可顾名思义，就是防止抖动，把原来的一些列抖动当做一次平移。也就是说将一系列连续的事件触发结束后的一段时间内没有再触发，那么就真正的触发一次。再生动形象一点，就是等风平浪静之后只触发一次事件。</p>\n<h3 id=\"防抖的实现\"><a href=\"#防抖的实现\" class=\"headerlink\" title=\"防抖的实现\"></a>防抖的实现</h3><p>防抖可以通过JS的计时器<code>setTimeout()</code>和<code>clearTimeout()</code>来实现。</p>\n<p>和节流的实现方式类似，我们用一个wrapper函数来创建一个代理函数，原来未防抖的回调函数不变。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounced</span>(<span class=\"params\">delay,fn</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeId=<span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">...args</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(timeId)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">clearTimeout</span>(timeId);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        timeId=<span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">            fn(...args);</span><br><span class=\"line\">            timeId=<span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;,delay);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用方式和节流创建函数类似，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myHandler=<span class=\"function\">(<span class=\"params\">event</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//do sth.</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> dHandler=debounced(<span class=\"number\">200</span>,myHandler);</span><br><span class=\"line\">domNode.addEventListener(<span class=\"string\">&#x27;input&#x27;</span>,dHandler);</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"防抖的应用场景\"><a href=\"#防抖的应用场景\" class=\"headerlink\" title=\"防抖的应用场景\"></a>防抖的应用场景</h3><p>防抖主要应用于那些不必时时刻刻追踪用户动作的事件触发。比如最常见的例子，Baidu搜索中用户输入的自动提示（假设不保存在本地，而需要XHR请求），你可以设置用户停止输入200ms后触发一次事件，如果两次用户输入小于200ms则不会触发并且需要重新计时。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这些常见的节流和防抖的工具函数在一些常见的工具库中就能够找到，比如说<a href=\"https://lodash.com/\">lodash</a>，其中就有<a href=\"https://lodash.com/docs/4.17.15#throttle\">throttle</a>和<a href=\"https://lodash.com/docs/4.17.15#debounce\">debounce</a>函数。</p>\n<ul>\n<li>节流就是直接限制触发频率，或指定多长时间触发一次，或指定时间段内触发几次，或多次触发当做一次触发</li>\n<li>防抖是等风平浪静时再响应触发，风平浪静指的是时间触发后x毫秒后未再次触发。</li>\n<li>节流和防抖无法解决所有的问题，比如恶心冗杂的代码。因此在想用节流防抖来优化降低事件触发率之前先做好其他优化。</li>\n<li>节流和防抖对于一些场景下的高频事件触发并不适用，比如说某些滑动组件如果使用节流那就会出bug，用户也就感觉恶心心。</li>\n</ul>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://codeburst.io/throttling-and-debouncing-in-javascript-646d076d0a44\">Throttling and debouncing in JavaScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note primary\"><p>Reduce event trigger rate by throttling &amp; debouncing</p>\n</div>","more":"<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>节流和防抖都是为了解决一个问题——事件的触发率。事件的触发率，顾名思义就是单位时间内你的回调函数被调用的次数。这篇文章总结一下节流和防抖的使用场景和两者的定义与区别。</p>\n<h2 id=\"事件的触发率\"><a href=\"#事件的触发率\" class=\"headerlink\" title=\"事件的触发率\"></a>事件的触发率</h2><p>什么时候关注事件的触发率呢？</p>\n<ul>\n<li>点击一个按钮的时候？这个时候触发率有多高？就算你点击的很快那也是比较小的，不够明显。</li>\n<li>在输入框内迅速的打字，输入框的改变事件触发率高吗？这个是比较明显的，最常见的一个例子就是在搜索引擎内输入时的自动提示。</li>\n<li>最明显的是什么事件？什么事件的触发率会很高？比如说<code>scroll</code>和<code>mousemove</code>事件触发率会非常高！</li>\n</ul>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><p>如果你关注的某个事件的触发率比较高，那么你应该需要注意这个事件的回调函数。</p>\n<p>如果你的回调函数内几乎没做什么事，没有很大的计算，没有涉及很慢的操作（下面会说有哪些操作），那么你可以酌情忽略。</p>\n<p>如果某个事件的触发率比较高并且其事件回调函数内涉及如下操作，那么你就<strong>需要考虑回流或者防抖</strong>了。</p>\n<p>比如说：</p>\n<ul>\n<li>XHR网络请求</li>\n<li>引起浏览器的回流或者重绘</li>\n<li>计算大量数据</li>\n<li>…</li>\n</ul>\n<div class=\"note success\"><p>节流和防抖就是为了减少事件的触发率来节省资源。这两种方式实际上就是在响应用户动作和最佳资源使用上的一个折中。</p>\n</div>\n\n\n\n\n\n<h2 id=\"节流（throttling）\"><a href=\"#节流（throttling）\" class=\"headerlink\" title=\"节流（throttling）\"></a>节流（throttling）</h2><p>节流，顾名思义就是限制流速，可以给定一个事件触发率的一个上限值，让频繁的事件触发变的稍慢一些。</p>\n<h3 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h3><p>当然这个上限值可以通过多种方式来实现：</p>\n<ul>\n<li>通过每隔多少时间触发一次来设置</li>\n<li>通过每隔多少次触发当做一次触发来设置</li>\n<li>通过某个时间段内只能触发几次来设置</li>\n</ul>\n<p>重构项目时为了避免重写大量回调函数，我们可以封装一个wrapper函数，这个函数返回一个新的代理函数，原来的回调函数不变。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttled</span>(<span class=\"params\">delay,fn</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> lastInvoke=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">...args</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> now=<span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(now-lastInvoke&lt;delay) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        lastInvoke=now;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fn(...args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个封装实际上就是用到了闭包来保存上次事件成功触发的时间。<br>你可以通过如下方式使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//原来的回调函数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> myHandler=<span class=\"function\">(<span class=\"params\">event</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//do sth.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//新生成的代理函数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> tHandler=throttled(<span class=\"number\">200</span>,myHandler);</span><br><span class=\"line\">domNode.addEventListener(<span class=\"string\">&#x27;mousemove&#x27;</span>,tHandler);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这样事件实际触发的上限值是200ms触发一次，两次触发之间的所有无效触发都被忽略。<br>当然这个<code>delay</code>所设置的时间需要有各种考虑，需要平衡网页的响应时间和流畅程度。<strong>节流对于CSS的<code>transition</code>比较有效。</strong></p>\n<h3 id=\"节流的应用场景\"><a href=\"#节流的应用场景\" class=\"headerlink\" title=\"节流的应用场景\"></a>节流的应用场景</h3><p>需要追踪用户的动作，但是因为事件回调的负担，不能高频率触发事件。比如追踪<code>scroll</code>的位置来做出某些响应。</p>\n<h2 id=\"防抖（debouncing）\"><a href=\"#防抖（debouncing）\" class=\"headerlink\" title=\"防抖（debouncing）\"></a>防抖（debouncing）</h2><p>防抖，亦可顾名思义，就是防止抖动，把原来的一些列抖动当做一次平移。也就是说将一系列连续的事件触发结束后的一段时间内没有再触发，那么就真正的触发一次。再生动形象一点，就是等风平浪静之后只触发一次事件。</p>\n<h3 id=\"防抖的实现\"><a href=\"#防抖的实现\" class=\"headerlink\" title=\"防抖的实现\"></a>防抖的实现</h3><p>防抖可以通过JS的计时器<code>setTimeout()</code>和<code>clearTimeout()</code>来实现。</p>\n<p>和节流的实现方式类似，我们用一个wrapper函数来创建一个代理函数，原来未防抖的回调函数不变。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounced</span>(<span class=\"params\">delay,fn</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeId=<span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">...args</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(timeId)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">clearTimeout</span>(timeId);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        timeId=<span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">            fn(...args);</span><br><span class=\"line\">            timeId=<span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;,delay);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用方式和节流创建函数类似，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myHandler=<span class=\"function\">(<span class=\"params\">event</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//do sth.</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> dHandler=debounced(<span class=\"number\">200</span>,myHandler);</span><br><span class=\"line\">domNode.addEventListener(<span class=\"string\">&#x27;input&#x27;</span>,dHandler);</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"防抖的应用场景\"><a href=\"#防抖的应用场景\" class=\"headerlink\" title=\"防抖的应用场景\"></a>防抖的应用场景</h3><p>防抖主要应用于那些不必时时刻刻追踪用户动作的事件触发。比如最常见的例子，Baidu搜索中用户输入的自动提示（假设不保存在本地，而需要XHR请求），你可以设置用户停止输入200ms后触发一次事件，如果两次用户输入小于200ms则不会触发并且需要重新计时。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这些常见的节流和防抖的工具函数在一些常见的工具库中就能够找到，比如说<a href=\"https://lodash.com/\">lodash</a>，其中就有<a href=\"https://lodash.com/docs/4.17.15#throttle\">throttle</a>和<a href=\"https://lodash.com/docs/4.17.15#debounce\">debounce</a>函数。</p>\n<ul>\n<li>节流就是直接限制触发频率，或指定多长时间触发一次，或指定时间段内触发几次，或多次触发当做一次触发</li>\n<li>防抖是等风平浪静时再响应触发，风平浪静指的是时间触发后x毫秒后未再次触发。</li>\n<li>节流和防抖无法解决所有的问题，比如恶心冗杂的代码。因此在想用节流防抖来优化降低事件触发率之前先做好其他优化。</li>\n<li>节流和防抖对于一些场景下的高频事件触发并不适用，比如说某些滑动组件如果使用节流那就会出bug，用户也就感觉恶心心。</li>\n</ul>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://codeburst.io/throttling-and-debouncing-in-javascript-646d076d0a44\">Throttling and debouncing in JavaScript</a></li>\n</ul>"},{"title":"恶心心JavaScript系列：对象设置不变性","mathjax":false,"copyright":true,"comment":true,"date":"2019-12-16T06:27:41.000Z","_content":"\n{% note primary %}\n如何让JS中的对象不变。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 前言\n\n在其他语言比如Java中你可以设置对象为常量，对象属性为常量，通过使用`final`关键字。在JS中你可能知道使用`const`关键字，但是对于一个对象用`const`关键字描述结果是什么？只是将变量所保存的引用索引无法改变了而已，对象内部还是可以改变的。\n\n今天我们就来总结一下有哪些方法可以让一个对象保持不变性。\n\n## 不变性\n\n目前为止，你可能只知道通过`const`来设置一个变量为常量，但是对象如何设置为常量？通过`const`修饰只能保证其“值不变性”，如何保证其“引用目标内容不变性”？这就是我们要讨论的话题。\n\n### const\n`const`只是修饰的变量本身，如果该变量是个值类型，那么这个值不可改变；如果该变量是个引用类型，则该变量无法再引用其他引用类型，也就是引用对象目标不可变，但是对象内部可以改变。\n\n\n```javascript\n\nconst a=1;\na=2;//不可改：Uncaught TypeError: Assignment to constant variable.\n\nconst arr=[1,2,3];\narr.push(4);//可改，看下一行的打印\nconsole.log(arr);//[1,2,3,4]\narr=[4,5,6];//不可改：Uncaught TypeError: Assignment to constant variable.\n\nconst obj={};\nobj.m=1;//可改，看下一行打印\nconsole.log(obj);//{m:1}\nobj={};//不可改：Uncaught TypeError: Assignment to constant variable.\n\n```\n\n### 属性描述符\n\n如果想让一个对象属性变为真正的常量，可以通过描述符的方式，使其**不可修改、不可重定义或删除**。\n\n```javascript\nconst obj={};\nObject.defineProperty(obj,'m',{\n    value:1,\n    writable:false,\n    configurable:false;\n    enumerable:true\n})\nobj.m=2;\nconsole.log(obj.m);//1\n```\n\n### 禁止扩展\n\n通过`Object.preventExtensions()`方法可以禁止一个对象添加新属性。\n\n```javascript\nconst obj={\n    a:1\n}\nObject.preventExtensions(obj);\nobj.b=2;\nconsole.log(obj.b);//undefined\n```\n\n### 密封\n\n通过`Object.seal()`方法可以“密封”一个对象，相当于先调用`Object.preventExtensions()`，再将所有现有属性改为`configurable:false`。原来是`writable:true`的仍可修改。\n```javascript\nconst obj={\n    a:1\n}\nObject.seal(obj);\ndelete obj.a;//false\nconsole.log(obj.a);//1\n```\n\n### 冻结\n\n通过`Object.freeze()`方法可以“冻结”一个对象，相当于先调用`Object.seal()`，再将所有属性改为`writable:false`。\n```javascript\nconst obj={\n    a:1\n}\nObject.freeze(obj);\nobj.a=2;\nconsole.log(obj.a);//1\n```\n\n### 深不可变性\n\n深不可变性可以通过DFS或者BFS，递归或者队列设置不可变性。\n\n## 总结\n\n- 通过描述符可以设置一个对象属性不可变性\n- 通过`Object.preventExtensions`设置对象不可添加属性\n- 通过`Object.seal`设置对象不可添加属性，不可配置已有属性和删除已有属性\n- 通过`Object.freeze`设置对象所有属性“浅不可变”\n\n## Reference\n\n- [You Don't Know JS Yet: Objects & Classes - 2nd Edition->Chapter 3: Objects](https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/objects-classes/ch3.md)","source":"_posts/js-dont-know-const.md","raw":"---\ntitle: 恶心心JavaScript系列：对象设置不变性\nmathjax: false\ncopyright: true\ncomment: true\ndate: 2019-12-16 14:27:41\ntags:\n- JavaScript\ncategories:\n- Front-End Development\n- JavaScript\n---\n\n{% note primary %}\n如何让JS中的对象不变。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 前言\n\n在其他语言比如Java中你可以设置对象为常量，对象属性为常量，通过使用`final`关键字。在JS中你可能知道使用`const`关键字，但是对于一个对象用`const`关键字描述结果是什么？只是将变量所保存的引用索引无法改变了而已，对象内部还是可以改变的。\n\n今天我们就来总结一下有哪些方法可以让一个对象保持不变性。\n\n## 不变性\n\n目前为止，你可能只知道通过`const`来设置一个变量为常量，但是对象如何设置为常量？通过`const`修饰只能保证其“值不变性”，如何保证其“引用目标内容不变性”？这就是我们要讨论的话题。\n\n### const\n`const`只是修饰的变量本身，如果该变量是个值类型，那么这个值不可改变；如果该变量是个引用类型，则该变量无法再引用其他引用类型，也就是引用对象目标不可变，但是对象内部可以改变。\n\n\n```javascript\n\nconst a=1;\na=2;//不可改：Uncaught TypeError: Assignment to constant variable.\n\nconst arr=[1,2,3];\narr.push(4);//可改，看下一行的打印\nconsole.log(arr);//[1,2,3,4]\narr=[4,5,6];//不可改：Uncaught TypeError: Assignment to constant variable.\n\nconst obj={};\nobj.m=1;//可改，看下一行打印\nconsole.log(obj);//{m:1}\nobj={};//不可改：Uncaught TypeError: Assignment to constant variable.\n\n```\n\n### 属性描述符\n\n如果想让一个对象属性变为真正的常量，可以通过描述符的方式，使其**不可修改、不可重定义或删除**。\n\n```javascript\nconst obj={};\nObject.defineProperty(obj,'m',{\n    value:1,\n    writable:false,\n    configurable:false;\n    enumerable:true\n})\nobj.m=2;\nconsole.log(obj.m);//1\n```\n\n### 禁止扩展\n\n通过`Object.preventExtensions()`方法可以禁止一个对象添加新属性。\n\n```javascript\nconst obj={\n    a:1\n}\nObject.preventExtensions(obj);\nobj.b=2;\nconsole.log(obj.b);//undefined\n```\n\n### 密封\n\n通过`Object.seal()`方法可以“密封”一个对象，相当于先调用`Object.preventExtensions()`，再将所有现有属性改为`configurable:false`。原来是`writable:true`的仍可修改。\n```javascript\nconst obj={\n    a:1\n}\nObject.seal(obj);\ndelete obj.a;//false\nconsole.log(obj.a);//1\n```\n\n### 冻结\n\n通过`Object.freeze()`方法可以“冻结”一个对象，相当于先调用`Object.seal()`，再将所有属性改为`writable:false`。\n```javascript\nconst obj={\n    a:1\n}\nObject.freeze(obj);\nobj.a=2;\nconsole.log(obj.a);//1\n```\n\n### 深不可变性\n\n深不可变性可以通过DFS或者BFS，递归或者队列设置不可变性。\n\n## 总结\n\n- 通过描述符可以设置一个对象属性不可变性\n- 通过`Object.preventExtensions`设置对象不可添加属性\n- 通过`Object.seal`设置对象不可添加属性，不可配置已有属性和删除已有属性\n- 通过`Object.freeze`设置对象所有属性“浅不可变”\n\n## Reference\n\n- [You Don't Know JS Yet: Objects & Classes - 2nd Edition->Chapter 3: Objects](https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/objects-classes/ch3.md)","slug":"js-dont-know-const","published":1,"updated":"2022-01-06T04:09:12.465Z","_id":"cksq5v7mv003jn0puhx9i4zpi","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note primary\"><p>如何让JS中的对象不变。</p>\n</div>\n\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在其他语言比如Java中你可以设置对象为常量，对象属性为常量，通过使用<code>final</code>关键字。在JS中你可能知道使用<code>const</code>关键字，但是对于一个对象用<code>const</code>关键字描述结果是什么？只是将变量所保存的引用索引无法改变了而已，对象内部还是可以改变的。</p>\n<p>今天我们就来总结一下有哪些方法可以让一个对象保持不变性。</p>\n<h2 id=\"不变性\"><a href=\"#不变性\" class=\"headerlink\" title=\"不变性\"></a>不变性</h2><p>目前为止，你可能只知道通过<code>const</code>来设置一个变量为常量，但是对象如何设置为常量？通过<code>const</code>修饰只能保证其“值不变性”，如何保证其“引用目标内容不变性”？这就是我们要讨论的话题。</p>\n<h3 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h3><p><code>const</code>只是修饰的变量本身，如果该变量是个值类型，那么这个值不可改变；如果该变量是个引用类型，则该变量无法再引用其他引用类型，也就是引用对象目标不可变，但是对象内部可以改变。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a=<span class=\"number\">1</span>;</span><br><span class=\"line\">a=<span class=\"number\">2</span>;<span class=\"comment\">//不可改：Uncaught TypeError: Assignment to constant variable.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">arr.push(<span class=\"number\">4</span>);<span class=\"comment\">//可改，看下一行的打印</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);<span class=\"comment\">//[1,2,3,4]</span></span><br><span class=\"line\">arr=[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];<span class=\"comment\">//不可改：Uncaught TypeError: Assignment to constant variable.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj=&#123;&#125;;</span><br><span class=\"line\">obj.m=<span class=\"number\">1</span>;<span class=\"comment\">//可改，看下一行打印</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj);<span class=\"comment\">//&#123;m:1&#125;</span></span><br><span class=\"line\">obj=&#123;&#125;;<span class=\"comment\">//不可改：Uncaught TypeError: Assignment to constant variable.</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"属性描述符\"><a href=\"#属性描述符\" class=\"headerlink\" title=\"属性描述符\"></a>属性描述符</h3><p>如果想让一个对象属性变为真正的常量，可以通过描述符的方式，使其<strong>不可修改、不可重定义或删除</strong>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj=&#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj,<span class=\"string\">&#x27;m&#x27;</span>,&#123;</span><br><span class=\"line\">    <span class=\"attr\">value</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">writable</span>:<span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">configurable</span>:<span class=\"literal\">false</span>;</span><br><span class=\"line\">    enumerable:<span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">obj.m=<span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.m);<span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"禁止扩展\"><a href=\"#禁止扩展\" class=\"headerlink\" title=\"禁止扩展\"></a>禁止扩展</h3><p>通过<code>Object.preventExtensions()</code>方法可以禁止一个对象添加新属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj=&#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>:<span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.preventExtensions(obj);</span><br><span class=\"line\">obj.b=<span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.b);<span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"密封\"><a href=\"#密封\" class=\"headerlink\" title=\"密封\"></a>密封</h3><p>通过<code>Object.seal()</code>方法可以“密封”一个对象，相当于先调用<code>Object.preventExtensions()</code>，再将所有现有属性改为<code>configurable:false</code>。原来是<code>writable:true</code>的仍可修改。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj=&#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>:<span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.seal(obj);</span><br><span class=\"line\"><span class=\"keyword\">delete</span> obj.a;<span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.a);<span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"冻结\"><a href=\"#冻结\" class=\"headerlink\" title=\"冻结\"></a>冻结</h3><p>通过<code>Object.freeze()</code>方法可以“冻结”一个对象，相当于先调用<code>Object.seal()</code>，再将所有属性改为<code>writable:false</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj=&#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>:<span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.freeze(obj);</span><br><span class=\"line\">obj.a=<span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.a);<span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"深不可变性\"><a href=\"#深不可变性\" class=\"headerlink\" title=\"深不可变性\"></a>深不可变性</h3><p>深不可变性可以通过DFS或者BFS，递归或者队列设置不可变性。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>通过描述符可以设置一个对象属性不可变性</li>\n<li>通过<code>Object.preventExtensions</code>设置对象不可添加属性</li>\n<li>通过<code>Object.seal</code>设置对象不可添加属性，不可配置已有属性和删除已有属性</li>\n<li>通过<code>Object.freeze</code>设置对象所有属性“浅不可变”</li>\n</ul>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/objects-classes/ch3.md\">You Don’t Know JS Yet: Objects &amp; Classes - 2nd Edition-&gt;Chapter 3: Objects</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note primary\"><p>如何让JS中的对象不变。</p>\n</div>","more":"<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在其他语言比如Java中你可以设置对象为常量，对象属性为常量，通过使用<code>final</code>关键字。在JS中你可能知道使用<code>const</code>关键字，但是对于一个对象用<code>const</code>关键字描述结果是什么？只是将变量所保存的引用索引无法改变了而已，对象内部还是可以改变的。</p>\n<p>今天我们就来总结一下有哪些方法可以让一个对象保持不变性。</p>\n<h2 id=\"不变性\"><a href=\"#不变性\" class=\"headerlink\" title=\"不变性\"></a>不变性</h2><p>目前为止，你可能只知道通过<code>const</code>来设置一个变量为常量，但是对象如何设置为常量？通过<code>const</code>修饰只能保证其“值不变性”，如何保证其“引用目标内容不变性”？这就是我们要讨论的话题。</p>\n<h3 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h3><p><code>const</code>只是修饰的变量本身，如果该变量是个值类型，那么这个值不可改变；如果该变量是个引用类型，则该变量无法再引用其他引用类型，也就是引用对象目标不可变，但是对象内部可以改变。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a=<span class=\"number\">1</span>;</span><br><span class=\"line\">a=<span class=\"number\">2</span>;<span class=\"comment\">//不可改：Uncaught TypeError: Assignment to constant variable.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">arr.push(<span class=\"number\">4</span>);<span class=\"comment\">//可改，看下一行的打印</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);<span class=\"comment\">//[1,2,3,4]</span></span><br><span class=\"line\">arr=[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];<span class=\"comment\">//不可改：Uncaught TypeError: Assignment to constant variable.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj=&#123;&#125;;</span><br><span class=\"line\">obj.m=<span class=\"number\">1</span>;<span class=\"comment\">//可改，看下一行打印</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj);<span class=\"comment\">//&#123;m:1&#125;</span></span><br><span class=\"line\">obj=&#123;&#125;;<span class=\"comment\">//不可改：Uncaught TypeError: Assignment to constant variable.</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"属性描述符\"><a href=\"#属性描述符\" class=\"headerlink\" title=\"属性描述符\"></a>属性描述符</h3><p>如果想让一个对象属性变为真正的常量，可以通过描述符的方式，使其<strong>不可修改、不可重定义或删除</strong>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj=&#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj,<span class=\"string\">&#x27;m&#x27;</span>,&#123;</span><br><span class=\"line\">    <span class=\"attr\">value</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">writable</span>:<span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">configurable</span>:<span class=\"literal\">false</span>;</span><br><span class=\"line\">    enumerable:<span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">obj.m=<span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.m);<span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"禁止扩展\"><a href=\"#禁止扩展\" class=\"headerlink\" title=\"禁止扩展\"></a>禁止扩展</h3><p>通过<code>Object.preventExtensions()</code>方法可以禁止一个对象添加新属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj=&#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>:<span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.preventExtensions(obj);</span><br><span class=\"line\">obj.b=<span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.b);<span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"密封\"><a href=\"#密封\" class=\"headerlink\" title=\"密封\"></a>密封</h3><p>通过<code>Object.seal()</code>方法可以“密封”一个对象，相当于先调用<code>Object.preventExtensions()</code>，再将所有现有属性改为<code>configurable:false</code>。原来是<code>writable:true</code>的仍可修改。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj=&#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>:<span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.seal(obj);</span><br><span class=\"line\"><span class=\"keyword\">delete</span> obj.a;<span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.a);<span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"冻结\"><a href=\"#冻结\" class=\"headerlink\" title=\"冻结\"></a>冻结</h3><p>通过<code>Object.freeze()</code>方法可以“冻结”一个对象，相当于先调用<code>Object.seal()</code>，再将所有属性改为<code>writable:false</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj=&#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>:<span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.freeze(obj);</span><br><span class=\"line\">obj.a=<span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.a);<span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"深不可变性\"><a href=\"#深不可变性\" class=\"headerlink\" title=\"深不可变性\"></a>深不可变性</h3><p>深不可变性可以通过DFS或者BFS，递归或者队列设置不可变性。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>通过描述符可以设置一个对象属性不可变性</li>\n<li>通过<code>Object.preventExtensions</code>设置对象不可添加属性</li>\n<li>通过<code>Object.seal</code>设置对象不可添加属性，不可配置已有属性和删除已有属性</li>\n<li>通过<code>Object.freeze</code>设置对象所有属性“浅不可变”</li>\n</ul>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/objects-classes/ch3.md\">You Don’t Know JS Yet: Objects &amp; Classes - 2nd Edition-&gt;Chapter 3: Objects</a></li>\n</ul>"},{"title":"恶心心JavaScript系列：原型链属性隐藏规则","mathjax":false,"copyright":true,"comment":true,"date":"2019-12-16T02:45:17.000Z","_content":"\n{% note primary %}\n让你误解的JavaScript原型链属性隐藏规则。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 前言\n\nJavaScript的原型可能是最让你无解的地方，我们总是千方百计地想通过JS来实现继承，但是实际上JS仅仅是对象关联和任务委托罢了。JS中的继承看起来更像兄弟之间的任务委托而不是真正的父子关系。JS中没有构造函数只有构造函数调用。\n\n好了，切入正题。在JS中，你可能认为是这样，你有一个对象`myDog`，它的原型链上其中一个对象有一个`name`属性值为`Tom`，`myDog`并没有这个属性，现在你通过`myDog.name`访问结果一定是`Tom`没错。但是如果你为`myDog`通过`obj.key=value`的形式新添加一个`name`属性，其值为`Jone`，你可能会回答原型链对象上的属性被屏蔽了。\n\n但其实并不是如此。\n\n## 屏蔽规则\n\n这是需要某种规则的，那么这个规则是什么？下面我们一一讨论`obj.key=value`的三种情况。\n\n### 原型链某对象上存在对应属性名并且没有标记为只读，那么就会为当前对象添加属性，原型链对象上的属性被屏蔽\n\n换句话说，原型链某个对象上存在同名属性并且`writable:true`，那么就会屏蔽。**这就是我们认为应该确实如此的规则**\n\n看个例子：\n\n```javascript\nfunction Dog(){}\nObject.defineProperty(Dog.prototype,'name',{\n    value:'Tom',\n    writable:true,\n    configurable:true,\n    emumerable:true\n});\nlet myDog = new Dog();\nconsole.log(myDog);//\"Tom\"\nmyDog.name=\"Jone\"\nconsole.log(myDog);//\"Jone\"\n```\n\n### 原型链某对象上存在对应属性名并且标记为只读，那么就会忽略为当前对象添加属性，严格模式下会出错\n\n话句话说，如果原型链某个对象上存在同名属性且`writable:false`，那么就忽略添加属性操作，严格模式报错。\n\n还是那个例子：\n\n```javascript\nfunction Dog(){}\nObject.defineProperty(Dog.prototype,'name',{\n    value:'Tom',\n    writable:false,\n    configurable:true,\n    emumerable:true\n});\nlet littleDog = new Dog();\nconsole.log(littleDog.name);//\"Tom\"\nlittleDog.name=\"Jone\"\nconsole.log(littleDog.name);//\"Tom\"\nlittleDog.hasOwnProperty('name');//false\n```\n\n### 原型链某对象上存在对应属性名的setter，那么就会忽略为当前对象添加属性并调用这个setter。\n\n话句话说，原型链的某个对象上存在同名的setter，当你为当前对象同名属性赋值时会调用这个setter。\n\n如上例：\n\n```javascript\nfunction Dog(){}\nObject.defineProperty(Dog.prototype,'name',{\n    get (){return this._name;},\n    set (val){this._name=val},\n    configurable:true,\n    emumerable:true\n})\nlet tinyDog=new Dog();\ntinyDog.name=\"Tom\";\nconsole.log(tinyDog.name);//\"Tom\"\ntinyDog.name=\"Jone\";\nconsole.log(tinyDOg.name);//\"Jone\"\ntinyDog.hasOwnProperty('name');//false\n```\n\n## 如何强制屏蔽\n\n针对后两种情况会导致属性无法屏蔽，要想屏蔽可以使用`Object.defineProperty()`方法进行创建属性。\n\n\n## 总结\n\n使用`obj.key=value`进行属性创建的时候，有可能会屏蔽原型链上的属性也有可能不屏蔽，有如下规则：\n1. 原型链上存在同名数据属性并且可写`writable:true`，那么就会在`obj`上创建属性并屏蔽原型链上的属性。\n2. 原型链上存在同名数据属性并且不可写`writable:false`，那么就忽略在`obj`上创建同名属性动作，严格模式下报错\n3. 原型链上存在同名`setter`函数，那么会调用这个函数。\n\n要想强制屏蔽后两种情况，请用`Object.defineProperty()`方法。\n\n## Reference\n\n- [You Don't Know JS Yet: Objects & Classes - 2nd Edition->Chapter 5: Prototypes](https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/objects-classes/ch5.md)","source":"_posts/js-dont-know-property-hidden.md","raw":"---\ntitle: 恶心心JavaScript系列：原型链属性隐藏规则\nmathjax: false\ncopyright: true\ncomment: true\ndate: 2019-12-16 10:45:17\ntags:\n- JavaScript\ncategories:\n- Front-End Development\n- JavaScript\n\n---\n\n{% note primary %}\n让你误解的JavaScript原型链属性隐藏规则。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 前言\n\nJavaScript的原型可能是最让你无解的地方，我们总是千方百计地想通过JS来实现继承，但是实际上JS仅仅是对象关联和任务委托罢了。JS中的继承看起来更像兄弟之间的任务委托而不是真正的父子关系。JS中没有构造函数只有构造函数调用。\n\n好了，切入正题。在JS中，你可能认为是这样，你有一个对象`myDog`，它的原型链上其中一个对象有一个`name`属性值为`Tom`，`myDog`并没有这个属性，现在你通过`myDog.name`访问结果一定是`Tom`没错。但是如果你为`myDog`通过`obj.key=value`的形式新添加一个`name`属性，其值为`Jone`，你可能会回答原型链对象上的属性被屏蔽了。\n\n但其实并不是如此。\n\n## 屏蔽规则\n\n这是需要某种规则的，那么这个规则是什么？下面我们一一讨论`obj.key=value`的三种情况。\n\n### 原型链某对象上存在对应属性名并且没有标记为只读，那么就会为当前对象添加属性，原型链对象上的属性被屏蔽\n\n换句话说，原型链某个对象上存在同名属性并且`writable:true`，那么就会屏蔽。**这就是我们认为应该确实如此的规则**\n\n看个例子：\n\n```javascript\nfunction Dog(){}\nObject.defineProperty(Dog.prototype,'name',{\n    value:'Tom',\n    writable:true,\n    configurable:true,\n    emumerable:true\n});\nlet myDog = new Dog();\nconsole.log(myDog);//\"Tom\"\nmyDog.name=\"Jone\"\nconsole.log(myDog);//\"Jone\"\n```\n\n### 原型链某对象上存在对应属性名并且标记为只读，那么就会忽略为当前对象添加属性，严格模式下会出错\n\n话句话说，如果原型链某个对象上存在同名属性且`writable:false`，那么就忽略添加属性操作，严格模式报错。\n\n还是那个例子：\n\n```javascript\nfunction Dog(){}\nObject.defineProperty(Dog.prototype,'name',{\n    value:'Tom',\n    writable:false,\n    configurable:true,\n    emumerable:true\n});\nlet littleDog = new Dog();\nconsole.log(littleDog.name);//\"Tom\"\nlittleDog.name=\"Jone\"\nconsole.log(littleDog.name);//\"Tom\"\nlittleDog.hasOwnProperty('name');//false\n```\n\n### 原型链某对象上存在对应属性名的setter，那么就会忽略为当前对象添加属性并调用这个setter。\n\n话句话说，原型链的某个对象上存在同名的setter，当你为当前对象同名属性赋值时会调用这个setter。\n\n如上例：\n\n```javascript\nfunction Dog(){}\nObject.defineProperty(Dog.prototype,'name',{\n    get (){return this._name;},\n    set (val){this._name=val},\n    configurable:true,\n    emumerable:true\n})\nlet tinyDog=new Dog();\ntinyDog.name=\"Tom\";\nconsole.log(tinyDog.name);//\"Tom\"\ntinyDog.name=\"Jone\";\nconsole.log(tinyDOg.name);//\"Jone\"\ntinyDog.hasOwnProperty('name');//false\n```\n\n## 如何强制屏蔽\n\n针对后两种情况会导致属性无法屏蔽，要想屏蔽可以使用`Object.defineProperty()`方法进行创建属性。\n\n\n## 总结\n\n使用`obj.key=value`进行属性创建的时候，有可能会屏蔽原型链上的属性也有可能不屏蔽，有如下规则：\n1. 原型链上存在同名数据属性并且可写`writable:true`，那么就会在`obj`上创建属性并屏蔽原型链上的属性。\n2. 原型链上存在同名数据属性并且不可写`writable:false`，那么就忽略在`obj`上创建同名属性动作，严格模式下报错\n3. 原型链上存在同名`setter`函数，那么会调用这个函数。\n\n要想强制屏蔽后两种情况，请用`Object.defineProperty()`方法。\n\n## Reference\n\n- [You Don't Know JS Yet: Objects & Classes - 2nd Edition->Chapter 5: Prototypes](https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/objects-classes/ch5.md)","slug":"js-dont-know-property-hidden","published":1,"updated":"2022-01-06T04:09:12.465Z","_id":"cksq5v7mw003nn0pucjeggby0","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note primary\"><p>让你误解的JavaScript原型链属性隐藏规则。</p>\n</div>\n\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>JavaScript的原型可能是最让你无解的地方，我们总是千方百计地想通过JS来实现继承，但是实际上JS仅仅是对象关联和任务委托罢了。JS中的继承看起来更像兄弟之间的任务委托而不是真正的父子关系。JS中没有构造函数只有构造函数调用。</p>\n<p>好了，切入正题。在JS中，你可能认为是这样，你有一个对象<code>myDog</code>，它的原型链上其中一个对象有一个<code>name</code>属性值为<code>Tom</code>，<code>myDog</code>并没有这个属性，现在你通过<code>myDog.name</code>访问结果一定是<code>Tom</code>没错。但是如果你为<code>myDog</code>通过<code>obj.key=value</code>的形式新添加一个<code>name</code>属性，其值为<code>Jone</code>，你可能会回答原型链对象上的属性被屏蔽了。</p>\n<p>但其实并不是如此。</p>\n<h2 id=\"屏蔽规则\"><a href=\"#屏蔽规则\" class=\"headerlink\" title=\"屏蔽规则\"></a>屏蔽规则</h2><p>这是需要某种规则的，那么这个规则是什么？下面我们一一讨论<code>obj.key=value</code>的三种情况。</p>\n<h3 id=\"原型链某对象上存在对应属性名并且没有标记为只读，那么就会为当前对象添加属性，原型链对象上的属性被屏蔽\"><a href=\"#原型链某对象上存在对应属性名并且没有标记为只读，那么就会为当前对象添加属性，原型链对象上的属性被屏蔽\" class=\"headerlink\" title=\"原型链某对象上存在对应属性名并且没有标记为只读，那么就会为当前对象添加属性，原型链对象上的属性被屏蔽\"></a>原型链某对象上存在对应属性名并且没有标记为只读，那么就会为当前对象添加属性，原型链对象上的属性被屏蔽</h3><p>换句话说，原型链某个对象上存在同名属性并且<code>writable:true</code>，那么就会屏蔽。<strong>这就是我们认为应该确实如此的规则</strong></p>\n<p>看个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dog</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(Dog.prototype,<span class=\"string\">&#x27;name&#x27;</span>,&#123;</span><br><span class=\"line\">    <span class=\"attr\">value</span>:<span class=\"string\">&#x27;Tom&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">writable</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">configurable</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">emumerable</span>:<span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">let</span> myDog = <span class=\"keyword\">new</span> Dog();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myDog);<span class=\"comment\">//&quot;Tom&quot;</span></span><br><span class=\"line\">myDog.name=<span class=\"string\">&quot;Jone&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myDog);<span class=\"comment\">//&quot;Jone&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"原型链某对象上存在对应属性名并且标记为只读，那么就会忽略为当前对象添加属性，严格模式下会出错\"><a href=\"#原型链某对象上存在对应属性名并且标记为只读，那么就会忽略为当前对象添加属性，严格模式下会出错\" class=\"headerlink\" title=\"原型链某对象上存在对应属性名并且标记为只读，那么就会忽略为当前对象添加属性，严格模式下会出错\"></a>原型链某对象上存在对应属性名并且标记为只读，那么就会忽略为当前对象添加属性，严格模式下会出错</h3><p>话句话说，如果原型链某个对象上存在同名属性且<code>writable:false</code>，那么就忽略添加属性操作，严格模式报错。</p>\n<p>还是那个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dog</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(Dog.prototype,<span class=\"string\">&#x27;name&#x27;</span>,&#123;</span><br><span class=\"line\">    <span class=\"attr\">value</span>:<span class=\"string\">&#x27;Tom&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">writable</span>:<span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">configurable</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">emumerable</span>:<span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">let</span> littleDog = <span class=\"keyword\">new</span> Dog();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(littleDog.name);<span class=\"comment\">//&quot;Tom&quot;</span></span><br><span class=\"line\">littleDog.name=<span class=\"string\">&quot;Jone&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(littleDog.name);<span class=\"comment\">//&quot;Tom&quot;</span></span><br><span class=\"line\">littleDog.hasOwnProperty(<span class=\"string\">&#x27;name&#x27;</span>);<span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"原型链某对象上存在对应属性名的setter，那么就会忽略为当前对象添加属性并调用这个setter。\"><a href=\"#原型链某对象上存在对应属性名的setter，那么就会忽略为当前对象添加属性并调用这个setter。\" class=\"headerlink\" title=\"原型链某对象上存在对应属性名的setter，那么就会忽略为当前对象添加属性并调用这个setter。\"></a>原型链某对象上存在对应属性名的setter，那么就会忽略为当前对象添加属性并调用这个setter。</h3><p>话句话说，原型链的某个对象上存在同名的setter，当你为当前对象同名属性赋值时会调用这个setter。</p>\n<p>如上例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dog</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(Dog.prototype,<span class=\"string\">&#x27;name&#x27;</span>,&#123;</span><br><span class=\"line\">    get ()&#123;<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>._name;&#125;,</span><br><span class=\"line\">    set (val)&#123;<span class=\"built_in\">this</span>._name=val&#125;,</span><br><span class=\"line\">    <span class=\"attr\">configurable</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">emumerable</span>:<span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> tinyDog=<span class=\"keyword\">new</span> Dog();</span><br><span class=\"line\">tinyDog.name=<span class=\"string\">&quot;Tom&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tinyDog.name);<span class=\"comment\">//&quot;Tom&quot;</span></span><br><span class=\"line\">tinyDog.name=<span class=\"string\">&quot;Jone&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tinyDOg.name);<span class=\"comment\">//&quot;Jone&quot;</span></span><br><span class=\"line\">tinyDog.hasOwnProperty(<span class=\"string\">&#x27;name&#x27;</span>);<span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如何强制屏蔽\"><a href=\"#如何强制屏蔽\" class=\"headerlink\" title=\"如何强制屏蔽\"></a>如何强制屏蔽</h2><p>针对后两种情况会导致属性无法屏蔽，要想屏蔽可以使用<code>Object.defineProperty()</code>方法进行创建属性。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>使用<code>obj.key=value</code>进行属性创建的时候，有可能会屏蔽原型链上的属性也有可能不屏蔽，有如下规则：</p>\n<ol>\n<li>原型链上存在同名数据属性并且可写<code>writable:true</code>，那么就会在<code>obj</code>上创建属性并屏蔽原型链上的属性。</li>\n<li>原型链上存在同名数据属性并且不可写<code>writable:false</code>，那么就忽略在<code>obj</code>上创建同名属性动作，严格模式下报错</li>\n<li>原型链上存在同名<code>setter</code>函数，那么会调用这个函数。</li>\n</ol>\n<p>要想强制屏蔽后两种情况，请用<code>Object.defineProperty()</code>方法。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/objects-classes/ch5.md\">You Don’t Know JS Yet: Objects &amp; Classes - 2nd Edition-&gt;Chapter 5: Prototypes</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note primary\"><p>让你误解的JavaScript原型链属性隐藏规则。</p>\n</div>","more":"<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>JavaScript的原型可能是最让你无解的地方，我们总是千方百计地想通过JS来实现继承，但是实际上JS仅仅是对象关联和任务委托罢了。JS中的继承看起来更像兄弟之间的任务委托而不是真正的父子关系。JS中没有构造函数只有构造函数调用。</p>\n<p>好了，切入正题。在JS中，你可能认为是这样，你有一个对象<code>myDog</code>，它的原型链上其中一个对象有一个<code>name</code>属性值为<code>Tom</code>，<code>myDog</code>并没有这个属性，现在你通过<code>myDog.name</code>访问结果一定是<code>Tom</code>没错。但是如果你为<code>myDog</code>通过<code>obj.key=value</code>的形式新添加一个<code>name</code>属性，其值为<code>Jone</code>，你可能会回答原型链对象上的属性被屏蔽了。</p>\n<p>但其实并不是如此。</p>\n<h2 id=\"屏蔽规则\"><a href=\"#屏蔽规则\" class=\"headerlink\" title=\"屏蔽规则\"></a>屏蔽规则</h2><p>这是需要某种规则的，那么这个规则是什么？下面我们一一讨论<code>obj.key=value</code>的三种情况。</p>\n<h3 id=\"原型链某对象上存在对应属性名并且没有标记为只读，那么就会为当前对象添加属性，原型链对象上的属性被屏蔽\"><a href=\"#原型链某对象上存在对应属性名并且没有标记为只读，那么就会为当前对象添加属性，原型链对象上的属性被屏蔽\" class=\"headerlink\" title=\"原型链某对象上存在对应属性名并且没有标记为只读，那么就会为当前对象添加属性，原型链对象上的属性被屏蔽\"></a>原型链某对象上存在对应属性名并且没有标记为只读，那么就会为当前对象添加属性，原型链对象上的属性被屏蔽</h3><p>换句话说，原型链某个对象上存在同名属性并且<code>writable:true</code>，那么就会屏蔽。<strong>这就是我们认为应该确实如此的规则</strong></p>\n<p>看个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dog</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(Dog.prototype,<span class=\"string\">&#x27;name&#x27;</span>,&#123;</span><br><span class=\"line\">    <span class=\"attr\">value</span>:<span class=\"string\">&#x27;Tom&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">writable</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">configurable</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">emumerable</span>:<span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">let</span> myDog = <span class=\"keyword\">new</span> Dog();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myDog);<span class=\"comment\">//&quot;Tom&quot;</span></span><br><span class=\"line\">myDog.name=<span class=\"string\">&quot;Jone&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myDog);<span class=\"comment\">//&quot;Jone&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"原型链某对象上存在对应属性名并且标记为只读，那么就会忽略为当前对象添加属性，严格模式下会出错\"><a href=\"#原型链某对象上存在对应属性名并且标记为只读，那么就会忽略为当前对象添加属性，严格模式下会出错\" class=\"headerlink\" title=\"原型链某对象上存在对应属性名并且标记为只读，那么就会忽略为当前对象添加属性，严格模式下会出错\"></a>原型链某对象上存在对应属性名并且标记为只读，那么就会忽略为当前对象添加属性，严格模式下会出错</h3><p>话句话说，如果原型链某个对象上存在同名属性且<code>writable:false</code>，那么就忽略添加属性操作，严格模式报错。</p>\n<p>还是那个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dog</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(Dog.prototype,<span class=\"string\">&#x27;name&#x27;</span>,&#123;</span><br><span class=\"line\">    <span class=\"attr\">value</span>:<span class=\"string\">&#x27;Tom&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">writable</span>:<span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">configurable</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">emumerable</span>:<span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">let</span> littleDog = <span class=\"keyword\">new</span> Dog();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(littleDog.name);<span class=\"comment\">//&quot;Tom&quot;</span></span><br><span class=\"line\">littleDog.name=<span class=\"string\">&quot;Jone&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(littleDog.name);<span class=\"comment\">//&quot;Tom&quot;</span></span><br><span class=\"line\">littleDog.hasOwnProperty(<span class=\"string\">&#x27;name&#x27;</span>);<span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"原型链某对象上存在对应属性名的setter，那么就会忽略为当前对象添加属性并调用这个setter。\"><a href=\"#原型链某对象上存在对应属性名的setter，那么就会忽略为当前对象添加属性并调用这个setter。\" class=\"headerlink\" title=\"原型链某对象上存在对应属性名的setter，那么就会忽略为当前对象添加属性并调用这个setter。\"></a>原型链某对象上存在对应属性名的setter，那么就会忽略为当前对象添加属性并调用这个setter。</h3><p>话句话说，原型链的某个对象上存在同名的setter，当你为当前对象同名属性赋值时会调用这个setter。</p>\n<p>如上例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dog</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(Dog.prototype,<span class=\"string\">&#x27;name&#x27;</span>,&#123;</span><br><span class=\"line\">    get ()&#123;<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>._name;&#125;,</span><br><span class=\"line\">    set (val)&#123;<span class=\"built_in\">this</span>._name=val&#125;,</span><br><span class=\"line\">    <span class=\"attr\">configurable</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">emumerable</span>:<span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> tinyDog=<span class=\"keyword\">new</span> Dog();</span><br><span class=\"line\">tinyDog.name=<span class=\"string\">&quot;Tom&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tinyDog.name);<span class=\"comment\">//&quot;Tom&quot;</span></span><br><span class=\"line\">tinyDog.name=<span class=\"string\">&quot;Jone&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tinyDOg.name);<span class=\"comment\">//&quot;Jone&quot;</span></span><br><span class=\"line\">tinyDog.hasOwnProperty(<span class=\"string\">&#x27;name&#x27;</span>);<span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如何强制屏蔽\"><a href=\"#如何强制屏蔽\" class=\"headerlink\" title=\"如何强制屏蔽\"></a>如何强制屏蔽</h2><p>针对后两种情况会导致属性无法屏蔽，要想屏蔽可以使用<code>Object.defineProperty()</code>方法进行创建属性。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>使用<code>obj.key=value</code>进行属性创建的时候，有可能会屏蔽原型链上的属性也有可能不屏蔽，有如下规则：</p>\n<ol>\n<li>原型链上存在同名数据属性并且可写<code>writable:true</code>，那么就会在<code>obj</code>上创建属性并屏蔽原型链上的属性。</li>\n<li>原型链上存在同名数据属性并且不可写<code>writable:false</code>，那么就忽略在<code>obj</code>上创建同名属性动作，严格模式下报错</li>\n<li>原型链上存在同名<code>setter</code>函数，那么会调用这个函数。</li>\n</ol>\n<p>要想强制屏蔽后两种情况，请用<code>Object.defineProperty()</code>方法。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/objects-classes/ch5.md\">You Don’t Know JS Yet: Objects &amp; Classes - 2nd Edition-&gt;Chapter 5: Prototypes</a></li>\n</ul>"},{"title":"Web API系列：存储","mathjax":false,"copyright":true,"comment":true,"date":"2019-11-17T06:17:16.000Z","_content":"\n{% note primary %}\ncookie、localStorage、sessionStorage、indexedDB\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 前言\n\n之前可能用过`Web API`对象里面的存储对象，比如说`cookie`和`localStorage`。但是仅仅把他们当做一个浏览器端存储的工具，并没有认真区分它们的不同和应用场景。\n\n首先为什么需要浏览器端存储数据的`Web API`？HTTP是一个无状态（stateless）协议，需要浏览器记录一些东西。\n\n**本篇主要是简单的了解一些概念和用法，不会深入的总结**，后续会深入了解。\n\n今天总结的主要有三个话题：\n- 区别\n- 使用场景举例\n- 使用方法（Web API）\n\n## 区别\n\n### localStorage\n\n- 存储的数据没有截止日期（有效期）的设置，也就是说只要你不主动删除它，它就可能永远存在。\n- 只能由客户端读取\n- 只能通过JavaScript清除存储条目，或者是用浏览器清除缓存和本地存储数据。\n- 存储的限制容量比sessionStorage和cookie要大\n\n\n### sessionStorage\n\n- 存储的数据只在一个会话中有效，也就是说当关闭浏览器（或者对应tab）时数据会失效。\n- 数据不会自动提交到服务器，只能由客户端读取\n- 存储的限制容量大于cookie（至少5MB）\n\n\n### cookie\n\n- 一般存储一些后续请求中需要发送给服务器的数据，也就是说每次请求都会发送cookie（会涉及性能问题）\n- 有效期会可以由客户端设置，也可以由服务端设置（一般有服务端设置）\n- Cookie一般主要由服务端读取，当然客户端也可以读取。（localStorage和sessionStorage只能由客户端读取）\n- 存储大小小于4KB\n- 可以设置`httpOnly`为`true`，这样就禁止客户端读取cookie\n- 涉及隐私问题\n\n### indexedDB\n\n- 浏览器客户端的低级API\n- 能够存储大量的结构化数据，包括文件，支持大量数据存储。\n- 使用索引进行查询，性能高\n- 是一个事务型数据库系统，有点像基于SQL的关系型数据库管理系统（但列不是固定的）\n- 是基于JavaScript的面向对象数据库\n\n## 使用场景举例\n\n### localStorage\n\n- 持久的较少量数据存储\n\n### sessionStorage\n\n- 会话相关的较少量数据存储\n\n\n### cookie\n\nCookie的工作过程是这样的：\n1. 客户端发起请求\n2. 服务端想要在客户端保存一些状态信息，于是在HTTP响应报文添加头部字段`Set-Cookie`，这样客户端就会保存下来。\n   1. 可以指定有效时间（`Expires`或`Max-Age`）和域名路径（`Domain`和`Path`）来限制cookie。\n   2. `Secure`对于`http:`协议尽管加密也不安全，一些浏览器已经已经不支持不安全的网站（`http:`）设置`Secure`了。\n   3. `HttpOnly`设置之后不允许浏览器端JavaScript访问\n   ```bash\n    HTTP/2.0 200 OK\n    Content-type: text/html\n    Set-Cookie: yummy_cookie=choco\n    Set-Cookie: tasty_cookie=strawberry\n\n    [page content]\n\n   ```\n3. 客户端的后续请求都会携带客户端的cookie信息，即请求头`Cookie`字段\n   ```bash\n   GET /sample_page.html HTTP/2.0\n   Host: www.example.org\n   Cookie: yummy_cookie=choco; tasty_cookie=strawberry\n   ```\n\n下面是一些cookie的使用场景。\n\n- 会话管理\n  - 登陆状态、购物车、游戏分数等服务端需要记录的\n- 个性化\n  - 用户偏好、主题、其他设置等\n- 追踪\n  - 记录分析用户行为\n\n### indexedDB\n\n- 大量数据存储\n- 高性能查询\n\n## 使用方法\n\n### localStorage\n\n- set\n  ```javascript\n    localStorage.setItem('myCat', 'Tom');\n    localStorage.setItem('colorSetting', '#a4509b');\n    localStorage.colorSetting = '#a4509b';//不推荐\n    localStorage['colorSetting'] = '#a4509b';///不推荐\n  ```\n- get\n  ```javascript\n    var cat = localStorage.getItem('myCat');\n  ```\n- remove\n  ```javascript\n    localStorage.removeItem('myCat');\n  ```\n- clear\n  ```javascript\n    // Clear all items\n    localStorage.clear();\n  ```\n\n### sessionStorage\n\n和localStorage接口类似。\n\n### cookie\n\n- write\n  ```javascript\n    document.cookie = \"yummy_cookie=choco\"; \n    document.cookie = \"tasty_cookie=strawberry\"; \n  ```\n- read\n  ```javascript\n    console.log(document.cookie); \n    // logs \"yummy_cookie=choco; tasty_cookie=strawberry\"\n  ```\n- reset\n  ```javascript\n    document.cookie = \"yummy_cookie=\"; \n    document.cookie = \"tasty_cookie=\"; \n  ```\n\n### indexedDB\n\n先了解一下indexedDB的推荐使用流程\n\n1. 检查是否支持indexedDB\n2. 打开数据库`database`\n3. 在数据库中创建一个对象存储仓库`object store`\n4. 开启事务，请求数据库操作（添加、获取等）\n5. 等待操作完成（可以通过监听事件来操作）\n6. 使用查询结果\n\n其他的使用方法暂时不深入了解了，以后用到时再写一篇。\n\n## 相关话题\n\n## Reference\n\n- [Local Storage vs Session Storage vs Cookie](https://scotch.io/@PratyushB/local-storage-vs-session-storage-vs-cookie)\n- [HTTP cookies](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies)\n- [IndexedDB API](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API)\n- [Web Storage API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API)\n- [Using IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB)","source":"_posts/js-storage.md","raw":"---\ntitle: Web API系列：存储\nmathjax: false\ncopyright: true\ncomment: true\ndate: 2019-11-17 14:17:16\ntags:\n- Web API\ncategories:\n- Front-End Development\n- Web API\n\n---\n\n{% note primary %}\ncookie、localStorage、sessionStorage、indexedDB\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 前言\n\n之前可能用过`Web API`对象里面的存储对象，比如说`cookie`和`localStorage`。但是仅仅把他们当做一个浏览器端存储的工具，并没有认真区分它们的不同和应用场景。\n\n首先为什么需要浏览器端存储数据的`Web API`？HTTP是一个无状态（stateless）协议，需要浏览器记录一些东西。\n\n**本篇主要是简单的了解一些概念和用法，不会深入的总结**，后续会深入了解。\n\n今天总结的主要有三个话题：\n- 区别\n- 使用场景举例\n- 使用方法（Web API）\n\n## 区别\n\n### localStorage\n\n- 存储的数据没有截止日期（有效期）的设置，也就是说只要你不主动删除它，它就可能永远存在。\n- 只能由客户端读取\n- 只能通过JavaScript清除存储条目，或者是用浏览器清除缓存和本地存储数据。\n- 存储的限制容量比sessionStorage和cookie要大\n\n\n### sessionStorage\n\n- 存储的数据只在一个会话中有效，也就是说当关闭浏览器（或者对应tab）时数据会失效。\n- 数据不会自动提交到服务器，只能由客户端读取\n- 存储的限制容量大于cookie（至少5MB）\n\n\n### cookie\n\n- 一般存储一些后续请求中需要发送给服务器的数据，也就是说每次请求都会发送cookie（会涉及性能问题）\n- 有效期会可以由客户端设置，也可以由服务端设置（一般有服务端设置）\n- Cookie一般主要由服务端读取，当然客户端也可以读取。（localStorage和sessionStorage只能由客户端读取）\n- 存储大小小于4KB\n- 可以设置`httpOnly`为`true`，这样就禁止客户端读取cookie\n- 涉及隐私问题\n\n### indexedDB\n\n- 浏览器客户端的低级API\n- 能够存储大量的结构化数据，包括文件，支持大量数据存储。\n- 使用索引进行查询，性能高\n- 是一个事务型数据库系统，有点像基于SQL的关系型数据库管理系统（但列不是固定的）\n- 是基于JavaScript的面向对象数据库\n\n## 使用场景举例\n\n### localStorage\n\n- 持久的较少量数据存储\n\n### sessionStorage\n\n- 会话相关的较少量数据存储\n\n\n### cookie\n\nCookie的工作过程是这样的：\n1. 客户端发起请求\n2. 服务端想要在客户端保存一些状态信息，于是在HTTP响应报文添加头部字段`Set-Cookie`，这样客户端就会保存下来。\n   1. 可以指定有效时间（`Expires`或`Max-Age`）和域名路径（`Domain`和`Path`）来限制cookie。\n   2. `Secure`对于`http:`协议尽管加密也不安全，一些浏览器已经已经不支持不安全的网站（`http:`）设置`Secure`了。\n   3. `HttpOnly`设置之后不允许浏览器端JavaScript访问\n   ```bash\n    HTTP/2.0 200 OK\n    Content-type: text/html\n    Set-Cookie: yummy_cookie=choco\n    Set-Cookie: tasty_cookie=strawberry\n\n    [page content]\n\n   ```\n3. 客户端的后续请求都会携带客户端的cookie信息，即请求头`Cookie`字段\n   ```bash\n   GET /sample_page.html HTTP/2.0\n   Host: www.example.org\n   Cookie: yummy_cookie=choco; tasty_cookie=strawberry\n   ```\n\n下面是一些cookie的使用场景。\n\n- 会话管理\n  - 登陆状态、购物车、游戏分数等服务端需要记录的\n- 个性化\n  - 用户偏好、主题、其他设置等\n- 追踪\n  - 记录分析用户行为\n\n### indexedDB\n\n- 大量数据存储\n- 高性能查询\n\n## 使用方法\n\n### localStorage\n\n- set\n  ```javascript\n    localStorage.setItem('myCat', 'Tom');\n    localStorage.setItem('colorSetting', '#a4509b');\n    localStorage.colorSetting = '#a4509b';//不推荐\n    localStorage['colorSetting'] = '#a4509b';///不推荐\n  ```\n- get\n  ```javascript\n    var cat = localStorage.getItem('myCat');\n  ```\n- remove\n  ```javascript\n    localStorage.removeItem('myCat');\n  ```\n- clear\n  ```javascript\n    // Clear all items\n    localStorage.clear();\n  ```\n\n### sessionStorage\n\n和localStorage接口类似。\n\n### cookie\n\n- write\n  ```javascript\n    document.cookie = \"yummy_cookie=choco\"; \n    document.cookie = \"tasty_cookie=strawberry\"; \n  ```\n- read\n  ```javascript\n    console.log(document.cookie); \n    // logs \"yummy_cookie=choco; tasty_cookie=strawberry\"\n  ```\n- reset\n  ```javascript\n    document.cookie = \"yummy_cookie=\"; \n    document.cookie = \"tasty_cookie=\"; \n  ```\n\n### indexedDB\n\n先了解一下indexedDB的推荐使用流程\n\n1. 检查是否支持indexedDB\n2. 打开数据库`database`\n3. 在数据库中创建一个对象存储仓库`object store`\n4. 开启事务，请求数据库操作（添加、获取等）\n5. 等待操作完成（可以通过监听事件来操作）\n6. 使用查询结果\n\n其他的使用方法暂时不深入了解了，以后用到时再写一篇。\n\n## 相关话题\n\n## Reference\n\n- [Local Storage vs Session Storage vs Cookie](https://scotch.io/@PratyushB/local-storage-vs-session-storage-vs-cookie)\n- [HTTP cookies](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies)\n- [IndexedDB API](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API)\n- [Web Storage API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API)\n- [Using IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB)","slug":"js-storage","published":1,"updated":"2022-01-06T04:09:12.466Z","_id":"cksq5v7mx003qn0puaq5narap","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note primary\"><p>cookie、localStorage、sessionStorage、indexedDB</p>\n</div>\n\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>之前可能用过<code>Web API</code>对象里面的存储对象，比如说<code>cookie</code>和<code>localStorage</code>。但是仅仅把他们当做一个浏览器端存储的工具，并没有认真区分它们的不同和应用场景。</p>\n<p>首先为什么需要浏览器端存储数据的<code>Web API</code>？HTTP是一个无状态（stateless）协议，需要浏览器记录一些东西。</p>\n<p><strong>本篇主要是简单的了解一些概念和用法，不会深入的总结</strong>，后续会深入了解。</p>\n<p>今天总结的主要有三个话题：</p>\n<ul>\n<li>区别</li>\n<li>使用场景举例</li>\n<li>使用方法（Web API）</li>\n</ul>\n<h2 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h2><h3 id=\"localStorage\"><a href=\"#localStorage\" class=\"headerlink\" title=\"localStorage\"></a>localStorage</h3><ul>\n<li>存储的数据没有截止日期（有效期）的设置，也就是说只要你不主动删除它，它就可能永远存在。</li>\n<li>只能由客户端读取</li>\n<li>只能通过JavaScript清除存储条目，或者是用浏览器清除缓存和本地存储数据。</li>\n<li>存储的限制容量比sessionStorage和cookie要大</li>\n</ul>\n<h3 id=\"sessionStorage\"><a href=\"#sessionStorage\" class=\"headerlink\" title=\"sessionStorage\"></a>sessionStorage</h3><ul>\n<li>存储的数据只在一个会话中有效，也就是说当关闭浏览器（或者对应tab）时数据会失效。</li>\n<li>数据不会自动提交到服务器，只能由客户端读取</li>\n<li>存储的限制容量大于cookie（至少5MB）</li>\n</ul>\n<h3 id=\"cookie\"><a href=\"#cookie\" class=\"headerlink\" title=\"cookie\"></a>cookie</h3><ul>\n<li>一般存储一些后续请求中需要发送给服务器的数据，也就是说每次请求都会发送cookie（会涉及性能问题）</li>\n<li>有效期会可以由客户端设置，也可以由服务端设置（一般有服务端设置）</li>\n<li>Cookie一般主要由服务端读取，当然客户端也可以读取。（localStorage和sessionStorage只能由客户端读取）</li>\n<li>存储大小小于4KB</li>\n<li>可以设置<code>httpOnly</code>为<code>true</code>，这样就禁止客户端读取cookie</li>\n<li>涉及隐私问题</li>\n</ul>\n<h3 id=\"indexedDB\"><a href=\"#indexedDB\" class=\"headerlink\" title=\"indexedDB\"></a>indexedDB</h3><ul>\n<li>浏览器客户端的低级API</li>\n<li>能够存储大量的结构化数据，包括文件，支持大量数据存储。</li>\n<li>使用索引进行查询，性能高</li>\n<li>是一个事务型数据库系统，有点像基于SQL的关系型数据库管理系统（但列不是固定的）</li>\n<li>是基于JavaScript的面向对象数据库</li>\n</ul>\n<h2 id=\"使用场景举例\"><a href=\"#使用场景举例\" class=\"headerlink\" title=\"使用场景举例\"></a>使用场景举例</h2><h3 id=\"localStorage-1\"><a href=\"#localStorage-1\" class=\"headerlink\" title=\"localStorage\"></a>localStorage</h3><ul>\n<li>持久的较少量数据存储</li>\n</ul>\n<h3 id=\"sessionStorage-1\"><a href=\"#sessionStorage-1\" class=\"headerlink\" title=\"sessionStorage\"></a>sessionStorage</h3><ul>\n<li>会话相关的较少量数据存储</li>\n</ul>\n<h3 id=\"cookie-1\"><a href=\"#cookie-1\" class=\"headerlink\" title=\"cookie\"></a>cookie</h3><p>Cookie的工作过程是这样的：</p>\n<ol>\n<li>客户端发起请求</li>\n<li>服务端想要在客户端保存一些状态信息，于是在HTTP响应报文添加头部字段<code>Set-Cookie</code>，这样客户端就会保存下来。<ol>\n<li>可以指定有效时间（<code>Expires</code>或<code>Max-Age</code>）和域名路径（<code>Domain</code>和<code>Path</code>）来限制cookie。</li>\n<li><code>Secure</code>对于<code>http:</code>协议尽管加密也不安全，一些浏览器已经已经不支持不安全的网站（<code>http:</code>）设置<code>Secure</code>了。</li>\n<li><code>HttpOnly</code>设置之后不允许浏览器端JavaScript访问<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/2.0 200 OK</span><br><span class=\"line\">Content-type: text/html</span><br><span class=\"line\">Set-Cookie: yummy_cookie=choco</span><br><span class=\"line\">Set-Cookie: tasty_cookie=strawberry</span><br><span class=\"line\"></span><br><span class=\"line\">[page content]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li>客户端的后续请求都会携带客户端的cookie信息，即请求头<code>Cookie</code>字段<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /sample_page.html HTTP/2.0</span><br><span class=\"line\">Host: www.example.org</span><br><span class=\"line\">Cookie: yummy_cookie=choco; tasty_cookie=strawberry</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>下面是一些cookie的使用场景。</p>\n<ul>\n<li>会话管理<ul>\n<li>登陆状态、购物车、游戏分数等服务端需要记录的</li>\n</ul>\n</li>\n<li>个性化<ul>\n<li>用户偏好、主题、其他设置等</li>\n</ul>\n</li>\n<li>追踪<ul>\n<li>记录分析用户行为</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"indexedDB-1\"><a href=\"#indexedDB-1\" class=\"headerlink\" title=\"indexedDB\"></a>indexedDB</h3><ul>\n<li>大量数据存储</li>\n<li>高性能查询</li>\n</ul>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><h3 id=\"localStorage-2\"><a href=\"#localStorage-2\" class=\"headerlink\" title=\"localStorage\"></a>localStorage</h3><ul>\n<li>set<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">localStorage</span>.setItem(<span class=\"string\">&#x27;myCat&#x27;</span>, <span class=\"string\">&#x27;Tom&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">localStorage</span>.setItem(<span class=\"string\">&#x27;colorSetting&#x27;</span>, <span class=\"string\">&#x27;#a4509b&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">localStorage</span>.colorSetting = <span class=\"string\">&#x27;#a4509b&#x27;</span>;<span class=\"comment\">//不推荐</span></span><br><span class=\"line\"><span class=\"built_in\">localStorage</span>[<span class=\"string\">&#x27;colorSetting&#x27;</span>] = <span class=\"string\">&#x27;#a4509b&#x27;</span>;<span class=\"comment\">///不推荐</span></span><br></pre></td></tr></table></figure></li>\n<li>get<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cat = <span class=\"built_in\">localStorage</span>.getItem(<span class=\"string\">&#x27;myCat&#x27;</span>);</span><br></pre></td></tr></table></figure></li>\n<li>remove<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">localStorage</span>.removeItem(<span class=\"string\">&#x27;myCat&#x27;</span>);</span><br></pre></td></tr></table></figure></li>\n<li>clear<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Clear all items</span></span><br><span class=\"line\"><span class=\"built_in\">localStorage</span>.clear();</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"sessionStorage-2\"><a href=\"#sessionStorage-2\" class=\"headerlink\" title=\"sessionStorage\"></a>sessionStorage</h3><p>和localStorage接口类似。</p>\n<h3 id=\"cookie-2\"><a href=\"#cookie-2\" class=\"headerlink\" title=\"cookie\"></a>cookie</h3><ul>\n<li>write<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.cookie = <span class=\"string\">&quot;yummy_cookie=choco&quot;</span>; </span><br><span class=\"line\"><span class=\"built_in\">document</span>.cookie = <span class=\"string\">&quot;tasty_cookie=strawberry&quot;</span>; </span><br></pre></td></tr></table></figure></li>\n<li>read<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.cookie); </span><br><span class=\"line\"><span class=\"comment\">// logs &quot;yummy_cookie=choco; tasty_cookie=strawberry&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li>reset<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.cookie = <span class=\"string\">&quot;yummy_cookie=&quot;</span>; </span><br><span class=\"line\"><span class=\"built_in\">document</span>.cookie = <span class=\"string\">&quot;tasty_cookie=&quot;</span>; </span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"indexedDB-2\"><a href=\"#indexedDB-2\" class=\"headerlink\" title=\"indexedDB\"></a>indexedDB</h3><p>先了解一下indexedDB的推荐使用流程</p>\n<ol>\n<li>检查是否支持indexedDB</li>\n<li>打开数据库<code>database</code></li>\n<li>在数据库中创建一个对象存储仓库<code>object store</code></li>\n<li>开启事务，请求数据库操作（添加、获取等）</li>\n<li>等待操作完成（可以通过监听事件来操作）</li>\n<li>使用查询结果</li>\n</ol>\n<p>其他的使用方法暂时不深入了解了，以后用到时再写一篇。</p>\n<h2 id=\"相关话题\"><a href=\"#相关话题\" class=\"headerlink\" title=\"相关话题\"></a>相关话题</h2><h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://scotch.io/@PratyushB/local-storage-vs-session-storage-vs-cookie\">Local Storage vs Session Storage vs Cookie</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies\">HTTP cookies</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\">IndexedDB API</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API\">Web Storage API</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB\">Using IndexedDB</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note primary\"><p>cookie、localStorage、sessionStorage、indexedDB</p>\n</div>","more":"<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>之前可能用过<code>Web API</code>对象里面的存储对象，比如说<code>cookie</code>和<code>localStorage</code>。但是仅仅把他们当做一个浏览器端存储的工具，并没有认真区分它们的不同和应用场景。</p>\n<p>首先为什么需要浏览器端存储数据的<code>Web API</code>？HTTP是一个无状态（stateless）协议，需要浏览器记录一些东西。</p>\n<p><strong>本篇主要是简单的了解一些概念和用法，不会深入的总结</strong>，后续会深入了解。</p>\n<p>今天总结的主要有三个话题：</p>\n<ul>\n<li>区别</li>\n<li>使用场景举例</li>\n<li>使用方法（Web API）</li>\n</ul>\n<h2 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h2><h3 id=\"localStorage\"><a href=\"#localStorage\" class=\"headerlink\" title=\"localStorage\"></a>localStorage</h3><ul>\n<li>存储的数据没有截止日期（有效期）的设置，也就是说只要你不主动删除它，它就可能永远存在。</li>\n<li>只能由客户端读取</li>\n<li>只能通过JavaScript清除存储条目，或者是用浏览器清除缓存和本地存储数据。</li>\n<li>存储的限制容量比sessionStorage和cookie要大</li>\n</ul>\n<h3 id=\"sessionStorage\"><a href=\"#sessionStorage\" class=\"headerlink\" title=\"sessionStorage\"></a>sessionStorage</h3><ul>\n<li>存储的数据只在一个会话中有效，也就是说当关闭浏览器（或者对应tab）时数据会失效。</li>\n<li>数据不会自动提交到服务器，只能由客户端读取</li>\n<li>存储的限制容量大于cookie（至少5MB）</li>\n</ul>\n<h3 id=\"cookie\"><a href=\"#cookie\" class=\"headerlink\" title=\"cookie\"></a>cookie</h3><ul>\n<li>一般存储一些后续请求中需要发送给服务器的数据，也就是说每次请求都会发送cookie（会涉及性能问题）</li>\n<li>有效期会可以由客户端设置，也可以由服务端设置（一般有服务端设置）</li>\n<li>Cookie一般主要由服务端读取，当然客户端也可以读取。（localStorage和sessionStorage只能由客户端读取）</li>\n<li>存储大小小于4KB</li>\n<li>可以设置<code>httpOnly</code>为<code>true</code>，这样就禁止客户端读取cookie</li>\n<li>涉及隐私问题</li>\n</ul>\n<h3 id=\"indexedDB\"><a href=\"#indexedDB\" class=\"headerlink\" title=\"indexedDB\"></a>indexedDB</h3><ul>\n<li>浏览器客户端的低级API</li>\n<li>能够存储大量的结构化数据，包括文件，支持大量数据存储。</li>\n<li>使用索引进行查询，性能高</li>\n<li>是一个事务型数据库系统，有点像基于SQL的关系型数据库管理系统（但列不是固定的）</li>\n<li>是基于JavaScript的面向对象数据库</li>\n</ul>\n<h2 id=\"使用场景举例\"><a href=\"#使用场景举例\" class=\"headerlink\" title=\"使用场景举例\"></a>使用场景举例</h2><h3 id=\"localStorage-1\"><a href=\"#localStorage-1\" class=\"headerlink\" title=\"localStorage\"></a>localStorage</h3><ul>\n<li>持久的较少量数据存储</li>\n</ul>\n<h3 id=\"sessionStorage-1\"><a href=\"#sessionStorage-1\" class=\"headerlink\" title=\"sessionStorage\"></a>sessionStorage</h3><ul>\n<li>会话相关的较少量数据存储</li>\n</ul>\n<h3 id=\"cookie-1\"><a href=\"#cookie-1\" class=\"headerlink\" title=\"cookie\"></a>cookie</h3><p>Cookie的工作过程是这样的：</p>\n<ol>\n<li>客户端发起请求</li>\n<li>服务端想要在客户端保存一些状态信息，于是在HTTP响应报文添加头部字段<code>Set-Cookie</code>，这样客户端就会保存下来。<ol>\n<li>可以指定有效时间（<code>Expires</code>或<code>Max-Age</code>）和域名路径（<code>Domain</code>和<code>Path</code>）来限制cookie。</li>\n<li><code>Secure</code>对于<code>http:</code>协议尽管加密也不安全，一些浏览器已经已经不支持不安全的网站（<code>http:</code>）设置<code>Secure</code>了。</li>\n<li><code>HttpOnly</code>设置之后不允许浏览器端JavaScript访问<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/2.0 200 OK</span><br><span class=\"line\">Content-type: text/html</span><br><span class=\"line\">Set-Cookie: yummy_cookie=choco</span><br><span class=\"line\">Set-Cookie: tasty_cookie=strawberry</span><br><span class=\"line\"></span><br><span class=\"line\">[page content]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li>客户端的后续请求都会携带客户端的cookie信息，即请求头<code>Cookie</code>字段<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /sample_page.html HTTP/2.0</span><br><span class=\"line\">Host: www.example.org</span><br><span class=\"line\">Cookie: yummy_cookie=choco; tasty_cookie=strawberry</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>下面是一些cookie的使用场景。</p>\n<ul>\n<li>会话管理<ul>\n<li>登陆状态、购物车、游戏分数等服务端需要记录的</li>\n</ul>\n</li>\n<li>个性化<ul>\n<li>用户偏好、主题、其他设置等</li>\n</ul>\n</li>\n<li>追踪<ul>\n<li>记录分析用户行为</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"indexedDB-1\"><a href=\"#indexedDB-1\" class=\"headerlink\" title=\"indexedDB\"></a>indexedDB</h3><ul>\n<li>大量数据存储</li>\n<li>高性能查询</li>\n</ul>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><h3 id=\"localStorage-2\"><a href=\"#localStorage-2\" class=\"headerlink\" title=\"localStorage\"></a>localStorage</h3><ul>\n<li>set<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">localStorage</span>.setItem(<span class=\"string\">&#x27;myCat&#x27;</span>, <span class=\"string\">&#x27;Tom&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">localStorage</span>.setItem(<span class=\"string\">&#x27;colorSetting&#x27;</span>, <span class=\"string\">&#x27;#a4509b&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">localStorage</span>.colorSetting = <span class=\"string\">&#x27;#a4509b&#x27;</span>;<span class=\"comment\">//不推荐</span></span><br><span class=\"line\"><span class=\"built_in\">localStorage</span>[<span class=\"string\">&#x27;colorSetting&#x27;</span>] = <span class=\"string\">&#x27;#a4509b&#x27;</span>;<span class=\"comment\">///不推荐</span></span><br></pre></td></tr></table></figure></li>\n<li>get<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cat = <span class=\"built_in\">localStorage</span>.getItem(<span class=\"string\">&#x27;myCat&#x27;</span>);</span><br></pre></td></tr></table></figure></li>\n<li>remove<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">localStorage</span>.removeItem(<span class=\"string\">&#x27;myCat&#x27;</span>);</span><br></pre></td></tr></table></figure></li>\n<li>clear<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Clear all items</span></span><br><span class=\"line\"><span class=\"built_in\">localStorage</span>.clear();</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"sessionStorage-2\"><a href=\"#sessionStorage-2\" class=\"headerlink\" title=\"sessionStorage\"></a>sessionStorage</h3><p>和localStorage接口类似。</p>\n<h3 id=\"cookie-2\"><a href=\"#cookie-2\" class=\"headerlink\" title=\"cookie\"></a>cookie</h3><ul>\n<li>write<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.cookie = <span class=\"string\">&quot;yummy_cookie=choco&quot;</span>; </span><br><span class=\"line\"><span class=\"built_in\">document</span>.cookie = <span class=\"string\">&quot;tasty_cookie=strawberry&quot;</span>; </span><br></pre></td></tr></table></figure></li>\n<li>read<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.cookie); </span><br><span class=\"line\"><span class=\"comment\">// logs &quot;yummy_cookie=choco; tasty_cookie=strawberry&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li>reset<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.cookie = <span class=\"string\">&quot;yummy_cookie=&quot;</span>; </span><br><span class=\"line\"><span class=\"built_in\">document</span>.cookie = <span class=\"string\">&quot;tasty_cookie=&quot;</span>; </span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"indexedDB-2\"><a href=\"#indexedDB-2\" class=\"headerlink\" title=\"indexedDB\"></a>indexedDB</h3><p>先了解一下indexedDB的推荐使用流程</p>\n<ol>\n<li>检查是否支持indexedDB</li>\n<li>打开数据库<code>database</code></li>\n<li>在数据库中创建一个对象存储仓库<code>object store</code></li>\n<li>开启事务，请求数据库操作（添加、获取等）</li>\n<li>等待操作完成（可以通过监听事件来操作）</li>\n<li>使用查询结果</li>\n</ol>\n<p>其他的使用方法暂时不深入了解了，以后用到时再写一篇。</p>\n<h2 id=\"相关话题\"><a href=\"#相关话题\" class=\"headerlink\" title=\"相关话题\"></a>相关话题</h2><h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://scotch.io/@PratyushB/local-storage-vs-session-storage-vs-cookie\">Local Storage vs Session Storage vs Cookie</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies\">HTTP cookies</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\">IndexedDB API</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API\">Web Storage API</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB\">Using IndexedDB</a></li>\n</ul>"},{"title":"用JavaScript实现一个任务队列","mathjax":false,"copyright":true,"comment":true,"date":"2019-11-18T12:10:52.000Z","_content":"\n{% note primary %}\n用JavaScript实现一个任务队列。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 前言\n\n头条一面的题，有思路，但是JavaScript Promise用的不够熟练，记录一下。\n\n\n## 题目\n\n给定一个API，实现对应的功能。\n\n### API\n\n给定如下接口，请实现一个任务队列。效果是`task`方法用于注册任务，`start`函数调用后，1s后打印1，再过2s后打印2，再过3秒后打印3。\n\n```javascript\nnew Queue()\n    .task(1000, () => {\n        console.log(1);\n    })\n    .task(2000, () => {\n        console.log(2);\n    })\n    .task(3000, () => {\n        console.log(3);\n    })\n    .start();\n```\n\n### 思路\n\n#### 0x1\n首先`task`方法仅仅是注册，因此需要将注册的内容保存下来。\n\n定义一个如下对象用于保存注册的任务：\n\n```javascript\nthis.tasks = [{\n    delay:1,\n    callback:()=>{},\n}];\n```\n\n#### 0x2\n然后可以链式调用`task`方法，因此其返回值就是`this`。\n\n```javascript\ntask(delay, callback) {\n    this.tasks.push({ delay, callback });\n    // console.log(callback)\n    return this;\n}\n```\n\n#### 0x3\n\n最后是关键部分，如何把任务给连接起来并开启队列执行。\n\n执行顺序应该是这样的\n\n```bash\ntask1设置\n->1s...task1运行\n->task2在task1回调函数执行后设置\n->2s...task2运行\n->task3在task2回调函数执行后设置\n->3s...task3运行\n```\n\n我们创建一个`Promise`对象，添加一个定时器，在`setTimeout`回调函数中执行完注册的callback后`resolve`。这样我就可以在这个`Promise`对象的then方法中添加下一个定时器。\n\n### 实现\n\n完整代码如下：\n\n```javascript\nclass Queue {\n    constructor() {\n        this.tasks = [];\n    }\n    task(delay, callback) {\n        this.tasks.push({ delay, callback });\n        // console.log(callback)\n        return this;\n    }\n    start() {\n        if (this.task.length === 0) return;\n        let cur = this.tasks.shift();\n        let func = new Promise((resolve, reject) => {\n            console.log(\"starting......\");\n\n            setTimeout(() => {\n                cur.callback();\n                resolve();\n            }, cur.delay);\n        });\n        while (this.tasks.length !== 0) {\n            const element = this.tasks.shift();\n\n            func = func.then(() => {\n                return new Promise((resolve, reject) => {\n                    setTimeout(() => {\n                        element.callback();\n                        resolve();\n                    }, element.delay);\n                })\n            });\n\n        }\n        func.then(() => {\n            console.log(\"ending.....\");\n\n        })\n    }\n\n}\n\nnew Queue()\n    .task(1000, () => {\n        console.log(1);\n    })\n    .task(2000, () => {\n        console.log(2);\n    })\n    .task(3000, () => {\n        console.log(3);\n    })\n    .start();\n\n```\n\n## 总结\n\n`Promise`对象的使用不够熟练，后续会继续深入学习，敬请期待。","source":"_posts/js-taskqueue.md","raw":"---\ntitle: 用JavaScript实现一个任务队列\nmathjax: false\ncopyright: true\ncomment: true\ndate: 2019-11-18 20:10:52\ntags:\n- JavaScript\ncategories:\n- Front-End Development\n- JavaScript\n\n---\n\n{% note primary %}\n用JavaScript实现一个任务队列。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 前言\n\n头条一面的题，有思路，但是JavaScript Promise用的不够熟练，记录一下。\n\n\n## 题目\n\n给定一个API，实现对应的功能。\n\n### API\n\n给定如下接口，请实现一个任务队列。效果是`task`方法用于注册任务，`start`函数调用后，1s后打印1，再过2s后打印2，再过3秒后打印3。\n\n```javascript\nnew Queue()\n    .task(1000, () => {\n        console.log(1);\n    })\n    .task(2000, () => {\n        console.log(2);\n    })\n    .task(3000, () => {\n        console.log(3);\n    })\n    .start();\n```\n\n### 思路\n\n#### 0x1\n首先`task`方法仅仅是注册，因此需要将注册的内容保存下来。\n\n定义一个如下对象用于保存注册的任务：\n\n```javascript\nthis.tasks = [{\n    delay:1,\n    callback:()=>{},\n}];\n```\n\n#### 0x2\n然后可以链式调用`task`方法，因此其返回值就是`this`。\n\n```javascript\ntask(delay, callback) {\n    this.tasks.push({ delay, callback });\n    // console.log(callback)\n    return this;\n}\n```\n\n#### 0x3\n\n最后是关键部分，如何把任务给连接起来并开启队列执行。\n\n执行顺序应该是这样的\n\n```bash\ntask1设置\n->1s...task1运行\n->task2在task1回调函数执行后设置\n->2s...task2运行\n->task3在task2回调函数执行后设置\n->3s...task3运行\n```\n\n我们创建一个`Promise`对象，添加一个定时器，在`setTimeout`回调函数中执行完注册的callback后`resolve`。这样我就可以在这个`Promise`对象的then方法中添加下一个定时器。\n\n### 实现\n\n完整代码如下：\n\n```javascript\nclass Queue {\n    constructor() {\n        this.tasks = [];\n    }\n    task(delay, callback) {\n        this.tasks.push({ delay, callback });\n        // console.log(callback)\n        return this;\n    }\n    start() {\n        if (this.task.length === 0) return;\n        let cur = this.tasks.shift();\n        let func = new Promise((resolve, reject) => {\n            console.log(\"starting......\");\n\n            setTimeout(() => {\n                cur.callback();\n                resolve();\n            }, cur.delay);\n        });\n        while (this.tasks.length !== 0) {\n            const element = this.tasks.shift();\n\n            func = func.then(() => {\n                return new Promise((resolve, reject) => {\n                    setTimeout(() => {\n                        element.callback();\n                        resolve();\n                    }, element.delay);\n                })\n            });\n\n        }\n        func.then(() => {\n            console.log(\"ending.....\");\n\n        })\n    }\n\n}\n\nnew Queue()\n    .task(1000, () => {\n        console.log(1);\n    })\n    .task(2000, () => {\n        console.log(2);\n    })\n    .task(3000, () => {\n        console.log(3);\n    })\n    .start();\n\n```\n\n## 总结\n\n`Promise`对象的使用不够熟练，后续会继续深入学习，敬请期待。","slug":"js-taskqueue","published":1,"updated":"2022-01-06T04:09:12.466Z","_id":"cksq5v7mx003tn0pu7yfuabas","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note primary\"><p>用JavaScript实现一个任务队列。</p>\n</div>\n\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>头条一面的题，有思路，但是JavaScript Promise用的不够熟练，记录一下。</p>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给定一个API，实现对应的功能。</p>\n<h3 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h3><p>给定如下接口，请实现一个任务队列。效果是<code>task</code>方法用于注册任务，<code>start</code>函数调用后，1s后打印1，再过2s后打印2，再过3秒后打印3。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Queue()</span><br><span class=\"line\">    .task(<span class=\"number\">1000</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .task(<span class=\"number\">2000</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .task(<span class=\"number\">3000</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .start();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><h4 id=\"0x1\"><a href=\"#0x1\" class=\"headerlink\" title=\"0x1\"></a>0x1</h4><p>首先<code>task</code>方法仅仅是注册，因此需要将注册的内容保存下来。</p>\n<p>定义一个如下对象用于保存注册的任务：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.tasks = [&#123;</span><br><span class=\"line\">    <span class=\"attr\">delay</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">callback</span>:<span class=\"function\">()=&gt;</span>&#123;&#125;,</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"0x2\"><a href=\"#0x2\" class=\"headerlink\" title=\"0x2\"></a>0x2</h4><p>然后可以链式调用<code>task</code>方法，因此其返回值就是<code>this</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">task</span>(<span class=\"params\">delay, callback</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.tasks.push(&#123; delay, callback &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// console.log(callback)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"0x3\"><a href=\"#0x3\" class=\"headerlink\" title=\"0x3\"></a>0x3</h4><p>最后是关键部分，如何把任务给连接起来并开启队列执行。</p>\n<p>执行顺序应该是这样的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task1设置</span><br><span class=\"line\">-&gt;1s...task1运行</span><br><span class=\"line\">-&gt;task2在task1回调函数执行后设置</span><br><span class=\"line\">-&gt;2s...task2运行</span><br><span class=\"line\">-&gt;task3在task2回调函数执行后设置</span><br><span class=\"line\">-&gt;3s...task3运行</span><br></pre></td></tr></table></figure>\n\n<p>我们创建一个<code>Promise</code>对象，添加一个定时器，在<code>setTimeout</code>回调函数中执行完注册的callback后<code>resolve</code>。这样我就可以在这个<code>Promise</code>对象的then方法中添加下一个定时器。</p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>完整代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Queue</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.tasks = [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">task</span>(<span class=\"params\">delay, callback</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.tasks.push(&#123; delay, callback &#125;);</span><br><span class=\"line\">        <span class=\"comment\">// console.log(callback)</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">start</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.task.length === <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> cur = <span class=\"built_in\">this</span>.tasks.shift();</span><br><span class=\"line\">        <span class=\"keyword\">let</span> func = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;starting......&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                cur.callback();</span><br><span class=\"line\">                resolve();</span><br><span class=\"line\">            &#125;, cur.delay);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"built_in\">this</span>.tasks.length !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> element = <span class=\"built_in\">this</span>.tasks.shift();</span><br><span class=\"line\"></span><br><span class=\"line\">            func = func.then(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                        element.callback();</span><br><span class=\"line\">                        resolve();</span><br><span class=\"line\">                    &#125;, element.delay);</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        func.then(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;ending.....&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Queue()</span><br><span class=\"line\">    .task(<span class=\"number\">1000</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .task(<span class=\"number\">2000</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .task(<span class=\"number\">3000</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .start();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>Promise</code>对象的使用不够熟练，后续会继续深入学习，敬请期待。</p>\n","site":{"data":{}},"excerpt":"<div class=\"note primary\"><p>用JavaScript实现一个任务队列。</p>\n</div>","more":"<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>头条一面的题，有思路，但是JavaScript Promise用的不够熟练，记录一下。</p>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给定一个API，实现对应的功能。</p>\n<h3 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h3><p>给定如下接口，请实现一个任务队列。效果是<code>task</code>方法用于注册任务，<code>start</code>函数调用后，1s后打印1，再过2s后打印2，再过3秒后打印3。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Queue()</span><br><span class=\"line\">    .task(<span class=\"number\">1000</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .task(<span class=\"number\">2000</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .task(<span class=\"number\">3000</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .start();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><h4 id=\"0x1\"><a href=\"#0x1\" class=\"headerlink\" title=\"0x1\"></a>0x1</h4><p>首先<code>task</code>方法仅仅是注册，因此需要将注册的内容保存下来。</p>\n<p>定义一个如下对象用于保存注册的任务：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.tasks = [&#123;</span><br><span class=\"line\">    <span class=\"attr\">delay</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">callback</span>:<span class=\"function\">()=&gt;</span>&#123;&#125;,</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"0x2\"><a href=\"#0x2\" class=\"headerlink\" title=\"0x2\"></a>0x2</h4><p>然后可以链式调用<code>task</code>方法，因此其返回值就是<code>this</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">task</span>(<span class=\"params\">delay, callback</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.tasks.push(&#123; delay, callback &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// console.log(callback)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"0x3\"><a href=\"#0x3\" class=\"headerlink\" title=\"0x3\"></a>0x3</h4><p>最后是关键部分，如何把任务给连接起来并开启队列执行。</p>\n<p>执行顺序应该是这样的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task1设置</span><br><span class=\"line\">-&gt;1s...task1运行</span><br><span class=\"line\">-&gt;task2在task1回调函数执行后设置</span><br><span class=\"line\">-&gt;2s...task2运行</span><br><span class=\"line\">-&gt;task3在task2回调函数执行后设置</span><br><span class=\"line\">-&gt;3s...task3运行</span><br></pre></td></tr></table></figure>\n\n<p>我们创建一个<code>Promise</code>对象，添加一个定时器，在<code>setTimeout</code>回调函数中执行完注册的callback后<code>resolve</code>。这样我就可以在这个<code>Promise</code>对象的then方法中添加下一个定时器。</p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>完整代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Queue</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.tasks = [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">task</span>(<span class=\"params\">delay, callback</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.tasks.push(&#123; delay, callback &#125;);</span><br><span class=\"line\">        <span class=\"comment\">// console.log(callback)</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">start</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.task.length === <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> cur = <span class=\"built_in\">this</span>.tasks.shift();</span><br><span class=\"line\">        <span class=\"keyword\">let</span> func = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;starting......&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                cur.callback();</span><br><span class=\"line\">                resolve();</span><br><span class=\"line\">            &#125;, cur.delay);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"built_in\">this</span>.tasks.length !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> element = <span class=\"built_in\">this</span>.tasks.shift();</span><br><span class=\"line\"></span><br><span class=\"line\">            func = func.then(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                        element.callback();</span><br><span class=\"line\">                        resolve();</span><br><span class=\"line\">                    &#125;, element.delay);</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        func.then(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;ending.....&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Queue()</span><br><span class=\"line\">    .task(<span class=\"number\">1000</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .task(<span class=\"number\">2000</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .task(<span class=\"number\">3000</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .start();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>Promise</code>对象的使用不够熟练，后续会继续深入学习，敬请期待。</p>"},{"title":"关于LeetCode题解","mathjax":false,"copyright":true,"comment":true,"date":"2019-11-06T12:33:30.000Z","_content":"\n{% note primary %}\nLeetCode 小记的说明。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## LeetCode小记写在哪？\n\n如果一个题一篇文章的话感觉会很短小，而且会有很多文章，更新也不容易查看，所以我打算单独整一个页面总结这些知识点。\n\n{% note primary %}\n###  笔者在GitHub新建了一个[项目](https://github.com/ScarboroughCoral/Notes)，使用docsify工具搭建：\n[这是地址嘿嘿嘿](http://scarboroughcoral.top/Notes/#/lc)\n{% endnote %}\n\n## 会写什么\n\n由于时间比较有限，拿不出太长时间来特别详细的写，所以主要会写以下内容：\n\n- 思路关键点，简单题可能简单一提直接过。\n- 题目复杂度分析\n- 代码，可能并不是最优代码\n\n## 不会写什么\n\n\n- 不会一步步详细写问题是怎么想出来的。\n- 不会关联性的汇总一些相似的题目\n- 等等，还有很多","source":"_posts/lc-solutions.md","raw":"---\ntitle: 关于LeetCode题解\nmathjax: false\ncopyright: true\ncomment: true\ndate: 2019-11-06 20:33:30\ntags:\n- Algorithm\n- Data Structure\n- LeetCode\ncategories:\n- Algorithm & Data Structure\n\n---\n\n{% note primary %}\nLeetCode 小记的说明。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## LeetCode小记写在哪？\n\n如果一个题一篇文章的话感觉会很短小，而且会有很多文章，更新也不容易查看，所以我打算单独整一个页面总结这些知识点。\n\n{% note primary %}\n###  笔者在GitHub新建了一个[项目](https://github.com/ScarboroughCoral/Notes)，使用docsify工具搭建：\n[这是地址嘿嘿嘿](http://scarboroughcoral.top/Notes/#/lc)\n{% endnote %}\n\n## 会写什么\n\n由于时间比较有限，拿不出太长时间来特别详细的写，所以主要会写以下内容：\n\n- 思路关键点，简单题可能简单一提直接过。\n- 题目复杂度分析\n- 代码，可能并不是最优代码\n\n## 不会写什么\n\n\n- 不会一步步详细写问题是怎么想出来的。\n- 不会关联性的汇总一些相似的题目\n- 等等，还有很多","slug":"lc-solutions","published":1,"updated":"2022-01-06T04:09:12.466Z","_id":"cksq5v7my003xn0pu5nhl0ld6","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note primary\"><p>LeetCode 小记的说明。</p>\n</div>\n\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"LeetCode小记写在哪？\"><a href=\"#LeetCode小记写在哪？\" class=\"headerlink\" title=\"LeetCode小记写在哪？\"></a>LeetCode小记写在哪？</h2><p>如果一个题一篇文章的话感觉会很短小，而且会有很多文章，更新也不容易查看，所以我打算单独整一个页面总结这些知识点。</p>\n<div class=\"note primary\"><h3 id=\"笔者在GitHub新建了一个项目，使用docsify工具搭建：\"><a href=\"#笔者在GitHub新建了一个项目，使用docsify工具搭建：\" class=\"headerlink\" title=\"笔者在GitHub新建了一个项目，使用docsify工具搭建：\"></a>笔者在GitHub新建了一个<a href=\"https://github.com/ScarboroughCoral/Notes\">项目</a>，使用docsify工具搭建：</h3><p><a href=\"http://scarboroughcoral.top/Notes/#/lc\">这是地址嘿嘿嘿</a></p>\n</div>\n\n<h2 id=\"会写什么\"><a href=\"#会写什么\" class=\"headerlink\" title=\"会写什么\"></a>会写什么</h2><p>由于时间比较有限，拿不出太长时间来特别详细的写，所以主要会写以下内容：</p>\n<ul>\n<li>思路关键点，简单题可能简单一提直接过。</li>\n<li>题目复杂度分析</li>\n<li>代码，可能并不是最优代码</li>\n</ul>\n<h2 id=\"不会写什么\"><a href=\"#不会写什么\" class=\"headerlink\" title=\"不会写什么\"></a>不会写什么</h2><ul>\n<li>不会一步步详细写问题是怎么想出来的。</li>\n<li>不会关联性的汇总一些相似的题目</li>\n<li>等等，还有很多</li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note primary\"><p>LeetCode 小记的说明。</p>\n</div>","more":"<hr>\n<h2 id=\"LeetCode小记写在哪？\"><a href=\"#LeetCode小记写在哪？\" class=\"headerlink\" title=\"LeetCode小记写在哪？\"></a>LeetCode小记写在哪？</h2><p>如果一个题一篇文章的话感觉会很短小，而且会有很多文章，更新也不容易查看，所以我打算单独整一个页面总结这些知识点。</p>\n<div class=\"note primary\"><h3 id=\"笔者在GitHub新建了一个项目，使用docsify工具搭建：\"><a href=\"#笔者在GitHub新建了一个项目，使用docsify工具搭建：\" class=\"headerlink\" title=\"笔者在GitHub新建了一个项目，使用docsify工具搭建：\"></a>笔者在GitHub新建了一个<a href=\"https://github.com/ScarboroughCoral/Notes\">项目</a>，使用docsify工具搭建：</h3><p><a href=\"http://scarboroughcoral.top/Notes/#/lc\">这是地址嘿嘿嘿</a></p>\n</div>\n\n<h2 id=\"会写什么\"><a href=\"#会写什么\" class=\"headerlink\" title=\"会写什么\"></a>会写什么</h2><p>由于时间比较有限，拿不出太长时间来特别详细的写，所以主要会写以下内容：</p>\n<ul>\n<li>思路关键点，简单题可能简单一提直接过。</li>\n<li>题目复杂度分析</li>\n<li>代码，可能并不是最优代码</li>\n</ul>\n<h2 id=\"不会写什么\"><a href=\"#不会写什么\" class=\"headerlink\" title=\"不会写什么\"></a>不会写什么</h2><ul>\n<li>不会一步步详细写问题是怎么想出来的。</li>\n<li>不会关联性的汇总一些相似的题目</li>\n<li>等等，还有很多</li>\n</ul>"},{"title":"操作系统开发平台","date":"2018-12-09T12:03:25.000Z","_content":"\n{% note default %}\n\n工欲善其事，必先利其器。\n\n{% endnote %}\n<!-- more -->\n\n\n\n\n### 前言\n\n如果你也想体验开发操作系统的话，那么这篇博客会很适合你。当你想要开发操作系统的时候你可能需要这几样东西：\n\n- 模拟器\n- 编辑器\n- 编译器\n- 汇编程序\n\n没错，虚拟模拟器用于运行你写好的镜像。编辑器就是你写代码的地方。刚开始你需要写汇编代码这就需要汇编程序来编辑它。编译器用于编译操作系统开发中主要使用的高级语言程序。\n\n### 工具\n\n因为作者考虑除了作者以外可能还有很多人想要学习操作系统，所以就使用 `docker` 把这些工具打包在一起了，如果想下载就访问文章末尾列出的 `Docker Hub` 中的镜像。所有组件一共`700MB`，你可能看着会有点大，这是因为我们使用了 `linux` 作为底层虚拟机。下面是主要工具：\n\n- ubuntu 底层虚拟机\n- qemu 用于模拟实际电脑的模拟器\n- vim 编辑器之神\n- gcc C语言编译器\n- nasm 汇编程序\n\n\n### 运行效果\n\n![](osdev-platform/osdev.png)\n\n\n### 有关文档\n\n\n* [Docker Hub](https://hub.docker.com/r/scarboroughcoral/osdev-ubuntu/)\n* [开发参考教程](https://github.com/cfenollosa/os-tutorial)\n* [QEMU 使用文档](https://qemu.weilnetz.de/doc/qemu-doc.html)\n* [Intel 汇编指令集](http://www.skywind.me/maker/intel.htm)\n* [Linux 汇编开发指南（IBM）](https://www.ibm.com/developerworks/cn/linux/l-assembly/index.html)\n* [Intel 80386 程序员参考手册](https://wizardforcel.gitbooks.io/intel-80386-ref-manual/content/1.html)\n* [Writing a Simple Operating System —from Scratch](http://www.cs.bham.ac.uk/~exr/lectures/opsys/10_11/lectures/os-dev.pdf)","source":"_posts/osdev-platform.md","raw":"---\ntitle: 操作系统开发平台\ndate: 2018-12-09 20:03:25\ntags:\n- Operating System\n- Docker\n\ncategories: \n- Computer Science\n- Operating System\n---\n\n{% note default %}\n\n工欲善其事，必先利其器。\n\n{% endnote %}\n<!-- more -->\n\n\n\n\n### 前言\n\n如果你也想体验开发操作系统的话，那么这篇博客会很适合你。当你想要开发操作系统的时候你可能需要这几样东西：\n\n- 模拟器\n- 编辑器\n- 编译器\n- 汇编程序\n\n没错，虚拟模拟器用于运行你写好的镜像。编辑器就是你写代码的地方。刚开始你需要写汇编代码这就需要汇编程序来编辑它。编译器用于编译操作系统开发中主要使用的高级语言程序。\n\n### 工具\n\n因为作者考虑除了作者以外可能还有很多人想要学习操作系统，所以就使用 `docker` 把这些工具打包在一起了，如果想下载就访问文章末尾列出的 `Docker Hub` 中的镜像。所有组件一共`700MB`，你可能看着会有点大，这是因为我们使用了 `linux` 作为底层虚拟机。下面是主要工具：\n\n- ubuntu 底层虚拟机\n- qemu 用于模拟实际电脑的模拟器\n- vim 编辑器之神\n- gcc C语言编译器\n- nasm 汇编程序\n\n\n### 运行效果\n\n![](osdev-platform/osdev.png)\n\n\n### 有关文档\n\n\n* [Docker Hub](https://hub.docker.com/r/scarboroughcoral/osdev-ubuntu/)\n* [开发参考教程](https://github.com/cfenollosa/os-tutorial)\n* [QEMU 使用文档](https://qemu.weilnetz.de/doc/qemu-doc.html)\n* [Intel 汇编指令集](http://www.skywind.me/maker/intel.htm)\n* [Linux 汇编开发指南（IBM）](https://www.ibm.com/developerworks/cn/linux/l-assembly/index.html)\n* [Intel 80386 程序员参考手册](https://wizardforcel.gitbooks.io/intel-80386-ref-manual/content/1.html)\n* [Writing a Simple Operating System —from Scratch](http://www.cs.bham.ac.uk/~exr/lectures/opsys/10_11/lectures/os-dev.pdf)","slug":"osdev-platform","published":1,"updated":"2022-01-06T04:09:12.466Z","_id":"cksq5v7mz0043n0pu42rx9f2f","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note default\"><p>工欲善其事，必先利其器。</p>\n</div>\n<span id=\"more\"></span>\n\n\n\n\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>如果你也想体验开发操作系统的话，那么这篇博客会很适合你。当你想要开发操作系统的时候你可能需要这几样东西：</p>\n<ul>\n<li>模拟器</li>\n<li>编辑器</li>\n<li>编译器</li>\n<li>汇编程序</li>\n</ul>\n<p>没错，虚拟模拟器用于运行你写好的镜像。编辑器就是你写代码的地方。刚开始你需要写汇编代码这就需要汇编程序来编辑它。编译器用于编译操作系统开发中主要使用的高级语言程序。</p>\n<h3 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h3><p>因为作者考虑除了作者以外可能还有很多人想要学习操作系统，所以就使用 <code>docker</code> 把这些工具打包在一起了，如果想下载就访问文章末尾列出的 <code>Docker Hub</code> 中的镜像。所有组件一共<code>700MB</code>，你可能看着会有点大，这是因为我们使用了 <code>linux</code> 作为底层虚拟机。下面是主要工具：</p>\n<ul>\n<li>ubuntu 底层虚拟机</li>\n<li>qemu 用于模拟实际电脑的模拟器</li>\n<li>vim 编辑器之神</li>\n<li>gcc C语言编译器</li>\n<li>nasm 汇编程序</li>\n</ul>\n<h3 id=\"运行效果\"><a href=\"#运行效果\" class=\"headerlink\" title=\"运行效果\"></a>运行效果</h3><p><img data-src=\"osdev-platform/osdev.png\"></p>\n<h3 id=\"有关文档\"><a href=\"#有关文档\" class=\"headerlink\" title=\"有关文档\"></a>有关文档</h3><ul>\n<li><a href=\"https://hub.docker.com/r/scarboroughcoral/osdev-ubuntu/\">Docker Hub</a></li>\n<li><a href=\"https://github.com/cfenollosa/os-tutorial\">开发参考教程</a></li>\n<li><a href=\"https://qemu.weilnetz.de/doc/qemu-doc.html\">QEMU 使用文档</a></li>\n<li><a href=\"http://www.skywind.me/maker/intel.htm\">Intel 汇编指令集</a></li>\n<li><a href=\"https://www.ibm.com/developerworks/cn/linux/l-assembly/index.html\">Linux 汇编开发指南（IBM）</a></li>\n<li><a href=\"https://wizardforcel.gitbooks.io/intel-80386-ref-manual/content/1.html\">Intel 80386 程序员参考手册</a></li>\n<li><a href=\"http://www.cs.bham.ac.uk/~exr/lectures/opsys/10_11/lectures/os-dev.pdf\">Writing a Simple Operating System —from Scratch</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note default\"><p>工欲善其事，必先利其器。</p>\n</div>","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>如果你也想体验开发操作系统的话，那么这篇博客会很适合你。当你想要开发操作系统的时候你可能需要这几样东西：</p>\n<ul>\n<li>模拟器</li>\n<li>编辑器</li>\n<li>编译器</li>\n<li>汇编程序</li>\n</ul>\n<p>没错，虚拟模拟器用于运行你写好的镜像。编辑器就是你写代码的地方。刚开始你需要写汇编代码这就需要汇编程序来编辑它。编译器用于编译操作系统开发中主要使用的高级语言程序。</p>\n<h3 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h3><p>因为作者考虑除了作者以外可能还有很多人想要学习操作系统，所以就使用 <code>docker</code> 把这些工具打包在一起了，如果想下载就访问文章末尾列出的 <code>Docker Hub</code> 中的镜像。所有组件一共<code>700MB</code>，你可能看着会有点大，这是因为我们使用了 <code>linux</code> 作为底层虚拟机。下面是主要工具：</p>\n<ul>\n<li>ubuntu 底层虚拟机</li>\n<li>qemu 用于模拟实际电脑的模拟器</li>\n<li>vim 编辑器之神</li>\n<li>gcc C语言编译器</li>\n<li>nasm 汇编程序</li>\n</ul>\n<h3 id=\"运行效果\"><a href=\"#运行效果\" class=\"headerlink\" title=\"运行效果\"></a>运行效果</h3><p><img data-src=\"osdev-platform/osdev.png\"></p>\n<h3 id=\"有关文档\"><a href=\"#有关文档\" class=\"headerlink\" title=\"有关文档\"></a>有关文档</h3><ul>\n<li><a href=\"https://hub.docker.com/r/scarboroughcoral/osdev-ubuntu/\">Docker Hub</a></li>\n<li><a href=\"https://github.com/cfenollosa/os-tutorial\">开发参考教程</a></li>\n<li><a href=\"https://qemu.weilnetz.de/doc/qemu-doc.html\">QEMU 使用文档</a></li>\n<li><a href=\"http://www.skywind.me/maker/intel.htm\">Intel 汇编指令集</a></li>\n<li><a href=\"https://www.ibm.com/developerworks/cn/linux/l-assembly/index.html\">Linux 汇编开发指南（IBM）</a></li>\n<li><a href=\"https://wizardforcel.gitbooks.io/intel-80386-ref-manual/content/1.html\">Intel 80386 程序员参考手册</a></li>\n<li><a href=\"http://www.cs.bham.ac.uk/~exr/lectures/opsys/10_11/lectures/os-dev.pdf\">Writing a Simple Operating System —from Scratch</a></li>\n</ul>"},{"title":"Web安全系列：XSS和CSRF","mathjax":false,"copyright":true,"comment":true,"date":"2019-11-18T08:33:05.000Z","_content":"\n{% note primary %}\nXSS、CSRF\n{% endnote %}\n\n<!-- more -->\n\n---\n\n\n## 前言\n\nWeb应用的安全问题也是一个web开发人员需要了解的事，今天我们就来看一看常见的两种安全问题，`XSS`和`CSRF`。\n\n**因为对安全问题不够熟悉，读者如果发现问题请右下角小窗私聊或文章右上角修改按钮github提交pr。**\n\n大体内容如下：\n\n- XSS\n  - 什么是XSS\n  - XSS分类\n  - XSS实例\n  - XSS避免\n- CSRF\n  - 什么是CSRF\n  - CSRF实例\n  - CSRF避免\n\n## XSS\n> Cross-site scripting (XSS) bugs are one of the most common and dangerous types of vulnerabilities in Web applications.These nasty buggers can allow your enemies to steal or modify user data in your apps.\n\n\n通过这个[小实验（游戏）](https://xss-game.appspot.com/)，你就可以大致了解一下XSS是一个什么东西了。\n\n认识的一个大佬也写过一篇[XSS文章](https://orzbox.github.io/our-tech/#/articles/XSS-Explain-1)，可以当做参考。\n\n做了一下这个实验，勉勉强强算是通关了。\n\n在这个XSS Game中做了什么？**整体感觉就是从客户端找漏洞（看网页源码，JS、HTML），然后通过表单或者url注入脚本或者一些其他第三方脚本。**\n\n> Cross-site scripting carried out on websites accounted for roughly 84% of all security vulnerabilities documented by Symantec up until 2007.（Wikipedia）\n\n\n\n### 常见XSS分类\n\n- Stored XSS Attacks：持久注入，注入数据库\n- Reflected XSS Attacks:注入的数据会由服务器返回或者直接跳转到另一个页面显示\n- DOM-based XSS Attacks：修改DOM\n\n### XSS注入方式\n\n- 表单注入\n- URL注入\n- 引用外部脚本\n\n### XSS避免\n\n- 同源策略\n- 白名单策略（内容安全策略，Content Safe Policy）\n- 表单验证\n- 拼凑字符串时验证来自querystring的变量\n\n### XSS Game实验内容\n\n大体记录一下实验内容吧。\n\n#### level1\n\n一个提交表单的页面，输入数据data并提交。\n观察py代码可以看到他会将data渲染到页面内，那么我可以输入以下内容：\n\n```html\n<script>alert(1)</script>\n```\n\nOK，Hello World to XSS就完成了。\n\n\n#### level2\n\n一个发送评论的页面。\n通过观察源码，发现他也会将输入的数据data直接显示出来。\n\n但是这时候使用level1中的方法已经不管用了（可能是因为页面已经加载完了，无法执行script脚本\n\n但是我可以通过如下代码来实现，插入一个无效图片，通过onerror方法来执行脚本。\n\n\n```html\n<img src=\"\" onerror=\"alert(1)\"/>\n```\n\nlevel2 is over！\n\n#### level3\n\n没有可输入的表单，但是可以通过URL输入，有个哈希参数用于图片显示。\n\n通过观察源码，发现他将url输入的数字编号通过img标签进行拼接了（num就是我们输入的数）。\n\n```html\nhtml += \"<img src='/static/level3/cloud\" + num + \".jpg' />\";\n```\n\n那我们可以通过如下代码来封闭标签：\n\n```html\n\nhttps://xss-game.appspot.com/level3/frame#x' onerror='alert(\"xss\")'>\n\n```\n\n完成！\n\n#### level4\n\n一个输入表单数据timer，然后提交。\n\n通过查看py代码，发现他的数据渲染部分：\n\n```text\n  <img src=\"/static/loading.gif\" onload=\"startTimer('{{ timer }}');\" />\n\n```\n\n我们利用封闭标签，输入如下代码：\n\n```text\n');alert('xss\n\n模板渲染后：onload=\"startTimer('');alert('xss');\"\n```\n这样就完成了。\n\n\n#### level5\n\n观察源码有一个a标签是通过模板渲染的:\n\n```html\n<a href=\"{{ next }}\">Next >></a>\n```\n\n这里使用a标签的伪协议来完成，我们可以输入：\n\n```html\nhttps://xss-game.appspot.com/level5/frame/signup?next=javascript:alert(1)\n\n模板渲染后：<a href=\"javascript:alert(1)\">Next >></a>\n```\n\n#### level6\n\n可以通过URL请求其他文件，可以通过data协议（`data:text/plain,alert('s')`）创建一个简单的文本。\n\n\n\n结果：\n\n``` html\nhttps://xss-game.appspot.com/level6/frame#data:text/plain,alert('xss')\n```\n\n## CSRF\n\n> 跨站请求伪造（英语：Cross-site request forgery），也被称为 one-click attack 或者 session riding，通常缩写为 CSRF 或者 XSRF， 是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。跟跨网站脚本（XSS）相比，XSS 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。（Wikipedia）\n\n顾名思义，就是攻击者伪造请求。假如说用户在A网站登录了，这时候浏览器保存了登录信息，这段时间内用户又访问了B网站，B网站内存在一个A网站则请求（这个请求是攻击者伪造的），这样就属于跨站请求伪造。\n\n### 维基百科上的例子\n\n前提是没有同源策略，Attackers才能使用银行的登录信息。\n\n```html\n假如一家银行用以运行转账操作的URL地址如下： http://www.examplebank.com/withdraw?account=AccoutName&amount=1000&for=PayeeName\n\n那么，一个恶意攻击者可以在另一个网站上放置如下代码： <img src=\"http://www.examplebank.com/withdraw?account=Alice&amount=1000&for=Badman\">\n\n如果有账户名为Alice的用户访问了恶意站点，而她之前刚访问过银行不久，登录信息尚未过期，那么她就会损失1000资金。\n\n这种恶意的网址可以有很多种形式，藏身于网页中的许多地方。此外，攻击者也不需要控制放置恶意网址的网站。例如他可以将这种地址藏在论坛，博客等任何用户生成内容的网站中。这意味着如果服务端没有合适的防御措施的话，用户即使访问熟悉的可信网站也有受攻击的危险。\n\n透过例子能够看出，攻击者并不能通过CSRF攻击来直接获取用户的账户控制权，也不能直接窃取用户的任何信息。他们能做到的，是欺骗用户浏览器，让其以用户的名义运行操作。\n```\n\n因为同源策略不允许读取其他源的cookie，所以如何完成攻击呢？\n如果可以，使用XSS攻击加CSRF攻击就可以很好的完成。首先使用stored的XSS注入到数据库，然后显示到银行的网页，此时victim不小心点击的这个标签，就会发起请求了。\n\n### 预防\n\n- 检查Referer字段，发起请求的来源。存在客户端伪造Referer的可能\n- 添加校验token（伪随机数）\n\n## Reference\n\n- [Warning: You are entering the XSS game area](https://xss-game.appspot.com/)\n- [XSS跨站脚本攻击探讨总结](https://orzbox.github.io/our-tech/#/articles/XSS-Explain-1)\n- [Cross-site scripting](https://en.wikipedia.org/wiki/Cross-site_scripting)\n- [跨站请求伪造](https://zh.wikipedia.org/wiki/%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0)\n","source":"_posts/secure-xss-csrf.md","raw":"---\ntitle: Web安全系列：XSS和CSRF\nmathjax: false\ncopyright: true\ncomment: true\ndate: 2019-11-18 16:33:05\ntags:\n- Security\ncategories:\n- Security\n\n---\n\n{% note primary %}\nXSS、CSRF\n{% endnote %}\n\n<!-- more -->\n\n---\n\n\n## 前言\n\nWeb应用的安全问题也是一个web开发人员需要了解的事，今天我们就来看一看常见的两种安全问题，`XSS`和`CSRF`。\n\n**因为对安全问题不够熟悉，读者如果发现问题请右下角小窗私聊或文章右上角修改按钮github提交pr。**\n\n大体内容如下：\n\n- XSS\n  - 什么是XSS\n  - XSS分类\n  - XSS实例\n  - XSS避免\n- CSRF\n  - 什么是CSRF\n  - CSRF实例\n  - CSRF避免\n\n## XSS\n> Cross-site scripting (XSS) bugs are one of the most common and dangerous types of vulnerabilities in Web applications.These nasty buggers can allow your enemies to steal or modify user data in your apps.\n\n\n通过这个[小实验（游戏）](https://xss-game.appspot.com/)，你就可以大致了解一下XSS是一个什么东西了。\n\n认识的一个大佬也写过一篇[XSS文章](https://orzbox.github.io/our-tech/#/articles/XSS-Explain-1)，可以当做参考。\n\n做了一下这个实验，勉勉强强算是通关了。\n\n在这个XSS Game中做了什么？**整体感觉就是从客户端找漏洞（看网页源码，JS、HTML），然后通过表单或者url注入脚本或者一些其他第三方脚本。**\n\n> Cross-site scripting carried out on websites accounted for roughly 84% of all security vulnerabilities documented by Symantec up until 2007.（Wikipedia）\n\n\n\n### 常见XSS分类\n\n- Stored XSS Attacks：持久注入，注入数据库\n- Reflected XSS Attacks:注入的数据会由服务器返回或者直接跳转到另一个页面显示\n- DOM-based XSS Attacks：修改DOM\n\n### XSS注入方式\n\n- 表单注入\n- URL注入\n- 引用外部脚本\n\n### XSS避免\n\n- 同源策略\n- 白名单策略（内容安全策略，Content Safe Policy）\n- 表单验证\n- 拼凑字符串时验证来自querystring的变量\n\n### XSS Game实验内容\n\n大体记录一下实验内容吧。\n\n#### level1\n\n一个提交表单的页面，输入数据data并提交。\n观察py代码可以看到他会将data渲染到页面内，那么我可以输入以下内容：\n\n```html\n<script>alert(1)</script>\n```\n\nOK，Hello World to XSS就完成了。\n\n\n#### level2\n\n一个发送评论的页面。\n通过观察源码，发现他也会将输入的数据data直接显示出来。\n\n但是这时候使用level1中的方法已经不管用了（可能是因为页面已经加载完了，无法执行script脚本\n\n但是我可以通过如下代码来实现，插入一个无效图片，通过onerror方法来执行脚本。\n\n\n```html\n<img src=\"\" onerror=\"alert(1)\"/>\n```\n\nlevel2 is over！\n\n#### level3\n\n没有可输入的表单，但是可以通过URL输入，有个哈希参数用于图片显示。\n\n通过观察源码，发现他将url输入的数字编号通过img标签进行拼接了（num就是我们输入的数）。\n\n```html\nhtml += \"<img src='/static/level3/cloud\" + num + \".jpg' />\";\n```\n\n那我们可以通过如下代码来封闭标签：\n\n```html\n\nhttps://xss-game.appspot.com/level3/frame#x' onerror='alert(\"xss\")'>\n\n```\n\n完成！\n\n#### level4\n\n一个输入表单数据timer，然后提交。\n\n通过查看py代码，发现他的数据渲染部分：\n\n```text\n  <img src=\"/static/loading.gif\" onload=\"startTimer('{{ timer }}');\" />\n\n```\n\n我们利用封闭标签，输入如下代码：\n\n```text\n');alert('xss\n\n模板渲染后：onload=\"startTimer('');alert('xss');\"\n```\n这样就完成了。\n\n\n#### level5\n\n观察源码有一个a标签是通过模板渲染的:\n\n```html\n<a href=\"{{ next }}\">Next >></a>\n```\n\n这里使用a标签的伪协议来完成，我们可以输入：\n\n```html\nhttps://xss-game.appspot.com/level5/frame/signup?next=javascript:alert(1)\n\n模板渲染后：<a href=\"javascript:alert(1)\">Next >></a>\n```\n\n#### level6\n\n可以通过URL请求其他文件，可以通过data协议（`data:text/plain,alert('s')`）创建一个简单的文本。\n\n\n\n结果：\n\n``` html\nhttps://xss-game.appspot.com/level6/frame#data:text/plain,alert('xss')\n```\n\n## CSRF\n\n> 跨站请求伪造（英语：Cross-site request forgery），也被称为 one-click attack 或者 session riding，通常缩写为 CSRF 或者 XSRF， 是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。跟跨网站脚本（XSS）相比，XSS 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。（Wikipedia）\n\n顾名思义，就是攻击者伪造请求。假如说用户在A网站登录了，这时候浏览器保存了登录信息，这段时间内用户又访问了B网站，B网站内存在一个A网站则请求（这个请求是攻击者伪造的），这样就属于跨站请求伪造。\n\n### 维基百科上的例子\n\n前提是没有同源策略，Attackers才能使用银行的登录信息。\n\n```html\n假如一家银行用以运行转账操作的URL地址如下： http://www.examplebank.com/withdraw?account=AccoutName&amount=1000&for=PayeeName\n\n那么，一个恶意攻击者可以在另一个网站上放置如下代码： <img src=\"http://www.examplebank.com/withdraw?account=Alice&amount=1000&for=Badman\">\n\n如果有账户名为Alice的用户访问了恶意站点，而她之前刚访问过银行不久，登录信息尚未过期，那么她就会损失1000资金。\n\n这种恶意的网址可以有很多种形式，藏身于网页中的许多地方。此外，攻击者也不需要控制放置恶意网址的网站。例如他可以将这种地址藏在论坛，博客等任何用户生成内容的网站中。这意味着如果服务端没有合适的防御措施的话，用户即使访问熟悉的可信网站也有受攻击的危险。\n\n透过例子能够看出，攻击者并不能通过CSRF攻击来直接获取用户的账户控制权，也不能直接窃取用户的任何信息。他们能做到的，是欺骗用户浏览器，让其以用户的名义运行操作。\n```\n\n因为同源策略不允许读取其他源的cookie，所以如何完成攻击呢？\n如果可以，使用XSS攻击加CSRF攻击就可以很好的完成。首先使用stored的XSS注入到数据库，然后显示到银行的网页，此时victim不小心点击的这个标签，就会发起请求了。\n\n### 预防\n\n- 检查Referer字段，发起请求的来源。存在客户端伪造Referer的可能\n- 添加校验token（伪随机数）\n\n## Reference\n\n- [Warning: You are entering the XSS game area](https://xss-game.appspot.com/)\n- [XSS跨站脚本攻击探讨总结](https://orzbox.github.io/our-tech/#/articles/XSS-Explain-1)\n- [Cross-site scripting](https://en.wikipedia.org/wiki/Cross-site_scripting)\n- [跨站请求伪造](https://zh.wikipedia.org/wiki/%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0)\n","slug":"secure-xss-csrf","published":1,"updated":"2022-01-06T04:09:12.477Z","_id":"cksq5v7n00047n0pu200j05mf","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note primary\"><p>XSS、CSRF</p>\n</div>\n\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Web应用的安全问题也是一个web开发人员需要了解的事，今天我们就来看一看常见的两种安全问题，<code>XSS</code>和<code>CSRF</code>。</p>\n<p><strong>因为对安全问题不够熟悉，读者如果发现问题请右下角小窗私聊或文章右上角修改按钮github提交pr。</strong></p>\n<p>大体内容如下：</p>\n<ul>\n<li>XSS<ul>\n<li>什么是XSS</li>\n<li>XSS分类</li>\n<li>XSS实例</li>\n<li>XSS避免</li>\n</ul>\n</li>\n<li>CSRF<ul>\n<li>什么是CSRF</li>\n<li>CSRF实例</li>\n<li>CSRF避免</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"XSS\"><a href=\"#XSS\" class=\"headerlink\" title=\"XSS\"></a>XSS</h2><blockquote>\n<p>Cross-site scripting (XSS) bugs are one of the most common and dangerous types of vulnerabilities in Web applications.These nasty buggers can allow your enemies to steal or modify user data in your apps.</p>\n</blockquote>\n<p>通过这个<a href=\"https://xss-game.appspot.com/\">小实验（游戏）</a>，你就可以大致了解一下XSS是一个什么东西了。</p>\n<p>认识的一个大佬也写过一篇<a href=\"https://orzbox.github.io/our-tech/#/articles/XSS-Explain-1\">XSS文章</a>，可以当做参考。</p>\n<p>做了一下这个实验，勉勉强强算是通关了。</p>\n<p>在这个XSS Game中做了什么？<strong>整体感觉就是从客户端找漏洞（看网页源码，JS、HTML），然后通过表单或者url注入脚本或者一些其他第三方脚本。</strong></p>\n<blockquote>\n<p>Cross-site scripting carried out on websites accounted for roughly 84% of all security vulnerabilities documented by Symantec up until 2007.（Wikipedia）</p>\n</blockquote>\n<h3 id=\"常见XSS分类\"><a href=\"#常见XSS分类\" class=\"headerlink\" title=\"常见XSS分类\"></a>常见XSS分类</h3><ul>\n<li>Stored XSS Attacks：持久注入，注入数据库</li>\n<li>Reflected XSS Attacks:注入的数据会由服务器返回或者直接跳转到另一个页面显示</li>\n<li>DOM-based XSS Attacks：修改DOM</li>\n</ul>\n<h3 id=\"XSS注入方式\"><a href=\"#XSS注入方式\" class=\"headerlink\" title=\"XSS注入方式\"></a>XSS注入方式</h3><ul>\n<li>表单注入</li>\n<li>URL注入</li>\n<li>引用外部脚本</li>\n</ul>\n<h3 id=\"XSS避免\"><a href=\"#XSS避免\" class=\"headerlink\" title=\"XSS避免\"></a>XSS避免</h3><ul>\n<li>同源策略</li>\n<li>白名单策略（内容安全策略，Content Safe Policy）</li>\n<li>表单验证</li>\n<li>拼凑字符串时验证来自querystring的变量</li>\n</ul>\n<h3 id=\"XSS-Game实验内容\"><a href=\"#XSS-Game实验内容\" class=\"headerlink\" title=\"XSS Game实验内容\"></a>XSS Game实验内容</h3><p>大体记录一下实验内容吧。</p>\n<h4 id=\"level1\"><a href=\"#level1\" class=\"headerlink\" title=\"level1\"></a>level1</h4><p>一个提交表单的页面，输入数据data并提交。<br>观察py代码可以看到他会将data渲染到页面内，那么我可以输入以下内容：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span>alert(1)<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>OK，Hello World to XSS就完成了。</p>\n<h4 id=\"level2\"><a href=\"#level2\" class=\"headerlink\" title=\"level2\"></a>level2</h4><p>一个发送评论的页面。<br>通过观察源码，发现他也会将输入的数据data直接显示出来。</p>\n<p>但是这时候使用level1中的方法已经不管用了（可能是因为页面已经加载完了，无法执行script脚本</p>\n<p>但是我可以通过如下代码来实现，插入一个无效图片，通过onerror方法来执行脚本。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">onerror</span>=<span class=\"string\">&quot;alert(1)&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>level2 is over！</p>\n<h4 id=\"level3\"><a href=\"#level3\" class=\"headerlink\" title=\"level3\"></a>level3</h4><p>没有可输入的表单，但是可以通过URL输入，有个哈希参数用于图片显示。</p>\n<p>通过观察源码，发现他将url输入的数字编号通过img标签进行拼接了（num就是我们输入的数）。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html += &quot;<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;/static/level3/cloud&quot; + num + &quot;.jpg&#x27;</span> /&gt;</span>&quot;;</span><br></pre></td></tr></table></figure>\n\n<p>那我们可以通过如下代码来封闭标签：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">https://xss-game.appspot.com/level3/frame#x&#x27; onerror=&#x27;alert(&quot;xss&quot;)&#x27;&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>完成！</p>\n<h4 id=\"level4\"><a href=\"#level4\" class=\"headerlink\" title=\"level4\"></a>level4</h4><p>一个输入表单数据timer，然后提交。</p>\n<p>通过查看py代码，发现他的数据渲染部分：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img src=&quot;/static/loading.gif&quot; onload=&quot;startTimer(&#x27;&#123;&#123; timer &#125;&#125;&#x27;);&quot; /&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>我们利用封闭标签，输入如下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;);alert(&#x27;xss</span><br><span class=\"line\"></span><br><span class=\"line\">模板渲染后：onload=&quot;startTimer(&#x27;&#x27;);alert(&#x27;xss&#x27;);&quot;</span><br></pre></td></tr></table></figure>\n<p>这样就完成了。</p>\n<h4 id=\"level5\"><a href=\"#level5\" class=\"headerlink\" title=\"level5\"></a>level5</h4><p>观察源码有一个a标签是通过模板渲染的:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&#123;&#123; next &#125;&#125;&quot;</span>&gt;</span>Next &gt;&gt;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里使用a标签的伪协议来完成，我们可以输入：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://xss-game.appspot.com/level5/frame/signup?next=javascript:alert(1)</span><br><span class=\"line\"></span><br><span class=\"line\">模板渲染后：<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;javascript:alert(1)&quot;</span>&gt;</span>Next &gt;&gt;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"level6\"><a href=\"#level6\" class=\"headerlink\" title=\"level6\"></a>level6</h4><p>可以通过URL请求其他文件，可以通过data协议（<code>data:text/plain,alert(&#39;s&#39;)</code>）创建一个简单的文本。</p>\n<p>结果：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://xss-game.appspot.com/level6/frame#data:text/plain,alert(&#x27;xss&#x27;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CSRF\"><a href=\"#CSRF\" class=\"headerlink\" title=\"CSRF\"></a>CSRF</h2><blockquote>\n<p>跨站请求伪造（英语：Cross-site request forgery），也被称为 one-click attack 或者 session riding，通常缩写为 CSRF 或者 XSRF， 是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。跟跨网站脚本（XSS）相比，XSS 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。（Wikipedia）</p>\n</blockquote>\n<p>顾名思义，就是攻击者伪造请求。假如说用户在A网站登录了，这时候浏览器保存了登录信息，这段时间内用户又访问了B网站，B网站内存在一个A网站则请求（这个请求是攻击者伪造的），这样就属于跨站请求伪造。</p>\n<h3 id=\"维基百科上的例子\"><a href=\"#维基百科上的例子\" class=\"headerlink\" title=\"维基百科上的例子\"></a>维基百科上的例子</h3><p>前提是没有同源策略，Attackers才能使用银行的登录信息。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">假如一家银行用以运行转账操作的URL地址如下： http://www.examplebank.com/withdraw?account=AccoutName&amp;amount=1000&amp;for=PayeeName</span><br><span class=\"line\"></span><br><span class=\"line\">那么，一个恶意攻击者可以在另一个网站上放置如下代码： <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;http://www.examplebank.com/withdraw?account=Alice&amp;amount=1000&amp;for=Badman&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">如果有账户名为Alice的用户访问了恶意站点，而她之前刚访问过银行不久，登录信息尚未过期，那么她就会损失1000资金。</span><br><span class=\"line\"></span><br><span class=\"line\">这种恶意的网址可以有很多种形式，藏身于网页中的许多地方。此外，攻击者也不需要控制放置恶意网址的网站。例如他可以将这种地址藏在论坛，博客等任何用户生成内容的网站中。这意味着如果服务端没有合适的防御措施的话，用户即使访问熟悉的可信网站也有受攻击的危险。</span><br><span class=\"line\"></span><br><span class=\"line\">透过例子能够看出，攻击者并不能通过CSRF攻击来直接获取用户的账户控制权，也不能直接窃取用户的任何信息。他们能做到的，是欺骗用户浏览器，让其以用户的名义运行操作。</span><br></pre></td></tr></table></figure>\n\n<p>因为同源策略不允许读取其他源的cookie，所以如何完成攻击呢？<br>如果可以，使用XSS攻击加CSRF攻击就可以很好的完成。首先使用stored的XSS注入到数据库，然后显示到银行的网页，此时victim不小心点击的这个标签，就会发起请求了。</p>\n<h3 id=\"预防\"><a href=\"#预防\" class=\"headerlink\" title=\"预防\"></a>预防</h3><ul>\n<li>检查Referer字段，发起请求的来源。存在客户端伪造Referer的可能</li>\n<li>添加校验token（伪随机数）</li>\n</ul>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://xss-game.appspot.com/\">Warning: You are entering the XSS game area</a></li>\n<li><a href=\"https://orzbox.github.io/our-tech/#/articles/XSS-Explain-1\">XSS跨站脚本攻击探讨总结</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Cross-site_scripting\">Cross-site scripting</a></li>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0\">跨站请求伪造</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note primary\"><p>XSS、CSRF</p>\n</div>","more":"<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Web应用的安全问题也是一个web开发人员需要了解的事，今天我们就来看一看常见的两种安全问题，<code>XSS</code>和<code>CSRF</code>。</p>\n<p><strong>因为对安全问题不够熟悉，读者如果发现问题请右下角小窗私聊或文章右上角修改按钮github提交pr。</strong></p>\n<p>大体内容如下：</p>\n<ul>\n<li>XSS<ul>\n<li>什么是XSS</li>\n<li>XSS分类</li>\n<li>XSS实例</li>\n<li>XSS避免</li>\n</ul>\n</li>\n<li>CSRF<ul>\n<li>什么是CSRF</li>\n<li>CSRF实例</li>\n<li>CSRF避免</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"XSS\"><a href=\"#XSS\" class=\"headerlink\" title=\"XSS\"></a>XSS</h2><blockquote>\n<p>Cross-site scripting (XSS) bugs are one of the most common and dangerous types of vulnerabilities in Web applications.These nasty buggers can allow your enemies to steal or modify user data in your apps.</p>\n</blockquote>\n<p>通过这个<a href=\"https://xss-game.appspot.com/\">小实验（游戏）</a>，你就可以大致了解一下XSS是一个什么东西了。</p>\n<p>认识的一个大佬也写过一篇<a href=\"https://orzbox.github.io/our-tech/#/articles/XSS-Explain-1\">XSS文章</a>，可以当做参考。</p>\n<p>做了一下这个实验，勉勉强强算是通关了。</p>\n<p>在这个XSS Game中做了什么？<strong>整体感觉就是从客户端找漏洞（看网页源码，JS、HTML），然后通过表单或者url注入脚本或者一些其他第三方脚本。</strong></p>\n<blockquote>\n<p>Cross-site scripting carried out on websites accounted for roughly 84% of all security vulnerabilities documented by Symantec up until 2007.（Wikipedia）</p>\n</blockquote>\n<h3 id=\"常见XSS分类\"><a href=\"#常见XSS分类\" class=\"headerlink\" title=\"常见XSS分类\"></a>常见XSS分类</h3><ul>\n<li>Stored XSS Attacks：持久注入，注入数据库</li>\n<li>Reflected XSS Attacks:注入的数据会由服务器返回或者直接跳转到另一个页面显示</li>\n<li>DOM-based XSS Attacks：修改DOM</li>\n</ul>\n<h3 id=\"XSS注入方式\"><a href=\"#XSS注入方式\" class=\"headerlink\" title=\"XSS注入方式\"></a>XSS注入方式</h3><ul>\n<li>表单注入</li>\n<li>URL注入</li>\n<li>引用外部脚本</li>\n</ul>\n<h3 id=\"XSS避免\"><a href=\"#XSS避免\" class=\"headerlink\" title=\"XSS避免\"></a>XSS避免</h3><ul>\n<li>同源策略</li>\n<li>白名单策略（内容安全策略，Content Safe Policy）</li>\n<li>表单验证</li>\n<li>拼凑字符串时验证来自querystring的变量</li>\n</ul>\n<h3 id=\"XSS-Game实验内容\"><a href=\"#XSS-Game实验内容\" class=\"headerlink\" title=\"XSS Game实验内容\"></a>XSS Game实验内容</h3><p>大体记录一下实验内容吧。</p>\n<h4 id=\"level1\"><a href=\"#level1\" class=\"headerlink\" title=\"level1\"></a>level1</h4><p>一个提交表单的页面，输入数据data并提交。<br>观察py代码可以看到他会将data渲染到页面内，那么我可以输入以下内容：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span>alert(1)<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>OK，Hello World to XSS就完成了。</p>\n<h4 id=\"level2\"><a href=\"#level2\" class=\"headerlink\" title=\"level2\"></a>level2</h4><p>一个发送评论的页面。<br>通过观察源码，发现他也会将输入的数据data直接显示出来。</p>\n<p>但是这时候使用level1中的方法已经不管用了（可能是因为页面已经加载完了，无法执行script脚本</p>\n<p>但是我可以通过如下代码来实现，插入一个无效图片，通过onerror方法来执行脚本。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">onerror</span>=<span class=\"string\">&quot;alert(1)&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>level2 is over！</p>\n<h4 id=\"level3\"><a href=\"#level3\" class=\"headerlink\" title=\"level3\"></a>level3</h4><p>没有可输入的表单，但是可以通过URL输入，有个哈希参数用于图片显示。</p>\n<p>通过观察源码，发现他将url输入的数字编号通过img标签进行拼接了（num就是我们输入的数）。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html += &quot;<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;/static/level3/cloud&quot; + num + &quot;.jpg&#x27;</span> /&gt;</span>&quot;;</span><br></pre></td></tr></table></figure>\n\n<p>那我们可以通过如下代码来封闭标签：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">https://xss-game.appspot.com/level3/frame#x&#x27; onerror=&#x27;alert(&quot;xss&quot;)&#x27;&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>完成！</p>\n<h4 id=\"level4\"><a href=\"#level4\" class=\"headerlink\" title=\"level4\"></a>level4</h4><p>一个输入表单数据timer，然后提交。</p>\n<p>通过查看py代码，发现他的数据渲染部分：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img src=&quot;/static/loading.gif&quot; onload=&quot;startTimer(&#x27;&#123;&#123; timer &#125;&#125;&#x27;);&quot; /&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>我们利用封闭标签，输入如下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;);alert(&#x27;xss</span><br><span class=\"line\"></span><br><span class=\"line\">模板渲染后：onload=&quot;startTimer(&#x27;&#x27;);alert(&#x27;xss&#x27;);&quot;</span><br></pre></td></tr></table></figure>\n<p>这样就完成了。</p>\n<h4 id=\"level5\"><a href=\"#level5\" class=\"headerlink\" title=\"level5\"></a>level5</h4><p>观察源码有一个a标签是通过模板渲染的:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&#123;&#123; next &#125;&#125;&quot;</span>&gt;</span>Next &gt;&gt;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里使用a标签的伪协议来完成，我们可以输入：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://xss-game.appspot.com/level5/frame/signup?next=javascript:alert(1)</span><br><span class=\"line\"></span><br><span class=\"line\">模板渲染后：<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;javascript:alert(1)&quot;</span>&gt;</span>Next &gt;&gt;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"level6\"><a href=\"#level6\" class=\"headerlink\" title=\"level6\"></a>level6</h4><p>可以通过URL请求其他文件，可以通过data协议（<code>data:text/plain,alert(&#39;s&#39;)</code>）创建一个简单的文本。</p>\n<p>结果：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://xss-game.appspot.com/level6/frame#data:text/plain,alert(&#x27;xss&#x27;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CSRF\"><a href=\"#CSRF\" class=\"headerlink\" title=\"CSRF\"></a>CSRF</h2><blockquote>\n<p>跨站请求伪造（英语：Cross-site request forgery），也被称为 one-click attack 或者 session riding，通常缩写为 CSRF 或者 XSRF， 是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。跟跨网站脚本（XSS）相比，XSS 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。（Wikipedia）</p>\n</blockquote>\n<p>顾名思义，就是攻击者伪造请求。假如说用户在A网站登录了，这时候浏览器保存了登录信息，这段时间内用户又访问了B网站，B网站内存在一个A网站则请求（这个请求是攻击者伪造的），这样就属于跨站请求伪造。</p>\n<h3 id=\"维基百科上的例子\"><a href=\"#维基百科上的例子\" class=\"headerlink\" title=\"维基百科上的例子\"></a>维基百科上的例子</h3><p>前提是没有同源策略，Attackers才能使用银行的登录信息。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">假如一家银行用以运行转账操作的URL地址如下： http://www.examplebank.com/withdraw?account=AccoutName&amp;amount=1000&amp;for=PayeeName</span><br><span class=\"line\"></span><br><span class=\"line\">那么，一个恶意攻击者可以在另一个网站上放置如下代码： <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;http://www.examplebank.com/withdraw?account=Alice&amp;amount=1000&amp;for=Badman&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">如果有账户名为Alice的用户访问了恶意站点，而她之前刚访问过银行不久，登录信息尚未过期，那么她就会损失1000资金。</span><br><span class=\"line\"></span><br><span class=\"line\">这种恶意的网址可以有很多种形式，藏身于网页中的许多地方。此外，攻击者也不需要控制放置恶意网址的网站。例如他可以将这种地址藏在论坛，博客等任何用户生成内容的网站中。这意味着如果服务端没有合适的防御措施的话，用户即使访问熟悉的可信网站也有受攻击的危险。</span><br><span class=\"line\"></span><br><span class=\"line\">透过例子能够看出，攻击者并不能通过CSRF攻击来直接获取用户的账户控制权，也不能直接窃取用户的任何信息。他们能做到的，是欺骗用户浏览器，让其以用户的名义运行操作。</span><br></pre></td></tr></table></figure>\n\n<p>因为同源策略不允许读取其他源的cookie，所以如何完成攻击呢？<br>如果可以，使用XSS攻击加CSRF攻击就可以很好的完成。首先使用stored的XSS注入到数据库，然后显示到银行的网页，此时victim不小心点击的这个标签，就会发起请求了。</p>\n<h3 id=\"预防\"><a href=\"#预防\" class=\"headerlink\" title=\"预防\"></a>预防</h3><ul>\n<li>检查Referer字段，发起请求的来源。存在客户端伪造Referer的可能</li>\n<li>添加校验token（伪随机数）</li>\n</ul>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://xss-game.appspot.com/\">Warning: You are entering the XSS game area</a></li>\n<li><a href=\"https://orzbox.github.io/our-tech/#/articles/XSS-Explain-1\">XSS跨站脚本攻击探讨总结</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Cross-site_scripting\">Cross-site scripting</a></li>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0\">跨站请求伪造</a></li>\n</ul>"},{"title":"浅谈Windows API","date":"2018-10-08T07:22:14.000Z","_content":"\n\n{% note default %}\n尽管SEDF_JKHJKE这种变量定义形式很烂，但死磕一次。\n{% endnote %}\n\n<!-- more -->\n\n### Windows API中的窗口程序API\n\n这篇博客主要是想简单写一写Windows API中关于图形窗口程序的部分。我认为图形窗口部分最核心的就是消息循环机制，虽然不知道内部如何实现，不知道内部是不是需要调度，消息队列可能就是最简单的FIFS（先到先服务的思想来处理消息）。\n\n\n\n\n### 消息是什么消息\n\n消息是I/O消息或者软件消息，这些消息是有编码的，比如按下键盘`VK_XXX`或者关闭程序`VM_CLOSE`这些，实际上这些消息都有一个唯一确定的ID，即它的编码。当消息被触发时，Windows会封装一个MSG对象，这个MSG对象里面至少有一个消息的编码`ID`，然后把这个MSG对象放入消息队列。当MSG对象排队到队头时，就会对此消息进行处理，进行处理的函数是`消息回调函数`（代码中的`MyWinProc`），这是自己定义的，需要你来对某些你所需要的消息进行特殊的处理。\n\n> 这是不停地从消息队列队头取消息并分发处理\n```c\n\twhile (GetMessage(&msg, NULL, 0, 0))\n\t{\n\t\tTranslateMessage(&msg);\n\t\tDispatchMessage(&msg);\n\t}\n```\n> 这是处理消息时回调函数，根据不同的消息ID编码值做出不同的处理。\n```c\nLRESULT CALLBACK MyWinProc(HWND hwnd, UINT msg, WPARAM wparam, LPARAM lparam) {\n\tswitch (msg)\n\t{\n\tcase WM_CLOSE:\n\t\tDestroyWindow(hwnd);\n\t\tbreak;\n\tcase WM_DESTROY:\n\t\tPostQuitMessage(0);\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n\t}\n\treturn DefWindowProc(hwnd, msg, wparam, lparam);\n}\n```\n\n### 创建窗口\n\n创建窗口毫不意外需要以下东西：\n* 窗口属性配置信息，即代码中的`WNDCLASS`\n* 创建函数，及代码中的`CreateWindow`\n\n另外还需要以下东西：\n* 创建窗口前需要将窗口属性配置信息注册`RegisterClass(&wndclass)`\n* 创建完窗口之后需要将窗口显示`ShowWindow(hwnd, SW_NORMAL)`和开始更新`UpdateWindow(hwnd)`\n\n\n### 代码\n\n全部代码如下：\n\n```C\n\n#include <windows.h>\n\nLRESULT CALLBACK MyWinProc(HWND hwnd, UINT msg, WPARAM wparam, LPARAM lparam) {\n\tswitch (msg)\n\t{\n\tcase WM_CLOSE:\n\t\tDestroyWindow(hwnd);\n\t\tbreak;\n\tcase WM_DESTROY:\n\t\tPostQuitMessage(0);\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n\t}\n\treturn DefWindowProc(hwnd, msg, wparam, lparam);\n}\nint WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {\n\tWNDCLASS wndclass = {\n\t\tCS_HREDRAW | CS_VREDRAW,\n\t\tMyWinProc,\n\t\t0,\n\t\t0,\n\t\thInstance,\n\t\tLoadIcon(NULL, IDI_APPLICATION),\n\t\tLoadCursor(NULL, IDC_ARROW),\n\t\t(HBRUSH)GetStockObject(GRAY_BRUSH),\n\t\tNULL,\n\t\t\"wincls\"\n\t};\n\tRegisterClass(&wndclass);\n\tHWND hwnd = CreateWindow(\"wincls\", \"我的窗口\", WS_OVERLAPPEDWINDOW, 0, 0, 800, 600, NULL, NULL, NULL, NULL);\n\tShowWindow(hwnd, SW_NORMAL);\n\tUpdateWindow(hwnd);\n\tMSG msg;\n\twhile (GetMessage(&msg, NULL, 0, 0))\n\t{\n\t\tTranslateMessage(&msg);\n\t\tDispatchMessage(&msg);\n\t}\n\n\treturn 0;\n}\n\n```\n","source":"_posts/shadow-thinking-in-winapi.md","raw":"---\ntitle: 浅谈Windows API\ndate: 2018-10-08 15:22:14\n\ntags:\n- Windows API\n- C\ncategories:\n- Computer Science\n- Operating System\n---\n\n\n{% note default %}\n尽管SEDF_JKHJKE这种变量定义形式很烂，但死磕一次。\n{% endnote %}\n\n<!-- more -->\n\n### Windows API中的窗口程序API\n\n这篇博客主要是想简单写一写Windows API中关于图形窗口程序的部分。我认为图形窗口部分最核心的就是消息循环机制，虽然不知道内部如何实现，不知道内部是不是需要调度，消息队列可能就是最简单的FIFS（先到先服务的思想来处理消息）。\n\n\n\n\n### 消息是什么消息\n\n消息是I/O消息或者软件消息，这些消息是有编码的，比如按下键盘`VK_XXX`或者关闭程序`VM_CLOSE`这些，实际上这些消息都有一个唯一确定的ID，即它的编码。当消息被触发时，Windows会封装一个MSG对象，这个MSG对象里面至少有一个消息的编码`ID`，然后把这个MSG对象放入消息队列。当MSG对象排队到队头时，就会对此消息进行处理，进行处理的函数是`消息回调函数`（代码中的`MyWinProc`），这是自己定义的，需要你来对某些你所需要的消息进行特殊的处理。\n\n> 这是不停地从消息队列队头取消息并分发处理\n```c\n\twhile (GetMessage(&msg, NULL, 0, 0))\n\t{\n\t\tTranslateMessage(&msg);\n\t\tDispatchMessage(&msg);\n\t}\n```\n> 这是处理消息时回调函数，根据不同的消息ID编码值做出不同的处理。\n```c\nLRESULT CALLBACK MyWinProc(HWND hwnd, UINT msg, WPARAM wparam, LPARAM lparam) {\n\tswitch (msg)\n\t{\n\tcase WM_CLOSE:\n\t\tDestroyWindow(hwnd);\n\t\tbreak;\n\tcase WM_DESTROY:\n\t\tPostQuitMessage(0);\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n\t}\n\treturn DefWindowProc(hwnd, msg, wparam, lparam);\n}\n```\n\n### 创建窗口\n\n创建窗口毫不意外需要以下东西：\n* 窗口属性配置信息，即代码中的`WNDCLASS`\n* 创建函数，及代码中的`CreateWindow`\n\n另外还需要以下东西：\n* 创建窗口前需要将窗口属性配置信息注册`RegisterClass(&wndclass)`\n* 创建完窗口之后需要将窗口显示`ShowWindow(hwnd, SW_NORMAL)`和开始更新`UpdateWindow(hwnd)`\n\n\n### 代码\n\n全部代码如下：\n\n```C\n\n#include <windows.h>\n\nLRESULT CALLBACK MyWinProc(HWND hwnd, UINT msg, WPARAM wparam, LPARAM lparam) {\n\tswitch (msg)\n\t{\n\tcase WM_CLOSE:\n\t\tDestroyWindow(hwnd);\n\t\tbreak;\n\tcase WM_DESTROY:\n\t\tPostQuitMessage(0);\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n\t}\n\treturn DefWindowProc(hwnd, msg, wparam, lparam);\n}\nint WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {\n\tWNDCLASS wndclass = {\n\t\tCS_HREDRAW | CS_VREDRAW,\n\t\tMyWinProc,\n\t\t0,\n\t\t0,\n\t\thInstance,\n\t\tLoadIcon(NULL, IDI_APPLICATION),\n\t\tLoadCursor(NULL, IDC_ARROW),\n\t\t(HBRUSH)GetStockObject(GRAY_BRUSH),\n\t\tNULL,\n\t\t\"wincls\"\n\t};\n\tRegisterClass(&wndclass);\n\tHWND hwnd = CreateWindow(\"wincls\", \"我的窗口\", WS_OVERLAPPEDWINDOW, 0, 0, 800, 600, NULL, NULL, NULL, NULL);\n\tShowWindow(hwnd, SW_NORMAL);\n\tUpdateWindow(hwnd);\n\tMSG msg;\n\twhile (GetMessage(&msg, NULL, 0, 0))\n\t{\n\t\tTranslateMessage(&msg);\n\t\tDispatchMessage(&msg);\n\t}\n\n\treturn 0;\n}\n\n```\n","slug":"shadow-thinking-in-winapi","published":1,"updated":"2022-01-06T04:09:12.477Z","_id":"cksq5v7n00048n0pu4qvk0d9q","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note default\"><p>尽管SEDF_JKHJKE这种变量定义形式很烂，但死磕一次。</p>\n</div>\n\n<span id=\"more\"></span>\n\n<h3 id=\"Windows-API中的窗口程序API\"><a href=\"#Windows-API中的窗口程序API\" class=\"headerlink\" title=\"Windows API中的窗口程序API\"></a>Windows API中的窗口程序API</h3><p>这篇博客主要是想简单写一写Windows API中关于图形窗口程序的部分。我认为图形窗口部分最核心的就是消息循环机制，虽然不知道内部如何实现，不知道内部是不是需要调度，消息队列可能就是最简单的FIFS（先到先服务的思想来处理消息）。</p>\n<h3 id=\"消息是什么消息\"><a href=\"#消息是什么消息\" class=\"headerlink\" title=\"消息是什么消息\"></a>消息是什么消息</h3><p>消息是I/O消息或者软件消息，这些消息是有编码的，比如按下键盘<code>VK_XXX</code>或者关闭程序<code>VM_CLOSE</code>这些，实际上这些消息都有一个唯一确定的ID，即它的编码。当消息被触发时，Windows会封装一个MSG对象，这个MSG对象里面至少有一个消息的编码<code>ID</code>，然后把这个MSG对象放入消息队列。当MSG对象排队到队头时，就会对此消息进行处理，进行处理的函数是<code>消息回调函数</code>（代码中的<code>MyWinProc</code>），这是自己定义的，需要你来对某些你所需要的消息进行特殊的处理。</p>\n<blockquote>\n<p>这是不停地从消息队列队头取消息并分发处理</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (GetMessage(&amp;msg, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tTranslateMessage(&amp;msg);</span><br><span class=\"line\">\tDispatchMessage(&amp;msg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这是处理消息时回调函数，根据不同的消息ID编码值做出不同的处理。</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">LRESULT CALLBACK <span class=\"title\">MyWinProc</span><span class=\"params\">(HWND hwnd, UINT msg, WPARAM wparam, LPARAM lparam)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> (msg)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> WM_CLOSE:</span><br><span class=\"line\">\t\tDestroyWindow(hwnd);</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> WM_DESTROY:</span><br><span class=\"line\">\t\tPostQuitMessage(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DefWindowProc(hwnd, msg, wparam, lparam);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建窗口\"><a href=\"#创建窗口\" class=\"headerlink\" title=\"创建窗口\"></a>创建窗口</h3><p>创建窗口毫不意外需要以下东西：</p>\n<ul>\n<li>窗口属性配置信息，即代码中的<code>WNDCLASS</code></li>\n<li>创建函数，及代码中的<code>CreateWindow</code></li>\n</ul>\n<p>另外还需要以下东西：</p>\n<ul>\n<li>创建窗口前需要将窗口属性配置信息注册<code>RegisterClass(&amp;wndclass)</code></li>\n<li>创建完窗口之后需要将窗口显示<code>ShowWindow(hwnd, SW_NORMAL)</code>和开始更新<code>UpdateWindow(hwnd)</code></li>\n</ul>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>全部代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LRESULT CALLBACK <span class=\"title\">MyWinProc</span><span class=\"params\">(HWND hwnd, UINT msg, WPARAM wparam, LPARAM lparam)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> (msg)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> WM_CLOSE:</span><br><span class=\"line\">\t\tDestroyWindow(hwnd);</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> WM_DESTROY:</span><br><span class=\"line\">\t\tPostQuitMessage(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DefWindowProc(hwnd, msg, wparam, lparam);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> WINAPI <span class=\"title\">WinMain</span><span class=\"params\">(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, <span class=\"keyword\">int</span> nCmdShow)</span> </span>&#123;</span><br><span class=\"line\">\tWNDCLASS wndclass = &#123;</span><br><span class=\"line\">\t\tCS_HREDRAW | CS_VREDRAW,</span><br><span class=\"line\">\t\tMyWinProc,</span><br><span class=\"line\">\t\t<span class=\"number\">0</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0</span>,</span><br><span class=\"line\">\t\thInstance,</span><br><span class=\"line\">\t\tLoadIcon(<span class=\"literal\">NULL</span>, IDI_APPLICATION),</span><br><span class=\"line\">\t\tLoadCursor(<span class=\"literal\">NULL</span>, IDC_ARROW),</span><br><span class=\"line\">\t\t(HBRUSH)GetStockObject(GRAY_BRUSH),</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;wincls&quot;</span></span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\tRegisterClass(&amp;wndclass);</span><br><span class=\"line\">\tHWND hwnd = CreateWindow(<span class=\"string\">&quot;wincls&quot;</span>, <span class=\"string\">&quot;我的窗口&quot;</span>, WS_OVERLAPPEDWINDOW, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">800</span>, <span class=\"number\">600</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\tShowWindow(hwnd, SW_NORMAL);</span><br><span class=\"line\">\tUpdateWindow(hwnd);</span><br><span class=\"line\">\tMSG msg;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (GetMessage(&amp;msg, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tTranslateMessage(&amp;msg);</span><br><span class=\"line\">\t\tDispatchMessage(&amp;msg);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<div class=\"note default\"><p>尽管SEDF_JKHJKE这种变量定义形式很烂，但死磕一次。</p>\n</div>","more":"<h3 id=\"Windows-API中的窗口程序API\"><a href=\"#Windows-API中的窗口程序API\" class=\"headerlink\" title=\"Windows API中的窗口程序API\"></a>Windows API中的窗口程序API</h3><p>这篇博客主要是想简单写一写Windows API中关于图形窗口程序的部分。我认为图形窗口部分最核心的就是消息循环机制，虽然不知道内部如何实现，不知道内部是不是需要调度，消息队列可能就是最简单的FIFS（先到先服务的思想来处理消息）。</p>\n<h3 id=\"消息是什么消息\"><a href=\"#消息是什么消息\" class=\"headerlink\" title=\"消息是什么消息\"></a>消息是什么消息</h3><p>消息是I/O消息或者软件消息，这些消息是有编码的，比如按下键盘<code>VK_XXX</code>或者关闭程序<code>VM_CLOSE</code>这些，实际上这些消息都有一个唯一确定的ID，即它的编码。当消息被触发时，Windows会封装一个MSG对象，这个MSG对象里面至少有一个消息的编码<code>ID</code>，然后把这个MSG对象放入消息队列。当MSG对象排队到队头时，就会对此消息进行处理，进行处理的函数是<code>消息回调函数</code>（代码中的<code>MyWinProc</code>），这是自己定义的，需要你来对某些你所需要的消息进行特殊的处理。</p>\n<blockquote>\n<p>这是不停地从消息队列队头取消息并分发处理</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (GetMessage(&amp;msg, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tTranslateMessage(&amp;msg);</span><br><span class=\"line\">\tDispatchMessage(&amp;msg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这是处理消息时回调函数，根据不同的消息ID编码值做出不同的处理。</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">LRESULT CALLBACK <span class=\"title\">MyWinProc</span><span class=\"params\">(HWND hwnd, UINT msg, WPARAM wparam, LPARAM lparam)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> (msg)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> WM_CLOSE:</span><br><span class=\"line\">\t\tDestroyWindow(hwnd);</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> WM_DESTROY:</span><br><span class=\"line\">\t\tPostQuitMessage(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DefWindowProc(hwnd, msg, wparam, lparam);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建窗口\"><a href=\"#创建窗口\" class=\"headerlink\" title=\"创建窗口\"></a>创建窗口</h3><p>创建窗口毫不意外需要以下东西：</p>\n<ul>\n<li>窗口属性配置信息，即代码中的<code>WNDCLASS</code></li>\n<li>创建函数，及代码中的<code>CreateWindow</code></li>\n</ul>\n<p>另外还需要以下东西：</p>\n<ul>\n<li>创建窗口前需要将窗口属性配置信息注册<code>RegisterClass(&amp;wndclass)</code></li>\n<li>创建完窗口之后需要将窗口显示<code>ShowWindow(hwnd, SW_NORMAL)</code>和开始更新<code>UpdateWindow(hwnd)</code></li>\n</ul>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>全部代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LRESULT CALLBACK <span class=\"title\">MyWinProc</span><span class=\"params\">(HWND hwnd, UINT msg, WPARAM wparam, LPARAM lparam)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> (msg)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> WM_CLOSE:</span><br><span class=\"line\">\t\tDestroyWindow(hwnd);</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> WM_DESTROY:</span><br><span class=\"line\">\t\tPostQuitMessage(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> DefWindowProc(hwnd, msg, wparam, lparam);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> WINAPI <span class=\"title\">WinMain</span><span class=\"params\">(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, <span class=\"keyword\">int</span> nCmdShow)</span> </span>&#123;</span><br><span class=\"line\">\tWNDCLASS wndclass = &#123;</span><br><span class=\"line\">\t\tCS_HREDRAW | CS_VREDRAW,</span><br><span class=\"line\">\t\tMyWinProc,</span><br><span class=\"line\">\t\t<span class=\"number\">0</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">0</span>,</span><br><span class=\"line\">\t\thInstance,</span><br><span class=\"line\">\t\tLoadIcon(<span class=\"literal\">NULL</span>, IDI_APPLICATION),</span><br><span class=\"line\">\t\tLoadCursor(<span class=\"literal\">NULL</span>, IDC_ARROW),</span><br><span class=\"line\">\t\t(HBRUSH)GetStockObject(GRAY_BRUSH),</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;wincls&quot;</span></span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\tRegisterClass(&amp;wndclass);</span><br><span class=\"line\">\tHWND hwnd = CreateWindow(<span class=\"string\">&quot;wincls&quot;</span>, <span class=\"string\">&quot;我的窗口&quot;</span>, WS_OVERLAPPEDWINDOW, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">800</span>, <span class=\"number\">600</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\tShowWindow(hwnd, SW_NORMAL);</span><br><span class=\"line\">\tUpdateWindow(hwnd);</span><br><span class=\"line\">\tMSG msg;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (GetMessage(&amp;msg, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tTranslateMessage(&amp;msg);</span><br><span class=\"line\">\t\tDispatchMessage(&amp;msg);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"Web安全系列：同源策略和跨域请求","mathjax":false,"copyright":true,"comment":true,"date":"2019-11-19T14:52:41.000Z","_content":"\n{% note primary %}\n同源策略和跨域请求。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 0x1. 前言\n\n同源策略问题也是一个面试常问的问题，这篇文章来总结一下。\n\n大体内容如下：\n\n- [0x1. 前言](#0x1-%e5%89%8d%e8%a8%80)\n- [0x2. 同源策略](#0x2-%e5%90%8c%e6%ba%90%e7%ad%96%e7%95%a5)\n  - [0x2.1 什么是同源](#0x21-%e4%bb%80%e4%b9%88%e6%98%af%e5%90%8c%e6%ba%90)\n  - [0x2.2 同源问题举例](#0x22-%e5%90%8c%e6%ba%90%e9%97%ae%e9%a2%98%e4%b8%be%e4%be%8b)\n  - [0x2.3 同源策略的限制](#0x23-%e5%90%8c%e6%ba%90%e7%ad%96%e7%95%a5%e7%9a%84%e9%99%90%e5%88%b6)\n  - [0x2.4 为什么有同源策略](#0x24-%e4%b8%ba%e4%bb%80%e4%b9%88%e6%9c%89%e5%90%8c%e6%ba%90%e7%ad%96%e7%95%a5)\n- [0x3. 跨域问题](#0x3-%e8%b7%a8%e5%9f%9f%e9%97%ae%e9%a2%98)\n  - [0x3.1 如何发起Ajax跨域请求](#0x31-%e5%a6%82%e4%bd%95%e5%8f%91%e8%b5%b7ajax%e8%b7%a8%e5%9f%9f%e8%af%b7%e6%b1%82)\n    - [0x3.1.1 JSONP(JSON with Padding)](#0x311-jsonpjson-with-padding)\n    - [0x3.1.2 CORS(Cross-Origin Resource Sharing)](#0x312-corscross-origin-resource-sharing)\n    - [0x3.1.3 WebSockets](#0x313-websockets)\n    - [0x3.1.4 CORS vs JSONP](#0x314-cors-vs-jsonp)\n  - [0x3.2 其他跨域问题](#0x32-%e5%85%b6%e4%bb%96%e8%b7%a8%e5%9f%9f%e9%97%ae%e9%a2%98)\n    - [0x3.2.1 跨域共享Cookie](#0x321-%e8%b7%a8%e5%9f%9f%e5%85%b1%e4%ba%abcookie)\n    - [0x3.2.2 跨域iframe](#0x322-%e8%b7%a8%e5%9f%9fiframe)\n    - [0x3.2.2 跨域localStorage](#0x322-%e8%b7%a8%e5%9f%9flocalstorage)\n- [0x4. Reference](#0x4-reference)\n\n\n## 0x2. 同源策略\n> 同源策略是一种安全机制，这种安全机制限制了一个源内的文档或脚本如何和其他源的资源交互。这种机制有利于隔离潜在的恶意文本。\n\n### 0x2.1 什么是同源\n\n如果两个源的【协议、主机、端口号】三元组都相同的话那么就称这两个源是同源的。\n\n### 0x2.2 同源问题举例\n\n\n举例来说，`http://www.example.com/dir/page.html`这个网址，协议是`http://`，域名是`www.example.com`，端口是`80`（默认端口可以省略）。它的同源情况如下。\n\n- `http://www.example.com/dir2/other.html`：同源\n- `http://example.com/dir/other.html`：不同源（域名不同）\n- `http://v2.www.example.com/dir/other.html`：不同源（域名不同）\n- `http://www.example.com:81/dir/other.html`：不同源（端口不同）\n\n\n### 0x2.3 同源策略的限制\n\n同源策略限制的是JavaScript的脚本，也就是说一些资源比如说CSS、HTML和动态加载的脚本就能够通过HTML标签跨域。[CSRF](secure-xss-csrf.html)就是利用了这一点。\n\n\n那么具体限制JavaScript的哪些行为呢？\n\n- 跨域Cookie、LocalStorage 和 IndexDB 无法读取。\n- 跨域DOM 无法获得。\n- 跨域AJAX 请求不能发送。\n\n### 0x2.4 为什么有同源策略\n\n同源策略在一定程度上保证了信息安全。\n就像CSRF那个例子一样。现在网站很多都是通过cookie进行身份认证的，如果网站A的cookie能够在网站B获取，那么我就可以在网站B发送请求给网站A的服务器。\n\n\n## 0x3. 跨域问题\n\n在一些场景中同源策略就显得限制性太强了，比如不同子域名属于跨域，不允许其交互，但是属于同一个父域名。\n\n\n### 0x3.1 如何发起Ajax跨域请求\n\n下面是一些常见的Ajax跨域请求方法。\n\n\n#### 0x3.1.1 JSONP(JSON with Padding)\n\n跨域Ajax请求的常用方法。只能发送`Get`请求。\n通过动态添加`<script></script>`标签，利用`src`字段向目的源服务器请求数据，这是不受同源策略限制的，因为并没有使用JavaScript进行跨域请求。\n\n`src`中必须声明回调函数，也就是有一个查询字符串`callback`参数，值为回调函数的名称。\n\n如下：\n\n```html\n<script src=\"http://server.example.com/Users/1234?callback=parseResponse\"></script>\n```\n\n服务端会将返回的数据包装在`parseResponse()`的括号内（这就是JSONP名称的由来`Padding or Payload`），注意这是一个文本。\n\n客户端实际接收到的数据是`parseResponse(data)`，因为`<scirpt>`标签加载的文件会自动执行，所以只要定义了`parseResponse`这个函数那就会自动调用。\n\n只能通过`<script>`的`src`指定请求路径，这就决定了`JSONP`只能发起get请求。\n\n#### 0x3.1.2 CORS(Cross-Origin Resource Sharing)\n\n目标源服务端允许的源可向其发起跨域请求。\n\n过程如下：\n\n1. 客户端跨域请求\n2. 浏览器发送一个`OPTIONS`请求到目标源服务器，这个请求报文里包含`Origin`字段（当前网站的源），还有一些其他细节。\n3. 目标源服务端返回。\n4. 浏览器检查目标源服务器返回的报文，如果包含`Access-Control-Allow-Origin`字段且当前源满足条件则发起请求。\n\n验证是否满足跨域条件的例子（来自维基百科）：\n\n- `OPTIONS`请求：\n```text\nOPTIONS /\nHost: service.example.com\nOrigin: http://www.example.com\n```\n- 目标源服务器返回：\n```text\nAccess-Control-Allow-Origin: http://www.example.com\nAccess-Control-Allow-Methods: PUT, DELETE\n```\n\n维基百科跨域XHR的创建：\n\n![](https://upload.wikimedia.org/wikipedia/commons/thumb/c/ca/Flowchart_showing_Simple_and_Preflight_XHR.svg/770px-Flowchart_showing_Simple_and_Preflight_XHR.svg.png)\n\n\n#### 0x3.1.3 WebSockets\n\n`ws`是一种协议，使用`ws://`（非加密）和`wss://`（加密）作为协议前缀，这个协议不受同源策略限制。\n\n客户端请求时添加`origin`字段，表示当前源是哪，服务器根据这个字段进行相应，如果在白名单内则允许本次通信。\n\n#### 0x3.1.4 CORS vs JSONP\n\n- JSONP只支持GET请求；CORS也支持其他HTTP请求\n- CORS使程序员写跨域请求像普通请求一样，便于维护；JSONP则相对不易维护。\n- JSONP在古老的浏览器上也能运行；CORS在大多数现代浏览器上能运行\n- JSONP可能会被XSS攻击如果跨域请求目的源不够安全的话；CORS则更安全。\n\n### 0x3.2 其他跨域问题\n\n#### 0x3.2.1 跨域共享Cookie\n\n跨域Cookie的共享可以通过修改`document.domain`属性来跨域。**`domain`必须是当前页面的域名或者是其父域名。**，而且端口号必须相同，设置`domain`时会将端口号设为`null`。\n\n共享Cookie也可以在服务端设置Cookie时，将Cookie的域名范围设为父域名。\n\n比如`http://a.example.com`和`http://b.example.com`，服务器设置cookie时，只需要设置为`Set-Cookie: key=value; domain=.example.com; path=/`\n\n\n\n#### 0x3.2.2 跨域iframe\n\n如果两个不同源的网页拥有共同的一级域名，那么就可以通过修改`document.domain`的方式实现跨域。\n\n如果完全不同源可以通过如下三种方式：\n\n- 片段标识符\n- window.name\n- Cross-document messaging\n\n前两种比较捞就不总结了，第三种跨文本通信才是正统的Web API，就是通过`window.postMessage(message,origin)`方法进行跨窗口通信，不管是否同源。\n\n一般来说通过postMessage+listener的方式进行通信。\n\n#### 0x3.2.2 跨域localStorage\n\n可以使用如上所说的跨文本通信进行通信。\n\n\n\n\n## 0x4. Reference\n\n- [浏览器同源政策及其规避方法](https://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html)\n- [Same-origin policy](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy)\n- [Same-origin policy for file: URIs](https://developer.mozilla.org/en-US/docs/Archive/Misc_top_level/Same-origin_policy_for_file:_URIs)\n- [Same-origin policy](https://en.wikipedia.org/wiki/Same-origin_policy)\n- [Cross-origin resource sharing](https://en.wikipedia.org/wiki/Cross-origin_resource_sharing)\n- [JSONP](https://en.wikipedia.org/wiki/JSONP)","source":"_posts/secure-same-origin-policy.md","raw":"---\ntitle: Web安全系列：同源策略和跨域请求\nmathjax: false\ncopyright: true\ncomment: true\ndate: 2019-11-19 22:52:41\ntags:\n- Security\ncategories:\n- Security\n\n---\n\n{% note primary %}\n同源策略和跨域请求。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 0x1. 前言\n\n同源策略问题也是一个面试常问的问题，这篇文章来总结一下。\n\n大体内容如下：\n\n- [0x1. 前言](#0x1-%e5%89%8d%e8%a8%80)\n- [0x2. 同源策略](#0x2-%e5%90%8c%e6%ba%90%e7%ad%96%e7%95%a5)\n  - [0x2.1 什么是同源](#0x21-%e4%bb%80%e4%b9%88%e6%98%af%e5%90%8c%e6%ba%90)\n  - [0x2.2 同源问题举例](#0x22-%e5%90%8c%e6%ba%90%e9%97%ae%e9%a2%98%e4%b8%be%e4%be%8b)\n  - [0x2.3 同源策略的限制](#0x23-%e5%90%8c%e6%ba%90%e7%ad%96%e7%95%a5%e7%9a%84%e9%99%90%e5%88%b6)\n  - [0x2.4 为什么有同源策略](#0x24-%e4%b8%ba%e4%bb%80%e4%b9%88%e6%9c%89%e5%90%8c%e6%ba%90%e7%ad%96%e7%95%a5)\n- [0x3. 跨域问题](#0x3-%e8%b7%a8%e5%9f%9f%e9%97%ae%e9%a2%98)\n  - [0x3.1 如何发起Ajax跨域请求](#0x31-%e5%a6%82%e4%bd%95%e5%8f%91%e8%b5%b7ajax%e8%b7%a8%e5%9f%9f%e8%af%b7%e6%b1%82)\n    - [0x3.1.1 JSONP(JSON with Padding)](#0x311-jsonpjson-with-padding)\n    - [0x3.1.2 CORS(Cross-Origin Resource Sharing)](#0x312-corscross-origin-resource-sharing)\n    - [0x3.1.3 WebSockets](#0x313-websockets)\n    - [0x3.1.4 CORS vs JSONP](#0x314-cors-vs-jsonp)\n  - [0x3.2 其他跨域问题](#0x32-%e5%85%b6%e4%bb%96%e8%b7%a8%e5%9f%9f%e9%97%ae%e9%a2%98)\n    - [0x3.2.1 跨域共享Cookie](#0x321-%e8%b7%a8%e5%9f%9f%e5%85%b1%e4%ba%abcookie)\n    - [0x3.2.2 跨域iframe](#0x322-%e8%b7%a8%e5%9f%9fiframe)\n    - [0x3.2.2 跨域localStorage](#0x322-%e8%b7%a8%e5%9f%9flocalstorage)\n- [0x4. Reference](#0x4-reference)\n\n\n## 0x2. 同源策略\n> 同源策略是一种安全机制，这种安全机制限制了一个源内的文档或脚本如何和其他源的资源交互。这种机制有利于隔离潜在的恶意文本。\n\n### 0x2.1 什么是同源\n\n如果两个源的【协议、主机、端口号】三元组都相同的话那么就称这两个源是同源的。\n\n### 0x2.2 同源问题举例\n\n\n举例来说，`http://www.example.com/dir/page.html`这个网址，协议是`http://`，域名是`www.example.com`，端口是`80`（默认端口可以省略）。它的同源情况如下。\n\n- `http://www.example.com/dir2/other.html`：同源\n- `http://example.com/dir/other.html`：不同源（域名不同）\n- `http://v2.www.example.com/dir/other.html`：不同源（域名不同）\n- `http://www.example.com:81/dir/other.html`：不同源（端口不同）\n\n\n### 0x2.3 同源策略的限制\n\n同源策略限制的是JavaScript的脚本，也就是说一些资源比如说CSS、HTML和动态加载的脚本就能够通过HTML标签跨域。[CSRF](secure-xss-csrf.html)就是利用了这一点。\n\n\n那么具体限制JavaScript的哪些行为呢？\n\n- 跨域Cookie、LocalStorage 和 IndexDB 无法读取。\n- 跨域DOM 无法获得。\n- 跨域AJAX 请求不能发送。\n\n### 0x2.4 为什么有同源策略\n\n同源策略在一定程度上保证了信息安全。\n就像CSRF那个例子一样。现在网站很多都是通过cookie进行身份认证的，如果网站A的cookie能够在网站B获取，那么我就可以在网站B发送请求给网站A的服务器。\n\n\n## 0x3. 跨域问题\n\n在一些场景中同源策略就显得限制性太强了，比如不同子域名属于跨域，不允许其交互，但是属于同一个父域名。\n\n\n### 0x3.1 如何发起Ajax跨域请求\n\n下面是一些常见的Ajax跨域请求方法。\n\n\n#### 0x3.1.1 JSONP(JSON with Padding)\n\n跨域Ajax请求的常用方法。只能发送`Get`请求。\n通过动态添加`<script></script>`标签，利用`src`字段向目的源服务器请求数据，这是不受同源策略限制的，因为并没有使用JavaScript进行跨域请求。\n\n`src`中必须声明回调函数，也就是有一个查询字符串`callback`参数，值为回调函数的名称。\n\n如下：\n\n```html\n<script src=\"http://server.example.com/Users/1234?callback=parseResponse\"></script>\n```\n\n服务端会将返回的数据包装在`parseResponse()`的括号内（这就是JSONP名称的由来`Padding or Payload`），注意这是一个文本。\n\n客户端实际接收到的数据是`parseResponse(data)`，因为`<scirpt>`标签加载的文件会自动执行，所以只要定义了`parseResponse`这个函数那就会自动调用。\n\n只能通过`<script>`的`src`指定请求路径，这就决定了`JSONP`只能发起get请求。\n\n#### 0x3.1.2 CORS(Cross-Origin Resource Sharing)\n\n目标源服务端允许的源可向其发起跨域请求。\n\n过程如下：\n\n1. 客户端跨域请求\n2. 浏览器发送一个`OPTIONS`请求到目标源服务器，这个请求报文里包含`Origin`字段（当前网站的源），还有一些其他细节。\n3. 目标源服务端返回。\n4. 浏览器检查目标源服务器返回的报文，如果包含`Access-Control-Allow-Origin`字段且当前源满足条件则发起请求。\n\n验证是否满足跨域条件的例子（来自维基百科）：\n\n- `OPTIONS`请求：\n```text\nOPTIONS /\nHost: service.example.com\nOrigin: http://www.example.com\n```\n- 目标源服务器返回：\n```text\nAccess-Control-Allow-Origin: http://www.example.com\nAccess-Control-Allow-Methods: PUT, DELETE\n```\n\n维基百科跨域XHR的创建：\n\n![](https://upload.wikimedia.org/wikipedia/commons/thumb/c/ca/Flowchart_showing_Simple_and_Preflight_XHR.svg/770px-Flowchart_showing_Simple_and_Preflight_XHR.svg.png)\n\n\n#### 0x3.1.3 WebSockets\n\n`ws`是一种协议，使用`ws://`（非加密）和`wss://`（加密）作为协议前缀，这个协议不受同源策略限制。\n\n客户端请求时添加`origin`字段，表示当前源是哪，服务器根据这个字段进行相应，如果在白名单内则允许本次通信。\n\n#### 0x3.1.4 CORS vs JSONP\n\n- JSONP只支持GET请求；CORS也支持其他HTTP请求\n- CORS使程序员写跨域请求像普通请求一样，便于维护；JSONP则相对不易维护。\n- JSONP在古老的浏览器上也能运行；CORS在大多数现代浏览器上能运行\n- JSONP可能会被XSS攻击如果跨域请求目的源不够安全的话；CORS则更安全。\n\n### 0x3.2 其他跨域问题\n\n#### 0x3.2.1 跨域共享Cookie\n\n跨域Cookie的共享可以通过修改`document.domain`属性来跨域。**`domain`必须是当前页面的域名或者是其父域名。**，而且端口号必须相同，设置`domain`时会将端口号设为`null`。\n\n共享Cookie也可以在服务端设置Cookie时，将Cookie的域名范围设为父域名。\n\n比如`http://a.example.com`和`http://b.example.com`，服务器设置cookie时，只需要设置为`Set-Cookie: key=value; domain=.example.com; path=/`\n\n\n\n#### 0x3.2.2 跨域iframe\n\n如果两个不同源的网页拥有共同的一级域名，那么就可以通过修改`document.domain`的方式实现跨域。\n\n如果完全不同源可以通过如下三种方式：\n\n- 片段标识符\n- window.name\n- Cross-document messaging\n\n前两种比较捞就不总结了，第三种跨文本通信才是正统的Web API，就是通过`window.postMessage(message,origin)`方法进行跨窗口通信，不管是否同源。\n\n一般来说通过postMessage+listener的方式进行通信。\n\n#### 0x3.2.2 跨域localStorage\n\n可以使用如上所说的跨文本通信进行通信。\n\n\n\n\n## 0x4. Reference\n\n- [浏览器同源政策及其规避方法](https://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html)\n- [Same-origin policy](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy)\n- [Same-origin policy for file: URIs](https://developer.mozilla.org/en-US/docs/Archive/Misc_top_level/Same-origin_policy_for_file:_URIs)\n- [Same-origin policy](https://en.wikipedia.org/wiki/Same-origin_policy)\n- [Cross-origin resource sharing](https://en.wikipedia.org/wiki/Cross-origin_resource_sharing)\n- [JSONP](https://en.wikipedia.org/wiki/JSONP)","slug":"secure-same-origin-policy","published":1,"updated":"2022-01-06T04:09:12.476Z","_id":"cksq5v7n1004bn0pu5fgihj3u","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note primary\"><p>同源策略和跨域请求。</p>\n</div>\n\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"0x1-前言\"><a href=\"#0x1-前言\" class=\"headerlink\" title=\"0x1. 前言\"></a>0x1. 前言</h2><p>同源策略问题也是一个面试常问的问题，这篇文章来总结一下。</p>\n<p>大体内容如下：</p>\n<ul>\n<li><a href=\"#0x1-%E5%89%8D%E8%A8%80\">0x1. 前言</a></li>\n<li><a href=\"#0x2-%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5\">0x2. 同源策略</a><ul>\n<li><a href=\"#0x21-%E4%BB%80%E4%B9%88%E6%98%AF%E5%90%8C%E6%BA%90\">0x2.1 什么是同源</a></li>\n<li><a href=\"#0x22-%E5%90%8C%E6%BA%90%E9%97%AE%E9%A2%98%E4%B8%BE%E4%BE%8B\">0x2.2 同源问题举例</a></li>\n<li><a href=\"#0x23-%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E7%9A%84%E9%99%90%E5%88%B6\">0x2.3 同源策略的限制</a></li>\n<li><a href=\"#0x24-%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%89%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5\">0x2.4 为什么有同源策略</a></li>\n</ul>\n</li>\n<li><a href=\"#0x3-%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98\">0x3. 跨域问题</a><ul>\n<li><a href=\"#0x31-%E5%A6%82%E4%BD%95%E5%8F%91%E8%B5%B7ajax%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82\">0x3.1 如何发起Ajax跨域请求</a><ul>\n<li><a href=\"#0x311-jsonpjson-with-padding\">0x3.1.1 JSONP(JSON with Padding)</a></li>\n<li><a href=\"#0x312-corscross-origin-resource-sharing\">0x3.1.2 CORS(Cross-Origin Resource Sharing)</a></li>\n<li><a href=\"#0x313-websockets\">0x3.1.3 WebSockets</a></li>\n<li><a href=\"#0x314-cors-vs-jsonp\">0x3.1.4 CORS vs JSONP</a></li>\n</ul>\n</li>\n<li><a href=\"#0x32-%E5%85%B6%E4%BB%96%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98\">0x3.2 其他跨域问题</a><ul>\n<li><a href=\"#0x321-%E8%B7%A8%E5%9F%9F%E5%85%B1%E4%BA%ABcookie\">0x3.2.1 跨域共享Cookie</a></li>\n<li><a href=\"#0x322-%E8%B7%A8%E5%9F%9Fiframe\">0x3.2.2 跨域iframe</a></li>\n<li><a href=\"#0x322-%E8%B7%A8%E5%9F%9Flocalstorage\">0x3.2.2 跨域localStorage</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#0x4-reference\">0x4. Reference</a></li>\n</ul>\n<h2 id=\"0x2-同源策略\"><a href=\"#0x2-同源策略\" class=\"headerlink\" title=\"0x2. 同源策略\"></a>0x2. 同源策略</h2><blockquote>\n<p>同源策略是一种安全机制，这种安全机制限制了一个源内的文档或脚本如何和其他源的资源交互。这种机制有利于隔离潜在的恶意文本。</p>\n</blockquote>\n<h3 id=\"0x2-1-什么是同源\"><a href=\"#0x2-1-什么是同源\" class=\"headerlink\" title=\"0x2.1 什么是同源\"></a>0x2.1 什么是同源</h3><p>如果两个源的【协议、主机、端口号】三元组都相同的话那么就称这两个源是同源的。</p>\n<h3 id=\"0x2-2-同源问题举例\"><a href=\"#0x2-2-同源问题举例\" class=\"headerlink\" title=\"0x2.2 同源问题举例\"></a>0x2.2 同源问题举例</h3><p>举例来说，<code>http://www.example.com/dir/page.html</code>这个网址，协议是<code>http://</code>，域名是<code>www.example.com</code>，端口是<code>80</code>（默认端口可以省略）。它的同源情况如下。</p>\n<ul>\n<li><code>http://www.example.com/dir2/other.html</code>：同源</li>\n<li><code>http://example.com/dir/other.html</code>：不同源（域名不同）</li>\n<li><code>http://v2.www.example.com/dir/other.html</code>：不同源（域名不同）</li>\n<li><code>http://www.example.com:81/dir/other.html</code>：不同源（端口不同）</li>\n</ul>\n<h3 id=\"0x2-3-同源策略的限制\"><a href=\"#0x2-3-同源策略的限制\" class=\"headerlink\" title=\"0x2.3 同源策略的限制\"></a>0x2.3 同源策略的限制</h3><p>同源策略限制的是JavaScript的脚本，也就是说一些资源比如说CSS、HTML和动态加载的脚本就能够通过HTML标签跨域。<a href=\"secure-xss-csrf.html\">CSRF</a>就是利用了这一点。</p>\n<p>那么具体限制JavaScript的哪些行为呢？</p>\n<ul>\n<li>跨域Cookie、LocalStorage 和 IndexDB 无法读取。</li>\n<li>跨域DOM 无法获得。</li>\n<li>跨域AJAX 请求不能发送。</li>\n</ul>\n<h3 id=\"0x2-4-为什么有同源策略\"><a href=\"#0x2-4-为什么有同源策略\" class=\"headerlink\" title=\"0x2.4 为什么有同源策略\"></a>0x2.4 为什么有同源策略</h3><p>同源策略在一定程度上保证了信息安全。<br>就像CSRF那个例子一样。现在网站很多都是通过cookie进行身份认证的，如果网站A的cookie能够在网站B获取，那么我就可以在网站B发送请求给网站A的服务器。</p>\n<h2 id=\"0x3-跨域问题\"><a href=\"#0x3-跨域问题\" class=\"headerlink\" title=\"0x3. 跨域问题\"></a>0x3. 跨域问题</h2><p>在一些场景中同源策略就显得限制性太强了，比如不同子域名属于跨域，不允许其交互，但是属于同一个父域名。</p>\n<h3 id=\"0x3-1-如何发起Ajax跨域请求\"><a href=\"#0x3-1-如何发起Ajax跨域请求\" class=\"headerlink\" title=\"0x3.1 如何发起Ajax跨域请求\"></a>0x3.1 如何发起Ajax跨域请求</h3><p>下面是一些常见的Ajax跨域请求方法。</p>\n<h4 id=\"0x3-1-1-JSONP-JSON-with-Padding\"><a href=\"#0x3-1-1-JSONP-JSON-with-Padding\" class=\"headerlink\" title=\"0x3.1.1 JSONP(JSON with Padding)\"></a>0x3.1.1 JSONP(JSON with Padding)</h4><p>跨域Ajax请求的常用方法。只能发送<code>Get</code>请求。<br>通过动态添加<code>&lt;script&gt;&lt;/script&gt;</code>标签，利用<code>src</code>字段向目的源服务器请求数据，这是不受同源策略限制的，因为并没有使用JavaScript进行跨域请求。</p>\n<p><code>src</code>中必须声明回调函数，也就是有一个查询字符串<code>callback</code>参数，值为回调函数的名称。</p>\n<p>如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;http://server.example.com/Users/1234?callback=parseResponse&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>服务端会将返回的数据包装在<code>parseResponse()</code>的括号内（这就是JSONP名称的由来<code>Padding or Payload</code>），注意这是一个文本。</p>\n<p>客户端实际接收到的数据是<code>parseResponse(data)</code>，因为<code>&lt;scirpt&gt;</code>标签加载的文件会自动执行，所以只要定义了<code>parseResponse</code>这个函数那就会自动调用。</p>\n<p>只能通过<code>&lt;script&gt;</code>的<code>src</code>指定请求路径，这就决定了<code>JSONP</code>只能发起get请求。</p>\n<h4 id=\"0x3-1-2-CORS-Cross-Origin-Resource-Sharing\"><a href=\"#0x3-1-2-CORS-Cross-Origin-Resource-Sharing\" class=\"headerlink\" title=\"0x3.1.2 CORS(Cross-Origin Resource Sharing)\"></a>0x3.1.2 CORS(Cross-Origin Resource Sharing)</h4><p>目标源服务端允许的源可向其发起跨域请求。</p>\n<p>过程如下：</p>\n<ol>\n<li>客户端跨域请求</li>\n<li>浏览器发送一个<code>OPTIONS</code>请求到目标源服务器，这个请求报文里包含<code>Origin</code>字段（当前网站的源），还有一些其他细节。</li>\n<li>目标源服务端返回。</li>\n<li>浏览器检查目标源服务器返回的报文，如果包含<code>Access-Control-Allow-Origin</code>字段且当前源满足条件则发起请求。</li>\n</ol>\n<p>验证是否满足跨域条件的例子（来自维基百科）：</p>\n<ul>\n<li><code>OPTIONS</code>请求：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OPTIONS /</span><br><span class=\"line\">Host: service.example.com</span><br><span class=\"line\">Origin: http://www.example.com</span><br></pre></td></tr></table></figure></li>\n<li>目标源服务器返回：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access-Control-Allow-Origin: http://www.example.com</span><br><span class=\"line\">Access-Control-Allow-Methods: PUT, DELETE</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>维基百科跨域XHR的创建：</p>\n<p><img data-src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/c/ca/Flowchart_showing_Simple_and_Preflight_XHR.svg/770px-Flowchart_showing_Simple_and_Preflight_XHR.svg.png\"></p>\n<h4 id=\"0x3-1-3-WebSockets\"><a href=\"#0x3-1-3-WebSockets\" class=\"headerlink\" title=\"0x3.1.3 WebSockets\"></a>0x3.1.3 WebSockets</h4><p><code>ws</code>是一种协议，使用<code>ws://</code>（非加密）和<code>wss://</code>（加密）作为协议前缀，这个协议不受同源策略限制。</p>\n<p>客户端请求时添加<code>origin</code>字段，表示当前源是哪，服务器根据这个字段进行相应，如果在白名单内则允许本次通信。</p>\n<h4 id=\"0x3-1-4-CORS-vs-JSONP\"><a href=\"#0x3-1-4-CORS-vs-JSONP\" class=\"headerlink\" title=\"0x3.1.4 CORS vs JSONP\"></a>0x3.1.4 CORS vs JSONP</h4><ul>\n<li>JSONP只支持GET请求；CORS也支持其他HTTP请求</li>\n<li>CORS使程序员写跨域请求像普通请求一样，便于维护；JSONP则相对不易维护。</li>\n<li>JSONP在古老的浏览器上也能运行；CORS在大多数现代浏览器上能运行</li>\n<li>JSONP可能会被XSS攻击如果跨域请求目的源不够安全的话；CORS则更安全。</li>\n</ul>\n<h3 id=\"0x3-2-其他跨域问题\"><a href=\"#0x3-2-其他跨域问题\" class=\"headerlink\" title=\"0x3.2 其他跨域问题\"></a>0x3.2 其他跨域问题</h3><h4 id=\"0x3-2-1-跨域共享Cookie\"><a href=\"#0x3-2-1-跨域共享Cookie\" class=\"headerlink\" title=\"0x3.2.1 跨域共享Cookie\"></a>0x3.2.1 跨域共享Cookie</h4><p>跨域Cookie的共享可以通过修改<code>document.domain</code>属性来跨域。**<code>domain</code>必须是当前页面的域名或者是其父域名。**，而且端口号必须相同，设置<code>domain</code>时会将端口号设为<code>null</code>。</p>\n<p>共享Cookie也可以在服务端设置Cookie时，将Cookie的域名范围设为父域名。</p>\n<p>比如<code>http://a.example.com</code>和<code>http://b.example.com</code>，服务器设置cookie时，只需要设置为<code>Set-Cookie: key=value; domain=.example.com; path=/</code></p>\n<h4 id=\"0x3-2-2-跨域iframe\"><a href=\"#0x3-2-2-跨域iframe\" class=\"headerlink\" title=\"0x3.2.2 跨域iframe\"></a>0x3.2.2 跨域iframe</h4><p>如果两个不同源的网页拥有共同的一级域名，那么就可以通过修改<code>document.domain</code>的方式实现跨域。</p>\n<p>如果完全不同源可以通过如下三种方式：</p>\n<ul>\n<li>片段标识符</li>\n<li>window.name</li>\n<li>Cross-document messaging</li>\n</ul>\n<p>前两种比较捞就不总结了，第三种跨文本通信才是正统的Web API，就是通过<code>window.postMessage(message,origin)</code>方法进行跨窗口通信，不管是否同源。</p>\n<p>一般来说通过postMessage+listener的方式进行通信。</p>\n<h4 id=\"0x3-2-2-跨域localStorage\"><a href=\"#0x3-2-2-跨域localStorage\" class=\"headerlink\" title=\"0x3.2.2 跨域localStorage\"></a>0x3.2.2 跨域localStorage</h4><p>可以使用如上所说的跨文本通信进行通信。</p>\n<h2 id=\"0x4-Reference\"><a href=\"#0x4-Reference\" class=\"headerlink\" title=\"0x4. Reference\"></a>0x4. Reference</h2><ul>\n<li><a href=\"https://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html\">浏览器同源政策及其规避方法</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\">Same-origin policy</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Archive/Misc_top_level/Same-origin_policy_for_file:_URIs\">Same-origin policy for file: URIs</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Same-origin_policy\">Same-origin policy</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\">Cross-origin resource sharing</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/JSONP\">JSONP</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note primary\"><p>同源策略和跨域请求。</p>\n</div>","more":"<hr>\n<h2 id=\"0x1-前言\"><a href=\"#0x1-前言\" class=\"headerlink\" title=\"0x1. 前言\"></a>0x1. 前言</h2><p>同源策略问题也是一个面试常问的问题，这篇文章来总结一下。</p>\n<p>大体内容如下：</p>\n<ul>\n<li><a href=\"#0x1-%E5%89%8D%E8%A8%80\">0x1. 前言</a></li>\n<li><a href=\"#0x2-%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5\">0x2. 同源策略</a><ul>\n<li><a href=\"#0x21-%E4%BB%80%E4%B9%88%E6%98%AF%E5%90%8C%E6%BA%90\">0x2.1 什么是同源</a></li>\n<li><a href=\"#0x22-%E5%90%8C%E6%BA%90%E9%97%AE%E9%A2%98%E4%B8%BE%E4%BE%8B\">0x2.2 同源问题举例</a></li>\n<li><a href=\"#0x23-%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E7%9A%84%E9%99%90%E5%88%B6\">0x2.3 同源策略的限制</a></li>\n<li><a href=\"#0x24-%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%89%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5\">0x2.4 为什么有同源策略</a></li>\n</ul>\n</li>\n<li><a href=\"#0x3-%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98\">0x3. 跨域问题</a><ul>\n<li><a href=\"#0x31-%E5%A6%82%E4%BD%95%E5%8F%91%E8%B5%B7ajax%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82\">0x3.1 如何发起Ajax跨域请求</a><ul>\n<li><a href=\"#0x311-jsonpjson-with-padding\">0x3.1.1 JSONP(JSON with Padding)</a></li>\n<li><a href=\"#0x312-corscross-origin-resource-sharing\">0x3.1.2 CORS(Cross-Origin Resource Sharing)</a></li>\n<li><a href=\"#0x313-websockets\">0x3.1.3 WebSockets</a></li>\n<li><a href=\"#0x314-cors-vs-jsonp\">0x3.1.4 CORS vs JSONP</a></li>\n</ul>\n</li>\n<li><a href=\"#0x32-%E5%85%B6%E4%BB%96%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98\">0x3.2 其他跨域问题</a><ul>\n<li><a href=\"#0x321-%E8%B7%A8%E5%9F%9F%E5%85%B1%E4%BA%ABcookie\">0x3.2.1 跨域共享Cookie</a></li>\n<li><a href=\"#0x322-%E8%B7%A8%E5%9F%9Fiframe\">0x3.2.2 跨域iframe</a></li>\n<li><a href=\"#0x322-%E8%B7%A8%E5%9F%9Flocalstorage\">0x3.2.2 跨域localStorage</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#0x4-reference\">0x4. Reference</a></li>\n</ul>\n<h2 id=\"0x2-同源策略\"><a href=\"#0x2-同源策略\" class=\"headerlink\" title=\"0x2. 同源策略\"></a>0x2. 同源策略</h2><blockquote>\n<p>同源策略是一种安全机制，这种安全机制限制了一个源内的文档或脚本如何和其他源的资源交互。这种机制有利于隔离潜在的恶意文本。</p>\n</blockquote>\n<h3 id=\"0x2-1-什么是同源\"><a href=\"#0x2-1-什么是同源\" class=\"headerlink\" title=\"0x2.1 什么是同源\"></a>0x2.1 什么是同源</h3><p>如果两个源的【协议、主机、端口号】三元组都相同的话那么就称这两个源是同源的。</p>\n<h3 id=\"0x2-2-同源问题举例\"><a href=\"#0x2-2-同源问题举例\" class=\"headerlink\" title=\"0x2.2 同源问题举例\"></a>0x2.2 同源问题举例</h3><p>举例来说，<code>http://www.example.com/dir/page.html</code>这个网址，协议是<code>http://</code>，域名是<code>www.example.com</code>，端口是<code>80</code>（默认端口可以省略）。它的同源情况如下。</p>\n<ul>\n<li><code>http://www.example.com/dir2/other.html</code>：同源</li>\n<li><code>http://example.com/dir/other.html</code>：不同源（域名不同）</li>\n<li><code>http://v2.www.example.com/dir/other.html</code>：不同源（域名不同）</li>\n<li><code>http://www.example.com:81/dir/other.html</code>：不同源（端口不同）</li>\n</ul>\n<h3 id=\"0x2-3-同源策略的限制\"><a href=\"#0x2-3-同源策略的限制\" class=\"headerlink\" title=\"0x2.3 同源策略的限制\"></a>0x2.3 同源策略的限制</h3><p>同源策略限制的是JavaScript的脚本，也就是说一些资源比如说CSS、HTML和动态加载的脚本就能够通过HTML标签跨域。<a href=\"secure-xss-csrf.html\">CSRF</a>就是利用了这一点。</p>\n<p>那么具体限制JavaScript的哪些行为呢？</p>\n<ul>\n<li>跨域Cookie、LocalStorage 和 IndexDB 无法读取。</li>\n<li>跨域DOM 无法获得。</li>\n<li>跨域AJAX 请求不能发送。</li>\n</ul>\n<h3 id=\"0x2-4-为什么有同源策略\"><a href=\"#0x2-4-为什么有同源策略\" class=\"headerlink\" title=\"0x2.4 为什么有同源策略\"></a>0x2.4 为什么有同源策略</h3><p>同源策略在一定程度上保证了信息安全。<br>就像CSRF那个例子一样。现在网站很多都是通过cookie进行身份认证的，如果网站A的cookie能够在网站B获取，那么我就可以在网站B发送请求给网站A的服务器。</p>\n<h2 id=\"0x3-跨域问题\"><a href=\"#0x3-跨域问题\" class=\"headerlink\" title=\"0x3. 跨域问题\"></a>0x3. 跨域问题</h2><p>在一些场景中同源策略就显得限制性太强了，比如不同子域名属于跨域，不允许其交互，但是属于同一个父域名。</p>\n<h3 id=\"0x3-1-如何发起Ajax跨域请求\"><a href=\"#0x3-1-如何发起Ajax跨域请求\" class=\"headerlink\" title=\"0x3.1 如何发起Ajax跨域请求\"></a>0x3.1 如何发起Ajax跨域请求</h3><p>下面是一些常见的Ajax跨域请求方法。</p>\n<h4 id=\"0x3-1-1-JSONP-JSON-with-Padding\"><a href=\"#0x3-1-1-JSONP-JSON-with-Padding\" class=\"headerlink\" title=\"0x3.1.1 JSONP(JSON with Padding)\"></a>0x3.1.1 JSONP(JSON with Padding)</h4><p>跨域Ajax请求的常用方法。只能发送<code>Get</code>请求。<br>通过动态添加<code>&lt;script&gt;&lt;/script&gt;</code>标签，利用<code>src</code>字段向目的源服务器请求数据，这是不受同源策略限制的，因为并没有使用JavaScript进行跨域请求。</p>\n<p><code>src</code>中必须声明回调函数，也就是有一个查询字符串<code>callback</code>参数，值为回调函数的名称。</p>\n<p>如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;http://server.example.com/Users/1234?callback=parseResponse&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>服务端会将返回的数据包装在<code>parseResponse()</code>的括号内（这就是JSONP名称的由来<code>Padding or Payload</code>），注意这是一个文本。</p>\n<p>客户端实际接收到的数据是<code>parseResponse(data)</code>，因为<code>&lt;scirpt&gt;</code>标签加载的文件会自动执行，所以只要定义了<code>parseResponse</code>这个函数那就会自动调用。</p>\n<p>只能通过<code>&lt;script&gt;</code>的<code>src</code>指定请求路径，这就决定了<code>JSONP</code>只能发起get请求。</p>\n<h4 id=\"0x3-1-2-CORS-Cross-Origin-Resource-Sharing\"><a href=\"#0x3-1-2-CORS-Cross-Origin-Resource-Sharing\" class=\"headerlink\" title=\"0x3.1.2 CORS(Cross-Origin Resource Sharing)\"></a>0x3.1.2 CORS(Cross-Origin Resource Sharing)</h4><p>目标源服务端允许的源可向其发起跨域请求。</p>\n<p>过程如下：</p>\n<ol>\n<li>客户端跨域请求</li>\n<li>浏览器发送一个<code>OPTIONS</code>请求到目标源服务器，这个请求报文里包含<code>Origin</code>字段（当前网站的源），还有一些其他细节。</li>\n<li>目标源服务端返回。</li>\n<li>浏览器检查目标源服务器返回的报文，如果包含<code>Access-Control-Allow-Origin</code>字段且当前源满足条件则发起请求。</li>\n</ol>\n<p>验证是否满足跨域条件的例子（来自维基百科）：</p>\n<ul>\n<li><code>OPTIONS</code>请求：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OPTIONS /</span><br><span class=\"line\">Host: service.example.com</span><br><span class=\"line\">Origin: http://www.example.com</span><br></pre></td></tr></table></figure></li>\n<li>目标源服务器返回：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access-Control-Allow-Origin: http://www.example.com</span><br><span class=\"line\">Access-Control-Allow-Methods: PUT, DELETE</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>维基百科跨域XHR的创建：</p>\n<p><img data-src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/c/ca/Flowchart_showing_Simple_and_Preflight_XHR.svg/770px-Flowchart_showing_Simple_and_Preflight_XHR.svg.png\"></p>\n<h4 id=\"0x3-1-3-WebSockets\"><a href=\"#0x3-1-3-WebSockets\" class=\"headerlink\" title=\"0x3.1.3 WebSockets\"></a>0x3.1.3 WebSockets</h4><p><code>ws</code>是一种协议，使用<code>ws://</code>（非加密）和<code>wss://</code>（加密）作为协议前缀，这个协议不受同源策略限制。</p>\n<p>客户端请求时添加<code>origin</code>字段，表示当前源是哪，服务器根据这个字段进行相应，如果在白名单内则允许本次通信。</p>\n<h4 id=\"0x3-1-4-CORS-vs-JSONP\"><a href=\"#0x3-1-4-CORS-vs-JSONP\" class=\"headerlink\" title=\"0x3.1.4 CORS vs JSONP\"></a>0x3.1.4 CORS vs JSONP</h4><ul>\n<li>JSONP只支持GET请求；CORS也支持其他HTTP请求</li>\n<li>CORS使程序员写跨域请求像普通请求一样，便于维护；JSONP则相对不易维护。</li>\n<li>JSONP在古老的浏览器上也能运行；CORS在大多数现代浏览器上能运行</li>\n<li>JSONP可能会被XSS攻击如果跨域请求目的源不够安全的话；CORS则更安全。</li>\n</ul>\n<h3 id=\"0x3-2-其他跨域问题\"><a href=\"#0x3-2-其他跨域问题\" class=\"headerlink\" title=\"0x3.2 其他跨域问题\"></a>0x3.2 其他跨域问题</h3><h4 id=\"0x3-2-1-跨域共享Cookie\"><a href=\"#0x3-2-1-跨域共享Cookie\" class=\"headerlink\" title=\"0x3.2.1 跨域共享Cookie\"></a>0x3.2.1 跨域共享Cookie</h4><p>跨域Cookie的共享可以通过修改<code>document.domain</code>属性来跨域。**<code>domain</code>必须是当前页面的域名或者是其父域名。**，而且端口号必须相同，设置<code>domain</code>时会将端口号设为<code>null</code>。</p>\n<p>共享Cookie也可以在服务端设置Cookie时，将Cookie的域名范围设为父域名。</p>\n<p>比如<code>http://a.example.com</code>和<code>http://b.example.com</code>，服务器设置cookie时，只需要设置为<code>Set-Cookie: key=value; domain=.example.com; path=/</code></p>\n<h4 id=\"0x3-2-2-跨域iframe\"><a href=\"#0x3-2-2-跨域iframe\" class=\"headerlink\" title=\"0x3.2.2 跨域iframe\"></a>0x3.2.2 跨域iframe</h4><p>如果两个不同源的网页拥有共同的一级域名，那么就可以通过修改<code>document.domain</code>的方式实现跨域。</p>\n<p>如果完全不同源可以通过如下三种方式：</p>\n<ul>\n<li>片段标识符</li>\n<li>window.name</li>\n<li>Cross-document messaging</li>\n</ul>\n<p>前两种比较捞就不总结了，第三种跨文本通信才是正统的Web API，就是通过<code>window.postMessage(message,origin)</code>方法进行跨窗口通信，不管是否同源。</p>\n<p>一般来说通过postMessage+listener的方式进行通信。</p>\n<h4 id=\"0x3-2-2-跨域localStorage\"><a href=\"#0x3-2-2-跨域localStorage\" class=\"headerlink\" title=\"0x3.2.2 跨域localStorage\"></a>0x3.2.2 跨域localStorage</h4><p>可以使用如上所说的跨文本通信进行通信。</p>\n<h2 id=\"0x4-Reference\"><a href=\"#0x4-Reference\" class=\"headerlink\" title=\"0x4. Reference\"></a>0x4. Reference</h2><ul>\n<li><a href=\"https://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html\">浏览器同源政策及其规避方法</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\">Same-origin policy</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Archive/Misc_top_level/Same-origin_policy_for_file:_URIs\">Same-origin policy for file: URIs</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Same-origin_policy\">Same-origin policy</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\">Cross-origin resource sharing</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/JSONP\">JSONP</a></li>\n</ul>"},{"title":"空间域滤波","mathjax":true,"copyright":true,"comment":true,"date":"2019-03-21T08:00:27.000Z","_content":"\n{% note primary %}\n\n大漠孤烟直？长河落日圆！\n\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 前言\n\n这次的实验主要是对图像进行**图像平滑**处理，**图像锐化**也是类似的方法。\n\n首先解决存惑已久的概念，什么是空间域？\n\n{% note info %}\n\n### 图像增强方法\n\n图像增强方法分为两大类：**空间域方法**和**频域方法**\n\n- 空间域”是指图像平面自身，这类方法是以对图像的像素直接处理为基础\n- “频域”处理技术是以修改图像的傅氏变换为基础（以后会总结）\n\n{% endnote %}\n\n## 实验任务\n\n- 平均处理（基于模板卷积运算）\n- 中值滤波\n> 说明：上述处理需要对边界点进行处理，2种方法\n\n模板在[DIP 中常见的核](digital-image-kernel-collection.html)一文中总结过，如果不清楚概念可以查看一下。\n\n### 任务解析\n\n两次实验都是为了进行图像平滑处理，主要目的是消除噪声或模糊图像，去除小的细节或弥合目标间的缝隙。\n\n- 平均处理（基于模板卷积运算），对图像每个像素进行模板内像素的平均化求值并更新中心像素。\n- 中值滤波，对图像每个像素进行模板内像素的中位数求值并更新中心像素。\n- 边缘处理，两种方法：不处理；扩充图像。\n\n\n## 任务Start\n\n首先展示一下原图（因为需要找噪声比较明显的图像，所以没找到像素比较大的和attractive的 :cry:）：\n\n![](spatial-filter/gray1.png)\n\n\n\n### 平均处理\n\n比较常见的有两种平均处理核：\n\n- 第一种\n\n$$\n    \\frac{1}{9}\\times\n    \\begin{bmatrix}\n        1&1&1\\\\\\\\\n        1&1&1\\\\\\\\\n        1&1&1\n    \\end{bmatrix}\n$$\n\n- 第二种\n\n$$\n    \\frac{1}{16}\\times\n    \\begin{bmatrix}\n       1&2&1\\\\\\\\\n       2&4&2\\\\\\\\\n       1&2&1 \n    \\end{bmatrix}\n$$\n\n实现是采用的是第一种。\n\n#### 代码\n\n```c\nvoid AverageProcessing(const char * src, const char * output)\n{\n\tBMFILEHEADER header;\n\tINFOHEADER info;\n\n\n\tunsigned char ** data = malloc(sizeof(unsigned char*));\n\tRGBQUAD ** palette = malloc(sizeof(RGBQUAD*));\n\tunsigned pixelCounts = BMPReader8(src, &header, &info, palette, data);\n\n\tunsigned char **outData = malloc(sizeof(unsigned char*));\n\n\t*outData = malloc(pixelCounts);\n\n\n\tfor (unsigned i = 0; i < info.height; i++)\n\t{\n\t\t\n\t\tfor (unsigned j = 0; j < info.width; j++)\n\t\t{\n\t\t\tif (i == 0 ||( i == info.height - 1)|| j == 0 || (j == info.width - 1))\n\t\t\t{\n\t\t\t\t*(*outData + i * info.width + j) = *(*data + i * info.width + j);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tint newGray = *(*data + (i - 1) * info.width + (j - 1)) +\n\t\t\t\t*(*data + (i)* info.width + (j - 1)) +\n\t\t\t\t*(*data + (i + 1)* info.width + (j - 1)) +\n\t\t\t\t*(*data + (i - 1)* info.width + (j)) +\n\t\t\t\t*(*data + (i)* info.width + (j)) +\n\t\t\t\t*(*data + (i + 1)* info.width + (j)) +\n\t\t\t\t*(*data + (i - 1)* info.width + (j + 1)) +\n\t\t\t\t*(*data + (i)* info.width + (j + 1)) +\n\t\t\t\t*(*data + (i + 1)* info.width + (j + 1));\n\t\t\tnewGray /= 9;\n\t\t\t*(*outData + i * info.width+j) = newGray;\n\t\t}\n\t}\n\n\tBMPWriter8(output, &header, &info, palette, outData);\n\n}\n```\n\n#### 运行结果\n\n采用一次迭代和三次迭代，一次迭代可能效果不够明显，所以采用多次迭代。但是也会对原图的准确数据造成模糊。\n\n- 一次迭代运行结果\n\n![](spatial-filter/gray2.png)\n\n\n- 三次迭代运行结果\n\n![](spatial-filter/gray2-3.png)\n### 中值滤波\n\n\n\n#### 代码\n\n```c\nvoid MedianFiltering(const char * src, const char * output)\n{\n\tBMFILEHEADER header;\n\tINFOHEADER info;\n\n\n\tunsigned char ** data = malloc(sizeof(unsigned char*));\n\tRGBQUAD ** palette = malloc(sizeof(RGBQUAD*));\n\tunsigned pixelCounts = BMPReader8(src, &header, &info, palette, data);\n\n\tunsigned char **outData = malloc(sizeof(unsigned char*));\n\n\t*outData = malloc(pixelCounts);\n\n\n\tfor (unsigned i = 0; i < info.height; i++)\n\t{\n\n\t\tfor (unsigned j = 0; j < info.width; j++)\n\t\t{\n\t\t\tif (i == 0 || (i == info.height - 1) || j == 0 || (j == info.width - 1))\n\t\t\t{\n\t\t\t\t*(*outData + i * info.width + j) = *(*data + i * info.width + j);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tint newGrays[] = { *(*data + (i - 1) * info.width + (j - 1)) ,\n\t\t\t\t*(*data + (i)* info.width + (j - 1)) ,\n\t\t\t\t*(*data + (i + 1)* info.width + (j - 1)) ,\n\t\t\t\t*(*data + (i - 1)* info.width + (j)) ,\n\t\t\t\t*(*data + (i)* info.width + (j)) ,\n\t\t\t\t*(*data + (i + 1)* info.width + (j)) ,\n\t\t\t\t*(*data + (i - 1)* info.width + (j + 1)) ,\n\t\t\t\t*(*data + (i)* info.width + (j + 1)) ,\n\t\t\t\t*(*data + (i + 1)* info.width + (j + 1)) };\n\t\t\tquicksort(newGrays, 0, 8);\n\t\t\tint newGray = newGrays[4];\n\t\t\t*(*outData + i * info.width + j) = newGray;\n\t\t}\n\t}\n\n\tBMPWriter8(output, &header, &info, palette, outData);\n}\n\n```\n\n#### 运行结果\n\n与均值处理类似，中值处理也分别采用1次和3次迭代。\n\n- 一次迭代运行结果\n\n![](spatial-filter/gray3.png)\n\n\n- 三次迭代运行结果\n\n![](spatial-filter/gray3-3.png)\n\n### 结果\n\n整体看一下效果，可以打开一个图进行左右切换对比。\n\n- 原图\n\n![](spatial-filter/gray1.png)\n\n- 平均处理（一次处理）\n\n![](spatial-filter/gray2.png)\n\n- 平均处理（三次迭代）\n\n\n![](spatial-filter/gray2-3.png)\n\n- 中值滤波（一次处理）\n\n\n![](spatial-filter/gray3.png)\n\n\n- 中值滤波（三次迭代）\n\n\n![](spatial-filter/gray3-3.png)\n\n### 两者对比\n\n很明显，中值滤波处理方法更优。平均处理方法在模糊噪声的同时也一定程度的模糊的关键像素，会产生新的灰度值；而中值滤波只会选取已有的灰度值进行取值。\n\n\n## 总结\n{% note primary%}\n\n**全部代码请查看[GitHub](https://github.com/ScarboroughCoral/DIPModule)**\n\n{% endnote %}\n\n\n\n本次实验相对比较简单，主要是因为前几天对一些BMP文件的处理做了一定的封装，把精力放到图像处理上来。图像锐化的内容也和本次实验类似，只是去了不同的“核”来处理。","source":"_posts/spatial-filter.md","raw":"---\ntitle: 空间域滤波\nmathjax: true\ncopyright: true\ncomment: true\ndate: 2019-03-21 16:00:27\ntags:\n- Computer Graphics\n- DIP\ncategories:\n- Computer Science\n- Computer Graphics\n\n---\n\n{% note primary %}\n\n大漠孤烟直？长河落日圆！\n\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 前言\n\n这次的实验主要是对图像进行**图像平滑**处理，**图像锐化**也是类似的方法。\n\n首先解决存惑已久的概念，什么是空间域？\n\n{% note info %}\n\n### 图像增强方法\n\n图像增强方法分为两大类：**空间域方法**和**频域方法**\n\n- 空间域”是指图像平面自身，这类方法是以对图像的像素直接处理为基础\n- “频域”处理技术是以修改图像的傅氏变换为基础（以后会总结）\n\n{% endnote %}\n\n## 实验任务\n\n- 平均处理（基于模板卷积运算）\n- 中值滤波\n> 说明：上述处理需要对边界点进行处理，2种方法\n\n模板在[DIP 中常见的核](digital-image-kernel-collection.html)一文中总结过，如果不清楚概念可以查看一下。\n\n### 任务解析\n\n两次实验都是为了进行图像平滑处理，主要目的是消除噪声或模糊图像，去除小的细节或弥合目标间的缝隙。\n\n- 平均处理（基于模板卷积运算），对图像每个像素进行模板内像素的平均化求值并更新中心像素。\n- 中值滤波，对图像每个像素进行模板内像素的中位数求值并更新中心像素。\n- 边缘处理，两种方法：不处理；扩充图像。\n\n\n## 任务Start\n\n首先展示一下原图（因为需要找噪声比较明显的图像，所以没找到像素比较大的和attractive的 :cry:）：\n\n![](spatial-filter/gray1.png)\n\n\n\n### 平均处理\n\n比较常见的有两种平均处理核：\n\n- 第一种\n\n$$\n    \\frac{1}{9}\\times\n    \\begin{bmatrix}\n        1&1&1\\\\\\\\\n        1&1&1\\\\\\\\\n        1&1&1\n    \\end{bmatrix}\n$$\n\n- 第二种\n\n$$\n    \\frac{1}{16}\\times\n    \\begin{bmatrix}\n       1&2&1\\\\\\\\\n       2&4&2\\\\\\\\\n       1&2&1 \n    \\end{bmatrix}\n$$\n\n实现是采用的是第一种。\n\n#### 代码\n\n```c\nvoid AverageProcessing(const char * src, const char * output)\n{\n\tBMFILEHEADER header;\n\tINFOHEADER info;\n\n\n\tunsigned char ** data = malloc(sizeof(unsigned char*));\n\tRGBQUAD ** palette = malloc(sizeof(RGBQUAD*));\n\tunsigned pixelCounts = BMPReader8(src, &header, &info, palette, data);\n\n\tunsigned char **outData = malloc(sizeof(unsigned char*));\n\n\t*outData = malloc(pixelCounts);\n\n\n\tfor (unsigned i = 0; i < info.height; i++)\n\t{\n\t\t\n\t\tfor (unsigned j = 0; j < info.width; j++)\n\t\t{\n\t\t\tif (i == 0 ||( i == info.height - 1)|| j == 0 || (j == info.width - 1))\n\t\t\t{\n\t\t\t\t*(*outData + i * info.width + j) = *(*data + i * info.width + j);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tint newGray = *(*data + (i - 1) * info.width + (j - 1)) +\n\t\t\t\t*(*data + (i)* info.width + (j - 1)) +\n\t\t\t\t*(*data + (i + 1)* info.width + (j - 1)) +\n\t\t\t\t*(*data + (i - 1)* info.width + (j)) +\n\t\t\t\t*(*data + (i)* info.width + (j)) +\n\t\t\t\t*(*data + (i + 1)* info.width + (j)) +\n\t\t\t\t*(*data + (i - 1)* info.width + (j + 1)) +\n\t\t\t\t*(*data + (i)* info.width + (j + 1)) +\n\t\t\t\t*(*data + (i + 1)* info.width + (j + 1));\n\t\t\tnewGray /= 9;\n\t\t\t*(*outData + i * info.width+j) = newGray;\n\t\t}\n\t}\n\n\tBMPWriter8(output, &header, &info, palette, outData);\n\n}\n```\n\n#### 运行结果\n\n采用一次迭代和三次迭代，一次迭代可能效果不够明显，所以采用多次迭代。但是也会对原图的准确数据造成模糊。\n\n- 一次迭代运行结果\n\n![](spatial-filter/gray2.png)\n\n\n- 三次迭代运行结果\n\n![](spatial-filter/gray2-3.png)\n### 中值滤波\n\n\n\n#### 代码\n\n```c\nvoid MedianFiltering(const char * src, const char * output)\n{\n\tBMFILEHEADER header;\n\tINFOHEADER info;\n\n\n\tunsigned char ** data = malloc(sizeof(unsigned char*));\n\tRGBQUAD ** palette = malloc(sizeof(RGBQUAD*));\n\tunsigned pixelCounts = BMPReader8(src, &header, &info, palette, data);\n\n\tunsigned char **outData = malloc(sizeof(unsigned char*));\n\n\t*outData = malloc(pixelCounts);\n\n\n\tfor (unsigned i = 0; i < info.height; i++)\n\t{\n\n\t\tfor (unsigned j = 0; j < info.width; j++)\n\t\t{\n\t\t\tif (i == 0 || (i == info.height - 1) || j == 0 || (j == info.width - 1))\n\t\t\t{\n\t\t\t\t*(*outData + i * info.width + j) = *(*data + i * info.width + j);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tint newGrays[] = { *(*data + (i - 1) * info.width + (j - 1)) ,\n\t\t\t\t*(*data + (i)* info.width + (j - 1)) ,\n\t\t\t\t*(*data + (i + 1)* info.width + (j - 1)) ,\n\t\t\t\t*(*data + (i - 1)* info.width + (j)) ,\n\t\t\t\t*(*data + (i)* info.width + (j)) ,\n\t\t\t\t*(*data + (i + 1)* info.width + (j)) ,\n\t\t\t\t*(*data + (i - 1)* info.width + (j + 1)) ,\n\t\t\t\t*(*data + (i)* info.width + (j + 1)) ,\n\t\t\t\t*(*data + (i + 1)* info.width + (j + 1)) };\n\t\t\tquicksort(newGrays, 0, 8);\n\t\t\tint newGray = newGrays[4];\n\t\t\t*(*outData + i * info.width + j) = newGray;\n\t\t}\n\t}\n\n\tBMPWriter8(output, &header, &info, palette, outData);\n}\n\n```\n\n#### 运行结果\n\n与均值处理类似，中值处理也分别采用1次和3次迭代。\n\n- 一次迭代运行结果\n\n![](spatial-filter/gray3.png)\n\n\n- 三次迭代运行结果\n\n![](spatial-filter/gray3-3.png)\n\n### 结果\n\n整体看一下效果，可以打开一个图进行左右切换对比。\n\n- 原图\n\n![](spatial-filter/gray1.png)\n\n- 平均处理（一次处理）\n\n![](spatial-filter/gray2.png)\n\n- 平均处理（三次迭代）\n\n\n![](spatial-filter/gray2-3.png)\n\n- 中值滤波（一次处理）\n\n\n![](spatial-filter/gray3.png)\n\n\n- 中值滤波（三次迭代）\n\n\n![](spatial-filter/gray3-3.png)\n\n### 两者对比\n\n很明显，中值滤波处理方法更优。平均处理方法在模糊噪声的同时也一定程度的模糊的关键像素，会产生新的灰度值；而中值滤波只会选取已有的灰度值进行取值。\n\n\n## 总结\n{% note primary%}\n\n**全部代码请查看[GitHub](https://github.com/ScarboroughCoral/DIPModule)**\n\n{% endnote %}\n\n\n\n本次实验相对比较简单，主要是因为前几天对一些BMP文件的处理做了一定的封装，把精力放到图像处理上来。图像锐化的内容也和本次实验类似，只是去了不同的“核”来处理。","slug":"spatial-filter","published":1,"updated":"2022-01-06T04:09:12.481Z","_id":"cksq5v7n2004en0pud5fc9ftc","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note primary\"><p>大漠孤烟直？长河落日圆！</p>\n</div>\n\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>这次的实验主要是对图像进行<strong>图像平滑</strong>处理，<strong>图像锐化</strong>也是类似的方法。</p>\n<p>首先解决存惑已久的概念，什么是空间域？</p>\n<div class=\"note info\"><h3 id=\"图像增强方法\"><a href=\"#图像增强方法\" class=\"headerlink\" title=\"图像增强方法\"></a>图像增强方法</h3><p>图像增强方法分为两大类：<strong>空间域方法</strong>和<strong>频域方法</strong></p>\n<ul>\n<li>空间域”是指图像平面自身，这类方法是以对图像的像素直接处理为基础</li>\n<li>“频域”处理技术是以修改图像的傅氏变换为基础（以后会总结）</li>\n</ul>\n</div>\n\n<h2 id=\"实验任务\"><a href=\"#实验任务\" class=\"headerlink\" title=\"实验任务\"></a>实验任务</h2><ul>\n<li>平均处理（基于模板卷积运算）</li>\n<li>中值滤波<blockquote>\n<p>说明：上述处理需要对边界点进行处理，2种方法</p>\n</blockquote>\n</li>\n</ul>\n<p>模板在<a href=\"digital-image-kernel-collection.html\">DIP 中常见的核</a>一文中总结过，如果不清楚概念可以查看一下。</p>\n<h3 id=\"任务解析\"><a href=\"#任务解析\" class=\"headerlink\" title=\"任务解析\"></a>任务解析</h3><p>两次实验都是为了进行图像平滑处理，主要目的是消除噪声或模糊图像，去除小的细节或弥合目标间的缝隙。</p>\n<ul>\n<li>平均处理（基于模板卷积运算），对图像每个像素进行模板内像素的平均化求值并更新中心像素。</li>\n<li>中值滤波，对图像每个像素进行模板内像素的中位数求值并更新中心像素。</li>\n<li>边缘处理，两种方法：不处理；扩充图像。</li>\n</ul>\n<h2 id=\"任务Start\"><a href=\"#任务Start\" class=\"headerlink\" title=\"任务Start\"></a>任务Start</h2><p>首先展示一下原图（因为需要找噪声比较明显的图像，所以没找到像素比较大的和attractive的 :cry:）：</p>\n<p><img data-src=\"spatial-filter/gray1.png\"></p>\n<h3 id=\"平均处理\"><a href=\"#平均处理\" class=\"headerlink\" title=\"平均处理\"></a>平均处理</h3><p>比较常见的有两种平均处理核：</p>\n<ul>\n<li>第一种</li>\n</ul>\n<p>$$<br>    \\frac{1}{9}\\times<br>    \\begin{bmatrix}<br>        1&amp;1&amp;1\\\\<br>        1&amp;1&amp;1\\\\<br>        1&amp;1&amp;1<br>    \\end{bmatrix}<br>$$</p>\n<ul>\n<li>第二种</li>\n</ul>\n<p>$$<br>    \\frac{1}{16}\\times<br>    \\begin{bmatrix}<br>       1&amp;2&amp;1\\\\<br>       2&amp;4&amp;2\\\\<br>       1&amp;2&amp;1<br>    \\end{bmatrix}<br>$$</p>\n<p>实现是采用的是第一种。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">AverageProcessing</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * src, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * output)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tBMFILEHEADER header;</span><br><span class=\"line\">\tINFOHEADER info;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> ** data = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>*));</span><br><span class=\"line\">\tRGBQUAD ** palette = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(RGBQUAD*));</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> pixelCounts = BMPReader8(src, &amp;header, &amp;info, palette, data);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> **outData = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>*));</span><br><span class=\"line\"></span><br><span class=\"line\">\t*outData = <span class=\"built_in\">malloc</span>(pixelCounts);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">unsigned</span> i = <span class=\"number\">0</span>; i &lt; info.height; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">unsigned</span> j = <span class=\"number\">0</span>; j &lt; info.width; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i == <span class=\"number\">0</span> ||( i == info.height - <span class=\"number\">1</span>)|| j == <span class=\"number\">0</span> || (j == info.width - <span class=\"number\">1</span>))</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t*(*outData + i * info.width + j) = *(*data + i * info.width + j);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> newGray = *(*data + (i - <span class=\"number\">1</span>) * info.width + (j - <span class=\"number\">1</span>)) +</span><br><span class=\"line\">\t\t\t\t*(*data + (i)* info.width + (j - <span class=\"number\">1</span>)) +</span><br><span class=\"line\">\t\t\t\t*(*data + (i + <span class=\"number\">1</span>)* info.width + (j - <span class=\"number\">1</span>)) +</span><br><span class=\"line\">\t\t\t\t*(*data + (i - <span class=\"number\">1</span>)* info.width + (j)) +</span><br><span class=\"line\">\t\t\t\t*(*data + (i)* info.width + (j)) +</span><br><span class=\"line\">\t\t\t\t*(*data + (i + <span class=\"number\">1</span>)* info.width + (j)) +</span><br><span class=\"line\">\t\t\t\t*(*data + (i - <span class=\"number\">1</span>)* info.width + (j + <span class=\"number\">1</span>)) +</span><br><span class=\"line\">\t\t\t\t*(*data + (i)* info.width + (j + <span class=\"number\">1</span>)) +</span><br><span class=\"line\">\t\t\t\t*(*data + (i + <span class=\"number\">1</span>)* info.width + (j + <span class=\"number\">1</span>));</span><br><span class=\"line\">\t\t\tnewGray /= <span class=\"number\">9</span>;</span><br><span class=\"line\">\t\t\t*(*outData + i * info.width+j) = newGray;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tBMPWriter8(output, &amp;header, &amp;info, palette, outData);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h4><p>采用一次迭代和三次迭代，一次迭代可能效果不够明显，所以采用多次迭代。但是也会对原图的准确数据造成模糊。</p>\n<ul>\n<li>一次迭代运行结果</li>\n</ul>\n<p><img data-src=\"spatial-filter/gray2.png\"></p>\n<ul>\n<li>三次迭代运行结果</li>\n</ul>\n<p><img data-src=\"spatial-filter/gray2-3.png\"></p>\n<h3 id=\"中值滤波\"><a href=\"#中值滤波\" class=\"headerlink\" title=\"中值滤波\"></a>中值滤波</h3><h4 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MedianFiltering</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * src, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * output)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tBMFILEHEADER header;</span><br><span class=\"line\">\tINFOHEADER info;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> ** data = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>*));</span><br><span class=\"line\">\tRGBQUAD ** palette = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(RGBQUAD*));</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> pixelCounts = BMPReader8(src, &amp;header, &amp;info, palette, data);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> **outData = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>*));</span><br><span class=\"line\"></span><br><span class=\"line\">\t*outData = <span class=\"built_in\">malloc</span>(pixelCounts);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">unsigned</span> i = <span class=\"number\">0</span>; i &lt; info.height; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">unsigned</span> j = <span class=\"number\">0</span>; j &lt; info.width; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i == <span class=\"number\">0</span> || (i == info.height - <span class=\"number\">1</span>) || j == <span class=\"number\">0</span> || (j == info.width - <span class=\"number\">1</span>))</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t*(*outData + i * info.width + j) = *(*data + i * info.width + j);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> newGrays[] = &#123; *(*data + (i - <span class=\"number\">1</span>) * info.width + (j - <span class=\"number\">1</span>)) ,</span><br><span class=\"line\">\t\t\t\t*(*data + (i)* info.width + (j - <span class=\"number\">1</span>)) ,</span><br><span class=\"line\">\t\t\t\t*(*data + (i + <span class=\"number\">1</span>)* info.width + (j - <span class=\"number\">1</span>)) ,</span><br><span class=\"line\">\t\t\t\t*(*data + (i - <span class=\"number\">1</span>)* info.width + (j)) ,</span><br><span class=\"line\">\t\t\t\t*(*data + (i)* info.width + (j)) ,</span><br><span class=\"line\">\t\t\t\t*(*data + (i + <span class=\"number\">1</span>)* info.width + (j)) ,</span><br><span class=\"line\">\t\t\t\t*(*data + (i - <span class=\"number\">1</span>)* info.width + (j + <span class=\"number\">1</span>)) ,</span><br><span class=\"line\">\t\t\t\t*(*data + (i)* info.width + (j + <span class=\"number\">1</span>)) ,</span><br><span class=\"line\">\t\t\t\t*(*data + (i + <span class=\"number\">1</span>)* info.width + (j + <span class=\"number\">1</span>)) &#125;;</span><br><span class=\"line\">\t\t\tquicksort(newGrays, <span class=\"number\">0</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> newGray = newGrays[<span class=\"number\">4</span>];</span><br><span class=\"line\">\t\t\t*(*outData + i * info.width + j) = newGray;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tBMPWriter8(output, &amp;header, &amp;info, palette, outData);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运行结果-1\"><a href=\"#运行结果-1\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h4><p>与均值处理类似，中值处理也分别采用1次和3次迭代。</p>\n<ul>\n<li>一次迭代运行结果</li>\n</ul>\n<p><img data-src=\"spatial-filter/gray3.png\"></p>\n<ul>\n<li>三次迭代运行结果</li>\n</ul>\n<p><img data-src=\"spatial-filter/gray3-3.png\"></p>\n<h3 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h3><p>整体看一下效果，可以打开一个图进行左右切换对比。</p>\n<ul>\n<li>原图</li>\n</ul>\n<p><img data-src=\"spatial-filter/gray1.png\"></p>\n<ul>\n<li>平均处理（一次处理）</li>\n</ul>\n<p><img data-src=\"spatial-filter/gray2.png\"></p>\n<ul>\n<li>平均处理（三次迭代）</li>\n</ul>\n<p><img data-src=\"spatial-filter/gray2-3.png\"></p>\n<ul>\n<li>中值滤波（一次处理）</li>\n</ul>\n<p><img data-src=\"spatial-filter/gray3.png\"></p>\n<ul>\n<li>中值滤波（三次迭代）</li>\n</ul>\n<p><img data-src=\"spatial-filter/gray3-3.png\"></p>\n<h3 id=\"两者对比\"><a href=\"#两者对比\" class=\"headerlink\" title=\"两者对比\"></a>两者对比</h3><p>很明显，中值滤波处理方法更优。平均处理方法在模糊噪声的同时也一定程度的模糊的关键像素，会产生新的灰度值；而中值滤波只会选取已有的灰度值进行取值。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><div class=\"note primary\"><p><strong>全部代码请查看<a href=\"https://github.com/ScarboroughCoral/DIPModule\">GitHub</a></strong></p>\n</div>\n\n\n\n<p>本次实验相对比较简单，主要是因为前几天对一些BMP文件的处理做了一定的封装，把精力放到图像处理上来。图像锐化的内容也和本次实验类似，只是去了不同的“核”来处理。</p>\n","site":{"data":{}},"excerpt":"<div class=\"note primary\"><p>大漠孤烟直？长河落日圆！</p>\n</div>","more":"<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>这次的实验主要是对图像进行<strong>图像平滑</strong>处理，<strong>图像锐化</strong>也是类似的方法。</p>\n<p>首先解决存惑已久的概念，什么是空间域？</p>\n<div class=\"note info\"><h3 id=\"图像增强方法\"><a href=\"#图像增强方法\" class=\"headerlink\" title=\"图像增强方法\"></a>图像增强方法</h3><p>图像增强方法分为两大类：<strong>空间域方法</strong>和<strong>频域方法</strong></p>\n<ul>\n<li>空间域”是指图像平面自身，这类方法是以对图像的像素直接处理为基础</li>\n<li>“频域”处理技术是以修改图像的傅氏变换为基础（以后会总结）</li>\n</ul>\n</div>\n\n<h2 id=\"实验任务\"><a href=\"#实验任务\" class=\"headerlink\" title=\"实验任务\"></a>实验任务</h2><ul>\n<li>平均处理（基于模板卷积运算）</li>\n<li>中值滤波<blockquote>\n<p>说明：上述处理需要对边界点进行处理，2种方法</p>\n</blockquote>\n</li>\n</ul>\n<p>模板在<a href=\"digital-image-kernel-collection.html\">DIP 中常见的核</a>一文中总结过，如果不清楚概念可以查看一下。</p>\n<h3 id=\"任务解析\"><a href=\"#任务解析\" class=\"headerlink\" title=\"任务解析\"></a>任务解析</h3><p>两次实验都是为了进行图像平滑处理，主要目的是消除噪声或模糊图像，去除小的细节或弥合目标间的缝隙。</p>\n<ul>\n<li>平均处理（基于模板卷积运算），对图像每个像素进行模板内像素的平均化求值并更新中心像素。</li>\n<li>中值滤波，对图像每个像素进行模板内像素的中位数求值并更新中心像素。</li>\n<li>边缘处理，两种方法：不处理；扩充图像。</li>\n</ul>\n<h2 id=\"任务Start\"><a href=\"#任务Start\" class=\"headerlink\" title=\"任务Start\"></a>任务Start</h2><p>首先展示一下原图（因为需要找噪声比较明显的图像，所以没找到像素比较大的和attractive的 :cry:）：</p>\n<p><img data-src=\"spatial-filter/gray1.png\"></p>\n<h3 id=\"平均处理\"><a href=\"#平均处理\" class=\"headerlink\" title=\"平均处理\"></a>平均处理</h3><p>比较常见的有两种平均处理核：</p>\n<ul>\n<li>第一种</li>\n</ul>\n<p>$$<br>    \\frac{1}{9}\\times<br>    \\begin{bmatrix}<br>        1&amp;1&amp;1\\\\<br>        1&amp;1&amp;1\\\\<br>        1&amp;1&amp;1<br>    \\end{bmatrix}<br>$$</p>\n<ul>\n<li>第二种</li>\n</ul>\n<p>$$<br>    \\frac{1}{16}\\times<br>    \\begin{bmatrix}<br>       1&amp;2&amp;1\\\\<br>       2&amp;4&amp;2\\\\<br>       1&amp;2&amp;1<br>    \\end{bmatrix}<br>$$</p>\n<p>实现是采用的是第一种。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">AverageProcessing</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * src, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * output)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tBMFILEHEADER header;</span><br><span class=\"line\">\tINFOHEADER info;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> ** data = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>*));</span><br><span class=\"line\">\tRGBQUAD ** palette = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(RGBQUAD*));</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> pixelCounts = BMPReader8(src, &amp;header, &amp;info, palette, data);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> **outData = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>*));</span><br><span class=\"line\"></span><br><span class=\"line\">\t*outData = <span class=\"built_in\">malloc</span>(pixelCounts);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">unsigned</span> i = <span class=\"number\">0</span>; i &lt; info.height; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">unsigned</span> j = <span class=\"number\">0</span>; j &lt; info.width; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i == <span class=\"number\">0</span> ||( i == info.height - <span class=\"number\">1</span>)|| j == <span class=\"number\">0</span> || (j == info.width - <span class=\"number\">1</span>))</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t*(*outData + i * info.width + j) = *(*data + i * info.width + j);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> newGray = *(*data + (i - <span class=\"number\">1</span>) * info.width + (j - <span class=\"number\">1</span>)) +</span><br><span class=\"line\">\t\t\t\t*(*data + (i)* info.width + (j - <span class=\"number\">1</span>)) +</span><br><span class=\"line\">\t\t\t\t*(*data + (i + <span class=\"number\">1</span>)* info.width + (j - <span class=\"number\">1</span>)) +</span><br><span class=\"line\">\t\t\t\t*(*data + (i - <span class=\"number\">1</span>)* info.width + (j)) +</span><br><span class=\"line\">\t\t\t\t*(*data + (i)* info.width + (j)) +</span><br><span class=\"line\">\t\t\t\t*(*data + (i + <span class=\"number\">1</span>)* info.width + (j)) +</span><br><span class=\"line\">\t\t\t\t*(*data + (i - <span class=\"number\">1</span>)* info.width + (j + <span class=\"number\">1</span>)) +</span><br><span class=\"line\">\t\t\t\t*(*data + (i)* info.width + (j + <span class=\"number\">1</span>)) +</span><br><span class=\"line\">\t\t\t\t*(*data + (i + <span class=\"number\">1</span>)* info.width + (j + <span class=\"number\">1</span>));</span><br><span class=\"line\">\t\t\tnewGray /= <span class=\"number\">9</span>;</span><br><span class=\"line\">\t\t\t*(*outData + i * info.width+j) = newGray;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tBMPWriter8(output, &amp;header, &amp;info, palette, outData);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h4><p>采用一次迭代和三次迭代，一次迭代可能效果不够明显，所以采用多次迭代。但是也会对原图的准确数据造成模糊。</p>\n<ul>\n<li>一次迭代运行结果</li>\n</ul>\n<p><img data-src=\"spatial-filter/gray2.png\"></p>\n<ul>\n<li>三次迭代运行结果</li>\n</ul>\n<p><img data-src=\"spatial-filter/gray2-3.png\"></p>\n<h3 id=\"中值滤波\"><a href=\"#中值滤波\" class=\"headerlink\" title=\"中值滤波\"></a>中值滤波</h3><h4 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MedianFiltering</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * src, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * output)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tBMFILEHEADER header;</span><br><span class=\"line\">\tINFOHEADER info;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> ** data = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>*));</span><br><span class=\"line\">\tRGBQUAD ** palette = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(RGBQUAD*));</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> pixelCounts = BMPReader8(src, &amp;header, &amp;info, palette, data);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> **outData = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>*));</span><br><span class=\"line\"></span><br><span class=\"line\">\t*outData = <span class=\"built_in\">malloc</span>(pixelCounts);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">unsigned</span> i = <span class=\"number\">0</span>; i &lt; info.height; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">unsigned</span> j = <span class=\"number\">0</span>; j &lt; info.width; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i == <span class=\"number\">0</span> || (i == info.height - <span class=\"number\">1</span>) || j == <span class=\"number\">0</span> || (j == info.width - <span class=\"number\">1</span>))</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t*(*outData + i * info.width + j) = *(*data + i * info.width + j);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> newGrays[] = &#123; *(*data + (i - <span class=\"number\">1</span>) * info.width + (j - <span class=\"number\">1</span>)) ,</span><br><span class=\"line\">\t\t\t\t*(*data + (i)* info.width + (j - <span class=\"number\">1</span>)) ,</span><br><span class=\"line\">\t\t\t\t*(*data + (i + <span class=\"number\">1</span>)* info.width + (j - <span class=\"number\">1</span>)) ,</span><br><span class=\"line\">\t\t\t\t*(*data + (i - <span class=\"number\">1</span>)* info.width + (j)) ,</span><br><span class=\"line\">\t\t\t\t*(*data + (i)* info.width + (j)) ,</span><br><span class=\"line\">\t\t\t\t*(*data + (i + <span class=\"number\">1</span>)* info.width + (j)) ,</span><br><span class=\"line\">\t\t\t\t*(*data + (i - <span class=\"number\">1</span>)* info.width + (j + <span class=\"number\">1</span>)) ,</span><br><span class=\"line\">\t\t\t\t*(*data + (i)* info.width + (j + <span class=\"number\">1</span>)) ,</span><br><span class=\"line\">\t\t\t\t*(*data + (i + <span class=\"number\">1</span>)* info.width + (j + <span class=\"number\">1</span>)) &#125;;</span><br><span class=\"line\">\t\t\tquicksort(newGrays, <span class=\"number\">0</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> newGray = newGrays[<span class=\"number\">4</span>];</span><br><span class=\"line\">\t\t\t*(*outData + i * info.width + j) = newGray;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tBMPWriter8(output, &amp;header, &amp;info, palette, outData);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运行结果-1\"><a href=\"#运行结果-1\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h4><p>与均值处理类似，中值处理也分别采用1次和3次迭代。</p>\n<ul>\n<li>一次迭代运行结果</li>\n</ul>\n<p><img data-src=\"spatial-filter/gray3.png\"></p>\n<ul>\n<li>三次迭代运行结果</li>\n</ul>\n<p><img data-src=\"spatial-filter/gray3-3.png\"></p>\n<h3 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h3><p>整体看一下效果，可以打开一个图进行左右切换对比。</p>\n<ul>\n<li>原图</li>\n</ul>\n<p><img data-src=\"spatial-filter/gray1.png\"></p>\n<ul>\n<li>平均处理（一次处理）</li>\n</ul>\n<p><img data-src=\"spatial-filter/gray2.png\"></p>\n<ul>\n<li>平均处理（三次迭代）</li>\n</ul>\n<p><img data-src=\"spatial-filter/gray2-3.png\"></p>\n<ul>\n<li>中值滤波（一次处理）</li>\n</ul>\n<p><img data-src=\"spatial-filter/gray3.png\"></p>\n<ul>\n<li>中值滤波（三次迭代）</li>\n</ul>\n<p><img data-src=\"spatial-filter/gray3-3.png\"></p>\n<h3 id=\"两者对比\"><a href=\"#两者对比\" class=\"headerlink\" title=\"两者对比\"></a>两者对比</h3><p>很明显，中值滤波处理方法更优。平均处理方法在模糊噪声的同时也一定程度的模糊的关键像素，会产生新的灰度值；而中值滤波只会选取已有的灰度值进行取值。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><div class=\"note primary\"><p><strong>全部代码请查看<a href=\"https://github.com/ScarboroughCoral/DIPModule\">GitHub</a></strong></p>\n</div>\n\n\n\n<p>本次实验相对比较简单，主要是因为前几天对一些BMP文件的处理做了一定的封装，把精力放到图像处理上来。图像锐化的内容也和本次实验类似，只是去了不同的“核”来处理。</p>"},{"title":"Tensorflow 学习笔记","date":"2018-12-22T10:56:12.000Z","_content":"{% note default %}\n智能就是有学习能力。\n{% endnote %}\n\n<!-- more -->\n\n## 神经网络具体实现\n\n### 步骤\n\n- 准备数据集，提取特征，作为输入喂给神经网络\n- 搭建 NN 结构，从输入到输出（先搭建计算图，再用会话执行）\n> NN 前向传播算法-->计算输出\n- 大量特征数据喂给 NN，迭代优化 NN 参数\n> NN 反向传播算法-->优化参数训练模型\n- 使用训练好的模型预测和分类\n\n下面是一个具体的例子，这个例子中并没有反向传播优化参数。\n这个例子是通过输入物品的两个指标：`质量`和`体积`，来判定物品是否合格\n\n```python\nimport tensorflow as tf\n\nx = tf.constant([[0.7,0.5]])\nw1 = tf.Variable(tf.random_normal([2,3],stddev=1,seed=1))\nw2 = tf.Variable(tf.random_normal([3,1],stddev=1,seed=1))\n\n\na = tf.matmul(x,w1)\ny = tf.matmul(a,w2)\n\n\nwith tf.Session() as sess:\n    init_op = tf.global_variables_initializer()\n    sess.run(init_op)\n    print \"y is \",sess.run(y)\n```\n\n### 数据来源\n\n数据源是来自于实际过程的，假设我们此处直接喂食一组或者多组数据：\n\n使用 `placeholder` 方法进行预设值，在会话中输入实际值。\n\n- 喂食 1 组\n\n```python\nx = tf.placeholder(tf.float32,shape=(1,2)) \nimport tensorflow as tf\n\n# 喂食 1 组 2 维张量\nx = tf.placeholder(tf.float32,shape=(1,2))\nw1 = tf.Variable(tf.random_normal([2,3],stddev=1,seed=1))\nw2 = tf.Variable(tf.random_normal([3,1],stddev=1,seed=1))\n\n\na = tf.matmul(x,w1)\ny = tf.matmul(a,w2)\n\n\nwith tf.Session() as sess:\n    init_op = tf.global_variables_initializer()\n    sess.run(init_op)\n    print \"y is \",sess.run(y,feed_dict={x:[[0.7,0.5]]})\n```\n\n- 喂食多组\n\n```python\nimport tensorflow as tf\n\n# 喂食多组 2 维张量\nx = tf.placeholder(tf.float32,shape=(None,2))\nw1 = tf.Variable(tf.random_normal([2,3],stddev=1,seed=1))\nw2 = tf.Variable(tf.random_normal([3,1],stddev=1,seed=1))\n\n\na = tf.matmul(x,w1)\ny = tf.matmul(a,w2)\n\n\nwith tf.Session() as sess:\n    init_op = tf.global_variables_initializer()\n    sess.run(init_op)\n    print \"y is \\n\",sess.run(y,feed_dict={x:[[0.7,0.5],[0.2,0.3],[0.3,0.4],[0.4,0.5]]})\n    print \"w1:\\n\",sess.run(w1)\n    print \"w2:\\n\",sess.run(w2)\n```\n\n### 定义前向传播过程\n\n在喂食数据的例子中，前向传播过程很简单，就是两条语句：\n\n```python\na = tf.matmul(x,w1)\ny = tf.matmul(a,w2)\n```\n\n\n### 定义反向传播并训练\n\n为了使反向传播更容易理解，我们再具体化一些。\n\n```python\nimport tensorflow as tf\nimport numpy as np # 科学计算库\n\nBATCH_SIZE = 8# 每次喂食数量\nseed = 23455# 随机种子值，可以根据时间戳来设置\nrng = np.random.RandomState(seed)\nX = rng.rand(32,2)# 随机生成数据集\nY = [[int(x0+x1<1)] for (x0,x1) in X]# 人为定义体积与质量和小于1才合格\n\nprint \"X:\\n\",X\nprint \"Y:\\n\",Y\n\n# 输入、参数、输出、前向传播\n\nx = tf.placeholder(tf.float32,shape=(None,2))\ny_= tf.placeholder(tf.float32,shape=(None,1))\n\nw1= tf.Variable(tf.random_normal([2,3],stddev=1,seed=1))\nw2= tf.Variable(tf.random_normal([3,1],stddev=1,seed=1))\n\na = tf.matmul(x,w1)\ny = tf.matmul(a,w2)\n\n# 损失函数及反向传播\n\nloss = tf.reduce_mean(tf.square(y-y_))\n# 梯度下降方法\ntrain_step = tf.train.GradientDescentOptimizer(0.001).minimize(loss)\n\nwith tf.Session() as sess:\n    init_op = tf.global_variables_initializer()\n    sess.run(init_op)\n    print \"w1:\\n\",sess.run(w1)\n    print \"w2:\\n\",sess.run(w2)\n    print \"\\n\"\n    \n    STEPS = 3000\n    for i in range(STEPS):\n        start = (i*BATCH_SIZE)%32\n        end = start + BATCH_SIZE\n        sess.run(train_step,feed_dict={x:X[start:end],y_:Y[start:end]})\n        # 每500次输出一次训练总误差\n        if i%500 == 0:\n            total_loss = sess.run(loss,feed_dict={x:X,y_:Y})\n            print(\"After %d training step(s),loss on all data is %g\"%(i,total_loss))\n            \n        \n    print \"\\n\"\n    print \"w1:\\n\",sess.run(w1)\n    print \"w2:\\n\",sess.run(w2)\n        \n```\n\n## 总结\n\n根据神经网络实现的步骤，或许能够理解代码如何编写了。再次总结一下，使用神经网络的目的是为了得到一个优秀的模型来进行预测或者分类。如何训练出一个优秀的模型那就是问题的关键了。首先，一个优秀模型的训练离不开数据和计算参数，数据通常来源于生活，而参数我们可以使用随机数初始化，训练之后就是我们需要的参数了。其次，有了数据和参数，我们评判模型的标准是什么，通过数据和参数搭建出计算图，这就是前向传播所需要做的内容。最后，我们搭建好了计算图，就要开始训练模型了，训练模型是一个迭代的过程，迭代过程需要指定如何优化，因此就需要定义误差函数和反向传播过程。","source":"_posts/tflearn-1.md","raw":"---\ntitle: Tensorflow 学习笔记\ndate: 2018-12-22 18:56:12\nphoto : /tflearn-1/tf.png\ntags:\n- Tensorflow\n- Python\ncategories:\n- AI\n- Tensorflow\n---\n{% note default %}\n智能就是有学习能力。\n{% endnote %}\n\n<!-- more -->\n\n## 神经网络具体实现\n\n### 步骤\n\n- 准备数据集，提取特征，作为输入喂给神经网络\n- 搭建 NN 结构，从输入到输出（先搭建计算图，再用会话执行）\n> NN 前向传播算法-->计算输出\n- 大量特征数据喂给 NN，迭代优化 NN 参数\n> NN 反向传播算法-->优化参数训练模型\n- 使用训练好的模型预测和分类\n\n下面是一个具体的例子，这个例子中并没有反向传播优化参数。\n这个例子是通过输入物品的两个指标：`质量`和`体积`，来判定物品是否合格\n\n```python\nimport tensorflow as tf\n\nx = tf.constant([[0.7,0.5]])\nw1 = tf.Variable(tf.random_normal([2,3],stddev=1,seed=1))\nw2 = tf.Variable(tf.random_normal([3,1],stddev=1,seed=1))\n\n\na = tf.matmul(x,w1)\ny = tf.matmul(a,w2)\n\n\nwith tf.Session() as sess:\n    init_op = tf.global_variables_initializer()\n    sess.run(init_op)\n    print \"y is \",sess.run(y)\n```\n\n### 数据来源\n\n数据源是来自于实际过程的，假设我们此处直接喂食一组或者多组数据：\n\n使用 `placeholder` 方法进行预设值，在会话中输入实际值。\n\n- 喂食 1 组\n\n```python\nx = tf.placeholder(tf.float32,shape=(1,2)) \nimport tensorflow as tf\n\n# 喂食 1 组 2 维张量\nx = tf.placeholder(tf.float32,shape=(1,2))\nw1 = tf.Variable(tf.random_normal([2,3],stddev=1,seed=1))\nw2 = tf.Variable(tf.random_normal([3,1],stddev=1,seed=1))\n\n\na = tf.matmul(x,w1)\ny = tf.matmul(a,w2)\n\n\nwith tf.Session() as sess:\n    init_op = tf.global_variables_initializer()\n    sess.run(init_op)\n    print \"y is \",sess.run(y,feed_dict={x:[[0.7,0.5]]})\n```\n\n- 喂食多组\n\n```python\nimport tensorflow as tf\n\n# 喂食多组 2 维张量\nx = tf.placeholder(tf.float32,shape=(None,2))\nw1 = tf.Variable(tf.random_normal([2,3],stddev=1,seed=1))\nw2 = tf.Variable(tf.random_normal([3,1],stddev=1,seed=1))\n\n\na = tf.matmul(x,w1)\ny = tf.matmul(a,w2)\n\n\nwith tf.Session() as sess:\n    init_op = tf.global_variables_initializer()\n    sess.run(init_op)\n    print \"y is \\n\",sess.run(y,feed_dict={x:[[0.7,0.5],[0.2,0.3],[0.3,0.4],[0.4,0.5]]})\n    print \"w1:\\n\",sess.run(w1)\n    print \"w2:\\n\",sess.run(w2)\n```\n\n### 定义前向传播过程\n\n在喂食数据的例子中，前向传播过程很简单，就是两条语句：\n\n```python\na = tf.matmul(x,w1)\ny = tf.matmul(a,w2)\n```\n\n\n### 定义反向传播并训练\n\n为了使反向传播更容易理解，我们再具体化一些。\n\n```python\nimport tensorflow as tf\nimport numpy as np # 科学计算库\n\nBATCH_SIZE = 8# 每次喂食数量\nseed = 23455# 随机种子值，可以根据时间戳来设置\nrng = np.random.RandomState(seed)\nX = rng.rand(32,2)# 随机生成数据集\nY = [[int(x0+x1<1)] for (x0,x1) in X]# 人为定义体积与质量和小于1才合格\n\nprint \"X:\\n\",X\nprint \"Y:\\n\",Y\n\n# 输入、参数、输出、前向传播\n\nx = tf.placeholder(tf.float32,shape=(None,2))\ny_= tf.placeholder(tf.float32,shape=(None,1))\n\nw1= tf.Variable(tf.random_normal([2,3],stddev=1,seed=1))\nw2= tf.Variable(tf.random_normal([3,1],stddev=1,seed=1))\n\na = tf.matmul(x,w1)\ny = tf.matmul(a,w2)\n\n# 损失函数及反向传播\n\nloss = tf.reduce_mean(tf.square(y-y_))\n# 梯度下降方法\ntrain_step = tf.train.GradientDescentOptimizer(0.001).minimize(loss)\n\nwith tf.Session() as sess:\n    init_op = tf.global_variables_initializer()\n    sess.run(init_op)\n    print \"w1:\\n\",sess.run(w1)\n    print \"w2:\\n\",sess.run(w2)\n    print \"\\n\"\n    \n    STEPS = 3000\n    for i in range(STEPS):\n        start = (i*BATCH_SIZE)%32\n        end = start + BATCH_SIZE\n        sess.run(train_step,feed_dict={x:X[start:end],y_:Y[start:end]})\n        # 每500次输出一次训练总误差\n        if i%500 == 0:\n            total_loss = sess.run(loss,feed_dict={x:X,y_:Y})\n            print(\"After %d training step(s),loss on all data is %g\"%(i,total_loss))\n            \n        \n    print \"\\n\"\n    print \"w1:\\n\",sess.run(w1)\n    print \"w2:\\n\",sess.run(w2)\n        \n```\n\n## 总结\n\n根据神经网络实现的步骤，或许能够理解代码如何编写了。再次总结一下，使用神经网络的目的是为了得到一个优秀的模型来进行预测或者分类。如何训练出一个优秀的模型那就是问题的关键了。首先，一个优秀模型的训练离不开数据和计算参数，数据通常来源于生活，而参数我们可以使用随机数初始化，训练之后就是我们需要的参数了。其次，有了数据和参数，我们评判模型的标准是什么，通过数据和参数搭建出计算图，这就是前向传播所需要做的内容。最后，我们搭建好了计算图，就要开始训练模型了，训练模型是一个迭代的过程，迭代过程需要指定如何优化，因此就需要定义误差函数和反向传播过程。","slug":"tflearn-1","published":1,"updated":"2022-01-06T04:09:12.490Z","photos":["/tflearn-1/tf.png"],"_id":"cksq5v7n3004jn0pu6u79ahcj","comments":1,"layout":"post","link":"","content":"<div class=\"note default\"><p>智能就是有学习能力。</p>\n</div>\n\n<span id=\"more\"></span>\n\n<h2 id=\"神经网络具体实现\"><a href=\"#神经网络具体实现\" class=\"headerlink\" title=\"神经网络具体实现\"></a>神经网络具体实现</h2><h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><ul>\n<li>准备数据集，提取特征，作为输入喂给神经网络</li>\n<li>搭建 NN 结构，从输入到输出（先搭建计算图，再用会话执行）<blockquote>\n<p>NN 前向传播算法–&gt;计算输出</p>\n</blockquote>\n</li>\n<li>大量特征数据喂给 NN，迭代优化 NN 参数<blockquote>\n<p>NN 反向传播算法–&gt;优化参数训练模型</p>\n</blockquote>\n</li>\n<li>使用训练好的模型预测和分类</li>\n</ul>\n<p>下面是一个具体的例子，这个例子中并没有反向传播优化参数。<br>这个例子是通过输入物品的两个指标：<code>质量</code>和<code>体积</code>，来判定物品是否合格</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"></span><br><span class=\"line\">x = tf.constant([[<span class=\"number\">0.7</span>,<span class=\"number\">0.5</span>]])</span><br><span class=\"line\">w1 = tf.Variable(tf.random_normal([<span class=\"number\">2</span>,<span class=\"number\">3</span>],stddev=<span class=\"number\">1</span>,seed=<span class=\"number\">1</span>))</span><br><span class=\"line\">w2 = tf.Variable(tf.random_normal([<span class=\"number\">3</span>,<span class=\"number\">1</span>],stddev=<span class=\"number\">1</span>,seed=<span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">a = tf.matmul(x,w1)</span><br><span class=\"line\">y = tf.matmul(a,w2)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">    init_op = tf.global_variables_initializer()</span><br><span class=\"line\">    sess.run(init_op)</span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">&quot;y is &quot;</span>,sess.run(y)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数据来源\"><a href=\"#数据来源\" class=\"headerlink\" title=\"数据来源\"></a>数据来源</h3><p>数据源是来自于实际过程的，假设我们此处直接喂食一组或者多组数据：</p>\n<p>使用 <code>placeholder</code> 方法进行预设值，在会话中输入实际值。</p>\n<ul>\n<li>喂食 1 组</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = tf.placeholder(tf.float32,shape=(<span class=\"number\">1</span>,<span class=\"number\">2</span>)) </span><br><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 喂食 1 组 2 维张量</span></span><br><span class=\"line\">x = tf.placeholder(tf.float32,shape=(<span class=\"number\">1</span>,<span class=\"number\">2</span>))</span><br><span class=\"line\">w1 = tf.Variable(tf.random_normal([<span class=\"number\">2</span>,<span class=\"number\">3</span>],stddev=<span class=\"number\">1</span>,seed=<span class=\"number\">1</span>))</span><br><span class=\"line\">w2 = tf.Variable(tf.random_normal([<span class=\"number\">3</span>,<span class=\"number\">1</span>],stddev=<span class=\"number\">1</span>,seed=<span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">a = tf.matmul(x,w1)</span><br><span class=\"line\">y = tf.matmul(a,w2)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">    init_op = tf.global_variables_initializer()</span><br><span class=\"line\">    sess.run(init_op)</span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">&quot;y is &quot;</span>,sess.run(y,feed_dict=&#123;x:[[<span class=\"number\">0.7</span>,<span class=\"number\">0.5</span>]]&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>喂食多组</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 喂食多组 2 维张量</span></span><br><span class=\"line\">x = tf.placeholder(tf.float32,shape=(<span class=\"literal\">None</span>,<span class=\"number\">2</span>))</span><br><span class=\"line\">w1 = tf.Variable(tf.random_normal([<span class=\"number\">2</span>,<span class=\"number\">3</span>],stddev=<span class=\"number\">1</span>,seed=<span class=\"number\">1</span>))</span><br><span class=\"line\">w2 = tf.Variable(tf.random_normal([<span class=\"number\">3</span>,<span class=\"number\">1</span>],stddev=<span class=\"number\">1</span>,seed=<span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">a = tf.matmul(x,w1)</span><br><span class=\"line\">y = tf.matmul(a,w2)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">    init_op = tf.global_variables_initializer()</span><br><span class=\"line\">    sess.run(init_op)</span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">&quot;y is \\n&quot;</span>,sess.run(y,feed_dict=&#123;x:[[<span class=\"number\">0.7</span>,<span class=\"number\">0.5</span>],[<span class=\"number\">0.2</span>,<span class=\"number\">0.3</span>],[<span class=\"number\">0.3</span>,<span class=\"number\">0.4</span>],[<span class=\"number\">0.4</span>,<span class=\"number\">0.5</span>]]&#125;)</span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">&quot;w1:\\n&quot;</span>,sess.run(w1)</span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">&quot;w2:\\n&quot;</span>,sess.run(w2)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定义前向传播过程\"><a href=\"#定义前向传播过程\" class=\"headerlink\" title=\"定义前向传播过程\"></a>定义前向传播过程</h3><p>在喂食数据的例子中，前向传播过程很简单，就是两条语句：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = tf.matmul(x,w1)</span><br><span class=\"line\">y = tf.matmul(a,w2)</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"定义反向传播并训练\"><a href=\"#定义反向传播并训练\" class=\"headerlink\" title=\"定义反向传播并训练\"></a>定义反向传播并训练</h3><p>为了使反向传播更容易理解，我们再具体化一些。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np <span class=\"comment\"># 科学计算库</span></span><br><span class=\"line\"></span><br><span class=\"line\">BATCH_SIZE = <span class=\"number\">8</span><span class=\"comment\"># 每次喂食数量</span></span><br><span class=\"line\">seed = <span class=\"number\">23455</span><span class=\"comment\"># 随机种子值，可以根据时间戳来设置</span></span><br><span class=\"line\">rng = np.random.RandomState(seed)</span><br><span class=\"line\">X = rng.rand(<span class=\"number\">32</span>,<span class=\"number\">2</span>)<span class=\"comment\"># 随机生成数据集</span></span><br><span class=\"line\">Y = [[<span class=\"built_in\">int</span>(x0+x1&lt;<span class=\"number\">1</span>)] <span class=\"keyword\">for</span> (x0,x1) <span class=\"keyword\">in</span> X]<span class=\"comment\"># 人为定义体积与质量和小于1才合格</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&quot;X:\\n&quot;</span>,X</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&quot;Y:\\n&quot;</span>,Y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输入、参数、输出、前向传播</span></span><br><span class=\"line\"></span><br><span class=\"line\">x = tf.placeholder(tf.float32,shape=(<span class=\"literal\">None</span>,<span class=\"number\">2</span>))</span><br><span class=\"line\">y_= tf.placeholder(tf.float32,shape=(<span class=\"literal\">None</span>,<span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">w1= tf.Variable(tf.random_normal([<span class=\"number\">2</span>,<span class=\"number\">3</span>],stddev=<span class=\"number\">1</span>,seed=<span class=\"number\">1</span>))</span><br><span class=\"line\">w2= tf.Variable(tf.random_normal([<span class=\"number\">3</span>,<span class=\"number\">1</span>],stddev=<span class=\"number\">1</span>,seed=<span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">a = tf.matmul(x,w1)</span><br><span class=\"line\">y = tf.matmul(a,w2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 损失函数及反向传播</span></span><br><span class=\"line\"></span><br><span class=\"line\">loss = tf.reduce_mean(tf.square(y-y_))</span><br><span class=\"line\"><span class=\"comment\"># 梯度下降方法</span></span><br><span class=\"line\">train_step = tf.train.GradientDescentOptimizer(<span class=\"number\">0.001</span>).minimize(loss)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">    init_op = tf.global_variables_initializer()</span><br><span class=\"line\">    sess.run(init_op)</span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">&quot;w1:\\n&quot;</span>,sess.run(w1)</span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">&quot;w2:\\n&quot;</span>,sess.run(w2)</span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">&quot;\\n&quot;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    STEPS = <span class=\"number\">3000</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(STEPS):</span><br><span class=\"line\">        start = (i*BATCH_SIZE)%<span class=\"number\">32</span></span><br><span class=\"line\">        end = start + BATCH_SIZE</span><br><span class=\"line\">        sess.run(train_step,feed_dict=&#123;x:X[start:end],y_:Y[start:end]&#125;)</span><br><span class=\"line\">        <span class=\"comment\"># 每500次输出一次训练总误差</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i%<span class=\"number\">500</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            total_loss = sess.run(loss,feed_dict=&#123;x:X,y_:Y&#125;)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;After %d training step(s),loss on all data is %g&quot;</span>%(i,total_loss))</span><br><span class=\"line\">            </span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">&quot;\\n&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">&quot;w1:\\n&quot;</span>,sess.run(w1)</span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">&quot;w2:\\n&quot;</span>,sess.run(w2)</span><br><span class=\"line\">        </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>根据神经网络实现的步骤，或许能够理解代码如何编写了。再次总结一下，使用神经网络的目的是为了得到一个优秀的模型来进行预测或者分类。如何训练出一个优秀的模型那就是问题的关键了。首先，一个优秀模型的训练离不开数据和计算参数，数据通常来源于生活，而参数我们可以使用随机数初始化，训练之后就是我们需要的参数了。其次，有了数据和参数，我们评判模型的标准是什么，通过数据和参数搭建出计算图，这就是前向传播所需要做的内容。最后，我们搭建好了计算图，就要开始训练模型了，训练模型是一个迭代的过程，迭代过程需要指定如何优化，因此就需要定义误差函数和反向传播过程。</p>\n","site":{"data":{}},"excerpt":"<div class=\"note default\"><p>智能就是有学习能力。</p>\n</div>","more":"<h2 id=\"神经网络具体实现\"><a href=\"#神经网络具体实现\" class=\"headerlink\" title=\"神经网络具体实现\"></a>神经网络具体实现</h2><h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><ul>\n<li>准备数据集，提取特征，作为输入喂给神经网络</li>\n<li>搭建 NN 结构，从输入到输出（先搭建计算图，再用会话执行）<blockquote>\n<p>NN 前向传播算法–&gt;计算输出</p>\n</blockquote>\n</li>\n<li>大量特征数据喂给 NN，迭代优化 NN 参数<blockquote>\n<p>NN 反向传播算法–&gt;优化参数训练模型</p>\n</blockquote>\n</li>\n<li>使用训练好的模型预测和分类</li>\n</ul>\n<p>下面是一个具体的例子，这个例子中并没有反向传播优化参数。<br>这个例子是通过输入物品的两个指标：<code>质量</code>和<code>体积</code>，来判定物品是否合格</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"></span><br><span class=\"line\">x = tf.constant([[<span class=\"number\">0.7</span>,<span class=\"number\">0.5</span>]])</span><br><span class=\"line\">w1 = tf.Variable(tf.random_normal([<span class=\"number\">2</span>,<span class=\"number\">3</span>],stddev=<span class=\"number\">1</span>,seed=<span class=\"number\">1</span>))</span><br><span class=\"line\">w2 = tf.Variable(tf.random_normal([<span class=\"number\">3</span>,<span class=\"number\">1</span>],stddev=<span class=\"number\">1</span>,seed=<span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">a = tf.matmul(x,w1)</span><br><span class=\"line\">y = tf.matmul(a,w2)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">    init_op = tf.global_variables_initializer()</span><br><span class=\"line\">    sess.run(init_op)</span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">&quot;y is &quot;</span>,sess.run(y)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数据来源\"><a href=\"#数据来源\" class=\"headerlink\" title=\"数据来源\"></a>数据来源</h3><p>数据源是来自于实际过程的，假设我们此处直接喂食一组或者多组数据：</p>\n<p>使用 <code>placeholder</code> 方法进行预设值，在会话中输入实际值。</p>\n<ul>\n<li>喂食 1 组</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = tf.placeholder(tf.float32,shape=(<span class=\"number\">1</span>,<span class=\"number\">2</span>)) </span><br><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 喂食 1 组 2 维张量</span></span><br><span class=\"line\">x = tf.placeholder(tf.float32,shape=(<span class=\"number\">1</span>,<span class=\"number\">2</span>))</span><br><span class=\"line\">w1 = tf.Variable(tf.random_normal([<span class=\"number\">2</span>,<span class=\"number\">3</span>],stddev=<span class=\"number\">1</span>,seed=<span class=\"number\">1</span>))</span><br><span class=\"line\">w2 = tf.Variable(tf.random_normal([<span class=\"number\">3</span>,<span class=\"number\">1</span>],stddev=<span class=\"number\">1</span>,seed=<span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">a = tf.matmul(x,w1)</span><br><span class=\"line\">y = tf.matmul(a,w2)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">    init_op = tf.global_variables_initializer()</span><br><span class=\"line\">    sess.run(init_op)</span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">&quot;y is &quot;</span>,sess.run(y,feed_dict=&#123;x:[[<span class=\"number\">0.7</span>,<span class=\"number\">0.5</span>]]&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>喂食多组</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 喂食多组 2 维张量</span></span><br><span class=\"line\">x = tf.placeholder(tf.float32,shape=(<span class=\"literal\">None</span>,<span class=\"number\">2</span>))</span><br><span class=\"line\">w1 = tf.Variable(tf.random_normal([<span class=\"number\">2</span>,<span class=\"number\">3</span>],stddev=<span class=\"number\">1</span>,seed=<span class=\"number\">1</span>))</span><br><span class=\"line\">w2 = tf.Variable(tf.random_normal([<span class=\"number\">3</span>,<span class=\"number\">1</span>],stddev=<span class=\"number\">1</span>,seed=<span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">a = tf.matmul(x,w1)</span><br><span class=\"line\">y = tf.matmul(a,w2)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">    init_op = tf.global_variables_initializer()</span><br><span class=\"line\">    sess.run(init_op)</span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">&quot;y is \\n&quot;</span>,sess.run(y,feed_dict=&#123;x:[[<span class=\"number\">0.7</span>,<span class=\"number\">0.5</span>],[<span class=\"number\">0.2</span>,<span class=\"number\">0.3</span>],[<span class=\"number\">0.3</span>,<span class=\"number\">0.4</span>],[<span class=\"number\">0.4</span>,<span class=\"number\">0.5</span>]]&#125;)</span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">&quot;w1:\\n&quot;</span>,sess.run(w1)</span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">&quot;w2:\\n&quot;</span>,sess.run(w2)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定义前向传播过程\"><a href=\"#定义前向传播过程\" class=\"headerlink\" title=\"定义前向传播过程\"></a>定义前向传播过程</h3><p>在喂食数据的例子中，前向传播过程很简单，就是两条语句：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = tf.matmul(x,w1)</span><br><span class=\"line\">y = tf.matmul(a,w2)</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"定义反向传播并训练\"><a href=\"#定义反向传播并训练\" class=\"headerlink\" title=\"定义反向传播并训练\"></a>定义反向传播并训练</h3><p>为了使反向传播更容易理解，我们再具体化一些。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np <span class=\"comment\"># 科学计算库</span></span><br><span class=\"line\"></span><br><span class=\"line\">BATCH_SIZE = <span class=\"number\">8</span><span class=\"comment\"># 每次喂食数量</span></span><br><span class=\"line\">seed = <span class=\"number\">23455</span><span class=\"comment\"># 随机种子值，可以根据时间戳来设置</span></span><br><span class=\"line\">rng = np.random.RandomState(seed)</span><br><span class=\"line\">X = rng.rand(<span class=\"number\">32</span>,<span class=\"number\">2</span>)<span class=\"comment\"># 随机生成数据集</span></span><br><span class=\"line\">Y = [[<span class=\"built_in\">int</span>(x0+x1&lt;<span class=\"number\">1</span>)] <span class=\"keyword\">for</span> (x0,x1) <span class=\"keyword\">in</span> X]<span class=\"comment\"># 人为定义体积与质量和小于1才合格</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&quot;X:\\n&quot;</span>,X</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&quot;Y:\\n&quot;</span>,Y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输入、参数、输出、前向传播</span></span><br><span class=\"line\"></span><br><span class=\"line\">x = tf.placeholder(tf.float32,shape=(<span class=\"literal\">None</span>,<span class=\"number\">2</span>))</span><br><span class=\"line\">y_= tf.placeholder(tf.float32,shape=(<span class=\"literal\">None</span>,<span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">w1= tf.Variable(tf.random_normal([<span class=\"number\">2</span>,<span class=\"number\">3</span>],stddev=<span class=\"number\">1</span>,seed=<span class=\"number\">1</span>))</span><br><span class=\"line\">w2= tf.Variable(tf.random_normal([<span class=\"number\">3</span>,<span class=\"number\">1</span>],stddev=<span class=\"number\">1</span>,seed=<span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">a = tf.matmul(x,w1)</span><br><span class=\"line\">y = tf.matmul(a,w2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 损失函数及反向传播</span></span><br><span class=\"line\"></span><br><span class=\"line\">loss = tf.reduce_mean(tf.square(y-y_))</span><br><span class=\"line\"><span class=\"comment\"># 梯度下降方法</span></span><br><span class=\"line\">train_step = tf.train.GradientDescentOptimizer(<span class=\"number\">0.001</span>).minimize(loss)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">    init_op = tf.global_variables_initializer()</span><br><span class=\"line\">    sess.run(init_op)</span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">&quot;w1:\\n&quot;</span>,sess.run(w1)</span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">&quot;w2:\\n&quot;</span>,sess.run(w2)</span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">&quot;\\n&quot;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    STEPS = <span class=\"number\">3000</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(STEPS):</span><br><span class=\"line\">        start = (i*BATCH_SIZE)%<span class=\"number\">32</span></span><br><span class=\"line\">        end = start + BATCH_SIZE</span><br><span class=\"line\">        sess.run(train_step,feed_dict=&#123;x:X[start:end],y_:Y[start:end]&#125;)</span><br><span class=\"line\">        <span class=\"comment\"># 每500次输出一次训练总误差</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i%<span class=\"number\">500</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            total_loss = sess.run(loss,feed_dict=&#123;x:X,y_:Y&#125;)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;After %d training step(s),loss on all data is %g&quot;</span>%(i,total_loss))</span><br><span class=\"line\">            </span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">&quot;\\n&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">&quot;w1:\\n&quot;</span>,sess.run(w1)</span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">&quot;w2:\\n&quot;</span>,sess.run(w2)</span><br><span class=\"line\">        </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>根据神经网络实现的步骤，或许能够理解代码如何编写了。再次总结一下，使用神经网络的目的是为了得到一个优秀的模型来进行预测或者分类。如何训练出一个优秀的模型那就是问题的关键了。首先，一个优秀模型的训练离不开数据和计算参数，数据通常来源于生活，而参数我们可以使用随机数初始化，训练之后就是我们需要的参数了。其次，有了数据和参数，我们评判模型的标准是什么，通过数据和参数搭建出计算图，这就是前向传播所需要做的内容。最后，我们搭建好了计算图，就要开始训练模型了，训练模型是一个迭代的过程，迭代过程需要指定如何优化，因此就需要定义误差函数和反向传播过程。</p>"},{"title":"操作系统——关于新的思考和新的目标","date":"2018-09-23T09:38:00.000Z","_content":"\n\n\n{% note default %}\n计算机操作系统是最复杂的软件之一。\n{% endnote %}\n\n<!-- more -->\n\n### 2018年9月23日的思考——新的目标\n\n> 先来说一下为什么懒散的我很长时间没有动博客今日却心血来潮。此刻我电脑上有一个进程正在下载着`i386`的ubuntu镜像，今天的主题和这个镜像有关，它只是一个开发环境。开发什么呢，或者说这仅仅是一个实验，来自`MIT`操作系统的实验，这只是听某位学长偶然提及的。没错，核心主题就是**操作系统**，这个实验的训练价值确实有一定可取性，但学长更为推荐的是一本书：`《linux内核完全剖析》`，如果你有操作系统方面的研究兴趣的话可以借鉴一下。我认为操作系统的研究价值有二：其一是知识价值，计算机最基础的知识之一。其二如下。\n\n\n#### 为什么是操作系统\n\n> 在暑假以及开学的2周里，我把操作系统的知识点回顾了一遍。也看了一部分`linux0.11`的源码，虽然至今仍未进入其`main`函数。\n\n为什么是操作系统？我认为操作系统是软件或者计算机硬件之上最重要的一部分。或许你认为当前最火的计算机技术有很多，比如说人工智能、大数据分析、云计算等等。没错，对于人工智能来说，如果你仅停留在如何调用`TensorFlow API`的层面上，那和普通咸鱼有什么区别。当然如果你能够解析内部实现原理，比如各种神经网路、误差缩减方法实现，而且能够进一步优化或者设计一种新的方法，那才是真正的工程师。将所有的开发技术抽象而言，都是工具。我认为对于这一方面有三个层次：使用工具，改造工具，创造工具。使用工具的人是普通咸鱼，能够改造工具的人是高级咸鱼，能够创造工具的才能称之为工程师。话说回来，为什么是操作系统？\n\n这只是一个猜想：\n\n操作系统存在于哪？存在于终端之上————电脑、手机、智能手表等等，常见的也就这几种。但是以后会有什么其他类型的终端？眼睛框上有个终端？加上增强现实，就像科幻电影里那样。项链上有个终端？戒指上有个终端？而且对于不同的终端有不尽相同的操作系统，这就是操作系统与终端的搭配。\n\n#### 操作系统需要什么\n\n> 操作系统是干什么的？用于管理硬件的软件。需要的就是如何管理硬件，如何有效的利用好各个硬件。如何更有效率的使用好CPU——CPU管理，有效率的使用好内存——内存管理，有效率的使用好外设——外设管理，更好的让用户操作——文件管理。\n\n计算机至少需要一个处理器、一个存储设备、一个输入设备和一个输出设备。最基础的就是管理这些东西而已。","source":"_posts/thinking-2018-9-23.md","raw":"---\ntitle: 操作系统——关于新的思考和新的目标\ndate: 2018-09-23 17:38:00\n\ntags:\n- Operating System\ncategories: \n- Computer Science\n- Operating System\n---\n\n\n\n{% note default %}\n计算机操作系统是最复杂的软件之一。\n{% endnote %}\n\n<!-- more -->\n\n### 2018年9月23日的思考——新的目标\n\n> 先来说一下为什么懒散的我很长时间没有动博客今日却心血来潮。此刻我电脑上有一个进程正在下载着`i386`的ubuntu镜像，今天的主题和这个镜像有关，它只是一个开发环境。开发什么呢，或者说这仅仅是一个实验，来自`MIT`操作系统的实验，这只是听某位学长偶然提及的。没错，核心主题就是**操作系统**，这个实验的训练价值确实有一定可取性，但学长更为推荐的是一本书：`《linux内核完全剖析》`，如果你有操作系统方面的研究兴趣的话可以借鉴一下。我认为操作系统的研究价值有二：其一是知识价值，计算机最基础的知识之一。其二如下。\n\n\n#### 为什么是操作系统\n\n> 在暑假以及开学的2周里，我把操作系统的知识点回顾了一遍。也看了一部分`linux0.11`的源码，虽然至今仍未进入其`main`函数。\n\n为什么是操作系统？我认为操作系统是软件或者计算机硬件之上最重要的一部分。或许你认为当前最火的计算机技术有很多，比如说人工智能、大数据分析、云计算等等。没错，对于人工智能来说，如果你仅停留在如何调用`TensorFlow API`的层面上，那和普通咸鱼有什么区别。当然如果你能够解析内部实现原理，比如各种神经网路、误差缩减方法实现，而且能够进一步优化或者设计一种新的方法，那才是真正的工程师。将所有的开发技术抽象而言，都是工具。我认为对于这一方面有三个层次：使用工具，改造工具，创造工具。使用工具的人是普通咸鱼，能够改造工具的人是高级咸鱼，能够创造工具的才能称之为工程师。话说回来，为什么是操作系统？\n\n这只是一个猜想：\n\n操作系统存在于哪？存在于终端之上————电脑、手机、智能手表等等，常见的也就这几种。但是以后会有什么其他类型的终端？眼睛框上有个终端？加上增强现实，就像科幻电影里那样。项链上有个终端？戒指上有个终端？而且对于不同的终端有不尽相同的操作系统，这就是操作系统与终端的搭配。\n\n#### 操作系统需要什么\n\n> 操作系统是干什么的？用于管理硬件的软件。需要的就是如何管理硬件，如何有效的利用好各个硬件。如何更有效率的使用好CPU——CPU管理，有效率的使用好内存——内存管理，有效率的使用好外设——外设管理，更好的让用户操作——文件管理。\n\n计算机至少需要一个处理器、一个存储设备、一个输入设备和一个输出设备。最基础的就是管理这些东西而已。","slug":"thinking-2018-9-23","published":1,"updated":"2022-01-06T04:09:12.491Z","_id":"cksq5v7n4004mn0pu19a0g3j2","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note default\"><p>计算机操作系统是最复杂的软件之一。</p>\n</div>\n\n<span id=\"more\"></span>\n\n<h3 id=\"2018年9月23日的思考——新的目标\"><a href=\"#2018年9月23日的思考——新的目标\" class=\"headerlink\" title=\"2018年9月23日的思考——新的目标\"></a>2018年9月23日的思考——新的目标</h3><blockquote>\n<p>先来说一下为什么懒散的我很长时间没有动博客今日却心血来潮。此刻我电脑上有一个进程正在下载着<code>i386</code>的ubuntu镜像，今天的主题和这个镜像有关，它只是一个开发环境。开发什么呢，或者说这仅仅是一个实验，来自<code>MIT</code>操作系统的实验，这只是听某位学长偶然提及的。没错，核心主题就是<strong>操作系统</strong>，这个实验的训练价值确实有一定可取性，但学长更为推荐的是一本书：<code>《linux内核完全剖析》</code>，如果你有操作系统方面的研究兴趣的话可以借鉴一下。我认为操作系统的研究价值有二：其一是知识价值，计算机最基础的知识之一。其二如下。</p>\n</blockquote>\n<h4 id=\"为什么是操作系统\"><a href=\"#为什么是操作系统\" class=\"headerlink\" title=\"为什么是操作系统\"></a>为什么是操作系统</h4><blockquote>\n<p>在暑假以及开学的2周里，我把操作系统的知识点回顾了一遍。也看了一部分<code>linux0.11</code>的源码，虽然至今仍未进入其<code>main</code>函数。</p>\n</blockquote>\n<p>为什么是操作系统？我认为操作系统是软件或者计算机硬件之上最重要的一部分。或许你认为当前最火的计算机技术有很多，比如说人工智能、大数据分析、云计算等等。没错，对于人工智能来说，如果你仅停留在如何调用<code>TensorFlow API</code>的层面上，那和普通咸鱼有什么区别。当然如果你能够解析内部实现原理，比如各种神经网路、误差缩减方法实现，而且能够进一步优化或者设计一种新的方法，那才是真正的工程师。将所有的开发技术抽象而言，都是工具。我认为对于这一方面有三个层次：使用工具，改造工具，创造工具。使用工具的人是普通咸鱼，能够改造工具的人是高级咸鱼，能够创造工具的才能称之为工程师。话说回来，为什么是操作系统？</p>\n<p>这只是一个猜想：</p>\n<p>操作系统存在于哪？存在于终端之上————电脑、手机、智能手表等等，常见的也就这几种。但是以后会有什么其他类型的终端？眼睛框上有个终端？加上增强现实，就像科幻电影里那样。项链上有个终端？戒指上有个终端？而且对于不同的终端有不尽相同的操作系统，这就是操作系统与终端的搭配。</p>\n<h4 id=\"操作系统需要什么\"><a href=\"#操作系统需要什么\" class=\"headerlink\" title=\"操作系统需要什么\"></a>操作系统需要什么</h4><blockquote>\n<p>操作系统是干什么的？用于管理硬件的软件。需要的就是如何管理硬件，如何有效的利用好各个硬件。如何更有效率的使用好CPU——CPU管理，有效率的使用好内存——内存管理，有效率的使用好外设——外设管理，更好的让用户操作——文件管理。</p>\n</blockquote>\n<p>计算机至少需要一个处理器、一个存储设备、一个输入设备和一个输出设备。最基础的就是管理这些东西而已。</p>\n","site":{"data":{}},"excerpt":"<div class=\"note default\"><p>计算机操作系统是最复杂的软件之一。</p>\n</div>","more":"<h3 id=\"2018年9月23日的思考——新的目标\"><a href=\"#2018年9月23日的思考——新的目标\" class=\"headerlink\" title=\"2018年9月23日的思考——新的目标\"></a>2018年9月23日的思考——新的目标</h3><blockquote>\n<p>先来说一下为什么懒散的我很长时间没有动博客今日却心血来潮。此刻我电脑上有一个进程正在下载着<code>i386</code>的ubuntu镜像，今天的主题和这个镜像有关，它只是一个开发环境。开发什么呢，或者说这仅仅是一个实验，来自<code>MIT</code>操作系统的实验，这只是听某位学长偶然提及的。没错，核心主题就是<strong>操作系统</strong>，这个实验的训练价值确实有一定可取性，但学长更为推荐的是一本书：<code>《linux内核完全剖析》</code>，如果你有操作系统方面的研究兴趣的话可以借鉴一下。我认为操作系统的研究价值有二：其一是知识价值，计算机最基础的知识之一。其二如下。</p>\n</blockquote>\n<h4 id=\"为什么是操作系统\"><a href=\"#为什么是操作系统\" class=\"headerlink\" title=\"为什么是操作系统\"></a>为什么是操作系统</h4><blockquote>\n<p>在暑假以及开学的2周里，我把操作系统的知识点回顾了一遍。也看了一部分<code>linux0.11</code>的源码，虽然至今仍未进入其<code>main</code>函数。</p>\n</blockquote>\n<p>为什么是操作系统？我认为操作系统是软件或者计算机硬件之上最重要的一部分。或许你认为当前最火的计算机技术有很多，比如说人工智能、大数据分析、云计算等等。没错，对于人工智能来说，如果你仅停留在如何调用<code>TensorFlow API</code>的层面上，那和普通咸鱼有什么区别。当然如果你能够解析内部实现原理，比如各种神经网路、误差缩减方法实现，而且能够进一步优化或者设计一种新的方法，那才是真正的工程师。将所有的开发技术抽象而言，都是工具。我认为对于这一方面有三个层次：使用工具，改造工具，创造工具。使用工具的人是普通咸鱼，能够改造工具的人是高级咸鱼，能够创造工具的才能称之为工程师。话说回来，为什么是操作系统？</p>\n<p>这只是一个猜想：</p>\n<p>操作系统存在于哪？存在于终端之上————电脑、手机、智能手表等等，常见的也就这几种。但是以后会有什么其他类型的终端？眼睛框上有个终端？加上增强现实，就像科幻电影里那样。项链上有个终端？戒指上有个终端？而且对于不同的终端有不尽相同的操作系统，这就是操作系统与终端的搭配。</p>\n<h4 id=\"操作系统需要什么\"><a href=\"#操作系统需要什么\" class=\"headerlink\" title=\"操作系统需要什么\"></a>操作系统需要什么</h4><blockquote>\n<p>操作系统是干什么的？用于管理硬件的软件。需要的就是如何管理硬件，如何有效的利用好各个硬件。如何更有效率的使用好CPU——CPU管理，有效率的使用好内存——内存管理，有效率的使用好外设——外设管理，更好的让用户操作——文件管理。</p>\n</blockquote>\n<p>计算机至少需要一个处理器、一个存储设备、一个输入设备和一个输出设备。最基础的就是管理这些东西而已。</p>"},{"title":"阈值分割","mathjax":true,"copyright":true,"comment":true,"date":"2019-04-11T07:37:48.000Z","_content":"\n{% note info %}\n图像基于阈值分割的二值化处理。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 前言\n\n{% note primary%}\n\n**全部代码请查看[GitHub](https://github.com/ScarboroughCoral/DIPModule)**\n\n{% endnote %}\n\n\n上次做了图像物体边缘检测，不过由于课程并没有讲完，只做了部分，待总结。这次做的是图像分割中的阈值分割。\n\n阈值分割是一种图像分割方法，用于分割不同物体，比如说前景和背景的分割、图片中关键信息的提取（如下图，来自网络）。本次实验是针对8位灰度图的二值化处理。\n![](https://upload-images.jianshu.io/upload_images/2649969-3af798de1b0b90a1.png?imageMogr2/auto-orient/)\n\n{% note primary no-icon %}\n数字图像处理全部实验博客总结请查看[扶桑树叶之DIP](/tags/DIP/)\n{% endnote %}\n\n## 音乐\n\n古风，善。\n\n<iframe frameborder=\"no\"  marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=32432321&auto=1&height=66\"></iframe>\n\n## 实验内容\n\n> **要求：在直方图上标记出计算出的阈值、生成二值化后的图像**\n\n1. 给定阈值T\n2. 双峰法（极小点阈值法）（选做——就是不做）\n3. 迭代阈值法\n4. Otsu(大津算法)\n\n## 实验过程\n\n### 0x01 先晒原图\n\n- 原图\n\n![](threshold-segmentation/origin.png)\n\n然后转换为8位灰度图，对8位灰度图进行二值化处理。\n\n- 转8位灰度图\n\n![](threshold-segmentation/gray.png)\n\n### 0x02 人为观察直方图给定阈值T进行二值化\n\n最简单了，权当练手。\n方法就是对8位灰度图每个像素进行如下处理：\n- 灰度大于T，灰度设为255\n- 灰度小于T，灰度设为0\n\n***结果如下：***\n\n![](threshold-segmentation/threshold-seed.png)\n\n***相应的直方图，灰色线条为所选的阈值，图像从下向上灰度增加***\n\n![](threshold-segmentation/threshold-histogram-seed.png)\n\n这样看来是有一定问题的，并没有完全将前景和背景分割出来。\n\n### 0x03 使用迭代法进行二值化处理\n{% note warning %}\n该算法适用于背景和对象在图像中占据的面积相近的情况。\n{% endnote %}\n\n\n算法思想：利用平均灰度作为指标，将图片分为低灰度和高灰度两部分，根据两部分平均灰度求原图“新平均灰度”并比较两个平均灰度，如果满足误差条件，即停止迭代。\n\n具体步骤：\n\n1. 选择图像灰度的中值（我选的是平均灰度）作为初始阈值$T_i=T_0$。\n2. 利用阈值Ti把图像分割成两部分区域，$R_1$和$R_2$，并计算其灰度均值$\\mu_1$和$\\mu_2$\n3. 计算新的阈值$T_{i+1}=\\frac{1}{2}\\times(\\mu_1+\\mu_2)$\n4. 重复步骤2、3，直到$T_{i+1}$和$T_i$的值差别小于某个给定值\n\n\n***结果如下：***\n\n![](threshold-segmentation/threshold-iteration.png)\n\n***相应的直方图，灰色线条为所选的阈值，图像从下向上灰度增加***\n\n![](threshold-segmentation/threshold-histogram-iteration.png)\n\n这样看来是有一定问题的，并没有完全将前景和背景分割出来。\n\n### 0x04 otsu大津算法\n\n算法思想：针对二值化，将图片区域分为两类，根据两类的类间方差最大（或者类内方差最小）来进行分割。针对多类分割也是同理。当然我自己还没有完全搞懂为啥是这个情况，数学是硬伤，太菜了。\n\n{% note info %}\n\n**二值化类间方差公式**\n类内方差的最小化与类间方差的最大化是一致的优化目标。\n\n$$\n\\sigma^2=\\omega_1\\omega_2\\times(\\mu_1-\\mu_2)^2\n$$\n\n- $\\mu_1$和$\\mu_2$分别是两个类的平均灰度\n- $\\omega_1$和$\\omega_2$分别是两个类的像素占比，即概率\n\n{% endnote %}\n\n\n\n具体步骤：\n> 采取类间方差最大的方法来进行二值化\n\n1. 初始化类间方差$\\omega^2=0$\n2. 初始化阈值$i=1$\n3. 求得阈值$i$下的类间方差$\\omega^2_i$\n4. 如果$\\omega^2_i\\gg\\omega^2$则替换之\n5. 增加阈值$i=i+1$\n6. 重复3、4、5步\n\n***结果如下：***\n\n![](threshold-segmentation/threshold-otsu.png)\n\n***相应的直方图，灰色线条为所选的阈值，图像从下向上灰度增加***\n\n![](threshold-segmentation/threshold-histogram-otsu.png)\n\n效果较好，这也是为什么当前仍然使用这个算法的原因。\n\n\n## 总结\n\n本次实验对阈值分割有了一定的了解，针对二值化做了实验，使用了迭代和otsu两种算法进行二值化处理，学到了不少，但是其中的原理还是没有搞清楚，希望以后能有机会深入研究一下。\n\n","source":"_posts/threshold-segmentation.md","raw":"---\ntitle: 阈值分割\nmathjax: true\ncopyright: true\ncomment: true\ndate: 2019-04-11 15:37:48\ntags:\n- Computer Graphics\n- DIP\ncategories:\n- Computer Science\n- Computer Graphics\n\n---\n\n{% note info %}\n图像基于阈值分割的二值化处理。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 前言\n\n{% note primary%}\n\n**全部代码请查看[GitHub](https://github.com/ScarboroughCoral/DIPModule)**\n\n{% endnote %}\n\n\n上次做了图像物体边缘检测，不过由于课程并没有讲完，只做了部分，待总结。这次做的是图像分割中的阈值分割。\n\n阈值分割是一种图像分割方法，用于分割不同物体，比如说前景和背景的分割、图片中关键信息的提取（如下图，来自网络）。本次实验是针对8位灰度图的二值化处理。\n![](https://upload-images.jianshu.io/upload_images/2649969-3af798de1b0b90a1.png?imageMogr2/auto-orient/)\n\n{% note primary no-icon %}\n数字图像处理全部实验博客总结请查看[扶桑树叶之DIP](/tags/DIP/)\n{% endnote %}\n\n## 音乐\n\n古风，善。\n\n<iframe frameborder=\"no\"  marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=32432321&auto=1&height=66\"></iframe>\n\n## 实验内容\n\n> **要求：在直方图上标记出计算出的阈值、生成二值化后的图像**\n\n1. 给定阈值T\n2. 双峰法（极小点阈值法）（选做——就是不做）\n3. 迭代阈值法\n4. Otsu(大津算法)\n\n## 实验过程\n\n### 0x01 先晒原图\n\n- 原图\n\n![](threshold-segmentation/origin.png)\n\n然后转换为8位灰度图，对8位灰度图进行二值化处理。\n\n- 转8位灰度图\n\n![](threshold-segmentation/gray.png)\n\n### 0x02 人为观察直方图给定阈值T进行二值化\n\n最简单了，权当练手。\n方法就是对8位灰度图每个像素进行如下处理：\n- 灰度大于T，灰度设为255\n- 灰度小于T，灰度设为0\n\n***结果如下：***\n\n![](threshold-segmentation/threshold-seed.png)\n\n***相应的直方图，灰色线条为所选的阈值，图像从下向上灰度增加***\n\n![](threshold-segmentation/threshold-histogram-seed.png)\n\n这样看来是有一定问题的，并没有完全将前景和背景分割出来。\n\n### 0x03 使用迭代法进行二值化处理\n{% note warning %}\n该算法适用于背景和对象在图像中占据的面积相近的情况。\n{% endnote %}\n\n\n算法思想：利用平均灰度作为指标，将图片分为低灰度和高灰度两部分，根据两部分平均灰度求原图“新平均灰度”并比较两个平均灰度，如果满足误差条件，即停止迭代。\n\n具体步骤：\n\n1. 选择图像灰度的中值（我选的是平均灰度）作为初始阈值$T_i=T_0$。\n2. 利用阈值Ti把图像分割成两部分区域，$R_1$和$R_2$，并计算其灰度均值$\\mu_1$和$\\mu_2$\n3. 计算新的阈值$T_{i+1}=\\frac{1}{2}\\times(\\mu_1+\\mu_2)$\n4. 重复步骤2、3，直到$T_{i+1}$和$T_i$的值差别小于某个给定值\n\n\n***结果如下：***\n\n![](threshold-segmentation/threshold-iteration.png)\n\n***相应的直方图，灰色线条为所选的阈值，图像从下向上灰度增加***\n\n![](threshold-segmentation/threshold-histogram-iteration.png)\n\n这样看来是有一定问题的，并没有完全将前景和背景分割出来。\n\n### 0x04 otsu大津算法\n\n算法思想：针对二值化，将图片区域分为两类，根据两类的类间方差最大（或者类内方差最小）来进行分割。针对多类分割也是同理。当然我自己还没有完全搞懂为啥是这个情况，数学是硬伤，太菜了。\n\n{% note info %}\n\n**二值化类间方差公式**\n类内方差的最小化与类间方差的最大化是一致的优化目标。\n\n$$\n\\sigma^2=\\omega_1\\omega_2\\times(\\mu_1-\\mu_2)^2\n$$\n\n- $\\mu_1$和$\\mu_2$分别是两个类的平均灰度\n- $\\omega_1$和$\\omega_2$分别是两个类的像素占比，即概率\n\n{% endnote %}\n\n\n\n具体步骤：\n> 采取类间方差最大的方法来进行二值化\n\n1. 初始化类间方差$\\omega^2=0$\n2. 初始化阈值$i=1$\n3. 求得阈值$i$下的类间方差$\\omega^2_i$\n4. 如果$\\omega^2_i\\gg\\omega^2$则替换之\n5. 增加阈值$i=i+1$\n6. 重复3、4、5步\n\n***结果如下：***\n\n![](threshold-segmentation/threshold-otsu.png)\n\n***相应的直方图，灰色线条为所选的阈值，图像从下向上灰度增加***\n\n![](threshold-segmentation/threshold-histogram-otsu.png)\n\n效果较好，这也是为什么当前仍然使用这个算法的原因。\n\n\n## 总结\n\n本次实验对阈值分割有了一定的了解，针对二值化做了实验，使用了迭代和otsu两种算法进行二值化处理，学到了不少，但是其中的原理还是没有搞清楚，希望以后能有机会深入研究一下。\n\n","slug":"threshold-segmentation","published":1,"updated":"2022-01-06T04:09:12.491Z","_id":"cksq5v7n4004rn0pu6xlb8squ","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note info\"><p>图像基于阈值分割的二值化处理。</p>\n</div>\n\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><div class=\"note primary\"><p><strong>全部代码请查看<a href=\"https://github.com/ScarboroughCoral/DIPModule\">GitHub</a></strong></p>\n</div>\n\n\n<p>上次做了图像物体边缘检测，不过由于课程并没有讲完，只做了部分，待总结。这次做的是图像分割中的阈值分割。</p>\n<p>阈值分割是一种图像分割方法，用于分割不同物体，比如说前景和背景的分割、图片中关键信息的提取（如下图，来自网络）。本次实验是针对8位灰度图的二值化处理。<br><img data-src=\"https://upload-images.jianshu.io/upload_images/2649969-3af798de1b0b90a1.png?imageMogr2/auto-orient/\"></p>\n<div class=\"note primary no-icon\"><p>数字图像处理全部实验博客总结请查看<a href=\"/tags/DIP/\">扶桑树叶之DIP</a></p>\n</div>\n\n<h2 id=\"音乐\"><a href=\"#音乐\" class=\"headerlink\" title=\"音乐\"></a>音乐</h2><p>古风，善。</p>\n<iframe frameborder=\"no\"  marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=32432321&auto=1&height=66\"></iframe>\n\n<h2 id=\"实验内容\"><a href=\"#实验内容\" class=\"headerlink\" title=\"实验内容\"></a>实验内容</h2><blockquote>\n<p><strong>要求：在直方图上标记出计算出的阈值、生成二值化后的图像</strong></p>\n</blockquote>\n<ol>\n<li>给定阈值T</li>\n<li>双峰法（极小点阈值法）（选做——就是不做）</li>\n<li>迭代阈值法</li>\n<li>Otsu(大津算法)</li>\n</ol>\n<h2 id=\"实验过程\"><a href=\"#实验过程\" class=\"headerlink\" title=\"实验过程\"></a>实验过程</h2><h3 id=\"0x01-先晒原图\"><a href=\"#0x01-先晒原图\" class=\"headerlink\" title=\"0x01 先晒原图\"></a>0x01 先晒原图</h3><ul>\n<li>原图</li>\n</ul>\n<p><img data-src=\"threshold-segmentation/origin.png\"></p>\n<p>然后转换为8位灰度图，对8位灰度图进行二值化处理。</p>\n<ul>\n<li>转8位灰度图</li>\n</ul>\n<p><img data-src=\"threshold-segmentation/gray.png\"></p>\n<h3 id=\"0x02-人为观察直方图给定阈值T进行二值化\"><a href=\"#0x02-人为观察直方图给定阈值T进行二值化\" class=\"headerlink\" title=\"0x02 人为观察直方图给定阈值T进行二值化\"></a>0x02 人为观察直方图给定阈值T进行二值化</h3><p>最简单了，权当练手。<br>方法就是对8位灰度图每个像素进行如下处理：</p>\n<ul>\n<li>灰度大于T，灰度设为255</li>\n<li>灰度小于T，灰度设为0</li>\n</ul>\n<p><em><strong>结果如下：</strong></em></p>\n<p><img data-src=\"threshold-segmentation/threshold-seed.png\"></p>\n<p><em><strong>相应的直方图，灰色线条为所选的阈值，图像从下向上灰度增加</strong></em></p>\n<p><img data-src=\"threshold-segmentation/threshold-histogram-seed.png\"></p>\n<p>这样看来是有一定问题的，并没有完全将前景和背景分割出来。</p>\n<h3 id=\"0x03-使用迭代法进行二值化处理\"><a href=\"#0x03-使用迭代法进行二值化处理\" class=\"headerlink\" title=\"0x03 使用迭代法进行二值化处理\"></a>0x03 使用迭代法进行二值化处理</h3><div class=\"note warning\"><p>该算法适用于背景和对象在图像中占据的面积相近的情况。</p>\n</div>\n\n\n<p>算法思想：利用平均灰度作为指标，将图片分为低灰度和高灰度两部分，根据两部分平均灰度求原图“新平均灰度”并比较两个平均灰度，如果满足误差条件，即停止迭代。</p>\n<p>具体步骤：</p>\n<ol>\n<li>选择图像灰度的中值（我选的是平均灰度）作为初始阈值$T_i=T_0$。</li>\n<li>利用阈值Ti把图像分割成两部分区域，$R_1$和$R_2$，并计算其灰度均值$\\mu_1$和$\\mu_2$</li>\n<li>计算新的阈值$T_{i+1}=\\frac{1}{2}\\times(\\mu_1+\\mu_2)$</li>\n<li>重复步骤2、3，直到$T_{i+1}$和$T_i$的值差别小于某个给定值</li>\n</ol>\n<p><em><strong>结果如下：</strong></em></p>\n<p><img data-src=\"threshold-segmentation/threshold-iteration.png\"></p>\n<p><em><strong>相应的直方图，灰色线条为所选的阈值，图像从下向上灰度增加</strong></em></p>\n<p><img data-src=\"threshold-segmentation/threshold-histogram-iteration.png\"></p>\n<p>这样看来是有一定问题的，并没有完全将前景和背景分割出来。</p>\n<h3 id=\"0x04-otsu大津算法\"><a href=\"#0x04-otsu大津算法\" class=\"headerlink\" title=\"0x04 otsu大津算法\"></a>0x04 otsu大津算法</h3><p>算法思想：针对二值化，将图片区域分为两类，根据两类的类间方差最大（或者类内方差最小）来进行分割。针对多类分割也是同理。当然我自己还没有完全搞懂为啥是这个情况，数学是硬伤，太菜了。</p>\n<div class=\"note info\"><p><strong>二值化类间方差公式</strong><br>类内方差的最小化与类间方差的最大化是一致的优化目标。</p>\n<p>$$<br>\\sigma^2=\\omega_1\\omega_2\\times(\\mu_1-\\mu_2)^2<br>$$</p>\n<ul>\n<li>$\\mu_1$和$\\mu_2$分别是两个类的平均灰度</li>\n<li>$\\omega_1$和$\\omega_2$分别是两个类的像素占比，即概率</li>\n</ul>\n</div>\n\n\n\n<p>具体步骤：</p>\n<blockquote>\n<p>采取类间方差最大的方法来进行二值化</p>\n</blockquote>\n<ol>\n<li>初始化类间方差$\\omega^2=0$</li>\n<li>初始化阈值$i=1$</li>\n<li>求得阈值$i$下的类间方差$\\omega^2_i$</li>\n<li>如果$\\omega^2_i\\gg\\omega^2$则替换之</li>\n<li>增加阈值$i=i+1$</li>\n<li>重复3、4、5步</li>\n</ol>\n<p><em><strong>结果如下：</strong></em></p>\n<p><img data-src=\"threshold-segmentation/threshold-otsu.png\"></p>\n<p><em><strong>相应的直方图，灰色线条为所选的阈值，图像从下向上灰度增加</strong></em></p>\n<p><img data-src=\"threshold-segmentation/threshold-histogram-otsu.png\"></p>\n<p>效果较好，这也是为什么当前仍然使用这个算法的原因。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本次实验对阈值分割有了一定的了解，针对二值化做了实验，使用了迭代和otsu两种算法进行二值化处理，学到了不少，但是其中的原理还是没有搞清楚，希望以后能有机会深入研究一下。</p>\n","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>图像基于阈值分割的二值化处理。</p>\n</div>","more":"<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><div class=\"note primary\"><p><strong>全部代码请查看<a href=\"https://github.com/ScarboroughCoral/DIPModule\">GitHub</a></strong></p>\n</div>\n\n\n<p>上次做了图像物体边缘检测，不过由于课程并没有讲完，只做了部分，待总结。这次做的是图像分割中的阈值分割。</p>\n<p>阈值分割是一种图像分割方法，用于分割不同物体，比如说前景和背景的分割、图片中关键信息的提取（如下图，来自网络）。本次实验是针对8位灰度图的二值化处理。<br><img data-src=\"https://upload-images.jianshu.io/upload_images/2649969-3af798de1b0b90a1.png?imageMogr2/auto-orient/\"></p>\n<div class=\"note primary no-icon\"><p>数字图像处理全部实验博客总结请查看<a href=\"/tags/DIP/\">扶桑树叶之DIP</a></p>\n</div>\n\n<h2 id=\"音乐\"><a href=\"#音乐\" class=\"headerlink\" title=\"音乐\"></a>音乐</h2><p>古风，善。</p>\n<iframe frameborder=\"no\"  marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=32432321&auto=1&height=66\"></iframe>\n\n<h2 id=\"实验内容\"><a href=\"#实验内容\" class=\"headerlink\" title=\"实验内容\"></a>实验内容</h2><blockquote>\n<p><strong>要求：在直方图上标记出计算出的阈值、生成二值化后的图像</strong></p>\n</blockquote>\n<ol>\n<li>给定阈值T</li>\n<li>双峰法（极小点阈值法）（选做——就是不做）</li>\n<li>迭代阈值法</li>\n<li>Otsu(大津算法)</li>\n</ol>\n<h2 id=\"实验过程\"><a href=\"#实验过程\" class=\"headerlink\" title=\"实验过程\"></a>实验过程</h2><h3 id=\"0x01-先晒原图\"><a href=\"#0x01-先晒原图\" class=\"headerlink\" title=\"0x01 先晒原图\"></a>0x01 先晒原图</h3><ul>\n<li>原图</li>\n</ul>\n<p><img data-src=\"threshold-segmentation/origin.png\"></p>\n<p>然后转换为8位灰度图，对8位灰度图进行二值化处理。</p>\n<ul>\n<li>转8位灰度图</li>\n</ul>\n<p><img data-src=\"threshold-segmentation/gray.png\"></p>\n<h3 id=\"0x02-人为观察直方图给定阈值T进行二值化\"><a href=\"#0x02-人为观察直方图给定阈值T进行二值化\" class=\"headerlink\" title=\"0x02 人为观察直方图给定阈值T进行二值化\"></a>0x02 人为观察直方图给定阈值T进行二值化</h3><p>最简单了，权当练手。<br>方法就是对8位灰度图每个像素进行如下处理：</p>\n<ul>\n<li>灰度大于T，灰度设为255</li>\n<li>灰度小于T，灰度设为0</li>\n</ul>\n<p><em><strong>结果如下：</strong></em></p>\n<p><img data-src=\"threshold-segmentation/threshold-seed.png\"></p>\n<p><em><strong>相应的直方图，灰色线条为所选的阈值，图像从下向上灰度增加</strong></em></p>\n<p><img data-src=\"threshold-segmentation/threshold-histogram-seed.png\"></p>\n<p>这样看来是有一定问题的，并没有完全将前景和背景分割出来。</p>\n<h3 id=\"0x03-使用迭代法进行二值化处理\"><a href=\"#0x03-使用迭代法进行二值化处理\" class=\"headerlink\" title=\"0x03 使用迭代法进行二值化处理\"></a>0x03 使用迭代法进行二值化处理</h3><div class=\"note warning\"><p>该算法适用于背景和对象在图像中占据的面积相近的情况。</p>\n</div>\n\n\n<p>算法思想：利用平均灰度作为指标，将图片分为低灰度和高灰度两部分，根据两部分平均灰度求原图“新平均灰度”并比较两个平均灰度，如果满足误差条件，即停止迭代。</p>\n<p>具体步骤：</p>\n<ol>\n<li>选择图像灰度的中值（我选的是平均灰度）作为初始阈值$T_i=T_0$。</li>\n<li>利用阈值Ti把图像分割成两部分区域，$R_1$和$R_2$，并计算其灰度均值$\\mu_1$和$\\mu_2$</li>\n<li>计算新的阈值$T_{i+1}=\\frac{1}{2}\\times(\\mu_1+\\mu_2)$</li>\n<li>重复步骤2、3，直到$T_{i+1}$和$T_i$的值差别小于某个给定值</li>\n</ol>\n<p><em><strong>结果如下：</strong></em></p>\n<p><img data-src=\"threshold-segmentation/threshold-iteration.png\"></p>\n<p><em><strong>相应的直方图，灰色线条为所选的阈值，图像从下向上灰度增加</strong></em></p>\n<p><img data-src=\"threshold-segmentation/threshold-histogram-iteration.png\"></p>\n<p>这样看来是有一定问题的，并没有完全将前景和背景分割出来。</p>\n<h3 id=\"0x04-otsu大津算法\"><a href=\"#0x04-otsu大津算法\" class=\"headerlink\" title=\"0x04 otsu大津算法\"></a>0x04 otsu大津算法</h3><p>算法思想：针对二值化，将图片区域分为两类，根据两类的类间方差最大（或者类内方差最小）来进行分割。针对多类分割也是同理。当然我自己还没有完全搞懂为啥是这个情况，数学是硬伤，太菜了。</p>\n<div class=\"note info\"><p><strong>二值化类间方差公式</strong><br>类内方差的最小化与类间方差的最大化是一致的优化目标。</p>\n<p>$$<br>\\sigma^2=\\omega_1\\omega_2\\times(\\mu_1-\\mu_2)^2<br>$$</p>\n<ul>\n<li>$\\mu_1$和$\\mu_2$分别是两个类的平均灰度</li>\n<li>$\\omega_1$和$\\omega_2$分别是两个类的像素占比，即概率</li>\n</ul>\n</div>\n\n\n\n<p>具体步骤：</p>\n<blockquote>\n<p>采取类间方差最大的方法来进行二值化</p>\n</blockquote>\n<ol>\n<li>初始化类间方差$\\omega^2=0$</li>\n<li>初始化阈值$i=1$</li>\n<li>求得阈值$i$下的类间方差$\\omega^2_i$</li>\n<li>如果$\\omega^2_i\\gg\\omega^2$则替换之</li>\n<li>增加阈值$i=i+1$</li>\n<li>重复3、4、5步</li>\n</ol>\n<p><em><strong>结果如下：</strong></em></p>\n<p><img data-src=\"threshold-segmentation/threshold-otsu.png\"></p>\n<p><em><strong>相应的直方图，灰色线条为所选的阈值，图像从下向上灰度增加</strong></em></p>\n<p><img data-src=\"threshold-segmentation/threshold-histogram-otsu.png\"></p>\n<p>效果较好，这也是为什么当前仍然使用这个算法的原因。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本次实验对阈值分割有了一定的了解，针对二值化做了实验，使用了迭代和otsu两种算法进行二值化处理，学到了不少，但是其中的原理还是没有搞清楚，希望以后能有机会深入研究一下。</p>"},{"title":"web前端入门建议","date":"2018-01-14T02:46:28.000Z","_content":"\n{% note default %}\n基础决定上层建筑。\n{% endnote %}\n\n<!-- more -->\n\n### 欢迎\n> 首先预祝学弟学妹们新年快乐！欢迎各位准备参与web前端的学习，没错，这篇文章适合于准备学习web前端但又不知道如何下手学习哪些知识的你们。\n\n### web前端是什么\n\n> 首先你要了解前端是什么，“所见即为前端”，前端就是给用户看的。当你打开一个手机app，打开一个浏览器进入一个网页，或者打开一个游戏，你看到的便是前端。当然这些前端归根结底都是同样的架构，不过是不同的实现方式而已。<br>\n\n> web前端就是你打开浏览器进入一个网页所看到的，比如你现在正在看的这篇博客，比如你打开的bilibili，斗鱼直播等等<br>\n\n![](web-study/web前端.png)\n\n> 可能你会混淆web前端和ui设计这两个概念。web前端工程师是根据ui设计师设计的原型来编写代码形成网页的，当然也有一些人同时做这两个工作。\n\n### web前端需要学些什么\n> web前端需要学些什么，看这张图就知道了，这便是咱们web前端的本命法宝，其他的不管是什么框架还是什么工具库，都离不开这三个家伙（所以你一上来不必马上研究框架，基础打牢一切都好说，而如果基础不打牢固框架的学习会相对比较吃力，孰轻孰重显而易见）。<br>\n\n![布局](web-study/web-study.jpg)\n\n> 你可以打开一个网页，[Web前端工程师学习路径](https://www.imooc.com/course/programdetail/pid/32)，**这是一个神奇的网站，慕课网——程序员的梦工厂，你会从这里收获很多**。\n\n---\n\n> 当你真正接触项目以后，你会发现这些软件项目（或者直接就拿web前端来说）和其他类项目（建筑行业，汽车行业）都有许多相同之处。<br>\n 就拿建筑行业盖房子为例吧，需要对房子的布局进行设计（哪儿是厨房，哪儿是客厅，占多大区域），然后对样式进行设计（墙漆刷什么颜色的，门要装什么样的），最后在设计一下细微的东西（窗帘是横着拉还是竖着拉，门是双侧门还是单侧门）。<br>\n 而web前端也类似，需要对各个模块布局进行设计（多大，位置在哪），然后样式设计（需要什么颜色，字体大小多少，需要什么背景图片），然后是脚本控制（点击按钮会触发什么事件，弹出窗口？跳转页面？发生动画？）<br>\n![](web-study/布局.png)\n\n>  啰啰嗦嗦说这么多，这和大法宝HTML，CSS，Javascript有什么关系呢？先看看这三个东西的全称是什么。HTML（**HyperText Markup Language，超级文本标记语言**），CSS（**Cascading Style Sheets，层叠样式表**），Javascript（JavaScript一种**直译式脚本语言**，是一种动态类型、弱类型、基于原型的语言）。然后你应该差不多明白了，CSS是控制布局样式的，javascript是控制脚本的，然后HTML是控制结构的（哪个是按钮，哪个是文本框）。再直接一点，CSS是控制HTML结构的样式，Javascript是控制HTML的脚本。\n\n### 讲一下我平时的开发流程\n- 从美工那拿到原型图和切图（切图上标注的字体大小颜色等等）\n- 根据切图进行界面代码的编写（包括布局样式事件等等）\n- 对接接口（通过网络向后端请求资源，你先不必深入了解后端是干什么的，以后你就会慢慢清楚，你只需要知道你需要的数据时后端提供的。这里需要javascript控制ajax进行网络请求。）\n- 测试修改\n\n### web前端的开发工具\n>  你可能认为txt就可以编写，但高效开发是必不可少的。人类之所以是高级动物是因为有更高级的大脑，能够使用合理的工具。在这里推荐几个编辑器：vs code（这是我现在在用的，开源的）、sublime text（虽然收费，但可破解，也很好用）、atom（有一些不可思议的插件，像打游戏一般敲代码combo）。**合理使用这几个编辑器里的插件会大大提高开发效率！！！**\n\n- VS Code\n[官网](https://code.visualstudio.com/)\n\n![](web-study/edit.png)\n\n- sublime text\n[官网](https://www.sublimetext.com)\n\n![](web-study/sublime.png)\n\n- atom\n[官网](https://atom.io/)\n\n![](web-study/atom.png)\n\n### 寒假祝福语\n>  祝各位学弟学妹新年快乐！假期是赶英超美鹤立鸡群青出于蓝胜于蓝长江后浪推前浪的好时机，假期少不了娱乐游玩，也少不了学习，希望各位能够在寒假放松的同时好好学习，过一个充实的寒假，让这个寒假在你的人生路上变得有意义。最后再说一句，**这个[网站](https://www.imooc.com/)对你很重要**。\n","source":"_posts/web-study.md","raw":"---\ntitle: web前端入门建议\ndate: 2018-01-14 10:46:28\n\ntags:\n- Front-End Development\ncategories:\n- Front-End Development\n---\n\n{% note default %}\n基础决定上层建筑。\n{% endnote %}\n\n<!-- more -->\n\n### 欢迎\n> 首先预祝学弟学妹们新年快乐！欢迎各位准备参与web前端的学习，没错，这篇文章适合于准备学习web前端但又不知道如何下手学习哪些知识的你们。\n\n### web前端是什么\n\n> 首先你要了解前端是什么，“所见即为前端”，前端就是给用户看的。当你打开一个手机app，打开一个浏览器进入一个网页，或者打开一个游戏，你看到的便是前端。当然这些前端归根结底都是同样的架构，不过是不同的实现方式而已。<br>\n\n> web前端就是你打开浏览器进入一个网页所看到的，比如你现在正在看的这篇博客，比如你打开的bilibili，斗鱼直播等等<br>\n\n![](web-study/web前端.png)\n\n> 可能你会混淆web前端和ui设计这两个概念。web前端工程师是根据ui设计师设计的原型来编写代码形成网页的，当然也有一些人同时做这两个工作。\n\n### web前端需要学些什么\n> web前端需要学些什么，看这张图就知道了，这便是咱们web前端的本命法宝，其他的不管是什么框架还是什么工具库，都离不开这三个家伙（所以你一上来不必马上研究框架，基础打牢一切都好说，而如果基础不打牢固框架的学习会相对比较吃力，孰轻孰重显而易见）。<br>\n\n![布局](web-study/web-study.jpg)\n\n> 你可以打开一个网页，[Web前端工程师学习路径](https://www.imooc.com/course/programdetail/pid/32)，**这是一个神奇的网站，慕课网——程序员的梦工厂，你会从这里收获很多**。\n\n---\n\n> 当你真正接触项目以后，你会发现这些软件项目（或者直接就拿web前端来说）和其他类项目（建筑行业，汽车行业）都有许多相同之处。<br>\n 就拿建筑行业盖房子为例吧，需要对房子的布局进行设计（哪儿是厨房，哪儿是客厅，占多大区域），然后对样式进行设计（墙漆刷什么颜色的，门要装什么样的），最后在设计一下细微的东西（窗帘是横着拉还是竖着拉，门是双侧门还是单侧门）。<br>\n 而web前端也类似，需要对各个模块布局进行设计（多大，位置在哪），然后样式设计（需要什么颜色，字体大小多少，需要什么背景图片），然后是脚本控制（点击按钮会触发什么事件，弹出窗口？跳转页面？发生动画？）<br>\n![](web-study/布局.png)\n\n>  啰啰嗦嗦说这么多，这和大法宝HTML，CSS，Javascript有什么关系呢？先看看这三个东西的全称是什么。HTML（**HyperText Markup Language，超级文本标记语言**），CSS（**Cascading Style Sheets，层叠样式表**），Javascript（JavaScript一种**直译式脚本语言**，是一种动态类型、弱类型、基于原型的语言）。然后你应该差不多明白了，CSS是控制布局样式的，javascript是控制脚本的，然后HTML是控制结构的（哪个是按钮，哪个是文本框）。再直接一点，CSS是控制HTML结构的样式，Javascript是控制HTML的脚本。\n\n### 讲一下我平时的开发流程\n- 从美工那拿到原型图和切图（切图上标注的字体大小颜色等等）\n- 根据切图进行界面代码的编写（包括布局样式事件等等）\n- 对接接口（通过网络向后端请求资源，你先不必深入了解后端是干什么的，以后你就会慢慢清楚，你只需要知道你需要的数据时后端提供的。这里需要javascript控制ajax进行网络请求。）\n- 测试修改\n\n### web前端的开发工具\n>  你可能认为txt就可以编写，但高效开发是必不可少的。人类之所以是高级动物是因为有更高级的大脑，能够使用合理的工具。在这里推荐几个编辑器：vs code（这是我现在在用的，开源的）、sublime text（虽然收费，但可破解，也很好用）、atom（有一些不可思议的插件，像打游戏一般敲代码combo）。**合理使用这几个编辑器里的插件会大大提高开发效率！！！**\n\n- VS Code\n[官网](https://code.visualstudio.com/)\n\n![](web-study/edit.png)\n\n- sublime text\n[官网](https://www.sublimetext.com)\n\n![](web-study/sublime.png)\n\n- atom\n[官网](https://atom.io/)\n\n![](web-study/atom.png)\n\n### 寒假祝福语\n>  祝各位学弟学妹新年快乐！假期是赶英超美鹤立鸡群青出于蓝胜于蓝长江后浪推前浪的好时机，假期少不了娱乐游玩，也少不了学习，希望各位能够在寒假放松的同时好好学习，过一个充实的寒假，让这个寒假在你的人生路上变得有意义。最后再说一句，**这个[网站](https://www.imooc.com/)对你很重要**。\n","slug":"web-study","published":1,"updated":"2022-01-06T04:09:12.542Z","_id":"cksq5v7o300azn0pu6ei39t8a","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note default\"><p>基础决定上层建筑。</p>\n</div>\n\n<span id=\"more\"></span>\n\n<h3 id=\"欢迎\"><a href=\"#欢迎\" class=\"headerlink\" title=\"欢迎\"></a>欢迎</h3><blockquote>\n<p>首先预祝学弟学妹们新年快乐！欢迎各位准备参与web前端的学习，没错，这篇文章适合于准备学习web前端但又不知道如何下手学习哪些知识的你们。</p>\n</blockquote>\n<h3 id=\"web前端是什么\"><a href=\"#web前端是什么\" class=\"headerlink\" title=\"web前端是什么\"></a>web前端是什么</h3><blockquote>\n<p>首先你要了解前端是什么，“所见即为前端”，前端就是给用户看的。当你打开一个手机app，打开一个浏览器进入一个网页，或者打开一个游戏，你看到的便是前端。当然这些前端归根结底都是同样的架构，不过是不同的实现方式而已。<br></p>\n</blockquote>\n<blockquote>\n<p>web前端就是你打开浏览器进入一个网页所看到的，比如你现在正在看的这篇博客，比如你打开的bilibili，斗鱼直播等等<br></p>\n</blockquote>\n<p><img data-src=\"web-study/web%E5%89%8D%E7%AB%AF.png\"></p>\n<blockquote>\n<p>可能你会混淆web前端和ui设计这两个概念。web前端工程师是根据ui设计师设计的原型来编写代码形成网页的，当然也有一些人同时做这两个工作。</p>\n</blockquote>\n<h3 id=\"web前端需要学些什么\"><a href=\"#web前端需要学些什么\" class=\"headerlink\" title=\"web前端需要学些什么\"></a>web前端需要学些什么</h3><blockquote>\n<p>web前端需要学些什么，看这张图就知道了，这便是咱们web前端的本命法宝，其他的不管是什么框架还是什么工具库，都离不开这三个家伙（所以你一上来不必马上研究框架，基础打牢一切都好说，而如果基础不打牢固框架的学习会相对比较吃力，孰轻孰重显而易见）。<br></p>\n</blockquote>\n<p><img data-src=\"web-study/web-study.jpg\" alt=\"布局\"></p>\n<blockquote>\n<p>你可以打开一个网页，<a href=\"https://www.imooc.com/course/programdetail/pid/32\">Web前端工程师学习路径</a>，<strong>这是一个神奇的网站，慕课网——程序员的梦工厂，你会从这里收获很多</strong>。</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>当你真正接触项目以后，你会发现这些软件项目（或者直接就拿web前端来说）和其他类项目（建筑行业，汽车行业）都有许多相同之处。<br><br> 就拿建筑行业盖房子为例吧，需要对房子的布局进行设计（哪儿是厨房，哪儿是客厅，占多大区域），然后对样式进行设计（墙漆刷什么颜色的，门要装什么样的），最后在设计一下细微的东西（窗帘是横着拉还是竖着拉，门是双侧门还是单侧门）。<br><br> 而web前端也类似，需要对各个模块布局进行设计（多大，位置在哪），然后样式设计（需要什么颜色，字体大小多少，需要什么背景图片），然后是脚本控制（点击按钮会触发什么事件，弹出窗口？跳转页面？发生动画？）<br><br><img data-src=\"web-study/%E5%B8%83%E5%B1%80.png\"></p>\n</blockquote>\n<blockquote>\n<p> 啰啰嗦嗦说这么多，这和大法宝HTML，CSS，Javascript有什么关系呢？先看看这三个东西的全称是什么。HTML（<strong>HyperText Markup Language，超级文本标记语言</strong>），CSS（<strong>Cascading Style Sheets，层叠样式表</strong>），Javascript（JavaScript一种<strong>直译式脚本语言</strong>，是一种动态类型、弱类型、基于原型的语言）。然后你应该差不多明白了，CSS是控制布局样式的，javascript是控制脚本的，然后HTML是控制结构的（哪个是按钮，哪个是文本框）。再直接一点，CSS是控制HTML结构的样式，Javascript是控制HTML的脚本。</p>\n</blockquote>\n<h3 id=\"讲一下我平时的开发流程\"><a href=\"#讲一下我平时的开发流程\" class=\"headerlink\" title=\"讲一下我平时的开发流程\"></a>讲一下我平时的开发流程</h3><ul>\n<li>从美工那拿到原型图和切图（切图上标注的字体大小颜色等等）</li>\n<li>根据切图进行界面代码的编写（包括布局样式事件等等）</li>\n<li>对接接口（通过网络向后端请求资源，你先不必深入了解后端是干什么的，以后你就会慢慢清楚，你只需要知道你需要的数据时后端提供的。这里需要javascript控制ajax进行网络请求。）</li>\n<li>测试修改</li>\n</ul>\n<h3 id=\"web前端的开发工具\"><a href=\"#web前端的开发工具\" class=\"headerlink\" title=\"web前端的开发工具\"></a>web前端的开发工具</h3><blockquote>\n<p> 你可能认为txt就可以编写，但高效开发是必不可少的。人类之所以是高级动物是因为有更高级的大脑，能够使用合理的工具。在这里推荐几个编辑器：vs code（这是我现在在用的，开源的）、sublime text（虽然收费，但可破解，也很好用）、atom（有一些不可思议的插件，像打游戏一般敲代码combo）。<strong>合理使用这几个编辑器里的插件会大大提高开发效率！！！</strong></p>\n</blockquote>\n<ul>\n<li>VS Code<br><a href=\"https://code.visualstudio.com/\">官网</a></li>\n</ul>\n<p><img data-src=\"web-study/edit.png\"></p>\n<ul>\n<li>sublime text<br><a href=\"https://www.sublimetext.com/\">官网</a></li>\n</ul>\n<p><img data-src=\"web-study/sublime.png\"></p>\n<ul>\n<li>atom<br><a href=\"https://atom.io/\">官网</a></li>\n</ul>\n<p><img data-src=\"web-study/atom.png\"></p>\n<h3 id=\"寒假祝福语\"><a href=\"#寒假祝福语\" class=\"headerlink\" title=\"寒假祝福语\"></a>寒假祝福语</h3><blockquote>\n<p> 祝各位学弟学妹新年快乐！假期是赶英超美鹤立鸡群青出于蓝胜于蓝长江后浪推前浪的好时机，假期少不了娱乐游玩，也少不了学习，希望各位能够在寒假放松的同时好好学习，过一个充实的寒假，让这个寒假在你的人生路上变得有意义。最后再说一句，<strong>这个<a href=\"https://www.imooc.com/\">网站</a>对你很重要</strong>。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<div class=\"note default\"><p>基础决定上层建筑。</p>\n</div>","more":"<h3 id=\"欢迎\"><a href=\"#欢迎\" class=\"headerlink\" title=\"欢迎\"></a>欢迎</h3><blockquote>\n<p>首先预祝学弟学妹们新年快乐！欢迎各位准备参与web前端的学习，没错，这篇文章适合于准备学习web前端但又不知道如何下手学习哪些知识的你们。</p>\n</blockquote>\n<h3 id=\"web前端是什么\"><a href=\"#web前端是什么\" class=\"headerlink\" title=\"web前端是什么\"></a>web前端是什么</h3><blockquote>\n<p>首先你要了解前端是什么，“所见即为前端”，前端就是给用户看的。当你打开一个手机app，打开一个浏览器进入一个网页，或者打开一个游戏，你看到的便是前端。当然这些前端归根结底都是同样的架构，不过是不同的实现方式而已。<br></p>\n</blockquote>\n<blockquote>\n<p>web前端就是你打开浏览器进入一个网页所看到的，比如你现在正在看的这篇博客，比如你打开的bilibili，斗鱼直播等等<br></p>\n</blockquote>\n<p><img data-src=\"web-study/web%E5%89%8D%E7%AB%AF.png\"></p>\n<blockquote>\n<p>可能你会混淆web前端和ui设计这两个概念。web前端工程师是根据ui设计师设计的原型来编写代码形成网页的，当然也有一些人同时做这两个工作。</p>\n</blockquote>\n<h3 id=\"web前端需要学些什么\"><a href=\"#web前端需要学些什么\" class=\"headerlink\" title=\"web前端需要学些什么\"></a>web前端需要学些什么</h3><blockquote>\n<p>web前端需要学些什么，看这张图就知道了，这便是咱们web前端的本命法宝，其他的不管是什么框架还是什么工具库，都离不开这三个家伙（所以你一上来不必马上研究框架，基础打牢一切都好说，而如果基础不打牢固框架的学习会相对比较吃力，孰轻孰重显而易见）。<br></p>\n</blockquote>\n<p><img data-src=\"web-study/web-study.jpg\" alt=\"布局\"></p>\n<blockquote>\n<p>你可以打开一个网页，<a href=\"https://www.imooc.com/course/programdetail/pid/32\">Web前端工程师学习路径</a>，<strong>这是一个神奇的网站，慕课网——程序员的梦工厂，你会从这里收获很多</strong>。</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>当你真正接触项目以后，你会发现这些软件项目（或者直接就拿web前端来说）和其他类项目（建筑行业，汽车行业）都有许多相同之处。<br><br> 就拿建筑行业盖房子为例吧，需要对房子的布局进行设计（哪儿是厨房，哪儿是客厅，占多大区域），然后对样式进行设计（墙漆刷什么颜色的，门要装什么样的），最后在设计一下细微的东西（窗帘是横着拉还是竖着拉，门是双侧门还是单侧门）。<br><br> 而web前端也类似，需要对各个模块布局进行设计（多大，位置在哪），然后样式设计（需要什么颜色，字体大小多少，需要什么背景图片），然后是脚本控制（点击按钮会触发什么事件，弹出窗口？跳转页面？发生动画？）<br><br><img data-src=\"web-study/%E5%B8%83%E5%B1%80.png\"></p>\n</blockquote>\n<blockquote>\n<p> 啰啰嗦嗦说这么多，这和大法宝HTML，CSS，Javascript有什么关系呢？先看看这三个东西的全称是什么。HTML（<strong>HyperText Markup Language，超级文本标记语言</strong>），CSS（<strong>Cascading Style Sheets，层叠样式表</strong>），Javascript（JavaScript一种<strong>直译式脚本语言</strong>，是一种动态类型、弱类型、基于原型的语言）。然后你应该差不多明白了，CSS是控制布局样式的，javascript是控制脚本的，然后HTML是控制结构的（哪个是按钮，哪个是文本框）。再直接一点，CSS是控制HTML结构的样式，Javascript是控制HTML的脚本。</p>\n</blockquote>\n<h3 id=\"讲一下我平时的开发流程\"><a href=\"#讲一下我平时的开发流程\" class=\"headerlink\" title=\"讲一下我平时的开发流程\"></a>讲一下我平时的开发流程</h3><ul>\n<li>从美工那拿到原型图和切图（切图上标注的字体大小颜色等等）</li>\n<li>根据切图进行界面代码的编写（包括布局样式事件等等）</li>\n<li>对接接口（通过网络向后端请求资源，你先不必深入了解后端是干什么的，以后你就会慢慢清楚，你只需要知道你需要的数据时后端提供的。这里需要javascript控制ajax进行网络请求。）</li>\n<li>测试修改</li>\n</ul>\n<h3 id=\"web前端的开发工具\"><a href=\"#web前端的开发工具\" class=\"headerlink\" title=\"web前端的开发工具\"></a>web前端的开发工具</h3><blockquote>\n<p> 你可能认为txt就可以编写，但高效开发是必不可少的。人类之所以是高级动物是因为有更高级的大脑，能够使用合理的工具。在这里推荐几个编辑器：vs code（这是我现在在用的，开源的）、sublime text（虽然收费，但可破解，也很好用）、atom（有一些不可思议的插件，像打游戏一般敲代码combo）。<strong>合理使用这几个编辑器里的插件会大大提高开发效率！！！</strong></p>\n</blockquote>\n<ul>\n<li>VS Code<br><a href=\"https://code.visualstudio.com/\">官网</a></li>\n</ul>\n<p><img data-src=\"web-study/edit.png\"></p>\n<ul>\n<li>sublime text<br><a href=\"https://www.sublimetext.com/\">官网</a></li>\n</ul>\n<p><img data-src=\"web-study/sublime.png\"></p>\n<ul>\n<li>atom<br><a href=\"https://atom.io/\">官网</a></li>\n</ul>\n<p><img data-src=\"web-study/atom.png\"></p>\n<h3 id=\"寒假祝福语\"><a href=\"#寒假祝福语\" class=\"headerlink\" title=\"寒假祝福语\"></a>寒假祝福语</h3><blockquote>\n<p> 祝各位学弟学妹新年快乐！假期是赶英超美鹤立鸡群青出于蓝胜于蓝长江后浪推前浪的好时机，假期少不了娱乐游玩，也少不了学习，希望各位能够在寒假放松的同时好好学习，过一个充实的寒假，让这个寒假在你的人生路上变得有意义。最后再说一句，<strong>这个<a href=\"https://www.imooc.com/\">网站</a>对你很重要</strong>。</p>\n</blockquote>"},{"title":"What kind of person am I","mathjax":false,"copyright":true,"comment":true,"date":"2019-04-04T02:30:03.000Z","_content":"\n{% note primary %}\n\"What kind of person am I\" expressed in English.\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## Foreword\n\nThis is the first time for me to write an article in my blog site.There may be some errors in this article.One way or another,I will try my best to write it.\n\nlet's start!\n\n\n## Music\n\n> TVアニメ「とある科学の超電磁砲」OP1\n\n\n<iframe frameborder=\"no\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=33913797&auto=1&height=66\"></iframe>\n\n\n## Body\n\nCome to the point,I will state what kind of person I am in the article.\n\n\n{% note success no-icon %}\n**I will state it in the following ways:**\n\n- My Character\n- My Hobbies\n- My Skills\n\nThat's all for the time being.\n{% endnote %}\n\n### My Character\n\nNo one can deny that everyone has advantages and disadvantages.Of course I has,too.\n\nI am not a outgoing boy.Rather than say so, it's better to say that I can't express my points fluently which excludes the science such as cs(computer science),math and so on.\n\nI am a boy of vanity.I am a tsundere boy.I don't want to be a boy that couldn't approach anyone's greatness,so I study hard to be stronger.\n\n\n\n### My Hobbies\n\n- Listen to music\n> atique music\n- Play games\n> Large-scale single-player games.I have played ***Rise of the Tomb Raider***,***Tomb Raider*** which both are the one of the trilogy,and a game named ***Fallout 4*** on the **steam platform**.\n- Exercise\n> Exercise with my partners.\n- Reading Books\n> Internet novels and technology books.\n- Watch animation\n> Many kinds ...\n\n### My Skills\n\n- Coding\n- Coding\n- Coding\n- and so on...\n\n\n## Conclusion\n\nThat's all for the time being.\nOver!\n\nIt's not easy for me to write the article.Next,the mission is regular practice.","source":"_posts/what-person-i-am.md","raw":"---\ntitle: What kind of person am I\nmathjax: false\ncopyright: true\ncomment: true\ndate: 2019-04-04 10:30:03\ntags:\n- Express in English\n- Prose and Essay\ncategories: Prose and Essay\n\n---\n\n{% note primary %}\n\"What kind of person am I\" expressed in English.\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## Foreword\n\nThis is the first time for me to write an article in my blog site.There may be some errors in this article.One way or another,I will try my best to write it.\n\nlet's start!\n\n\n## Music\n\n> TVアニメ「とある科学の超電磁砲」OP1\n\n\n<iframe frameborder=\"no\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=33913797&auto=1&height=66\"></iframe>\n\n\n## Body\n\nCome to the point,I will state what kind of person I am in the article.\n\n\n{% note success no-icon %}\n**I will state it in the following ways:**\n\n- My Character\n- My Hobbies\n- My Skills\n\nThat's all for the time being.\n{% endnote %}\n\n### My Character\n\nNo one can deny that everyone has advantages and disadvantages.Of course I has,too.\n\nI am not a outgoing boy.Rather than say so, it's better to say that I can't express my points fluently which excludes the science such as cs(computer science),math and so on.\n\nI am a boy of vanity.I am a tsundere boy.I don't want to be a boy that couldn't approach anyone's greatness,so I study hard to be stronger.\n\n\n\n### My Hobbies\n\n- Listen to music\n> atique music\n- Play games\n> Large-scale single-player games.I have played ***Rise of the Tomb Raider***,***Tomb Raider*** which both are the one of the trilogy,and a game named ***Fallout 4*** on the **steam platform**.\n- Exercise\n> Exercise with my partners.\n- Reading Books\n> Internet novels and technology books.\n- Watch animation\n> Many kinds ...\n\n### My Skills\n\n- Coding\n- Coding\n- Coding\n- and so on...\n\n\n## Conclusion\n\nThat's all for the time being.\nOver!\n\nIt's not easy for me to write the article.Next,the mission is regular practice.","slug":"what-person-i-am","published":1,"updated":"2022-01-06T04:09:12.575Z","_id":"cksq5v7o400b0n0pua8io5dp2","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note primary\"><p>“What kind of person am I” expressed in English.</p>\n</div>\n\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"Foreword\"><a href=\"#Foreword\" class=\"headerlink\" title=\"Foreword\"></a>Foreword</h2><p>This is the first time for me to write an article in my blog site.There may be some errors in this article.One way or another,I will try my best to write it.</p>\n<p>let’s start!</p>\n<h2 id=\"Music\"><a href=\"#Music\" class=\"headerlink\" title=\"Music\"></a>Music</h2><blockquote>\n<p>TVアニメ「とある科学の超電磁砲」OP1</p>\n</blockquote>\n<iframe frameborder=\"no\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=33913797&auto=1&height=66\"></iframe>\n\n\n<h2 id=\"Body\"><a href=\"#Body\" class=\"headerlink\" title=\"Body\"></a>Body</h2><p>Come to the point,I will state what kind of person I am in the article.</p>\n<div class=\"note success no-icon\"><p><strong>I will state it in the following ways:</strong></p>\n<ul>\n<li>My Character</li>\n<li>My Hobbies</li>\n<li>My Skills</li>\n</ul>\n<p>That’s all for the time being.</p>\n</div>\n\n<h3 id=\"My-Character\"><a href=\"#My-Character\" class=\"headerlink\" title=\"My Character\"></a>My Character</h3><p>No one can deny that everyone has advantages and disadvantages.Of course I has,too.</p>\n<p>I am not a outgoing boy.Rather than say so, it’s better to say that I can’t express my points fluently which excludes the science such as cs(computer science),math and so on.</p>\n<p>I am a boy of vanity.I am a tsundere boy.I don’t want to be a boy that couldn’t approach anyone’s greatness,so I study hard to be stronger.</p>\n<h3 id=\"My-Hobbies\"><a href=\"#My-Hobbies\" class=\"headerlink\" title=\"My Hobbies\"></a>My Hobbies</h3><ul>\n<li>Listen to music<blockquote>\n<p>atique music</p>\n</blockquote>\n</li>\n<li>Play games<blockquote>\n<p>Large-scale single-player games.I have played <em><strong>Rise of the Tomb Raider</strong></em>,<em><strong>Tomb Raider</strong></em> which both are the one of the trilogy,and a game named <em><strong>Fallout 4</strong></em> on the <strong>steam platform</strong>.</p>\n</blockquote>\n</li>\n<li>Exercise<blockquote>\n<p>Exercise with my partners.</p>\n</blockquote>\n</li>\n<li>Reading Books<blockquote>\n<p>Internet novels and technology books.</p>\n</blockquote>\n</li>\n<li>Watch animation<blockquote>\n<p>Many kinds …</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"My-Skills\"><a href=\"#My-Skills\" class=\"headerlink\" title=\"My Skills\"></a>My Skills</h3><ul>\n<li>Coding</li>\n<li>Coding</li>\n<li>Coding</li>\n<li>and so on…</li>\n</ul>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>That’s all for the time being.<br>Over!</p>\n<p>It’s not easy for me to write the article.Next,the mission is regular practice.</p>\n","site":{"data":{}},"excerpt":"<div class=\"note primary\"><p>“What kind of person am I” expressed in English.</p>\n</div>","more":"<hr>\n<h2 id=\"Foreword\"><a href=\"#Foreword\" class=\"headerlink\" title=\"Foreword\"></a>Foreword</h2><p>This is the first time for me to write an article in my blog site.There may be some errors in this article.One way or another,I will try my best to write it.</p>\n<p>let’s start!</p>\n<h2 id=\"Music\"><a href=\"#Music\" class=\"headerlink\" title=\"Music\"></a>Music</h2><blockquote>\n<p>TVアニメ「とある科学の超電磁砲」OP1</p>\n</blockquote>\n<iframe frameborder=\"no\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=33913797&auto=1&height=66\"></iframe>\n\n\n<h2 id=\"Body\"><a href=\"#Body\" class=\"headerlink\" title=\"Body\"></a>Body</h2><p>Come to the point,I will state what kind of person I am in the article.</p>\n<div class=\"note success no-icon\"><p><strong>I will state it in the following ways:</strong></p>\n<ul>\n<li>My Character</li>\n<li>My Hobbies</li>\n<li>My Skills</li>\n</ul>\n<p>That’s all for the time being.</p>\n</div>\n\n<h3 id=\"My-Character\"><a href=\"#My-Character\" class=\"headerlink\" title=\"My Character\"></a>My Character</h3><p>No one can deny that everyone has advantages and disadvantages.Of course I has,too.</p>\n<p>I am not a outgoing boy.Rather than say so, it’s better to say that I can’t express my points fluently which excludes the science such as cs(computer science),math and so on.</p>\n<p>I am a boy of vanity.I am a tsundere boy.I don’t want to be a boy that couldn’t approach anyone’s greatness,so I study hard to be stronger.</p>\n<h3 id=\"My-Hobbies\"><a href=\"#My-Hobbies\" class=\"headerlink\" title=\"My Hobbies\"></a>My Hobbies</h3><ul>\n<li>Listen to music<blockquote>\n<p>atique music</p>\n</blockquote>\n</li>\n<li>Play games<blockquote>\n<p>Large-scale single-player games.I have played <em><strong>Rise of the Tomb Raider</strong></em>,<em><strong>Tomb Raider</strong></em> which both are the one of the trilogy,and a game named <em><strong>Fallout 4</strong></em> on the <strong>steam platform</strong>.</p>\n</blockquote>\n</li>\n<li>Exercise<blockquote>\n<p>Exercise with my partners.</p>\n</blockquote>\n</li>\n<li>Reading Books<blockquote>\n<p>Internet novels and technology books.</p>\n</blockquote>\n</li>\n<li>Watch animation<blockquote>\n<p>Many kinds …</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"My-Skills\"><a href=\"#My-Skills\" class=\"headerlink\" title=\"My Skills\"></a>My Skills</h3><ul>\n<li>Coding</li>\n<li>Coding</li>\n<li>Coding</li>\n<li>and so on…</li>\n</ul>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>That’s all for the time being.<br>Over!</p>\n<p>It’s not easy for me to write the article.Next,the mission is regular practice.</p>"},{"title":"Webpack打包优化指南","date":"2018-01-27T04:50:40.000Z","_content":"\n\n\n{% note default %}\nStay hungry. Stay foolish.\n{% endnote %}\n\n<!-- more -->\n\n\n\n### 前言\n\n> web前端打包工具对于高效开发来说已是必不可少，但高效开发并不能保证用户体验好，我们经常为了减少http请求而将所有代码打包到一个js文件中，但这明显不科学。因为随着项目的扩展，js文件会越来越大，这会导致许多问题。这就需要我们来优化组织打包文件，对于webpack来说这也是很有必要的。\n\n### 工具介绍\n> 今天意外地发现了一个神奇的工具，是一个将webpack打包后的文件关系可视化的工具，叫**webpack-bundle-analyzer**，这里是npm的工具[链接](https://www.npmjs.com/package/webpack-bundle-analyzer),其效果如下。\n\n![](webpack-optimize/analyzer.png)\n\n### 优化第一步——第三方依赖分离\n\n> 上图中很明显的看到只打包了一个js文件，app.js。它包含了第三方依赖代码和业务代码。每次http请求都会请求这个文件，而这个文件中常常有一些不变化的第三方依赖包。因为第三方依赖不想业务代码那样多变，所以我们就想能不能将业务代码和第三方依赖代码分离打包?然后第三方依赖缓存到客户端，这样就不必多次请求了。Bingo！我们只需要配置另一个入口文件，将第三方依赖配置上就OK了。\n\n```javascript\nmodule.exports = {\n    ……\n    entry:{\n        app:\"./src/main.js\",\n        vender:[\"vue\",\"vue-router\"]\n    }\n    ……\n}\n```\n\n> 然后打包后的结果是这样的。\n\n![](webpack-optimize/optimize1.png)\n\n> 但是为毛打包的第三方依赖会重复？这不就相当于什么也没干而且还增加了负担？我们希望只有一份vue和vue-router然后让这两部分引用就行了。解决办法如下：\n\n```javascript\n// 在webpack配置中添加优化公共块插件\nmodule.exports = {\n    ……\n    plugins:[\n        new webpack.optimize.CommonsChunkPlugin({\n            name:\"vendor\"\n            })\n    ]\n    ……\n}\n```\n\n> 这样就将公共的块抽取出来放到vendor中，结果如下：\n\n![](webpack-optimize/optimize2.png)\n\n> 这样第三方依赖就提取出来了，然后右边的业务代码单独分到一个打包文件中。\n\n### 优化第二步——自动提取\n> 我们会遇到这种情况，尽管已经使用了vue、vue-router这些依赖，但随着项目的增大，需求的扩展，我们需要另外一些第三方依赖，但每次都需要想入口文件中添加依赖。\n\n```javascript\nmodule.exports = {\n    ……\n    entry:{\n        app:\"./src/main.js\",\n        vender:[\"vue\",\"vue-router\",\"vuex\",\"element-ui\",\"很多很多很多很多\"]\n    }\n    ……\n}\n```\n\n> 有成千上万个第三方依赖，你难道需要一个个手打上去，这显然是傻。我们有没有什么方法让webpack大佬自动提取这些第三方依赖到打包文件中？方法是有的，我们需要配置一个脚本，代码如下：\n\n```JavaScript\nmodule.exports = {\n    ……\n    plugins:[\n        new webpack.optimize.CommonsChunkPlugin({\n            name:\"vendor\",\n            minChunk:({resource})=>(\n                resource&&\n                resource.indexOf(\"node_modules\")&&\n                resource.match(/\\.js$/)\n            )\n        })\n    ]\n    ……\n}\n```\n> 这段代码即判断打包模块是否是第三方依赖的js，若是则放到vendor里。效果同上：\n\n![](webpack-optimize/optimize2.png)\n\n### 优化第三步——业务代码打包优化\n\n> 可能你认为打包后的文件中第三方依赖大小比重占得多，所以业务代码打包不必优化。但这是错的，事实上恰恰相反，业务代码比重一般是最大的，所以需要对其进行分离组织优化。将一些模块懒加载，一些必要的首先加载,公共的代码需要提取。\n\n#### 如何懒加载\n\n> 首先先谈一下为什么要懒加载。比如你有许多模块，首先展示的是主页，然后同路由下有其他模块，这些模块的脚本就需要懒加载，让主页代码优先加载。那么如何懒加载呢？这一点我也很好奇，使用了以下代码。\n\n```JavaScript\nconst LazyModule = ()=> import(\"The Module\");\n\n//比如说我在这儿有个路由下的失物列表需要懒加载，就需要这样\n\nconst GoodsList=()=> import('@/components/GoodsList.vue')\n\n```\n\n> 打包结果如下：\n\n![](webpack-optimize/optimize3.png)\n\n> 就将需要懒加载的模块单独打包了，**0.chunk.js**\n\n> 懒加载前后页面资源变化\n- 主页\n![](webpack-optimize/optimize4.png)\n- 其他路由页\n![](webpack-optimize/optimize5.png)\n\n#### 重复依赖提取\n![](webpack-optimize/optimize6.png)\n> 有时候我们会发现不同的页面用了相同第三方依赖，比如说**axios**（类似jQuery中的Ajax），我们需要将这些公共的依赖提取出来，这就需要再一次请教webpack大佬了。\n\n```JavaScript\n// 注意，这里的name必须和上面入口文件相同，以便提取\nnew webpack.optimize.CommonsChunkPlugin({\n    name:\"app\",\n    async:\"common-in-lazy\",\n    minChunks:({resource})=>(\n    resource&&\n    resource.indexOf(\"node_modules\")>-1&&\n    /axious/.test(resource)\n    )\n})\n```\n\n> 这样，公共的依赖代码就提取出来了，效果如下：\n\n![](webpack-optimize/optimize7.png)\n\n> 再一次感受到了webpack的强大之处，然后这个webpack-bundle-analyzer这个工具的有趣与强大。\n\n\n### Thanks！","source":"_posts/webpack-optimize.md","raw":"---\ntitle: Webpack打包优化指南\ndate: 2018-01-27 12:50:40\n\ntags:\n- Webpack\n- Front-End Development\ncategories:\n- Front-End Development\n---\n\n\n\n{% note default %}\nStay hungry. Stay foolish.\n{% endnote %}\n\n<!-- more -->\n\n\n\n### 前言\n\n> web前端打包工具对于高效开发来说已是必不可少，但高效开发并不能保证用户体验好，我们经常为了减少http请求而将所有代码打包到一个js文件中，但这明显不科学。因为随着项目的扩展，js文件会越来越大，这会导致许多问题。这就需要我们来优化组织打包文件，对于webpack来说这也是很有必要的。\n\n### 工具介绍\n> 今天意外地发现了一个神奇的工具，是一个将webpack打包后的文件关系可视化的工具，叫**webpack-bundle-analyzer**，这里是npm的工具[链接](https://www.npmjs.com/package/webpack-bundle-analyzer),其效果如下。\n\n![](webpack-optimize/analyzer.png)\n\n### 优化第一步——第三方依赖分离\n\n> 上图中很明显的看到只打包了一个js文件，app.js。它包含了第三方依赖代码和业务代码。每次http请求都会请求这个文件，而这个文件中常常有一些不变化的第三方依赖包。因为第三方依赖不想业务代码那样多变，所以我们就想能不能将业务代码和第三方依赖代码分离打包?然后第三方依赖缓存到客户端，这样就不必多次请求了。Bingo！我们只需要配置另一个入口文件，将第三方依赖配置上就OK了。\n\n```javascript\nmodule.exports = {\n    ……\n    entry:{\n        app:\"./src/main.js\",\n        vender:[\"vue\",\"vue-router\"]\n    }\n    ……\n}\n```\n\n> 然后打包后的结果是这样的。\n\n![](webpack-optimize/optimize1.png)\n\n> 但是为毛打包的第三方依赖会重复？这不就相当于什么也没干而且还增加了负担？我们希望只有一份vue和vue-router然后让这两部分引用就行了。解决办法如下：\n\n```javascript\n// 在webpack配置中添加优化公共块插件\nmodule.exports = {\n    ……\n    plugins:[\n        new webpack.optimize.CommonsChunkPlugin({\n            name:\"vendor\"\n            })\n    ]\n    ……\n}\n```\n\n> 这样就将公共的块抽取出来放到vendor中，结果如下：\n\n![](webpack-optimize/optimize2.png)\n\n> 这样第三方依赖就提取出来了，然后右边的业务代码单独分到一个打包文件中。\n\n### 优化第二步——自动提取\n> 我们会遇到这种情况，尽管已经使用了vue、vue-router这些依赖，但随着项目的增大，需求的扩展，我们需要另外一些第三方依赖，但每次都需要想入口文件中添加依赖。\n\n```javascript\nmodule.exports = {\n    ……\n    entry:{\n        app:\"./src/main.js\",\n        vender:[\"vue\",\"vue-router\",\"vuex\",\"element-ui\",\"很多很多很多很多\"]\n    }\n    ……\n}\n```\n\n> 有成千上万个第三方依赖，你难道需要一个个手打上去，这显然是傻。我们有没有什么方法让webpack大佬自动提取这些第三方依赖到打包文件中？方法是有的，我们需要配置一个脚本，代码如下：\n\n```JavaScript\nmodule.exports = {\n    ……\n    plugins:[\n        new webpack.optimize.CommonsChunkPlugin({\n            name:\"vendor\",\n            minChunk:({resource})=>(\n                resource&&\n                resource.indexOf(\"node_modules\")&&\n                resource.match(/\\.js$/)\n            )\n        })\n    ]\n    ……\n}\n```\n> 这段代码即判断打包模块是否是第三方依赖的js，若是则放到vendor里。效果同上：\n\n![](webpack-optimize/optimize2.png)\n\n### 优化第三步——业务代码打包优化\n\n> 可能你认为打包后的文件中第三方依赖大小比重占得多，所以业务代码打包不必优化。但这是错的，事实上恰恰相反，业务代码比重一般是最大的，所以需要对其进行分离组织优化。将一些模块懒加载，一些必要的首先加载,公共的代码需要提取。\n\n#### 如何懒加载\n\n> 首先先谈一下为什么要懒加载。比如你有许多模块，首先展示的是主页，然后同路由下有其他模块，这些模块的脚本就需要懒加载，让主页代码优先加载。那么如何懒加载呢？这一点我也很好奇，使用了以下代码。\n\n```JavaScript\nconst LazyModule = ()=> import(\"The Module\");\n\n//比如说我在这儿有个路由下的失物列表需要懒加载，就需要这样\n\nconst GoodsList=()=> import('@/components/GoodsList.vue')\n\n```\n\n> 打包结果如下：\n\n![](webpack-optimize/optimize3.png)\n\n> 就将需要懒加载的模块单独打包了，**0.chunk.js**\n\n> 懒加载前后页面资源变化\n- 主页\n![](webpack-optimize/optimize4.png)\n- 其他路由页\n![](webpack-optimize/optimize5.png)\n\n#### 重复依赖提取\n![](webpack-optimize/optimize6.png)\n> 有时候我们会发现不同的页面用了相同第三方依赖，比如说**axios**（类似jQuery中的Ajax），我们需要将这些公共的依赖提取出来，这就需要再一次请教webpack大佬了。\n\n```JavaScript\n// 注意，这里的name必须和上面入口文件相同，以便提取\nnew webpack.optimize.CommonsChunkPlugin({\n    name:\"app\",\n    async:\"common-in-lazy\",\n    minChunks:({resource})=>(\n    resource&&\n    resource.indexOf(\"node_modules\")>-1&&\n    /axious/.test(resource)\n    )\n})\n```\n\n> 这样，公共的依赖代码就提取出来了，效果如下：\n\n![](webpack-optimize/optimize7.png)\n\n> 再一次感受到了webpack的强大之处，然后这个webpack-bundle-analyzer这个工具的有趣与强大。\n\n\n### Thanks！","slug":"webpack-optimize","published":1,"updated":"2022-01-06T04:09:12.561Z","_id":"cksq5v7o400b2n0pu29iabfag","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note default\"><p>Stay hungry. Stay foolish.</p>\n</div>\n\n<span id=\"more\"></span>\n\n\n\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<p>web前端打包工具对于高效开发来说已是必不可少，但高效开发并不能保证用户体验好，我们经常为了减少http请求而将所有代码打包到一个js文件中，但这明显不科学。因为随着项目的扩展，js文件会越来越大，这会导致许多问题。这就需要我们来优化组织打包文件，对于webpack来说这也是很有必要的。</p>\n</blockquote>\n<h3 id=\"工具介绍\"><a href=\"#工具介绍\" class=\"headerlink\" title=\"工具介绍\"></a>工具介绍</h3><blockquote>\n<p>今天意外地发现了一个神奇的工具，是一个将webpack打包后的文件关系可视化的工具，叫<strong>webpack-bundle-analyzer</strong>，这里是npm的工具<a href=\"https://www.npmjs.com/package/webpack-bundle-analyzer\">链接</a>,其效果如下。</p>\n</blockquote>\n<p><img data-src=\"webpack-optimize/analyzer.png\"></p>\n<h3 id=\"优化第一步——第三方依赖分离\"><a href=\"#优化第一步——第三方依赖分离\" class=\"headerlink\" title=\"优化第一步——第三方依赖分离\"></a>优化第一步——第三方依赖分离</h3><blockquote>\n<p>上图中很明显的看到只打包了一个js文件，app.js。它包含了第三方依赖代码和业务代码。每次http请求都会请求这个文件，而这个文件中常常有一些不变化的第三方依赖包。因为第三方依赖不想业务代码那样多变，所以我们就想能不能将业务代码和第三方依赖代码分离打包?然后第三方依赖缓存到客户端，这样就不必多次请求了。Bingo！我们只需要配置另一个入口文件，将第三方依赖配置上就OK了。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    ……</span><br><span class=\"line\">    <span class=\"attr\">entry</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">app</span>:<span class=\"string\">&quot;./src/main.js&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">vender</span>:[<span class=\"string\">&quot;vue&quot;</span>,<span class=\"string\">&quot;vue-router&quot;</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ……</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>然后打包后的结果是这样的。</p>\n</blockquote>\n<p><img data-src=\"webpack-optimize/optimize1.png\"></p>\n<blockquote>\n<p>但是为毛打包的第三方依赖会重复？这不就相当于什么也没干而且还增加了负担？我们希望只有一份vue和vue-router然后让这两部分引用就行了。解决办法如下：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在webpack配置中添加优化公共块插件</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    ……</span><br><span class=\"line\">    <span class=\"attr\">plugins</span>:[</span><br><span class=\"line\">        <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>:<span class=\"string\">&quot;vendor&quot;</span></span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">    ……</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这样就将公共的块抽取出来放到vendor中，结果如下：</p>\n</blockquote>\n<p><img data-src=\"webpack-optimize/optimize2.png\"></p>\n<blockquote>\n<p>这样第三方依赖就提取出来了，然后右边的业务代码单独分到一个打包文件中。</p>\n</blockquote>\n<h3 id=\"优化第二步——自动提取\"><a href=\"#优化第二步——自动提取\" class=\"headerlink\" title=\"优化第二步——自动提取\"></a>优化第二步——自动提取</h3><blockquote>\n<p>我们会遇到这种情况，尽管已经使用了vue、vue-router这些依赖，但随着项目的增大，需求的扩展，我们需要另外一些第三方依赖，但每次都需要想入口文件中添加依赖。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    ……</span><br><span class=\"line\">    <span class=\"attr\">entry</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">app</span>:<span class=\"string\">&quot;./src/main.js&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">vender</span>:[<span class=\"string\">&quot;vue&quot;</span>,<span class=\"string\">&quot;vue-router&quot;</span>,<span class=\"string\">&quot;vuex&quot;</span>,<span class=\"string\">&quot;element-ui&quot;</span>,<span class=\"string\">&quot;很多很多很多很多&quot;</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ……</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>有成千上万个第三方依赖，你难道需要一个个手打上去，这显然是傻。我们有没有什么方法让webpack大佬自动提取这些第三方依赖到打包文件中？方法是有的，我们需要配置一个脚本，代码如下：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    ……</span><br><span class=\"line\">    <span class=\"attr\">plugins</span>:[</span><br><span class=\"line\">        <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>:<span class=\"string\">&quot;vendor&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">minChunk</span>:<span class=\"function\">(<span class=\"params\">&#123;resource&#125;</span>)=&gt;</span>(</span><br><span class=\"line\">                resource&amp;&amp;</span><br><span class=\"line\">                resource.indexOf(<span class=\"string\">&quot;node_modules&quot;</span>)&amp;&amp;</span><br><span class=\"line\">                resource.match(<span class=\"regexp\">/\\.js$/</span>)</span><br><span class=\"line\">            )</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">    ……</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这段代码即判断打包模块是否是第三方依赖的js，若是则放到vendor里。效果同上：</p>\n</blockquote>\n<p><img data-src=\"webpack-optimize/optimize2.png\"></p>\n<h3 id=\"优化第三步——业务代码打包优化\"><a href=\"#优化第三步——业务代码打包优化\" class=\"headerlink\" title=\"优化第三步——业务代码打包优化\"></a>优化第三步——业务代码打包优化</h3><blockquote>\n<p>可能你认为打包后的文件中第三方依赖大小比重占得多，所以业务代码打包不必优化。但这是错的，事实上恰恰相反，业务代码比重一般是最大的，所以需要对其进行分离组织优化。将一些模块懒加载，一些必要的首先加载,公共的代码需要提取。</p>\n</blockquote>\n<h4 id=\"如何懒加载\"><a href=\"#如何懒加载\" class=\"headerlink\" title=\"如何懒加载\"></a>如何懒加载</h4><blockquote>\n<p>首先先谈一下为什么要懒加载。比如你有许多模块，首先展示的是主页，然后同路由下有其他模块，这些模块的脚本就需要懒加载，让主页代码优先加载。那么如何懒加载呢？这一点我也很好奇，使用了以下代码。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> LazyModule = <span class=\"function\">()=&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&quot;The Module&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//比如说我在这儿有个路由下的失物列表需要懒加载，就需要这样</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> GoodsList=<span class=\"function\">()=&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;@/components/GoodsList.vue&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>打包结果如下：</p>\n</blockquote>\n<p><img data-src=\"webpack-optimize/optimize3.png\"></p>\n<blockquote>\n<p>就将需要懒加载的模块单独打包了，<strong>0.chunk.js</strong></p>\n</blockquote>\n<blockquote>\n<p>懒加载前后页面资源变化</p>\n</blockquote>\n<ul>\n<li>主页<br><img data-src=\"webpack-optimize/optimize4.png\"></li>\n<li>其他路由页<br><img data-src=\"webpack-optimize/optimize5.png\"></li>\n</ul>\n<h4 id=\"重复依赖提取\"><a href=\"#重复依赖提取\" class=\"headerlink\" title=\"重复依赖提取\"></a>重复依赖提取</h4><p><img data-src=\"webpack-optimize/optimize6.png\"></p>\n<blockquote>\n<p>有时候我们会发现不同的页面用了相同第三方依赖，比如说<strong>axios</strong>（类似jQuery中的Ajax），我们需要将这些公共的依赖提取出来，这就需要再一次请教webpack大佬了。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 注意，这里的name必须和上面入口文件相同，以便提取</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&quot;app&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">async</span>:<span class=\"string\">&quot;common-in-lazy&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">minChunks</span>:<span class=\"function\">(<span class=\"params\">&#123;resource&#125;</span>)=&gt;</span>(</span><br><span class=\"line\">    resource&amp;&amp;</span><br><span class=\"line\">    resource.indexOf(<span class=\"string\">&quot;node_modules&quot;</span>)&gt;-<span class=\"number\">1</span>&amp;&amp;</span><br><span class=\"line\">    <span class=\"regexp\">/axious/</span>.test(resource)</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这样，公共的依赖代码就提取出来了，效果如下：</p>\n</blockquote>\n<p><img data-src=\"webpack-optimize/optimize7.png\"></p>\n<blockquote>\n<p>再一次感受到了webpack的强大之处，然后这个webpack-bundle-analyzer这个工具的有趣与强大。</p>\n</blockquote>\n<h3 id=\"Thanks！\"><a href=\"#Thanks！\" class=\"headerlink\" title=\"Thanks！\"></a>Thanks！</h3>","site":{"data":{}},"excerpt":"<div class=\"note default\"><p>Stay hungry. Stay foolish.</p>\n</div>","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<p>web前端打包工具对于高效开发来说已是必不可少，但高效开发并不能保证用户体验好，我们经常为了减少http请求而将所有代码打包到一个js文件中，但这明显不科学。因为随着项目的扩展，js文件会越来越大，这会导致许多问题。这就需要我们来优化组织打包文件，对于webpack来说这也是很有必要的。</p>\n</blockquote>\n<h3 id=\"工具介绍\"><a href=\"#工具介绍\" class=\"headerlink\" title=\"工具介绍\"></a>工具介绍</h3><blockquote>\n<p>今天意外地发现了一个神奇的工具，是一个将webpack打包后的文件关系可视化的工具，叫<strong>webpack-bundle-analyzer</strong>，这里是npm的工具<a href=\"https://www.npmjs.com/package/webpack-bundle-analyzer\">链接</a>,其效果如下。</p>\n</blockquote>\n<p><img data-src=\"webpack-optimize/analyzer.png\"></p>\n<h3 id=\"优化第一步——第三方依赖分离\"><a href=\"#优化第一步——第三方依赖分离\" class=\"headerlink\" title=\"优化第一步——第三方依赖分离\"></a>优化第一步——第三方依赖分离</h3><blockquote>\n<p>上图中很明显的看到只打包了一个js文件，app.js。它包含了第三方依赖代码和业务代码。每次http请求都会请求这个文件，而这个文件中常常有一些不变化的第三方依赖包。因为第三方依赖不想业务代码那样多变，所以我们就想能不能将业务代码和第三方依赖代码分离打包?然后第三方依赖缓存到客户端，这样就不必多次请求了。Bingo！我们只需要配置另一个入口文件，将第三方依赖配置上就OK了。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    ……</span><br><span class=\"line\">    <span class=\"attr\">entry</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">app</span>:<span class=\"string\">&quot;./src/main.js&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">vender</span>:[<span class=\"string\">&quot;vue&quot;</span>,<span class=\"string\">&quot;vue-router&quot;</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ……</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>然后打包后的结果是这样的。</p>\n</blockquote>\n<p><img data-src=\"webpack-optimize/optimize1.png\"></p>\n<blockquote>\n<p>但是为毛打包的第三方依赖会重复？这不就相当于什么也没干而且还增加了负担？我们希望只有一份vue和vue-router然后让这两部分引用就行了。解决办法如下：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在webpack配置中添加优化公共块插件</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    ……</span><br><span class=\"line\">    <span class=\"attr\">plugins</span>:[</span><br><span class=\"line\">        <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>:<span class=\"string\">&quot;vendor&quot;</span></span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">    ……</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这样就将公共的块抽取出来放到vendor中，结果如下：</p>\n</blockquote>\n<p><img data-src=\"webpack-optimize/optimize2.png\"></p>\n<blockquote>\n<p>这样第三方依赖就提取出来了，然后右边的业务代码单独分到一个打包文件中。</p>\n</blockquote>\n<h3 id=\"优化第二步——自动提取\"><a href=\"#优化第二步——自动提取\" class=\"headerlink\" title=\"优化第二步——自动提取\"></a>优化第二步——自动提取</h3><blockquote>\n<p>我们会遇到这种情况，尽管已经使用了vue、vue-router这些依赖，但随着项目的增大，需求的扩展，我们需要另外一些第三方依赖，但每次都需要想入口文件中添加依赖。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    ……</span><br><span class=\"line\">    <span class=\"attr\">entry</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">app</span>:<span class=\"string\">&quot;./src/main.js&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">vender</span>:[<span class=\"string\">&quot;vue&quot;</span>,<span class=\"string\">&quot;vue-router&quot;</span>,<span class=\"string\">&quot;vuex&quot;</span>,<span class=\"string\">&quot;element-ui&quot;</span>,<span class=\"string\">&quot;很多很多很多很多&quot;</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ……</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>有成千上万个第三方依赖，你难道需要一个个手打上去，这显然是傻。我们有没有什么方法让webpack大佬自动提取这些第三方依赖到打包文件中？方法是有的，我们需要配置一个脚本，代码如下：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    ……</span><br><span class=\"line\">    <span class=\"attr\">plugins</span>:[</span><br><span class=\"line\">        <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>:<span class=\"string\">&quot;vendor&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">minChunk</span>:<span class=\"function\">(<span class=\"params\">&#123;resource&#125;</span>)=&gt;</span>(</span><br><span class=\"line\">                resource&amp;&amp;</span><br><span class=\"line\">                resource.indexOf(<span class=\"string\">&quot;node_modules&quot;</span>)&amp;&amp;</span><br><span class=\"line\">                resource.match(<span class=\"regexp\">/\\.js$/</span>)</span><br><span class=\"line\">            )</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">    ……</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这段代码即判断打包模块是否是第三方依赖的js，若是则放到vendor里。效果同上：</p>\n</blockquote>\n<p><img data-src=\"webpack-optimize/optimize2.png\"></p>\n<h3 id=\"优化第三步——业务代码打包优化\"><a href=\"#优化第三步——业务代码打包优化\" class=\"headerlink\" title=\"优化第三步——业务代码打包优化\"></a>优化第三步——业务代码打包优化</h3><blockquote>\n<p>可能你认为打包后的文件中第三方依赖大小比重占得多，所以业务代码打包不必优化。但这是错的，事实上恰恰相反，业务代码比重一般是最大的，所以需要对其进行分离组织优化。将一些模块懒加载，一些必要的首先加载,公共的代码需要提取。</p>\n</blockquote>\n<h4 id=\"如何懒加载\"><a href=\"#如何懒加载\" class=\"headerlink\" title=\"如何懒加载\"></a>如何懒加载</h4><blockquote>\n<p>首先先谈一下为什么要懒加载。比如你有许多模块，首先展示的是主页，然后同路由下有其他模块，这些模块的脚本就需要懒加载，让主页代码优先加载。那么如何懒加载呢？这一点我也很好奇，使用了以下代码。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> LazyModule = <span class=\"function\">()=&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&quot;The Module&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//比如说我在这儿有个路由下的失物列表需要懒加载，就需要这样</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> GoodsList=<span class=\"function\">()=&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;@/components/GoodsList.vue&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>打包结果如下：</p>\n</blockquote>\n<p><img data-src=\"webpack-optimize/optimize3.png\"></p>\n<blockquote>\n<p>就将需要懒加载的模块单独打包了，<strong>0.chunk.js</strong></p>\n</blockquote>\n<blockquote>\n<p>懒加载前后页面资源变化</p>\n</blockquote>\n<ul>\n<li>主页<br><img data-src=\"webpack-optimize/optimize4.png\"></li>\n<li>其他路由页<br><img data-src=\"webpack-optimize/optimize5.png\"></li>\n</ul>\n<h4 id=\"重复依赖提取\"><a href=\"#重复依赖提取\" class=\"headerlink\" title=\"重复依赖提取\"></a>重复依赖提取</h4><p><img data-src=\"webpack-optimize/optimize6.png\"></p>\n<blockquote>\n<p>有时候我们会发现不同的页面用了相同第三方依赖，比如说<strong>axios</strong>（类似jQuery中的Ajax），我们需要将这些公共的依赖提取出来，这就需要再一次请教webpack大佬了。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 注意，这里的name必须和上面入口文件相同，以便提取</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&quot;app&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">async</span>:<span class=\"string\">&quot;common-in-lazy&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">minChunks</span>:<span class=\"function\">(<span class=\"params\">&#123;resource&#125;</span>)=&gt;</span>(</span><br><span class=\"line\">    resource&amp;&amp;</span><br><span class=\"line\">    resource.indexOf(<span class=\"string\">&quot;node_modules&quot;</span>)&gt;-<span class=\"number\">1</span>&amp;&amp;</span><br><span class=\"line\">    <span class=\"regexp\">/axious/</span>.test(resource)</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这样，公共的依赖代码就提取出来了，效果如下：</p>\n</blockquote>\n<p><img data-src=\"webpack-optimize/optimize7.png\"></p>\n<blockquote>\n<p>再一次感受到了webpack的强大之处，然后这个webpack-bundle-analyzer这个工具的有趣与强大。</p>\n</blockquote>\n<h3 id=\"Thanks！\"><a href=\"#Thanks！\" class=\"headerlink\" title=\"Thanks！\"></a>Thanks！</h3>"},{"title":"CSAPP 之 Data Lab","date":"2019-02-12T09:24:27.000Z","mathjax":true,"_content":"\n{% note default %}\n\n纸上得来终觉浅，绝知此事要躬行。\n\n{% endnote %}\n\n<!-- more -->\n---\n\n## CSAPP 实验记录\n\n{% note info %}\n\n**[本系列文章](/tags/CSAPP-Lab/)主要记录 CSAPP 3.0 的实验过程，所有实验记录文章请查看[这儿](/tags/CSAPP-Lab/)**\n{% endnote %}\n\n\n快速开始请访问 `CSAPP` [Lab](http://csapp.cs.cmu.edu/3e/labs.html) 官网，本次实验记录是基于 CSAPP 3.0，实验日期始于：`2019-1-5`\n\n\n\n***实验打算采用以下框架来记录***\n\n- 题目列表\n- 实验题目题解\n  - 题解代码\n  - 题目思考\n- 结果\n- 关于本次实验的思考\n\n\n\n> 当真正开始做实验的时候，才发现自己有多菜。\n\n\n\n![1546740946420](csapp-lab-1/1546740914782.png)\n\n\n\n## Data Lab\n\n开始做 `CSAPP` 的实验了，这次是第一次实验，内容是关于计算机信息的表示，主要是位操作、整数题和浮点数相关的题。\n\n\n\n\n\n### 题目列表\n\n|         名称         |            描述             | 难度 | 指令数目 |\n| :------------------: | :-------------------------: | :--: | :------: |\n|     bitXor(x,y)      |    只使用`~`和`&`实现`^`    |  1   |    14    |\n|        tmin()        |        返回最小补码         |  1   |    4     |\n|      isTmax(x)       |    判断是否是补码最大值     |  1   |    10    |\n|    allOddBits(x)     | 判断补码所有奇数位是否都是1 |  2   |    12    |\n|      negate(x)       |  不使用负号 `-` 实现 `-x`   |  2   |    5     |\n|   isAsciiDigit(x)    | 判断 `x` 是否是 `ASCII` 码  |  3   |    15    |\n| conditional(x, y, z) |  类似于 C 语言中的 `x?y:z`  |  3   |    16    |\n|  isLessOrEqual(x,y)  |           `x<=y`            |  3   |    24    |\n|    logicalNeg(x)     | 计算 `!x` 而不用 `!` 运算符 |  4   |    12    |\n|    howManyBits(x)    | 计算表达 `x` 所需的最少位数 |  4   |    90    |\n|   floatScale2(uf)    |        计算 `2.0*uf`        |  4   |    30    |\n|  floatFloat2Int(uf)  |       计算 `(int) f`        |  4   |    30    |\n|    floatPower2(x)    |        计算 $2.0^x$         |  4   |    30    |\n\n### 题解\n\n#### bitXor(x,y)\n\n> 只使用两种位运算实现异或操作。这个算是一个比较简单的问题了，难度系数1。学数电和离散二布尔代数的时候了解过。\n\n- 代码\n\n  ```c\n  /* \n   * bitXor - x^y using only ~ and & \n   *   Example: bitXor(4, 5) = 1\n   *   Legal ops: ~ &\n   *   Max ops: 14\n   *   Rating: 1\n   */\n  int bitXor(int x, int y) {\n    return ~(~x&~y)&~(x&y);\n  }\n  ```\n\n\n- 思路\n\n  根据布尔代数，可以通过 `~` 和 `&` ，即非和与操作实现异或操作。所谓异或就是当参与运算的两个二进制数不同时结果才为1，其他情况为0。`C` 语言中的位操作对基本类型变量进行运算就是对类型中的每一位进行位操作。所以结果可以使用“非”和“与”计算**不是同时为0情况和不是同时为1的情况进行位与**，即`~(~x&~y)&~(x&y)` 。\n\n#### tmin()\n\n> 使用位运算获取对2补码的最小 `int` 值。这个题目也是比较简单。\n\n- 代码\n\n  ```c\n  /* \n   * tmin - return minimum two's complement integer \n   *   Legal ops: ! ~ & ^ | + << >>\n   *   Max ops: 4\n   *   Rating: 1\n   */\n  int tmin(void) {\n    return 0x1<<31;\n  }\n  ```\n\n- 思路\n\n  C 语言中 `int` 类型是32位，即4字节数。**补码最小值就是符号位为1，其余全为0。**所以只需要得到这个值就行了，我采用的是对数值 `0x1` 进行移位运算，得到结果。\n\n#### isTmax(x)\n\n> 通过位运算计算是否是补码最大值。\n\n- 代码\n\n  ```c\n  /*\n   * isTmax - returns 1 if x is the maximum, two's complement number,\n   *     and 0 otherwise \n   *   Legal ops: ! ~ & ^ | +\n   *   Max ops: 10\n   *   Rating: 1\n   */\n  int isTmax(int x) {\n    int i = x+1;//Tmin,1000...\n    x=x+i;//-1,1111...\n    x=~x;//0,0000...\n    i=!i;//exclude x=0xffff...\n    x=x+i;//exclude x=0xffff...\n    return !x;\n  }\n  ```\n\n- 思路\n\n  做这个题目的前提就是必须知道补码最大值是多少，这当然是针对 `int` 类型来说的，最大值当然是符号位为0，其余全是1，这是补码规则，不明其意则 Google。在此说一下个人理解，最终返回值为 0 或 1，要想判断给定数 `x` 是不是补码最大值（`0x0111,1111,1111,1111`），则需要将给定值 `x` 向全 0 值转换判断，因为非0布尔值就是1，不管你是1还是2。根据我标注的代码注释理解，如果 `x` 是最大值，将其转换为全0有很多方法，不过最终要排除转换过程中其他的数值，比如本例子中需要排除`0xffffffffffffffff` 的情况：将 x 加1的值再和 x 相加，得到了全1（函数第二行），然后取反得到全0，**因为补码-1也有这个特点**，所以要排除，假设 x 是 -1，则 +1 后为全 0，否则不为全 0，函数4-5行则是排除这种情况。\n\n#### allOddBits(x)\n\n> 判断所有奇数位是否都为1，这里的奇数指的是位的阶级是2的几次幂。重在思考转换规律，如何转换为对应的布尔值。\n\n- 代码\n\n  ```c\n  /* \n   * allOddBits - return 1 if all odd-numbered bits in word set to 1\n   *   where bits are numbered from 0 (least significant) to 31 (most significant)\n   *   Examples allOddBits(0xFFFFFFFD) = 0, allOddBits(0xAAAAAAAA) = 1\n   *   Legal ops: ! ~ & ^ | + << >>\n   *   Max ops: 12\n   *   Rating: 2\n   */\n  int allOddBits(int x) {\n    int mask = 0xAA+(0xAA<<8);\n    mask=mask+(mask<<16);\n    return !((mask&x)^mask);\n  }\n  ```\n\n- 思路\n\n  这个题目还是比较简单的，采用掩码方式解决。首先要构造掩码，使用移位运算符构造出奇数位全1的数 `mask` ，然后获取输入 `x` 值的奇数位，其他位清零（`mask&x`），然后与 `mask` 进行异或操作，若相同则最终结果为0，然后返回其值的逻辑非。\n\n#### negate(x)\n\n> 不使用 `-` 操作符，求 `-x` 值。这个题目是常识。\n\n- 代码\n\n  ```c\n  /* \n   * negate - return -x \n   *   Example: negate(1) = -1.\n   *   Legal ops: ! ~ & ^ | + << >>\n   *   Max ops: 5\n   *   Rating: 2\n   */\n  int negate(int x) {\n    return ~x+1;\n  }\n  ```\n\n- 思路\n\n  补码实际上是一个`阿贝尔群`，对于 `x`，`-x` 是其补码，所以 `-x` 可以通过对 `x` 取反加1得到。\n\n#### isAsciiDigit(x)\n\n> 计算输入值是否是数字 0-9 的 `ASCII` 值。这个题刚开始还是比较懵的，不过这个题让我认识到了位级操作的强大。\n\n- 代码\n\n  ```c\n  /* \n   * isAsciiDigit - return 1 if 0x30 <= x <= 0x39 (ASCII codes for characters '0' to '9')\n   *   Example: isAsciiDigit(0x35) = 1.\n   *            isAsciiDigit(0x3a) = 0.\n   *            isAsciiDigit(0x05) = 0.\n   *   Legal ops: ! ~ & ^ | + << >>\n   *   Max ops: 15\n   *   Rating: 3\n   */\n  int isAsciiDigit(int x) {\n    int sign = 0x1<<31;\n    int upperBound = ~(sign|0x39);\n    int lowerBound = ~0x30;\n    upperBound = sign&(upperBound+x)>>31;\n    lowerBound = sign&(lowerBound+1+x)>>31;\n    return !(upperBound|lowerBound);\n  }\n  ```\n\n- 思路\n\n  通过位级运算计算 `x` 是否在 0x30 - 0x39 范围内就是这个题的解决方案。那如何用位级运算来操作呢？我们可以使用两个数，一个数是加上比0x39大的数后符号由正变负，另一个数是加上比0x30小的值时是负数。这两个数是代码中初始化的 `upperBound` 和 `lowerBound`，然后加法之后获取其符号位判断即可。\n\n#### conditional(x, y, z)\n\n> 使用位级运算实现C语言中的 `x?y:z`三目运算符。又是位级运算的一个使用技巧。\n\n- 代码\n\n  ```c\n  /* \n   * conditional - same as x ? y : z \n   *   Example: conditional(3,4,5) = 4\n   *   Legal ops: ! ~ & ^ | + << >>\n   *   Max ops: 16\n   *   Rating: 3\n   */\n  int conditional(int x, int y, int z) {\n    x = !!x;\n    x = ~x+1;\n    return (x&y)|(~x&z);\n  }\n  ```\n\n- 思路\n\n  如果我们根据 `x` 的布尔值转换为全0或全1是不是更容易解决了，即 `x==0` 时位表示是全0的， `x!=0` 时位表示是全1的。这就是1-2行代码，通过获取其布尔值0或1，然后求其补码（0的补码是本身，位表示全0；1的补码是-1，位表示全1）得到想要的结果。然后通过位运算获取最终值。\n\n#### isLessOrEqual(x,y)\n\n> 使用位级运算符实现`<=`\n\n- 代码\n\n  ```c\n  /* \n   * isLessOrEqual - if x <= y  then return 1, else return 0 \n   *   Example: isLessOrEqual(4,5) = 1.\n   *   Legal ops: ! ~ & ^ | + << >>\n   *   Max ops: 24\n   *   Rating: 3\n   */\n  int isLessOrEqual(int x, int y) {\n    int negX=~x+1;//-x\n    int addX=negX+y;//y-x\n    int checkSign = addX>>31&1; //y-x的符号\n    int leftBit = 1<<31;//最大位为1的32位有符号数\n    int xLeft = x&leftBit;//x的符号\n    int yLeft = y&leftBit;//y的符号\n    int bitXor = xLeft ^ yLeft;//x和y符号相同标志位，相同为0不同为1\n    bitXor = (bitXor>>31)&1;//符号相同标志位格式化为0或1\n    return ((!bitXor)&(!checkSign))|(bitXor&(xLeft>>31));//返回1有两种情况：符号相同标志位为0（相同）位与 y-x 的符号为0（y-x>=0）结果为1；符号相同标志位为1（不同）位与x的符号位为1（x<0）\n  }\n  ```\n\n- 思路\n\n通过位运算实现比较两个数的大小，无非两种情况：一是符号不同正数为大，二是符号相同看差值符号。\n\n#### logicalNeg(x)\n\n> 使用位级运算求逻辑非 **`!`**\n\n- 代码\n\n```c\n/* \n * logicalNeg - implement the ! operator, using all of \n *              the legal operators except !\n *   Examples: logicalNeg(3) = 0, logicalNeg(0) = 1\n *   Legal ops: ~ & ^ | + << >>\n *   Max ops: 12\n *   Rating: 4 \n */\n\nint logicalNeg(int x) {\n  \n  return ((x|(~x+1))>>31)+1;\n}\n\n```\n- 思路\n\n逻辑非就是非0为1，非非0为0。利用其补码（取反加一）的性质，除了0和最小数（符号位为1，其余为0），外其他数都是互为相反数关系（符号位取位或为1）。0和最小数的补码是本身，不过0的符号位与其补码符号位位或为0，最小数的为1。利用这一点得到解决方法。\n\n#### howManyBits(x)\n\n> 求值：“一个数用补码表示最少需要几位？”\n\n- 代码\n\n```c\n/* howManyBits - return the minimum number of bits required to represent x in\n *             two's complement\n *  Examples: howManyBits(12) = 5\n *            howManyBits(298) = 10\n *            howManyBits(-5) = 4\n *            howManyBits(0)  = 1\n *            howManyBits(-1) = 1\n *            howManyBits(0x80000000) = 32\n *  Legal ops: ! ~ & ^ | + << >>\n *  Max ops: 90\n *  Rating: 4\n */\nint howManyBits(int x) {\n  int b16,b8,b4,b2,b1,b0;\n  int sign=x>>31;\n  x = (sign&~x)|(~sign&x);//如果x为正则不变，否则按位取反（这样好找最高位为1的，原来是最高位为0的，这样也将符号位去掉了）\n\n\n// 不断缩小范围\n  b16 = !!(x>>16)<<4;//高十六位是否有1\n  x = x>>b16;//如果有（至少需要16位），则将原数右移16位\n  b8 = !!(x>>8)<<3;//剩余位高8位是否有1\n  x = x>>b8;//如果有（至少需要16+8=24位），则右移8位\n  b4 = !!(x>>4)<<2;//同理\n  x = x>>b4;\n  b2 = !!(x>>2)<<1;\n  x = x>>b2;\n  b1 = !!(x>>1);\n  x = x>>b1;\n  b0 = x;\n  return b16+b8+b4+b2+b1+b0+1;//+1表示加上符号位\n}\n\n```\n\n- 思路\n\n如果是一个正数，则需要找到它最高的一位（假设是n）是1的，再加上符号位，结果为n+1；如果是一个负数，则需要知道其最高的一位是0的（例如4位的1101和三位的101补码表示的是一个值：-3，最少需要3位来表示）。\n\n\n#### floatScale2(f)\n\n> 求2乘一个浮点数\n\n- 代码\n\n```c\n/* \n * floatScale2 - Return bit-level equivalent of expression 2*f for\n *   floating point argument f.\n *   Both the argument and result are passed as unsigned int's, but\n *   they are to be interpreted as the bit-level representation of\n *   single-precision floating point values.\n *   When argument is NaN, return argument\n *   Legal ops: Any integer/unsigned operations incl. ||, &&. also if, while\n *   Max ops: 30\n *   Rating: 4\n */\nunsigned floatScale2(unsigned uf) {\n  int exp = (uf&0x7f800000)>>23;\n  int sign = uf&(1<<31);\n  if(exp==0) return uf<<1|sign;\n  if(exp==255) return uf;\n  exp++;\n  if(exp==255) return 0x7f800000|sign;\n  return (exp<<23)|(uf&0x807fffff);\n}\n\n\n```\n\n- 思路\n\n首先排除无穷小、0、无穷大和非数值NaN，此时浮点数指数部分（`真正指数+bias`）分别存储的的为0，0，,255，255。这些情况，无穷大和NaN都只需要返回参数（$2\\times\\infty=\\infty,2\\times NaN=NaN$），无穷小和0只需要将原数乘二再加上符号位就行了（并不会越界）。剩下的情况，如果指数+1之后为指数为255则返回原符号无穷大，否则返回指数+1之后的原符号数。\n\n#### floatFloat2Int(f)\n\n> 将浮点数转换为整数\n\n- 代码\n\n```c\n/* \n * floatFloat2Int - Return bit-level equivalent of expression (int) f\n *   for floating point argument f.\n *   Argument is passed as unsigned int, but\n *   it is to be interpreted as the bit-level representation of a\n *   single-precision floating point value.\n *   Anything out of range (including NaN and infinity) should return\n *   0x80000000u.\n *   Legal ops: Any integer/unsigned operations incl. ||, &&. also if, while\n *   Max ops: 30\n *   Rating: 4\n */\nint floatFloat2Int(unsigned uf) {\n  int s_    = uf>>31;\n  int exp_  = ((uf&0x7f800000)>>23)-127;\n  int frac_ = (uf&0x007fffff)|0x00800000;\n  if(!(uf&0x7fffffff)) return 0;\n\n  if(exp_ > 31) return 0x80000000;\n  if(exp_ < 0) return 0;\n\n  if(exp_ > 23) frac_ <<= (exp_-23);\n  else frac_ >>= (23-exp_);\n\n  if(!((frac_>>31)^s_)) return frac_;\n  else if(frac_>>31) return 0x80000000;\n  else return ~frac_+1;\n}\n\n```\n\n- 思路\n\n首先考虑特殊情况：如果原浮点值为0则返回0；如果真实指数大于31（frac部分是大于等于1的，1<<31位会覆盖符号位），返回规定的溢出值**0x80000000u**；如果$exp<0$（1右移x位,x>0，结果为0）则返回0。剩下的情况：首先把小数部分（23位）转化为整数（和23比较），然后判断是否溢出：如果和原符号相同则直接返回，否则如果结果为负（原来为正）则溢出返回越界指定值**0x80000000u**，否则原来为负，结果为正，则需要返回其补码（相反数）。\n\n\n{% note info %}\n\n**C语言的浮点数强转为整数怎么转的？**\n\n利用位级表示进行强转！\n\n{% endnote %}\n\n#### floatPower2(x)\n\n> 求$2.0^x$\n\n- 代码\n\n```c\n/* \n * floatPower2 - Return bit-level equivalent of the expression 2.0^x\n *   (2.0 raised to the power x) for any 32-bit integer x.\n *\n *   The unsigned value that is returned should have the identical bit\n *   representation as the single-precision floating-point number 2.0^x.\n *   If the result is too small to be represented as a denorm, return\n *   0. If too large, return +INF.\n * \n *   Legal ops: Any integer/unsigned operations incl. ||, &&. Also if, while \n *   Max ops: 31 \n *   Rating: 4\n */\nunsigned floatPower2(int x) {\n\n  int INF = 0xff<<23;\n  int exp = x + 127;\n  if(exp <= 0) return 0;\n  if(exp >= 255) return INF;\n  return exp << 23;\n}\n\n```\n\n- 思路\n\n2.0的位级表示（$1.0\\times2^1$）：符号位：0，指数：1+127=128，frac=1.0-1=0。$2.0^x=(1.0\\times2^1)^x=1.0\\times2^x$，所以x就当做真正的指数的。\n\n这个比较简单，首先得到偏移之后的指数值e，如果e小于等于0（为0时，结果为0，因为2.0的浮点表示frac部分为0），对应的如果e大于等于255则为无穷大或越界了。否则返回正常浮点值，frac为0，直接对应指数即可。\n\n\n## 结果\n\n> 很遗憾，最终的一个题目`floatPower2`始终无法通过，不过不是逻辑上的错误，在VS2017上完全可以运行，没有进入死循环。（个人感觉可能是官方的评测出了问题:-(，:cry: ）\n\n![](csapp-lab-1/result.png)\n\n\n\n## 关于本次实验的思考\n\n### 所感\n\n这是CSAPP实验的第一次实验，接下来还有10个Lab等着我，希望我能够坚持下来吧。做本次实验的有以下几点感受：\n- 大多题目都没有思路，或者是自己懒得想，有一些题目是照搬别人的代码\n- 效率太低，这个实验在2019寒假前就开始做了，直到2019三月中旬才完成，有的题目甚至需要思考1个小时甚至更多。\n- 自己变笨了，想到奶奶小时候一直说的话：*拳不离手，曲不离口，三天不动手生，三天不念口生，脑越用越灵，手越用越巧，脑子不学要生锈，人不学习要落后*，果然如此，大学后长期懒散（slack）惯了。\n\n### 所得\n\n- 基本的位操作指令\n- 掌握了IEEE 754标准的浮点数格式和使用方法\n\n\n### 下一步\n\n虽然实验过程很坎坷，但是所有代码都搞懂了，以后有机会再二刷吧。本次实验的基础收获当然是关于信息的位级表示相关的内容了，对一些位级运算符更加熟悉了一些。不过更大的收获是实验所感给我敲响的警钟，如下：\n\n1. 实验必须自己做，不会首先参考知识点的搜索，其次在找方法源码\n2. 实验必须要总结，总结自己实验的思路\n3. 总结实验的学习方法和如何提高效率问题\n\n\n","source":"_posts/csapp-lab-1.md","raw":"---\ntitle: CSAPP 之 Data Lab\ndate: 2019-02-12 17:24:27\ntags:\n- Operating System\n- CSAPP\n- CSAPP Lab\nmathjax: true\ncategories:\n- Computer Science\n- Operating System\n\n---\n\n{% note default %}\n\n纸上得来终觉浅，绝知此事要躬行。\n\n{% endnote %}\n\n<!-- more -->\n---\n\n## CSAPP 实验记录\n\n{% note info %}\n\n**[本系列文章](/tags/CSAPP-Lab/)主要记录 CSAPP 3.0 的实验过程，所有实验记录文章请查看[这儿](/tags/CSAPP-Lab/)**\n{% endnote %}\n\n\n快速开始请访问 `CSAPP` [Lab](http://csapp.cs.cmu.edu/3e/labs.html) 官网，本次实验记录是基于 CSAPP 3.0，实验日期始于：`2019-1-5`\n\n\n\n***实验打算采用以下框架来记录***\n\n- 题目列表\n- 实验题目题解\n  - 题解代码\n  - 题目思考\n- 结果\n- 关于本次实验的思考\n\n\n\n> 当真正开始做实验的时候，才发现自己有多菜。\n\n\n\n![1546740946420](csapp-lab-1/1546740914782.png)\n\n\n\n## Data Lab\n\n开始做 `CSAPP` 的实验了，这次是第一次实验，内容是关于计算机信息的表示，主要是位操作、整数题和浮点数相关的题。\n\n\n\n\n\n### 题目列表\n\n|         名称         |            描述             | 难度 | 指令数目 |\n| :------------------: | :-------------------------: | :--: | :------: |\n|     bitXor(x,y)      |    只使用`~`和`&`实现`^`    |  1   |    14    |\n|        tmin()        |        返回最小补码         |  1   |    4     |\n|      isTmax(x)       |    判断是否是补码最大值     |  1   |    10    |\n|    allOddBits(x)     | 判断补码所有奇数位是否都是1 |  2   |    12    |\n|      negate(x)       |  不使用负号 `-` 实现 `-x`   |  2   |    5     |\n|   isAsciiDigit(x)    | 判断 `x` 是否是 `ASCII` 码  |  3   |    15    |\n| conditional(x, y, z) |  类似于 C 语言中的 `x?y:z`  |  3   |    16    |\n|  isLessOrEqual(x,y)  |           `x<=y`            |  3   |    24    |\n|    logicalNeg(x)     | 计算 `!x` 而不用 `!` 运算符 |  4   |    12    |\n|    howManyBits(x)    | 计算表达 `x` 所需的最少位数 |  4   |    90    |\n|   floatScale2(uf)    |        计算 `2.0*uf`        |  4   |    30    |\n|  floatFloat2Int(uf)  |       计算 `(int) f`        |  4   |    30    |\n|    floatPower2(x)    |        计算 $2.0^x$         |  4   |    30    |\n\n### 题解\n\n#### bitXor(x,y)\n\n> 只使用两种位运算实现异或操作。这个算是一个比较简单的问题了，难度系数1。学数电和离散二布尔代数的时候了解过。\n\n- 代码\n\n  ```c\n  /* \n   * bitXor - x^y using only ~ and & \n   *   Example: bitXor(4, 5) = 1\n   *   Legal ops: ~ &\n   *   Max ops: 14\n   *   Rating: 1\n   */\n  int bitXor(int x, int y) {\n    return ~(~x&~y)&~(x&y);\n  }\n  ```\n\n\n- 思路\n\n  根据布尔代数，可以通过 `~` 和 `&` ，即非和与操作实现异或操作。所谓异或就是当参与运算的两个二进制数不同时结果才为1，其他情况为0。`C` 语言中的位操作对基本类型变量进行运算就是对类型中的每一位进行位操作。所以结果可以使用“非”和“与”计算**不是同时为0情况和不是同时为1的情况进行位与**，即`~(~x&~y)&~(x&y)` 。\n\n#### tmin()\n\n> 使用位运算获取对2补码的最小 `int` 值。这个题目也是比较简单。\n\n- 代码\n\n  ```c\n  /* \n   * tmin - return minimum two's complement integer \n   *   Legal ops: ! ~ & ^ | + << >>\n   *   Max ops: 4\n   *   Rating: 1\n   */\n  int tmin(void) {\n    return 0x1<<31;\n  }\n  ```\n\n- 思路\n\n  C 语言中 `int` 类型是32位，即4字节数。**补码最小值就是符号位为1，其余全为0。**所以只需要得到这个值就行了，我采用的是对数值 `0x1` 进行移位运算，得到结果。\n\n#### isTmax(x)\n\n> 通过位运算计算是否是补码最大值。\n\n- 代码\n\n  ```c\n  /*\n   * isTmax - returns 1 if x is the maximum, two's complement number,\n   *     and 0 otherwise \n   *   Legal ops: ! ~ & ^ | +\n   *   Max ops: 10\n   *   Rating: 1\n   */\n  int isTmax(int x) {\n    int i = x+1;//Tmin,1000...\n    x=x+i;//-1,1111...\n    x=~x;//0,0000...\n    i=!i;//exclude x=0xffff...\n    x=x+i;//exclude x=0xffff...\n    return !x;\n  }\n  ```\n\n- 思路\n\n  做这个题目的前提就是必须知道补码最大值是多少，这当然是针对 `int` 类型来说的，最大值当然是符号位为0，其余全是1，这是补码规则，不明其意则 Google。在此说一下个人理解，最终返回值为 0 或 1，要想判断给定数 `x` 是不是补码最大值（`0x0111,1111,1111,1111`），则需要将给定值 `x` 向全 0 值转换判断，因为非0布尔值就是1，不管你是1还是2。根据我标注的代码注释理解，如果 `x` 是最大值，将其转换为全0有很多方法，不过最终要排除转换过程中其他的数值，比如本例子中需要排除`0xffffffffffffffff` 的情况：将 x 加1的值再和 x 相加，得到了全1（函数第二行），然后取反得到全0，**因为补码-1也有这个特点**，所以要排除，假设 x 是 -1，则 +1 后为全 0，否则不为全 0，函数4-5行则是排除这种情况。\n\n#### allOddBits(x)\n\n> 判断所有奇数位是否都为1，这里的奇数指的是位的阶级是2的几次幂。重在思考转换规律，如何转换为对应的布尔值。\n\n- 代码\n\n  ```c\n  /* \n   * allOddBits - return 1 if all odd-numbered bits in word set to 1\n   *   where bits are numbered from 0 (least significant) to 31 (most significant)\n   *   Examples allOddBits(0xFFFFFFFD) = 0, allOddBits(0xAAAAAAAA) = 1\n   *   Legal ops: ! ~ & ^ | + << >>\n   *   Max ops: 12\n   *   Rating: 2\n   */\n  int allOddBits(int x) {\n    int mask = 0xAA+(0xAA<<8);\n    mask=mask+(mask<<16);\n    return !((mask&x)^mask);\n  }\n  ```\n\n- 思路\n\n  这个题目还是比较简单的，采用掩码方式解决。首先要构造掩码，使用移位运算符构造出奇数位全1的数 `mask` ，然后获取输入 `x` 值的奇数位，其他位清零（`mask&x`），然后与 `mask` 进行异或操作，若相同则最终结果为0，然后返回其值的逻辑非。\n\n#### negate(x)\n\n> 不使用 `-` 操作符，求 `-x` 值。这个题目是常识。\n\n- 代码\n\n  ```c\n  /* \n   * negate - return -x \n   *   Example: negate(1) = -1.\n   *   Legal ops: ! ~ & ^ | + << >>\n   *   Max ops: 5\n   *   Rating: 2\n   */\n  int negate(int x) {\n    return ~x+1;\n  }\n  ```\n\n- 思路\n\n  补码实际上是一个`阿贝尔群`，对于 `x`，`-x` 是其补码，所以 `-x` 可以通过对 `x` 取反加1得到。\n\n#### isAsciiDigit(x)\n\n> 计算输入值是否是数字 0-9 的 `ASCII` 值。这个题刚开始还是比较懵的，不过这个题让我认识到了位级操作的强大。\n\n- 代码\n\n  ```c\n  /* \n   * isAsciiDigit - return 1 if 0x30 <= x <= 0x39 (ASCII codes for characters '0' to '9')\n   *   Example: isAsciiDigit(0x35) = 1.\n   *            isAsciiDigit(0x3a) = 0.\n   *            isAsciiDigit(0x05) = 0.\n   *   Legal ops: ! ~ & ^ | + << >>\n   *   Max ops: 15\n   *   Rating: 3\n   */\n  int isAsciiDigit(int x) {\n    int sign = 0x1<<31;\n    int upperBound = ~(sign|0x39);\n    int lowerBound = ~0x30;\n    upperBound = sign&(upperBound+x)>>31;\n    lowerBound = sign&(lowerBound+1+x)>>31;\n    return !(upperBound|lowerBound);\n  }\n  ```\n\n- 思路\n\n  通过位级运算计算 `x` 是否在 0x30 - 0x39 范围内就是这个题的解决方案。那如何用位级运算来操作呢？我们可以使用两个数，一个数是加上比0x39大的数后符号由正变负，另一个数是加上比0x30小的值时是负数。这两个数是代码中初始化的 `upperBound` 和 `lowerBound`，然后加法之后获取其符号位判断即可。\n\n#### conditional(x, y, z)\n\n> 使用位级运算实现C语言中的 `x?y:z`三目运算符。又是位级运算的一个使用技巧。\n\n- 代码\n\n  ```c\n  /* \n   * conditional - same as x ? y : z \n   *   Example: conditional(3,4,5) = 4\n   *   Legal ops: ! ~ & ^ | + << >>\n   *   Max ops: 16\n   *   Rating: 3\n   */\n  int conditional(int x, int y, int z) {\n    x = !!x;\n    x = ~x+1;\n    return (x&y)|(~x&z);\n  }\n  ```\n\n- 思路\n\n  如果我们根据 `x` 的布尔值转换为全0或全1是不是更容易解决了，即 `x==0` 时位表示是全0的， `x!=0` 时位表示是全1的。这就是1-2行代码，通过获取其布尔值0或1，然后求其补码（0的补码是本身，位表示全0；1的补码是-1，位表示全1）得到想要的结果。然后通过位运算获取最终值。\n\n#### isLessOrEqual(x,y)\n\n> 使用位级运算符实现`<=`\n\n- 代码\n\n  ```c\n  /* \n   * isLessOrEqual - if x <= y  then return 1, else return 0 \n   *   Example: isLessOrEqual(4,5) = 1.\n   *   Legal ops: ! ~ & ^ | + << >>\n   *   Max ops: 24\n   *   Rating: 3\n   */\n  int isLessOrEqual(int x, int y) {\n    int negX=~x+1;//-x\n    int addX=negX+y;//y-x\n    int checkSign = addX>>31&1; //y-x的符号\n    int leftBit = 1<<31;//最大位为1的32位有符号数\n    int xLeft = x&leftBit;//x的符号\n    int yLeft = y&leftBit;//y的符号\n    int bitXor = xLeft ^ yLeft;//x和y符号相同标志位，相同为0不同为1\n    bitXor = (bitXor>>31)&1;//符号相同标志位格式化为0或1\n    return ((!bitXor)&(!checkSign))|(bitXor&(xLeft>>31));//返回1有两种情况：符号相同标志位为0（相同）位与 y-x 的符号为0（y-x>=0）结果为1；符号相同标志位为1（不同）位与x的符号位为1（x<0）\n  }\n  ```\n\n- 思路\n\n通过位运算实现比较两个数的大小，无非两种情况：一是符号不同正数为大，二是符号相同看差值符号。\n\n#### logicalNeg(x)\n\n> 使用位级运算求逻辑非 **`!`**\n\n- 代码\n\n```c\n/* \n * logicalNeg - implement the ! operator, using all of \n *              the legal operators except !\n *   Examples: logicalNeg(3) = 0, logicalNeg(0) = 1\n *   Legal ops: ~ & ^ | + << >>\n *   Max ops: 12\n *   Rating: 4 \n */\n\nint logicalNeg(int x) {\n  \n  return ((x|(~x+1))>>31)+1;\n}\n\n```\n- 思路\n\n逻辑非就是非0为1，非非0为0。利用其补码（取反加一）的性质，除了0和最小数（符号位为1，其余为0），外其他数都是互为相反数关系（符号位取位或为1）。0和最小数的补码是本身，不过0的符号位与其补码符号位位或为0，最小数的为1。利用这一点得到解决方法。\n\n#### howManyBits(x)\n\n> 求值：“一个数用补码表示最少需要几位？”\n\n- 代码\n\n```c\n/* howManyBits - return the minimum number of bits required to represent x in\n *             two's complement\n *  Examples: howManyBits(12) = 5\n *            howManyBits(298) = 10\n *            howManyBits(-5) = 4\n *            howManyBits(0)  = 1\n *            howManyBits(-1) = 1\n *            howManyBits(0x80000000) = 32\n *  Legal ops: ! ~ & ^ | + << >>\n *  Max ops: 90\n *  Rating: 4\n */\nint howManyBits(int x) {\n  int b16,b8,b4,b2,b1,b0;\n  int sign=x>>31;\n  x = (sign&~x)|(~sign&x);//如果x为正则不变，否则按位取反（这样好找最高位为1的，原来是最高位为0的，这样也将符号位去掉了）\n\n\n// 不断缩小范围\n  b16 = !!(x>>16)<<4;//高十六位是否有1\n  x = x>>b16;//如果有（至少需要16位），则将原数右移16位\n  b8 = !!(x>>8)<<3;//剩余位高8位是否有1\n  x = x>>b8;//如果有（至少需要16+8=24位），则右移8位\n  b4 = !!(x>>4)<<2;//同理\n  x = x>>b4;\n  b2 = !!(x>>2)<<1;\n  x = x>>b2;\n  b1 = !!(x>>1);\n  x = x>>b1;\n  b0 = x;\n  return b16+b8+b4+b2+b1+b0+1;//+1表示加上符号位\n}\n\n```\n\n- 思路\n\n如果是一个正数，则需要找到它最高的一位（假设是n）是1的，再加上符号位，结果为n+1；如果是一个负数，则需要知道其最高的一位是0的（例如4位的1101和三位的101补码表示的是一个值：-3，最少需要3位来表示）。\n\n\n#### floatScale2(f)\n\n> 求2乘一个浮点数\n\n- 代码\n\n```c\n/* \n * floatScale2 - Return bit-level equivalent of expression 2*f for\n *   floating point argument f.\n *   Both the argument and result are passed as unsigned int's, but\n *   they are to be interpreted as the bit-level representation of\n *   single-precision floating point values.\n *   When argument is NaN, return argument\n *   Legal ops: Any integer/unsigned operations incl. ||, &&. also if, while\n *   Max ops: 30\n *   Rating: 4\n */\nunsigned floatScale2(unsigned uf) {\n  int exp = (uf&0x7f800000)>>23;\n  int sign = uf&(1<<31);\n  if(exp==0) return uf<<1|sign;\n  if(exp==255) return uf;\n  exp++;\n  if(exp==255) return 0x7f800000|sign;\n  return (exp<<23)|(uf&0x807fffff);\n}\n\n\n```\n\n- 思路\n\n首先排除无穷小、0、无穷大和非数值NaN，此时浮点数指数部分（`真正指数+bias`）分别存储的的为0，0，,255，255。这些情况，无穷大和NaN都只需要返回参数（$2\\times\\infty=\\infty,2\\times NaN=NaN$），无穷小和0只需要将原数乘二再加上符号位就行了（并不会越界）。剩下的情况，如果指数+1之后为指数为255则返回原符号无穷大，否则返回指数+1之后的原符号数。\n\n#### floatFloat2Int(f)\n\n> 将浮点数转换为整数\n\n- 代码\n\n```c\n/* \n * floatFloat2Int - Return bit-level equivalent of expression (int) f\n *   for floating point argument f.\n *   Argument is passed as unsigned int, but\n *   it is to be interpreted as the bit-level representation of a\n *   single-precision floating point value.\n *   Anything out of range (including NaN and infinity) should return\n *   0x80000000u.\n *   Legal ops: Any integer/unsigned operations incl. ||, &&. also if, while\n *   Max ops: 30\n *   Rating: 4\n */\nint floatFloat2Int(unsigned uf) {\n  int s_    = uf>>31;\n  int exp_  = ((uf&0x7f800000)>>23)-127;\n  int frac_ = (uf&0x007fffff)|0x00800000;\n  if(!(uf&0x7fffffff)) return 0;\n\n  if(exp_ > 31) return 0x80000000;\n  if(exp_ < 0) return 0;\n\n  if(exp_ > 23) frac_ <<= (exp_-23);\n  else frac_ >>= (23-exp_);\n\n  if(!((frac_>>31)^s_)) return frac_;\n  else if(frac_>>31) return 0x80000000;\n  else return ~frac_+1;\n}\n\n```\n\n- 思路\n\n首先考虑特殊情况：如果原浮点值为0则返回0；如果真实指数大于31（frac部分是大于等于1的，1<<31位会覆盖符号位），返回规定的溢出值**0x80000000u**；如果$exp<0$（1右移x位,x>0，结果为0）则返回0。剩下的情况：首先把小数部分（23位）转化为整数（和23比较），然后判断是否溢出：如果和原符号相同则直接返回，否则如果结果为负（原来为正）则溢出返回越界指定值**0x80000000u**，否则原来为负，结果为正，则需要返回其补码（相反数）。\n\n\n{% note info %}\n\n**C语言的浮点数强转为整数怎么转的？**\n\n利用位级表示进行强转！\n\n{% endnote %}\n\n#### floatPower2(x)\n\n> 求$2.0^x$\n\n- 代码\n\n```c\n/* \n * floatPower2 - Return bit-level equivalent of the expression 2.0^x\n *   (2.0 raised to the power x) for any 32-bit integer x.\n *\n *   The unsigned value that is returned should have the identical bit\n *   representation as the single-precision floating-point number 2.0^x.\n *   If the result is too small to be represented as a denorm, return\n *   0. If too large, return +INF.\n * \n *   Legal ops: Any integer/unsigned operations incl. ||, &&. Also if, while \n *   Max ops: 31 \n *   Rating: 4\n */\nunsigned floatPower2(int x) {\n\n  int INF = 0xff<<23;\n  int exp = x + 127;\n  if(exp <= 0) return 0;\n  if(exp >= 255) return INF;\n  return exp << 23;\n}\n\n```\n\n- 思路\n\n2.0的位级表示（$1.0\\times2^1$）：符号位：0，指数：1+127=128，frac=1.0-1=0。$2.0^x=(1.0\\times2^1)^x=1.0\\times2^x$，所以x就当做真正的指数的。\n\n这个比较简单，首先得到偏移之后的指数值e，如果e小于等于0（为0时，结果为0，因为2.0的浮点表示frac部分为0），对应的如果e大于等于255则为无穷大或越界了。否则返回正常浮点值，frac为0，直接对应指数即可。\n\n\n## 结果\n\n> 很遗憾，最终的一个题目`floatPower2`始终无法通过，不过不是逻辑上的错误，在VS2017上完全可以运行，没有进入死循环。（个人感觉可能是官方的评测出了问题:-(，:cry: ）\n\n![](csapp-lab-1/result.png)\n\n\n\n## 关于本次实验的思考\n\n### 所感\n\n这是CSAPP实验的第一次实验，接下来还有10个Lab等着我，希望我能够坚持下来吧。做本次实验的有以下几点感受：\n- 大多题目都没有思路，或者是自己懒得想，有一些题目是照搬别人的代码\n- 效率太低，这个实验在2019寒假前就开始做了，直到2019三月中旬才完成，有的题目甚至需要思考1个小时甚至更多。\n- 自己变笨了，想到奶奶小时候一直说的话：*拳不离手，曲不离口，三天不动手生，三天不念口生，脑越用越灵，手越用越巧，脑子不学要生锈，人不学习要落后*，果然如此，大学后长期懒散（slack）惯了。\n\n### 所得\n\n- 基本的位操作指令\n- 掌握了IEEE 754标准的浮点数格式和使用方法\n\n\n### 下一步\n\n虽然实验过程很坎坷，但是所有代码都搞懂了，以后有机会再二刷吧。本次实验的基础收获当然是关于信息的位级表示相关的内容了，对一些位级运算符更加熟悉了一些。不过更大的收获是实验所感给我敲响的警钟，如下：\n\n1. 实验必须自己做，不会首先参考知识点的搜索，其次在找方法源码\n2. 实验必须要总结，总结自己实验的思路\n3. 总结实验的学习方法和如何提高效率问题\n\n\n","slug":"csapp-lab-1","published":1,"updated":"2022-01-06T04:09:12.178Z","_id":"cksq5v7o500b5n0pu4pql5tw2","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note default\"><p>纸上得来终觉浅，绝知此事要躬行。</p>\n</div>\n\n<span id=\"more\"></span>\n<hr>\n<h2 id=\"CSAPP-实验记录\"><a href=\"#CSAPP-实验记录\" class=\"headerlink\" title=\"CSAPP 实验记录\"></a>CSAPP 实验记录</h2><div class=\"note info\"><p><strong><a href=\"/tags/CSAPP-Lab/\">本系列文章</a>主要记录 CSAPP 3.0 的实验过程，所有实验记录文章请查看<a href=\"/tags/CSAPP-Lab/\">这儿</a></strong></p>\n</div>\n\n\n<p>快速开始请访问 <code>CSAPP</code> <a href=\"http://csapp.cs.cmu.edu/3e/labs.html\">Lab</a> 官网，本次实验记录是基于 CSAPP 3.0，实验日期始于：<code>2019-1-5</code></p>\n<p><em><strong>实验打算采用以下框架来记录</strong></em></p>\n<ul>\n<li>题目列表</li>\n<li>实验题目题解<ul>\n<li>题解代码</li>\n<li>题目思考</li>\n</ul>\n</li>\n<li>结果</li>\n<li>关于本次实验的思考</li>\n</ul>\n<blockquote>\n<p>当真正开始做实验的时候，才发现自己有多菜。</p>\n</blockquote>\n<p><img data-src=\"csapp-lab-1/1546740914782.png\" alt=\"1546740946420\"></p>\n<h2 id=\"Data-Lab\"><a href=\"#Data-Lab\" class=\"headerlink\" title=\"Data Lab\"></a>Data Lab</h2><p>开始做 <code>CSAPP</code> 的实验了，这次是第一次实验，内容是关于计算机信息的表示，主要是位操作、整数题和浮点数相关的题。</p>\n<h3 id=\"题目列表\"><a href=\"#题目列表\" class=\"headerlink\" title=\"题目列表\"></a>题目列表</h3><table>\n<thead>\n<tr>\n<th align=\"center\">名称</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">难度</th>\n<th align=\"center\">指令数目</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">bitXor(x,y)</td>\n<td align=\"center\">只使用<code>~</code>和<code>&amp;</code>实现<code>^</code></td>\n<td align=\"center\">1</td>\n<td align=\"center\">14</td>\n</tr>\n<tr>\n<td align=\"center\">tmin()</td>\n<td align=\"center\">返回最小补码</td>\n<td align=\"center\">1</td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td align=\"center\">isTmax(x)</td>\n<td align=\"center\">判断是否是补码最大值</td>\n<td align=\"center\">1</td>\n<td align=\"center\">10</td>\n</tr>\n<tr>\n<td align=\"center\">allOddBits(x)</td>\n<td align=\"center\">判断补码所有奇数位是否都是1</td>\n<td align=\"center\">2</td>\n<td align=\"center\">12</td>\n</tr>\n<tr>\n<td align=\"center\">negate(x)</td>\n<td align=\"center\">不使用负号 <code>-</code> 实现 <code>-x</code></td>\n<td align=\"center\">2</td>\n<td align=\"center\">5</td>\n</tr>\n<tr>\n<td align=\"center\">isAsciiDigit(x)</td>\n<td align=\"center\">判断 <code>x</code> 是否是 <code>ASCII</code> 码</td>\n<td align=\"center\">3</td>\n<td align=\"center\">15</td>\n</tr>\n<tr>\n<td align=\"center\">conditional(x, y, z)</td>\n<td align=\"center\">类似于 C 语言中的 <code>x?y:z</code></td>\n<td align=\"center\">3</td>\n<td align=\"center\">16</td>\n</tr>\n<tr>\n<td align=\"center\">isLessOrEqual(x,y)</td>\n<td align=\"center\"><code>x&lt;=y</code></td>\n<td align=\"center\">3</td>\n<td align=\"center\">24</td>\n</tr>\n<tr>\n<td align=\"center\">logicalNeg(x)</td>\n<td align=\"center\">计算 <code>!x</code> 而不用 <code>!</code> 运算符</td>\n<td align=\"center\">4</td>\n<td align=\"center\">12</td>\n</tr>\n<tr>\n<td align=\"center\">howManyBits(x)</td>\n<td align=\"center\">计算表达 <code>x</code> 所需的最少位数</td>\n<td align=\"center\">4</td>\n<td align=\"center\">90</td>\n</tr>\n<tr>\n<td align=\"center\">floatScale2(uf)</td>\n<td align=\"center\">计算 <code>2.0*uf</code></td>\n<td align=\"center\">4</td>\n<td align=\"center\">30</td>\n</tr>\n<tr>\n<td align=\"center\">floatFloat2Int(uf)</td>\n<td align=\"center\">计算 <code>(int) f</code></td>\n<td align=\"center\">4</td>\n<td align=\"center\">30</td>\n</tr>\n<tr>\n<td align=\"center\">floatPower2(x)</td>\n<td align=\"center\">计算 $2.0^x$</td>\n<td align=\"center\">4</td>\n<td align=\"center\">30</td>\n</tr>\n</tbody></table>\n<h3 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h3><h4 id=\"bitXor-x-y\"><a href=\"#bitXor-x-y\" class=\"headerlink\" title=\"bitXor(x,y)\"></a>bitXor(x,y)</h4><blockquote>\n<p>只使用两种位运算实现异或操作。这个算是一个比较简单的问题了，难度系数1。学数电和离散二布尔代数的时候了解过。</p>\n</blockquote>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"> * bitXor - x^y using only ~ and &amp; </span></span><br><span class=\"line\"><span class=\"comment\"> *   Example: bitXor(4, 5) = 1</span></span><br><span class=\"line\"><span class=\"comment\"> *   Legal ops: ~ &amp;</span></span><br><span class=\"line\"><span class=\"comment\"> *   Max ops: 14</span></span><br><span class=\"line\"><span class=\"comment\"> *   Rating: 1</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">bitXor</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ~(~x&amp;~y)&amp;~(x&amp;y);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ul>\n<li><p>思路</p>\n<p>根据布尔代数，可以通过 <code>~</code> 和 <code>&amp;</code> ，即非和与操作实现异或操作。所谓异或就是当参与运算的两个二进制数不同时结果才为1，其他情况为0。<code>C</code> 语言中的位操作对基本类型变量进行运算就是对类型中的每一位进行位操作。所以结果可以使用“非”和“与”计算<strong>不是同时为0情况和不是同时为1的情况进行位与</strong>，即<code>~(~x&amp;~y)&amp;~(x&amp;y)</code> 。</p>\n</li>\n</ul>\n<h4 id=\"tmin\"><a href=\"#tmin\" class=\"headerlink\" title=\"tmin()\"></a>tmin()</h4><blockquote>\n<p>使用位运算获取对2补码的最小 <code>int</code> 值。这个题目也是比较简单。</p>\n</blockquote>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"> * tmin - return minimum two&#x27;s complement integer </span></span><br><span class=\"line\"><span class=\"comment\"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *   Max ops: 4</span></span><br><span class=\"line\"><span class=\"comment\"> *   Rating: 1</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">tmin</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0x1</span>&lt;&lt;<span class=\"number\">31</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>思路</p>\n<p>C 语言中 <code>int</code> 类型是32位，即4字节数。<strong>补码最小值就是符号位为1，其余全为0。</strong>所以只需要得到这个值就行了，我采用的是对数值 <code>0x1</code> 进行移位运算，得到结果。</p>\n</li>\n</ul>\n<h4 id=\"isTmax-x\"><a href=\"#isTmax-x\" class=\"headerlink\" title=\"isTmax(x)\"></a>isTmax(x)</h4><blockquote>\n<p>通过位运算计算是否是补码最大值。</p>\n</blockquote>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * isTmax - returns 1 if x is the maximum, two&#x27;s complement number,</span></span><br><span class=\"line\"><span class=\"comment\"> *     and 0 otherwise </span></span><br><span class=\"line\"><span class=\"comment\"> *   Legal ops: ! ~ &amp; ^ | +</span></span><br><span class=\"line\"><span class=\"comment\"> *   Max ops: 10</span></span><br><span class=\"line\"><span class=\"comment\"> *   Rating: 1</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">isTmax</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> i = x+<span class=\"number\">1</span>;<span class=\"comment\">//Tmin,1000...</span></span><br><span class=\"line\">  x=x+i;<span class=\"comment\">//-1,1111...</span></span><br><span class=\"line\">  x=~x;<span class=\"comment\">//0,0000...</span></span><br><span class=\"line\">  i=!i;<span class=\"comment\">//exclude x=0xffff...</span></span><br><span class=\"line\">  x=x+i;<span class=\"comment\">//exclude x=0xffff...</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> !x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>思路</p>\n<p>做这个题目的前提就是必须知道补码最大值是多少，这当然是针对 <code>int</code> 类型来说的，最大值当然是符号位为0，其余全是1，这是补码规则，不明其意则 Google。在此说一下个人理解，最终返回值为 0 或 1，要想判断给定数 <code>x</code> 是不是补码最大值（<code>0x0111,1111,1111,1111</code>），则需要将给定值 <code>x</code> 向全 0 值转换判断，因为非0布尔值就是1，不管你是1还是2。根据我标注的代码注释理解，如果 <code>x</code> 是最大值，将其转换为全0有很多方法，不过最终要排除转换过程中其他的数值，比如本例子中需要排除<code>0xffffffffffffffff</code> 的情况：将 x 加1的值再和 x 相加，得到了全1（函数第二行），然后取反得到全0，<strong>因为补码-1也有这个特点</strong>，所以要排除，假设 x 是 -1，则 +1 后为全 0，否则不为全 0，函数4-5行则是排除这种情况。</p>\n</li>\n</ul>\n<h4 id=\"allOddBits-x\"><a href=\"#allOddBits-x\" class=\"headerlink\" title=\"allOddBits(x)\"></a>allOddBits(x)</h4><blockquote>\n<p>判断所有奇数位是否都为1，这里的奇数指的是位的阶级是2的几次幂。重在思考转换规律，如何转换为对应的布尔值。</p>\n</blockquote>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"> * allOddBits - return 1 if all odd-numbered bits in word set to 1</span></span><br><span class=\"line\"><span class=\"comment\"> *   where bits are numbered from 0 (least significant) to 31 (most significant)</span></span><br><span class=\"line\"><span class=\"comment\"> *   Examples allOddBits(0xFFFFFFFD) = 0, allOddBits(0xAAAAAAAA) = 1</span></span><br><span class=\"line\"><span class=\"comment\"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *   Max ops: 12</span></span><br><span class=\"line\"><span class=\"comment\"> *   Rating: 2</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">allOddBits</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> mask = <span class=\"number\">0xAA</span>+(<span class=\"number\">0xAA</span>&lt;&lt;<span class=\"number\">8</span>);</span><br><span class=\"line\">  mask=mask+(mask&lt;&lt;<span class=\"number\">16</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> !((mask&amp;x)^mask);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>思路</p>\n<p>这个题目还是比较简单的，采用掩码方式解决。首先要构造掩码，使用移位运算符构造出奇数位全1的数 <code>mask</code> ，然后获取输入 <code>x</code> 值的奇数位，其他位清零（<code>mask&amp;x</code>），然后与 <code>mask</code> 进行异或操作，若相同则最终结果为0，然后返回其值的逻辑非。</p>\n</li>\n</ul>\n<h4 id=\"negate-x\"><a href=\"#negate-x\" class=\"headerlink\" title=\"negate(x)\"></a>negate(x)</h4><blockquote>\n<p>不使用 <code>-</code> 操作符，求 <code>-x</code> 值。这个题目是常识。</p>\n</blockquote>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"> * negate - return -x </span></span><br><span class=\"line\"><span class=\"comment\"> *   Example: negate(1) = -1.</span></span><br><span class=\"line\"><span class=\"comment\"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *   Max ops: 5</span></span><br><span class=\"line\"><span class=\"comment\"> *   Rating: 2</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">negate</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ~x+<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>思路</p>\n<p>补码实际上是一个<code>阿贝尔群</code>，对于 <code>x</code>，<code>-x</code> 是其补码，所以 <code>-x</code> 可以通过对 <code>x</code> 取反加1得到。</p>\n</li>\n</ul>\n<h4 id=\"isAsciiDigit-x\"><a href=\"#isAsciiDigit-x\" class=\"headerlink\" title=\"isAsciiDigit(x)\"></a>isAsciiDigit(x)</h4><blockquote>\n<p>计算输入值是否是数字 0-9 的 <code>ASCII</code> 值。这个题刚开始还是比较懵的，不过这个题让我认识到了位级操作的强大。</p>\n</blockquote>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"> * isAsciiDigit - return 1 if 0x30 &lt;= x &lt;= 0x39 (ASCII codes for characters &#x27;0&#x27; to &#x27;9&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\"> *   Example: isAsciiDigit(0x35) = 1.</span></span><br><span class=\"line\"><span class=\"comment\"> *            isAsciiDigit(0x3a) = 0.</span></span><br><span class=\"line\"><span class=\"comment\"> *            isAsciiDigit(0x05) = 0.</span></span><br><span class=\"line\"><span class=\"comment\"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *   Max ops: 15</span></span><br><span class=\"line\"><span class=\"comment\"> *   Rating: 3</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">isAsciiDigit</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> sign = <span class=\"number\">0x1</span>&lt;&lt;<span class=\"number\">31</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> upperBound = ~(sign|<span class=\"number\">0x39</span>);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> lowerBound = ~<span class=\"number\">0x30</span>;</span><br><span class=\"line\">  upperBound = sign&amp;(upperBound+x)&gt;&gt;<span class=\"number\">31</span>;</span><br><span class=\"line\">  lowerBound = sign&amp;(lowerBound+<span class=\"number\">1</span>+x)&gt;&gt;<span class=\"number\">31</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> !(upperBound|lowerBound);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>思路</p>\n<p>通过位级运算计算 <code>x</code> 是否在 0x30 - 0x39 范围内就是这个题的解决方案。那如何用位级运算来操作呢？我们可以使用两个数，一个数是加上比0x39大的数后符号由正变负，另一个数是加上比0x30小的值时是负数。这两个数是代码中初始化的 <code>upperBound</code> 和 <code>lowerBound</code>，然后加法之后获取其符号位判断即可。</p>\n</li>\n</ul>\n<h4 id=\"conditional-x-y-z\"><a href=\"#conditional-x-y-z\" class=\"headerlink\" title=\"conditional(x, y, z)\"></a>conditional(x, y, z)</h4><blockquote>\n<p>使用位级运算实现C语言中的 <code>x?y:z</code>三目运算符。又是位级运算的一个使用技巧。</p>\n</blockquote>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"> * conditional - same as x ? y : z </span></span><br><span class=\"line\"><span class=\"comment\"> *   Example: conditional(3,4,5) = 4</span></span><br><span class=\"line\"><span class=\"comment\"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *   Max ops: 16</span></span><br><span class=\"line\"><span class=\"comment\"> *   Rating: 3</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">conditional</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> z)</span> </span>&#123;</span><br><span class=\"line\">  x = !!x;</span><br><span class=\"line\">  x = ~x+<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (x&amp;y)|(~x&amp;z);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>思路</p>\n<p>如果我们根据 <code>x</code> 的布尔值转换为全0或全1是不是更容易解决了，即 <code>x==0</code> 时位表示是全0的， <code>x!=0</code> 时位表示是全1的。这就是1-2行代码，通过获取其布尔值0或1，然后求其补码（0的补码是本身，位表示全0；1的补码是-1，位表示全1）得到想要的结果。然后通过位运算获取最终值。</p>\n</li>\n</ul>\n<h4 id=\"isLessOrEqual-x-y\"><a href=\"#isLessOrEqual-x-y\" class=\"headerlink\" title=\"isLessOrEqual(x,y)\"></a>isLessOrEqual(x,y)</h4><blockquote>\n<p>使用位级运算符实现<code>&lt;=</code></p>\n</blockquote>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"> * isLessOrEqual - if x &lt;= y  then return 1, else return 0 </span></span><br><span class=\"line\"><span class=\"comment\"> *   Example: isLessOrEqual(4,5) = 1.</span></span><br><span class=\"line\"><span class=\"comment\"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *   Max ops: 24</span></span><br><span class=\"line\"><span class=\"comment\"> *   Rating: 3</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">isLessOrEqual</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> negX=~x+<span class=\"number\">1</span>;<span class=\"comment\">//-x</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> addX=negX+y;<span class=\"comment\">//y-x</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> checkSign = addX&gt;&gt;<span class=\"number\">31</span>&amp;<span class=\"number\">1</span>; <span class=\"comment\">//y-x的符号</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> leftBit = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">31</span>;<span class=\"comment\">//最大位为1的32位有符号数</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> xLeft = x&amp;leftBit;<span class=\"comment\">//x的符号</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> yLeft = y&amp;leftBit;<span class=\"comment\">//y的符号</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> bitXor = xLeft ^ yLeft;<span class=\"comment\">//x和y符号相同标志位，相同为0不同为1</span></span><br><span class=\"line\">  bitXor = (bitXor&gt;&gt;<span class=\"number\">31</span>)&amp;<span class=\"number\">1</span>;<span class=\"comment\">//符号相同标志位格式化为0或1</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ((!bitXor)&amp;(!checkSign))|(bitXor&amp;(xLeft&gt;&gt;<span class=\"number\">31</span>));<span class=\"comment\">//返回1有两种情况：符号相同标志位为0（相同）位与 y-x 的符号为0（y-x&gt;=0）结果为1；符号相同标志位为1（不同）位与x的符号位为1（x&lt;0）</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>思路</p>\n</li>\n</ul>\n<p>通过位运算实现比较两个数的大小，无非两种情况：一是符号不同正数为大，二是符号相同看差值符号。</p>\n<h4 id=\"logicalNeg-x\"><a href=\"#logicalNeg-x\" class=\"headerlink\" title=\"logicalNeg(x)\"></a>logicalNeg(x)</h4><blockquote>\n<p>使用位级运算求逻辑非 <strong><code>!</code></strong></p>\n</blockquote>\n<ul>\n<li>代码</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"> * logicalNeg - implement the ! operator, using all of </span></span><br><span class=\"line\"><span class=\"comment\"> *              the legal operators except !</span></span><br><span class=\"line\"><span class=\"comment\"> *   Examples: logicalNeg(3) = 0, logicalNeg(0) = 1</span></span><br><span class=\"line\"><span class=\"comment\"> *   Legal ops: ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *   Max ops: 12</span></span><br><span class=\"line\"><span class=\"comment\"> *   Rating: 4 </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">logicalNeg</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> ((x|(~x+<span class=\"number\">1</span>))&gt;&gt;<span class=\"number\">31</span>)+<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>思路</li>\n</ul>\n<p>逻辑非就是非0为1，非非0为0。利用其补码（取反加一）的性质，除了0和最小数（符号位为1，其余为0），外其他数都是互为相反数关系（符号位取位或为1）。0和最小数的补码是本身，不过0的符号位与其补码符号位位或为0，最小数的为1。利用这一点得到解决方法。</p>\n<h4 id=\"howManyBits-x\"><a href=\"#howManyBits-x\" class=\"headerlink\" title=\"howManyBits(x)\"></a>howManyBits(x)</h4><blockquote>\n<p>求值：“一个数用补码表示最少需要几位？”</p>\n</blockquote>\n<ul>\n<li>代码</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* howManyBits - return the minimum number of bits required to represent x in</span></span><br><span class=\"line\"><span class=\"comment\"> *             two&#x27;s complement</span></span><br><span class=\"line\"><span class=\"comment\"> *  Examples: howManyBits(12) = 5</span></span><br><span class=\"line\"><span class=\"comment\"> *            howManyBits(298) = 10</span></span><br><span class=\"line\"><span class=\"comment\"> *            howManyBits(-5) = 4</span></span><br><span class=\"line\"><span class=\"comment\"> *            howManyBits(0)  = 1</span></span><br><span class=\"line\"><span class=\"comment\"> *            howManyBits(-1) = 1</span></span><br><span class=\"line\"><span class=\"comment\"> *            howManyBits(0x80000000) = 32</span></span><br><span class=\"line\"><span class=\"comment\"> *  Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *  Max ops: 90</span></span><br><span class=\"line\"><span class=\"comment\"> *  Rating: 4</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">howManyBits</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> b16,b8,b4,b2,b1,b0;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> sign=x&gt;&gt;<span class=\"number\">31</span>;</span><br><span class=\"line\">  x = (sign&amp;~x)|(~sign&amp;x);<span class=\"comment\">//如果x为正则不变，否则按位取反（这样好找最高位为1的，原来是最高位为0的，这样也将符号位去掉了）</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不断缩小范围</span></span><br><span class=\"line\">  b16 = !!(x&gt;&gt;<span class=\"number\">16</span>)&lt;&lt;<span class=\"number\">4</span>;<span class=\"comment\">//高十六位是否有1</span></span><br><span class=\"line\">  x = x&gt;&gt;b16;<span class=\"comment\">//如果有（至少需要16位），则将原数右移16位</span></span><br><span class=\"line\">  b8 = !!(x&gt;&gt;<span class=\"number\">8</span>)&lt;&lt;<span class=\"number\">3</span>;<span class=\"comment\">//剩余位高8位是否有1</span></span><br><span class=\"line\">  x = x&gt;&gt;b8;<span class=\"comment\">//如果有（至少需要16+8=24位），则右移8位</span></span><br><span class=\"line\">  b4 = !!(x&gt;&gt;<span class=\"number\">4</span>)&lt;&lt;<span class=\"number\">2</span>;<span class=\"comment\">//同理</span></span><br><span class=\"line\">  x = x&gt;&gt;b4;</span><br><span class=\"line\">  b2 = !!(x&gt;&gt;<span class=\"number\">2</span>)&lt;&lt;<span class=\"number\">1</span>;</span><br><span class=\"line\">  x = x&gt;&gt;b2;</span><br><span class=\"line\">  b1 = !!(x&gt;&gt;<span class=\"number\">1</span>);</span><br><span class=\"line\">  x = x&gt;&gt;b1;</span><br><span class=\"line\">  b0 = x;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> b16+b8+b4+b2+b1+b0+<span class=\"number\">1</span>;<span class=\"comment\">//+1表示加上符号位</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>思路</li>\n</ul>\n<p>如果是一个正数，则需要找到它最高的一位（假设是n）是1的，再加上符号位，结果为n+1；如果是一个负数，则需要知道其最高的一位是0的（例如4位的1101和三位的101补码表示的是一个值：-3，最少需要3位来表示）。</p>\n<h4 id=\"floatScale2-f\"><a href=\"#floatScale2-f\" class=\"headerlink\" title=\"floatScale2(f)\"></a>floatScale2(f)</h4><blockquote>\n<p>求2乘一个浮点数</p>\n</blockquote>\n<ul>\n<li>代码</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"> * floatScale2 - Return bit-level equivalent of expression 2*f for</span></span><br><span class=\"line\"><span class=\"comment\"> *   floating point argument f.</span></span><br><span class=\"line\"><span class=\"comment\"> *   Both the argument and result are passed as unsigned int&#x27;s, but</span></span><br><span class=\"line\"><span class=\"comment\"> *   they are to be interpreted as the bit-level representation of</span></span><br><span class=\"line\"><span class=\"comment\"> *   single-precision floating point values.</span></span><br><span class=\"line\"><span class=\"comment\"> *   When argument is NaN, return argument</span></span><br><span class=\"line\"><span class=\"comment\"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span></span><br><span class=\"line\"><span class=\"comment\"> *   Max ops: 30</span></span><br><span class=\"line\"><span class=\"comment\"> *   Rating: 4</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"title\">floatScale2</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> uf)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> <span class=\"built_in\">exp</span> = (uf&amp;<span class=\"number\">0x7f800000</span>)&gt;&gt;<span class=\"number\">23</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> sign = uf&amp;(<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">31</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"built_in\">exp</span>==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> uf&lt;&lt;<span class=\"number\">1</span>|sign;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"built_in\">exp</span>==<span class=\"number\">255</span>) <span class=\"keyword\">return</span> uf;</span><br><span class=\"line\">  <span class=\"built_in\">exp</span>++;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"built_in\">exp</span>==<span class=\"number\">255</span>) <span class=\"keyword\">return</span> <span class=\"number\">0x7f800000</span>|sign;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (<span class=\"built_in\">exp</span>&lt;&lt;<span class=\"number\">23</span>)|(uf&amp;<span class=\"number\">0x807fffff</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>思路</li>\n</ul>\n<p>首先排除无穷小、0、无穷大和非数值NaN，此时浮点数指数部分（<code>真正指数+bias</code>）分别存储的的为0，0，,255，255。这些情况，无穷大和NaN都只需要返回参数（$2\\times\\infty=\\infty,2\\times NaN=NaN$），无穷小和0只需要将原数乘二再加上符号位就行了（并不会越界）。剩下的情况，如果指数+1之后为指数为255则返回原符号无穷大，否则返回指数+1之后的原符号数。</p>\n<h4 id=\"floatFloat2Int-f\"><a href=\"#floatFloat2Int-f\" class=\"headerlink\" title=\"floatFloat2Int(f)\"></a>floatFloat2Int(f)</h4><blockquote>\n<p>将浮点数转换为整数</p>\n</blockquote>\n<ul>\n<li>代码</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"> * floatFloat2Int - Return bit-level equivalent of expression (int) f</span></span><br><span class=\"line\"><span class=\"comment\"> *   for floating point argument f.</span></span><br><span class=\"line\"><span class=\"comment\"> *   Argument is passed as unsigned int, but</span></span><br><span class=\"line\"><span class=\"comment\"> *   it is to be interpreted as the bit-level representation of a</span></span><br><span class=\"line\"><span class=\"comment\"> *   single-precision floating point value.</span></span><br><span class=\"line\"><span class=\"comment\"> *   Anything out of range (including NaN and infinity) should return</span></span><br><span class=\"line\"><span class=\"comment\"> *   0x80000000u.</span></span><br><span class=\"line\"><span class=\"comment\"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span></span><br><span class=\"line\"><span class=\"comment\"> *   Max ops: 30</span></span><br><span class=\"line\"><span class=\"comment\"> *   Rating: 4</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">floatFloat2Int</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> uf)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> s_    = uf&gt;&gt;<span class=\"number\">31</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> exp_  = ((uf&amp;<span class=\"number\">0x7f800000</span>)&gt;&gt;<span class=\"number\">23</span>)<span class=\"number\">-127</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> frac_ = (uf&amp;<span class=\"number\">0x007fffff</span>)|<span class=\"number\">0x00800000</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!(uf&amp;<span class=\"number\">0x7fffffff</span>)) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(exp_ &gt; <span class=\"number\">31</span>) <span class=\"keyword\">return</span> <span class=\"number\">0x80000000</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(exp_ &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(exp_ &gt; <span class=\"number\">23</span>) frac_ &lt;&lt;= (exp_<span class=\"number\">-23</span>);</span><br><span class=\"line\">  <span class=\"keyword\">else</span> frac_ &gt;&gt;= (<span class=\"number\">23</span>-exp_);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!((frac_&gt;&gt;<span class=\"number\">31</span>)^s_)) <span class=\"keyword\">return</span> frac_;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(frac_&gt;&gt;<span class=\"number\">31</span>) <span class=\"keyword\">return</span> <span class=\"number\">0x80000000</span>;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> ~frac_+<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>思路</li>\n</ul>\n<p>首先考虑特殊情况：如果原浮点值为0则返回0；如果真实指数大于31（frac部分是大于等于1的，1&lt;&lt;31位会覆盖符号位），返回规定的溢出值<strong>0x80000000u**；如果$exp&lt;0$（1右移x位,x&gt;0，结果为0）则返回0。剩下的情况：首先把小数部分（23位）转化为整数（和23比较），然后判断是否溢出：如果和原符号相同则直接返回，否则如果结果为负（原来为正）则溢出返回越界指定值</strong>0x80000000u**，否则原来为负，结果为正，则需要返回其补码（相反数）。</p>\n<div class=\"note info\"><p><strong>C语言的浮点数强转为整数怎么转的？</strong></p>\n<p>利用位级表示进行强转！</p>\n</div>\n\n<h4 id=\"floatPower2-x\"><a href=\"#floatPower2-x\" class=\"headerlink\" title=\"floatPower2(x)\"></a>floatPower2(x)</h4><blockquote>\n<p>求$2.0^x$</p>\n</blockquote>\n<ul>\n<li>代码</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"> * floatPower2 - Return bit-level equivalent of the expression 2.0^x</span></span><br><span class=\"line\"><span class=\"comment\"> *   (2.0 raised to the power x) for any 32-bit integer x.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *   The unsigned value that is returned should have the identical bit</span></span><br><span class=\"line\"><span class=\"comment\"> *   representation as the single-precision floating-point number 2.0^x.</span></span><br><span class=\"line\"><span class=\"comment\"> *   If the result is too small to be represented as a denorm, return</span></span><br><span class=\"line\"><span class=\"comment\"> *   0. If too large, return +INF.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. Also if, while </span></span><br><span class=\"line\"><span class=\"comment\"> *   Max ops: 31 </span></span><br><span class=\"line\"><span class=\"comment\"> *   Rating: 4</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"title\">floatPower2</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">int</span> INF = <span class=\"number\">0xff</span>&lt;&lt;<span class=\"number\">23</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> <span class=\"built_in\">exp</span> = x + <span class=\"number\">127</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"built_in\">exp</span> &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"built_in\">exp</span> &gt;= <span class=\"number\">255</span>) <span class=\"keyword\">return</span> INF;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">exp</span> &lt;&lt; <span class=\"number\">23</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>思路</li>\n</ul>\n<p>2.0的位级表示（$1.0\\times2^1$）：符号位：0，指数：1+127=128，frac=1.0-1=0。$2.0^x=(1.0\\times2^1)^x=1.0\\times2^x$，所以x就当做真正的指数的。</p>\n<p>这个比较简单，首先得到偏移之后的指数值e，如果e小于等于0（为0时，结果为0，因为2.0的浮点表示frac部分为0），对应的如果e大于等于255则为无穷大或越界了。否则返回正常浮点值，frac为0，直接对应指数即可。</p>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><blockquote>\n<p>很遗憾，最终的一个题目<code>floatPower2</code>始终无法通过，不过不是逻辑上的错误，在VS2017上完全可以运行，没有进入死循环。（个人感觉可能是官方的评测出了问题:-(，:cry: ）</p>\n</blockquote>\n<p><img data-src=\"csapp-lab-1/result.png\"></p>\n<h2 id=\"关于本次实验的思考\"><a href=\"#关于本次实验的思考\" class=\"headerlink\" title=\"关于本次实验的思考\"></a>关于本次实验的思考</h2><h3 id=\"所感\"><a href=\"#所感\" class=\"headerlink\" title=\"所感\"></a>所感</h3><p>这是CSAPP实验的第一次实验，接下来还有10个Lab等着我，希望我能够坚持下来吧。做本次实验的有以下几点感受：</p>\n<ul>\n<li>大多题目都没有思路，或者是自己懒得想，有一些题目是照搬别人的代码</li>\n<li>效率太低，这个实验在2019寒假前就开始做了，直到2019三月中旬才完成，有的题目甚至需要思考1个小时甚至更多。</li>\n<li>自己变笨了，想到奶奶小时候一直说的话：<em>拳不离手，曲不离口，三天不动手生，三天不念口生，脑越用越灵，手越用越巧，脑子不学要生锈，人不学习要落后</em>，果然如此，大学后长期懒散（slack）惯了。</li>\n</ul>\n<h3 id=\"所得\"><a href=\"#所得\" class=\"headerlink\" title=\"所得\"></a>所得</h3><ul>\n<li>基本的位操作指令</li>\n<li>掌握了IEEE 754标准的浮点数格式和使用方法</li>\n</ul>\n<h3 id=\"下一步\"><a href=\"#下一步\" class=\"headerlink\" title=\"下一步\"></a>下一步</h3><p>虽然实验过程很坎坷，但是所有代码都搞懂了，以后有机会再二刷吧。本次实验的基础收获当然是关于信息的位级表示相关的内容了，对一些位级运算符更加熟悉了一些。不过更大的收获是实验所感给我敲响的警钟，如下：</p>\n<ol>\n<li>实验必须自己做，不会首先参考知识点的搜索，其次在找方法源码</li>\n<li>实验必须要总结，总结自己实验的思路</li>\n<li>总结实验的学习方法和如何提高效率问题</li>\n</ol>\n","site":{"data":{}},"excerpt":"<div class=\"note default\"><p>纸上得来终觉浅，绝知此事要躬行。</p>\n</div>","more":"<hr>\n<h2 id=\"CSAPP-实验记录\"><a href=\"#CSAPP-实验记录\" class=\"headerlink\" title=\"CSAPP 实验记录\"></a>CSAPP 实验记录</h2><div class=\"note info\"><p><strong><a href=\"/tags/CSAPP-Lab/\">本系列文章</a>主要记录 CSAPP 3.0 的实验过程，所有实验记录文章请查看<a href=\"/tags/CSAPP-Lab/\">这儿</a></strong></p>\n</div>\n\n\n<p>快速开始请访问 <code>CSAPP</code> <a href=\"http://csapp.cs.cmu.edu/3e/labs.html\">Lab</a> 官网，本次实验记录是基于 CSAPP 3.0，实验日期始于：<code>2019-1-5</code></p>\n<p><em><strong>实验打算采用以下框架来记录</strong></em></p>\n<ul>\n<li>题目列表</li>\n<li>实验题目题解<ul>\n<li>题解代码</li>\n<li>题目思考</li>\n</ul>\n</li>\n<li>结果</li>\n<li>关于本次实验的思考</li>\n</ul>\n<blockquote>\n<p>当真正开始做实验的时候，才发现自己有多菜。</p>\n</blockquote>\n<p><img data-src=\"csapp-lab-1/1546740914782.png\" alt=\"1546740946420\"></p>\n<h2 id=\"Data-Lab\"><a href=\"#Data-Lab\" class=\"headerlink\" title=\"Data Lab\"></a>Data Lab</h2><p>开始做 <code>CSAPP</code> 的实验了，这次是第一次实验，内容是关于计算机信息的表示，主要是位操作、整数题和浮点数相关的题。</p>\n<h3 id=\"题目列表\"><a href=\"#题目列表\" class=\"headerlink\" title=\"题目列表\"></a>题目列表</h3><table>\n<thead>\n<tr>\n<th align=\"center\">名称</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">难度</th>\n<th align=\"center\">指令数目</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">bitXor(x,y)</td>\n<td align=\"center\">只使用<code>~</code>和<code>&amp;</code>实现<code>^</code></td>\n<td align=\"center\">1</td>\n<td align=\"center\">14</td>\n</tr>\n<tr>\n<td align=\"center\">tmin()</td>\n<td align=\"center\">返回最小补码</td>\n<td align=\"center\">1</td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td align=\"center\">isTmax(x)</td>\n<td align=\"center\">判断是否是补码最大值</td>\n<td align=\"center\">1</td>\n<td align=\"center\">10</td>\n</tr>\n<tr>\n<td align=\"center\">allOddBits(x)</td>\n<td align=\"center\">判断补码所有奇数位是否都是1</td>\n<td align=\"center\">2</td>\n<td align=\"center\">12</td>\n</tr>\n<tr>\n<td align=\"center\">negate(x)</td>\n<td align=\"center\">不使用负号 <code>-</code> 实现 <code>-x</code></td>\n<td align=\"center\">2</td>\n<td align=\"center\">5</td>\n</tr>\n<tr>\n<td align=\"center\">isAsciiDigit(x)</td>\n<td align=\"center\">判断 <code>x</code> 是否是 <code>ASCII</code> 码</td>\n<td align=\"center\">3</td>\n<td align=\"center\">15</td>\n</tr>\n<tr>\n<td align=\"center\">conditional(x, y, z)</td>\n<td align=\"center\">类似于 C 语言中的 <code>x?y:z</code></td>\n<td align=\"center\">3</td>\n<td align=\"center\">16</td>\n</tr>\n<tr>\n<td align=\"center\">isLessOrEqual(x,y)</td>\n<td align=\"center\"><code>x&lt;=y</code></td>\n<td align=\"center\">3</td>\n<td align=\"center\">24</td>\n</tr>\n<tr>\n<td align=\"center\">logicalNeg(x)</td>\n<td align=\"center\">计算 <code>!x</code> 而不用 <code>!</code> 运算符</td>\n<td align=\"center\">4</td>\n<td align=\"center\">12</td>\n</tr>\n<tr>\n<td align=\"center\">howManyBits(x)</td>\n<td align=\"center\">计算表达 <code>x</code> 所需的最少位数</td>\n<td align=\"center\">4</td>\n<td align=\"center\">90</td>\n</tr>\n<tr>\n<td align=\"center\">floatScale2(uf)</td>\n<td align=\"center\">计算 <code>2.0*uf</code></td>\n<td align=\"center\">4</td>\n<td align=\"center\">30</td>\n</tr>\n<tr>\n<td align=\"center\">floatFloat2Int(uf)</td>\n<td align=\"center\">计算 <code>(int) f</code></td>\n<td align=\"center\">4</td>\n<td align=\"center\">30</td>\n</tr>\n<tr>\n<td align=\"center\">floatPower2(x)</td>\n<td align=\"center\">计算 $2.0^x$</td>\n<td align=\"center\">4</td>\n<td align=\"center\">30</td>\n</tr>\n</tbody></table>\n<h3 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h3><h4 id=\"bitXor-x-y\"><a href=\"#bitXor-x-y\" class=\"headerlink\" title=\"bitXor(x,y)\"></a>bitXor(x,y)</h4><blockquote>\n<p>只使用两种位运算实现异或操作。这个算是一个比较简单的问题了，难度系数1。学数电和离散二布尔代数的时候了解过。</p>\n</blockquote>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"> * bitXor - x^y using only ~ and &amp; </span></span><br><span class=\"line\"><span class=\"comment\"> *   Example: bitXor(4, 5) = 1</span></span><br><span class=\"line\"><span class=\"comment\"> *   Legal ops: ~ &amp;</span></span><br><span class=\"line\"><span class=\"comment\"> *   Max ops: 14</span></span><br><span class=\"line\"><span class=\"comment\"> *   Rating: 1</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">bitXor</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ~(~x&amp;~y)&amp;~(x&amp;y);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ul>\n<li><p>思路</p>\n<p>根据布尔代数，可以通过 <code>~</code> 和 <code>&amp;</code> ，即非和与操作实现异或操作。所谓异或就是当参与运算的两个二进制数不同时结果才为1，其他情况为0。<code>C</code> 语言中的位操作对基本类型变量进行运算就是对类型中的每一位进行位操作。所以结果可以使用“非”和“与”计算<strong>不是同时为0情况和不是同时为1的情况进行位与</strong>，即<code>~(~x&amp;~y)&amp;~(x&amp;y)</code> 。</p>\n</li>\n</ul>\n<h4 id=\"tmin\"><a href=\"#tmin\" class=\"headerlink\" title=\"tmin()\"></a>tmin()</h4><blockquote>\n<p>使用位运算获取对2补码的最小 <code>int</code> 值。这个题目也是比较简单。</p>\n</blockquote>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"> * tmin - return minimum two&#x27;s complement integer </span></span><br><span class=\"line\"><span class=\"comment\"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *   Max ops: 4</span></span><br><span class=\"line\"><span class=\"comment\"> *   Rating: 1</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">tmin</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0x1</span>&lt;&lt;<span class=\"number\">31</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>思路</p>\n<p>C 语言中 <code>int</code> 类型是32位，即4字节数。<strong>补码最小值就是符号位为1，其余全为0。</strong>所以只需要得到这个值就行了，我采用的是对数值 <code>0x1</code> 进行移位运算，得到结果。</p>\n</li>\n</ul>\n<h4 id=\"isTmax-x\"><a href=\"#isTmax-x\" class=\"headerlink\" title=\"isTmax(x)\"></a>isTmax(x)</h4><blockquote>\n<p>通过位运算计算是否是补码最大值。</p>\n</blockquote>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * isTmax - returns 1 if x is the maximum, two&#x27;s complement number,</span></span><br><span class=\"line\"><span class=\"comment\"> *     and 0 otherwise </span></span><br><span class=\"line\"><span class=\"comment\"> *   Legal ops: ! ~ &amp; ^ | +</span></span><br><span class=\"line\"><span class=\"comment\"> *   Max ops: 10</span></span><br><span class=\"line\"><span class=\"comment\"> *   Rating: 1</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">isTmax</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> i = x+<span class=\"number\">1</span>;<span class=\"comment\">//Tmin,1000...</span></span><br><span class=\"line\">  x=x+i;<span class=\"comment\">//-1,1111...</span></span><br><span class=\"line\">  x=~x;<span class=\"comment\">//0,0000...</span></span><br><span class=\"line\">  i=!i;<span class=\"comment\">//exclude x=0xffff...</span></span><br><span class=\"line\">  x=x+i;<span class=\"comment\">//exclude x=0xffff...</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> !x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>思路</p>\n<p>做这个题目的前提就是必须知道补码最大值是多少，这当然是针对 <code>int</code> 类型来说的，最大值当然是符号位为0，其余全是1，这是补码规则，不明其意则 Google。在此说一下个人理解，最终返回值为 0 或 1，要想判断给定数 <code>x</code> 是不是补码最大值（<code>0x0111,1111,1111,1111</code>），则需要将给定值 <code>x</code> 向全 0 值转换判断，因为非0布尔值就是1，不管你是1还是2。根据我标注的代码注释理解，如果 <code>x</code> 是最大值，将其转换为全0有很多方法，不过最终要排除转换过程中其他的数值，比如本例子中需要排除<code>0xffffffffffffffff</code> 的情况：将 x 加1的值再和 x 相加，得到了全1（函数第二行），然后取反得到全0，<strong>因为补码-1也有这个特点</strong>，所以要排除，假设 x 是 -1，则 +1 后为全 0，否则不为全 0，函数4-5行则是排除这种情况。</p>\n</li>\n</ul>\n<h4 id=\"allOddBits-x\"><a href=\"#allOddBits-x\" class=\"headerlink\" title=\"allOddBits(x)\"></a>allOddBits(x)</h4><blockquote>\n<p>判断所有奇数位是否都为1，这里的奇数指的是位的阶级是2的几次幂。重在思考转换规律，如何转换为对应的布尔值。</p>\n</blockquote>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"> * allOddBits - return 1 if all odd-numbered bits in word set to 1</span></span><br><span class=\"line\"><span class=\"comment\"> *   where bits are numbered from 0 (least significant) to 31 (most significant)</span></span><br><span class=\"line\"><span class=\"comment\"> *   Examples allOddBits(0xFFFFFFFD) = 0, allOddBits(0xAAAAAAAA) = 1</span></span><br><span class=\"line\"><span class=\"comment\"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *   Max ops: 12</span></span><br><span class=\"line\"><span class=\"comment\"> *   Rating: 2</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">allOddBits</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> mask = <span class=\"number\">0xAA</span>+(<span class=\"number\">0xAA</span>&lt;&lt;<span class=\"number\">8</span>);</span><br><span class=\"line\">  mask=mask+(mask&lt;&lt;<span class=\"number\">16</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> !((mask&amp;x)^mask);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>思路</p>\n<p>这个题目还是比较简单的，采用掩码方式解决。首先要构造掩码，使用移位运算符构造出奇数位全1的数 <code>mask</code> ，然后获取输入 <code>x</code> 值的奇数位，其他位清零（<code>mask&amp;x</code>），然后与 <code>mask</code> 进行异或操作，若相同则最终结果为0，然后返回其值的逻辑非。</p>\n</li>\n</ul>\n<h4 id=\"negate-x\"><a href=\"#negate-x\" class=\"headerlink\" title=\"negate(x)\"></a>negate(x)</h4><blockquote>\n<p>不使用 <code>-</code> 操作符，求 <code>-x</code> 值。这个题目是常识。</p>\n</blockquote>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"> * negate - return -x </span></span><br><span class=\"line\"><span class=\"comment\"> *   Example: negate(1) = -1.</span></span><br><span class=\"line\"><span class=\"comment\"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *   Max ops: 5</span></span><br><span class=\"line\"><span class=\"comment\"> *   Rating: 2</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">negate</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ~x+<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>思路</p>\n<p>补码实际上是一个<code>阿贝尔群</code>，对于 <code>x</code>，<code>-x</code> 是其补码，所以 <code>-x</code> 可以通过对 <code>x</code> 取反加1得到。</p>\n</li>\n</ul>\n<h4 id=\"isAsciiDigit-x\"><a href=\"#isAsciiDigit-x\" class=\"headerlink\" title=\"isAsciiDigit(x)\"></a>isAsciiDigit(x)</h4><blockquote>\n<p>计算输入值是否是数字 0-9 的 <code>ASCII</code> 值。这个题刚开始还是比较懵的，不过这个题让我认识到了位级操作的强大。</p>\n</blockquote>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"> * isAsciiDigit - return 1 if 0x30 &lt;= x &lt;= 0x39 (ASCII codes for characters &#x27;0&#x27; to &#x27;9&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\"> *   Example: isAsciiDigit(0x35) = 1.</span></span><br><span class=\"line\"><span class=\"comment\"> *            isAsciiDigit(0x3a) = 0.</span></span><br><span class=\"line\"><span class=\"comment\"> *            isAsciiDigit(0x05) = 0.</span></span><br><span class=\"line\"><span class=\"comment\"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *   Max ops: 15</span></span><br><span class=\"line\"><span class=\"comment\"> *   Rating: 3</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">isAsciiDigit</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> sign = <span class=\"number\">0x1</span>&lt;&lt;<span class=\"number\">31</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> upperBound = ~(sign|<span class=\"number\">0x39</span>);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> lowerBound = ~<span class=\"number\">0x30</span>;</span><br><span class=\"line\">  upperBound = sign&amp;(upperBound+x)&gt;&gt;<span class=\"number\">31</span>;</span><br><span class=\"line\">  lowerBound = sign&amp;(lowerBound+<span class=\"number\">1</span>+x)&gt;&gt;<span class=\"number\">31</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> !(upperBound|lowerBound);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>思路</p>\n<p>通过位级运算计算 <code>x</code> 是否在 0x30 - 0x39 范围内就是这个题的解决方案。那如何用位级运算来操作呢？我们可以使用两个数，一个数是加上比0x39大的数后符号由正变负，另一个数是加上比0x30小的值时是负数。这两个数是代码中初始化的 <code>upperBound</code> 和 <code>lowerBound</code>，然后加法之后获取其符号位判断即可。</p>\n</li>\n</ul>\n<h4 id=\"conditional-x-y-z\"><a href=\"#conditional-x-y-z\" class=\"headerlink\" title=\"conditional(x, y, z)\"></a>conditional(x, y, z)</h4><blockquote>\n<p>使用位级运算实现C语言中的 <code>x?y:z</code>三目运算符。又是位级运算的一个使用技巧。</p>\n</blockquote>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"> * conditional - same as x ? y : z </span></span><br><span class=\"line\"><span class=\"comment\"> *   Example: conditional(3,4,5) = 4</span></span><br><span class=\"line\"><span class=\"comment\"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *   Max ops: 16</span></span><br><span class=\"line\"><span class=\"comment\"> *   Rating: 3</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">conditional</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> z)</span> </span>&#123;</span><br><span class=\"line\">  x = !!x;</span><br><span class=\"line\">  x = ~x+<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (x&amp;y)|(~x&amp;z);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>思路</p>\n<p>如果我们根据 <code>x</code> 的布尔值转换为全0或全1是不是更容易解决了，即 <code>x==0</code> 时位表示是全0的， <code>x!=0</code> 时位表示是全1的。这就是1-2行代码，通过获取其布尔值0或1，然后求其补码（0的补码是本身，位表示全0；1的补码是-1，位表示全1）得到想要的结果。然后通过位运算获取最终值。</p>\n</li>\n</ul>\n<h4 id=\"isLessOrEqual-x-y\"><a href=\"#isLessOrEqual-x-y\" class=\"headerlink\" title=\"isLessOrEqual(x,y)\"></a>isLessOrEqual(x,y)</h4><blockquote>\n<p>使用位级运算符实现<code>&lt;=</code></p>\n</blockquote>\n<ul>\n<li><p>代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"> * isLessOrEqual - if x &lt;= y  then return 1, else return 0 </span></span><br><span class=\"line\"><span class=\"comment\"> *   Example: isLessOrEqual(4,5) = 1.</span></span><br><span class=\"line\"><span class=\"comment\"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *   Max ops: 24</span></span><br><span class=\"line\"><span class=\"comment\"> *   Rating: 3</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">isLessOrEqual</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> negX=~x+<span class=\"number\">1</span>;<span class=\"comment\">//-x</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> addX=negX+y;<span class=\"comment\">//y-x</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> checkSign = addX&gt;&gt;<span class=\"number\">31</span>&amp;<span class=\"number\">1</span>; <span class=\"comment\">//y-x的符号</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> leftBit = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">31</span>;<span class=\"comment\">//最大位为1的32位有符号数</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> xLeft = x&amp;leftBit;<span class=\"comment\">//x的符号</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> yLeft = y&amp;leftBit;<span class=\"comment\">//y的符号</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> bitXor = xLeft ^ yLeft;<span class=\"comment\">//x和y符号相同标志位，相同为0不同为1</span></span><br><span class=\"line\">  bitXor = (bitXor&gt;&gt;<span class=\"number\">31</span>)&amp;<span class=\"number\">1</span>;<span class=\"comment\">//符号相同标志位格式化为0或1</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ((!bitXor)&amp;(!checkSign))|(bitXor&amp;(xLeft&gt;&gt;<span class=\"number\">31</span>));<span class=\"comment\">//返回1有两种情况：符号相同标志位为0（相同）位与 y-x 的符号为0（y-x&gt;=0）结果为1；符号相同标志位为1（不同）位与x的符号位为1（x&lt;0）</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>思路</p>\n</li>\n</ul>\n<p>通过位运算实现比较两个数的大小，无非两种情况：一是符号不同正数为大，二是符号相同看差值符号。</p>\n<h4 id=\"logicalNeg-x\"><a href=\"#logicalNeg-x\" class=\"headerlink\" title=\"logicalNeg(x)\"></a>logicalNeg(x)</h4><blockquote>\n<p>使用位级运算求逻辑非 <strong><code>!</code></strong></p>\n</blockquote>\n<ul>\n<li>代码</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"> * logicalNeg - implement the ! operator, using all of </span></span><br><span class=\"line\"><span class=\"comment\"> *              the legal operators except !</span></span><br><span class=\"line\"><span class=\"comment\"> *   Examples: logicalNeg(3) = 0, logicalNeg(0) = 1</span></span><br><span class=\"line\"><span class=\"comment\"> *   Legal ops: ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *   Max ops: 12</span></span><br><span class=\"line\"><span class=\"comment\"> *   Rating: 4 </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">logicalNeg</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> ((x|(~x+<span class=\"number\">1</span>))&gt;&gt;<span class=\"number\">31</span>)+<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>思路</li>\n</ul>\n<p>逻辑非就是非0为1，非非0为0。利用其补码（取反加一）的性质，除了0和最小数（符号位为1，其余为0），外其他数都是互为相反数关系（符号位取位或为1）。0和最小数的补码是本身，不过0的符号位与其补码符号位位或为0，最小数的为1。利用这一点得到解决方法。</p>\n<h4 id=\"howManyBits-x\"><a href=\"#howManyBits-x\" class=\"headerlink\" title=\"howManyBits(x)\"></a>howManyBits(x)</h4><blockquote>\n<p>求值：“一个数用补码表示最少需要几位？”</p>\n</blockquote>\n<ul>\n<li>代码</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* howManyBits - return the minimum number of bits required to represent x in</span></span><br><span class=\"line\"><span class=\"comment\"> *             two&#x27;s complement</span></span><br><span class=\"line\"><span class=\"comment\"> *  Examples: howManyBits(12) = 5</span></span><br><span class=\"line\"><span class=\"comment\"> *            howManyBits(298) = 10</span></span><br><span class=\"line\"><span class=\"comment\"> *            howManyBits(-5) = 4</span></span><br><span class=\"line\"><span class=\"comment\"> *            howManyBits(0)  = 1</span></span><br><span class=\"line\"><span class=\"comment\"> *            howManyBits(-1) = 1</span></span><br><span class=\"line\"><span class=\"comment\"> *            howManyBits(0x80000000) = 32</span></span><br><span class=\"line\"><span class=\"comment\"> *  Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *  Max ops: 90</span></span><br><span class=\"line\"><span class=\"comment\"> *  Rating: 4</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">howManyBits</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> b16,b8,b4,b2,b1,b0;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> sign=x&gt;&gt;<span class=\"number\">31</span>;</span><br><span class=\"line\">  x = (sign&amp;~x)|(~sign&amp;x);<span class=\"comment\">//如果x为正则不变，否则按位取反（这样好找最高位为1的，原来是最高位为0的，这样也将符号位去掉了）</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不断缩小范围</span></span><br><span class=\"line\">  b16 = !!(x&gt;&gt;<span class=\"number\">16</span>)&lt;&lt;<span class=\"number\">4</span>;<span class=\"comment\">//高十六位是否有1</span></span><br><span class=\"line\">  x = x&gt;&gt;b16;<span class=\"comment\">//如果有（至少需要16位），则将原数右移16位</span></span><br><span class=\"line\">  b8 = !!(x&gt;&gt;<span class=\"number\">8</span>)&lt;&lt;<span class=\"number\">3</span>;<span class=\"comment\">//剩余位高8位是否有1</span></span><br><span class=\"line\">  x = x&gt;&gt;b8;<span class=\"comment\">//如果有（至少需要16+8=24位），则右移8位</span></span><br><span class=\"line\">  b4 = !!(x&gt;&gt;<span class=\"number\">4</span>)&lt;&lt;<span class=\"number\">2</span>;<span class=\"comment\">//同理</span></span><br><span class=\"line\">  x = x&gt;&gt;b4;</span><br><span class=\"line\">  b2 = !!(x&gt;&gt;<span class=\"number\">2</span>)&lt;&lt;<span class=\"number\">1</span>;</span><br><span class=\"line\">  x = x&gt;&gt;b2;</span><br><span class=\"line\">  b1 = !!(x&gt;&gt;<span class=\"number\">1</span>);</span><br><span class=\"line\">  x = x&gt;&gt;b1;</span><br><span class=\"line\">  b0 = x;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> b16+b8+b4+b2+b1+b0+<span class=\"number\">1</span>;<span class=\"comment\">//+1表示加上符号位</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>思路</li>\n</ul>\n<p>如果是一个正数，则需要找到它最高的一位（假设是n）是1的，再加上符号位，结果为n+1；如果是一个负数，则需要知道其最高的一位是0的（例如4位的1101和三位的101补码表示的是一个值：-3，最少需要3位来表示）。</p>\n<h4 id=\"floatScale2-f\"><a href=\"#floatScale2-f\" class=\"headerlink\" title=\"floatScale2(f)\"></a>floatScale2(f)</h4><blockquote>\n<p>求2乘一个浮点数</p>\n</blockquote>\n<ul>\n<li>代码</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"> * floatScale2 - Return bit-level equivalent of expression 2*f for</span></span><br><span class=\"line\"><span class=\"comment\"> *   floating point argument f.</span></span><br><span class=\"line\"><span class=\"comment\"> *   Both the argument and result are passed as unsigned int&#x27;s, but</span></span><br><span class=\"line\"><span class=\"comment\"> *   they are to be interpreted as the bit-level representation of</span></span><br><span class=\"line\"><span class=\"comment\"> *   single-precision floating point values.</span></span><br><span class=\"line\"><span class=\"comment\"> *   When argument is NaN, return argument</span></span><br><span class=\"line\"><span class=\"comment\"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span></span><br><span class=\"line\"><span class=\"comment\"> *   Max ops: 30</span></span><br><span class=\"line\"><span class=\"comment\"> *   Rating: 4</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"title\">floatScale2</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> uf)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> <span class=\"built_in\">exp</span> = (uf&amp;<span class=\"number\">0x7f800000</span>)&gt;&gt;<span class=\"number\">23</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> sign = uf&amp;(<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">31</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"built_in\">exp</span>==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> uf&lt;&lt;<span class=\"number\">1</span>|sign;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"built_in\">exp</span>==<span class=\"number\">255</span>) <span class=\"keyword\">return</span> uf;</span><br><span class=\"line\">  <span class=\"built_in\">exp</span>++;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"built_in\">exp</span>==<span class=\"number\">255</span>) <span class=\"keyword\">return</span> <span class=\"number\">0x7f800000</span>|sign;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (<span class=\"built_in\">exp</span>&lt;&lt;<span class=\"number\">23</span>)|(uf&amp;<span class=\"number\">0x807fffff</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>思路</li>\n</ul>\n<p>首先排除无穷小、0、无穷大和非数值NaN，此时浮点数指数部分（<code>真正指数+bias</code>）分别存储的的为0，0，,255，255。这些情况，无穷大和NaN都只需要返回参数（$2\\times\\infty=\\infty,2\\times NaN=NaN$），无穷小和0只需要将原数乘二再加上符号位就行了（并不会越界）。剩下的情况，如果指数+1之后为指数为255则返回原符号无穷大，否则返回指数+1之后的原符号数。</p>\n<h4 id=\"floatFloat2Int-f\"><a href=\"#floatFloat2Int-f\" class=\"headerlink\" title=\"floatFloat2Int(f)\"></a>floatFloat2Int(f)</h4><blockquote>\n<p>将浮点数转换为整数</p>\n</blockquote>\n<ul>\n<li>代码</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"> * floatFloat2Int - Return bit-level equivalent of expression (int) f</span></span><br><span class=\"line\"><span class=\"comment\"> *   for floating point argument f.</span></span><br><span class=\"line\"><span class=\"comment\"> *   Argument is passed as unsigned int, but</span></span><br><span class=\"line\"><span class=\"comment\"> *   it is to be interpreted as the bit-level representation of a</span></span><br><span class=\"line\"><span class=\"comment\"> *   single-precision floating point value.</span></span><br><span class=\"line\"><span class=\"comment\"> *   Anything out of range (including NaN and infinity) should return</span></span><br><span class=\"line\"><span class=\"comment\"> *   0x80000000u.</span></span><br><span class=\"line\"><span class=\"comment\"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span></span><br><span class=\"line\"><span class=\"comment\"> *   Max ops: 30</span></span><br><span class=\"line\"><span class=\"comment\"> *   Rating: 4</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">floatFloat2Int</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> uf)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> s_    = uf&gt;&gt;<span class=\"number\">31</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> exp_  = ((uf&amp;<span class=\"number\">0x7f800000</span>)&gt;&gt;<span class=\"number\">23</span>)<span class=\"number\">-127</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> frac_ = (uf&amp;<span class=\"number\">0x007fffff</span>)|<span class=\"number\">0x00800000</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!(uf&amp;<span class=\"number\">0x7fffffff</span>)) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(exp_ &gt; <span class=\"number\">31</span>) <span class=\"keyword\">return</span> <span class=\"number\">0x80000000</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(exp_ &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(exp_ &gt; <span class=\"number\">23</span>) frac_ &lt;&lt;= (exp_<span class=\"number\">-23</span>);</span><br><span class=\"line\">  <span class=\"keyword\">else</span> frac_ &gt;&gt;= (<span class=\"number\">23</span>-exp_);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!((frac_&gt;&gt;<span class=\"number\">31</span>)^s_)) <span class=\"keyword\">return</span> frac_;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(frac_&gt;&gt;<span class=\"number\">31</span>) <span class=\"keyword\">return</span> <span class=\"number\">0x80000000</span>;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> ~frac_+<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>思路</li>\n</ul>\n<p>首先考虑特殊情况：如果原浮点值为0则返回0；如果真实指数大于31（frac部分是大于等于1的，1&lt;&lt;31位会覆盖符号位），返回规定的溢出值<strong>0x80000000u**；如果$exp&lt;0$（1右移x位,x&gt;0，结果为0）则返回0。剩下的情况：首先把小数部分（23位）转化为整数（和23比较），然后判断是否溢出：如果和原符号相同则直接返回，否则如果结果为负（原来为正）则溢出返回越界指定值</strong>0x80000000u**，否则原来为负，结果为正，则需要返回其补码（相反数）。</p>\n<div class=\"note info\"><p><strong>C语言的浮点数强转为整数怎么转的？</strong></p>\n<p>利用位级表示进行强转！</p>\n</div>\n\n<h4 id=\"floatPower2-x\"><a href=\"#floatPower2-x\" class=\"headerlink\" title=\"floatPower2(x)\"></a>floatPower2(x)</h4><blockquote>\n<p>求$2.0^x$</p>\n</blockquote>\n<ul>\n<li>代码</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"> * floatPower2 - Return bit-level equivalent of the expression 2.0^x</span></span><br><span class=\"line\"><span class=\"comment\"> *   (2.0 raised to the power x) for any 32-bit integer x.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *   The unsigned value that is returned should have the identical bit</span></span><br><span class=\"line\"><span class=\"comment\"> *   representation as the single-precision floating-point number 2.0^x.</span></span><br><span class=\"line\"><span class=\"comment\"> *   If the result is too small to be represented as a denorm, return</span></span><br><span class=\"line\"><span class=\"comment\"> *   0. If too large, return +INF.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. Also if, while </span></span><br><span class=\"line\"><span class=\"comment\"> *   Max ops: 31 </span></span><br><span class=\"line\"><span class=\"comment\"> *   Rating: 4</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"title\">floatPower2</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">int</span> INF = <span class=\"number\">0xff</span>&lt;&lt;<span class=\"number\">23</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> <span class=\"built_in\">exp</span> = x + <span class=\"number\">127</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"built_in\">exp</span> &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"built_in\">exp</span> &gt;= <span class=\"number\">255</span>) <span class=\"keyword\">return</span> INF;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">exp</span> &lt;&lt; <span class=\"number\">23</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>思路</li>\n</ul>\n<p>2.0的位级表示（$1.0\\times2^1$）：符号位：0，指数：1+127=128，frac=1.0-1=0。$2.0^x=(1.0\\times2^1)^x=1.0\\times2^x$，所以x就当做真正的指数的。</p>\n<p>这个比较简单，首先得到偏移之后的指数值e，如果e小于等于0（为0时，结果为0，因为2.0的浮点表示frac部分为0），对应的如果e大于等于255则为无穷大或越界了。否则返回正常浮点值，frac为0，直接对应指数即可。</p>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><blockquote>\n<p>很遗憾，最终的一个题目<code>floatPower2</code>始终无法通过，不过不是逻辑上的错误，在VS2017上完全可以运行，没有进入死循环。（个人感觉可能是官方的评测出了问题:-(，:cry: ）</p>\n</blockquote>\n<p><img data-src=\"csapp-lab-1/result.png\"></p>\n<h2 id=\"关于本次实验的思考\"><a href=\"#关于本次实验的思考\" class=\"headerlink\" title=\"关于本次实验的思考\"></a>关于本次实验的思考</h2><h3 id=\"所感\"><a href=\"#所感\" class=\"headerlink\" title=\"所感\"></a>所感</h3><p>这是CSAPP实验的第一次实验，接下来还有10个Lab等着我，希望我能够坚持下来吧。做本次实验的有以下几点感受：</p>\n<ul>\n<li>大多题目都没有思路，或者是自己懒得想，有一些题目是照搬别人的代码</li>\n<li>效率太低，这个实验在2019寒假前就开始做了，直到2019三月中旬才完成，有的题目甚至需要思考1个小时甚至更多。</li>\n<li>自己变笨了，想到奶奶小时候一直说的话：<em>拳不离手，曲不离口，三天不动手生，三天不念口生，脑越用越灵，手越用越巧，脑子不学要生锈，人不学习要落后</em>，果然如此，大学后长期懒散（slack）惯了。</li>\n</ul>\n<h3 id=\"所得\"><a href=\"#所得\" class=\"headerlink\" title=\"所得\"></a>所得</h3><ul>\n<li>基本的位操作指令</li>\n<li>掌握了IEEE 754标准的浮点数格式和使用方法</li>\n</ul>\n<h3 id=\"下一步\"><a href=\"#下一步\" class=\"headerlink\" title=\"下一步\"></a>下一步</h3><p>虽然实验过程很坎坷，但是所有代码都搞懂了，以后有机会再二刷吧。本次实验的基础收获当然是关于信息的位级表示相关的内容了，对一些位级运算符更加熟悉了一些。不过更大的收获是实验所感给我敲响的警钟，如下：</p>\n<ol>\n<li>实验必须自己做，不会首先参考知识点的搜索，其次在找方法源码</li>\n<li>实验必须要总结，总结自己实验的思路</li>\n<li>总结实验的学习方法和如何提高效率问题</li>\n</ol>"},{"title":"CSAPP 之 Arch Lab","mathjax":false,"copyright":true,"comment":true,"date":"2019-04-14T08:39:24.000Z","_content":"\n{% note primary %}\n《深入理解计算机系统》之Architecture Lab。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 前言\n\n本次实验主要是对第四章处理器体系结构的测验，还有一部分第五章的内容。\n\n## Music\n\n<iframe frameborder=\"no\"  marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=28786838&auto=1&height=66\"></iframe>\n\n\n## CSAPP 实验记录\n\n{% note info %}\n\n**[本系列文章](/tags/CSAPP-Lab/)主要记录 CSAPP 3.0 的实验过程，所有实验记录文章请查看[这儿](/tags/CSAPP-Lab/)**\n{% endnote %}\n\n\n快速开始请访问 `CSAPP` [Lab](http://csapp.cs.cmu.edu/3e/labs.html) 官网，本次实验记录是基于 CSAPP 3.0，实验日期始于：`2019-4-1`\n\n\n## 实验目标\n\n实验分为三部分，第一部分很简单，就是简单地考察一下汇编；第二部分是在hcl文件中添加iaddq指令的逻辑；第三部分是修改hcl和ncopy汇编文件使内存元素复制的速度尽可能达到最快。\n\n### Part A\n\n{% note info no-icon %}\n\n目标：使用Y86-64汇编程序实现以下三个函数：\n{% endnote %}\n\n```c\n/* \n * Architecture Lab: Part A \n * \n * High level specs for the functions that the students will rewrite\n * in Y86-64 assembly language\n */\n\n/* $begin examples */\n/* linked list element */\ntypedef struct ELE {\n    long val;\n    struct ELE *next;\n} *list_ptr;\n\n/* sum_list - Sum the elements of a linked list */\nlong sum_list(list_ptr ls)\n{\n    long val = 0;\n    while (ls) {\n\tval += ls->val;\n\tls = ls->next;\n    }\n    return val;\n}\n\n/* rsum_list - Recursive version of sum_list */\nlong rsum_list(list_ptr ls)\n{\n    if (!ls)\n\treturn 0;\n    else {\n\tlong val = ls->val;\n\tlong rest = rsum_list(ls->next);\n\treturn val + rest;\n    }\n}\n\n/* copy_block - Copy src to dest and return xor checksum of src */\nlong copy_block(long *src, long *dest, long len)\n{\n    long result = 0;\n    while (len > 0) {\n\tlong val = *src++;\n\t*dest++ = val;\n\tresult ^= val;\n\tlen--;\n    }\n    return result;\n}\n/* $end examples */\n\n```\n\n### Part B\n\n{% note info no-icon %}\n\n在hcl文件中添加iaddq指令的逻辑。\n{% endnote %}\n\n### Part C\n\n{% note info no-icon %}\n\n修改hcl和ncopy汇编文件使内存元素复制的速度尽可能达到最快，即CPE（cycles per element）越来越小。\n- 修改hcl内容首先要添加iaddq的实现\n- 降低CPI，即处理ret、jmp预测、加载使用冒险。ret没必要处理。\n- 程序性能优化（3e第五章）\n{% endnote %}\n\n## 实验前的归纳\n\n概括一下这次实验用到的知识点。\n\n首先是汇编相关的内容，通过第三章的学习，part A直接上手完成是没有问题的。\n其次是hcl逻辑块的实现，这就需要对SEQ以及PIPE的实现及ISA有一定的了解。\n\n## Arch Lab\n\n正式开始记录实验，Part C由于第五章内容还没有了解完全，所以准备后期二刷Part C。\n\n### Part A\n\n这一部分凭借汇编基础即可完成。不过还需要注意一下汇编的一些伪指令和格式问题。\n\n- sum_list\n\n```x86asm 文件名：archlab/archlab-handout/sim/misc/sum.ys\n# sum_list function coded by scarborough_coral\n\n.pos 0\n\tirmovq stack,%rsp\n\tcall main\n\thalt\n\n# Sample linked list\n.align 8\nele1:\n.quad 0x00a\n.quad ele2\nele2:\n.quad 0x0b0\n.quad ele3\nele3:\n.quad 0xc00\n.quad 0\n\nsum_list:\n\txorq %rax,%rax\n\t\nloop_start:\n\tandq %rdi,%rdi\n\tje loop_end\n\n\tmrmovq 0(%rdi),%rsi\n\taddq %rsi,%rax\n\tmrmovq 8(%rdi),%rsi\n\trrmovq %rsi,%rdi\t\n\n\tjmp loop_start\n\nloop_end:\n\tret\n\nmain:\n\tirmovq ele1,%rdi\n\tcall sum_list\n\tret\n\n\n.pos 1024\nstack:\n\n```\n- rsum_list\n\n```x86asm 文件名：archlab/archlab-handout/sim/misc/rsum.ys\n.pos 0\n\tirmovq stack,%rsp\n\tcall main\n\thalt\n\n.align 8\nele1:\n.quad 0x00a\n.quad ele2\nele2:\n.quad 0x0b0\n.quad ele3\nele3:\n.quad 0xc00\n.quad 0\n\nrsum_list:\n\txorq %rax,%rax\n\tandq %rdi,%rdi\n\tjne not_null\n\tret\nnot_null:\n\tmrmovq 0(%rdi),%rsi\n\tpushq %rsi\n\tmrmovq 8(%rdi),%rdi\n\tcall rsum_list\n\tpopq %rsi\n\taddq %rsi,%rax\n\tret\n\n\n\nmain:\n\tirmovq ele1,%rdi\n\tcall rsum_list\n\tret\n\n\n.pos 1024\nstack:\n\n```\n\n- copy_block\n\n```x86asm 文件名：archlab/archlab-handout/sim/misc/copy.ys\n.pos 0\n\tirmovq stack,%rsp\n\tcall main\n\thalt\n\t\n\n\n.align 8\nsrc:\n\t.quad 0x00a\n\t.quad 0x0b0\n\t.quad 0xc00\n\ndest:\n\t.quad 0x111\n\t.quad 0x222\n\t.quad 0x333\n\ncopy_block:\n\txorq %rax,%rax\n\tpushq %r12\n\tpushq %r13\n\tirmovq $1,%r13\n\tirmovq $8,%r12\nloop_start:\t\n\tandq %rdx,%rdx\n\tje loop_end\n\tmrmovq (%rdi),%rcx\n\trmmovq %rcx,(%rsi)\n\taddq %r12,%rdi\n\taddq %r12,%rsi\n\txorq %rcx,%rax\n\tsubq %r13,%rdx\n\tjmp loop_start\nloop_end:\n\tpopq %r12\n\tpopq %r13\n\tret\n\nmain:\n\tirmovq src,%rdi\n\tirmovq dest,%rsi\n\tirmovq $3,%rdx\n\tcall copy_block\n\tret\n\n\n.pos 1024\nstack:\n\n```\n\n### Part B\n\nPart B 只需要按照writeup查看3e课本iaddq指令的阶段实现即可实现。\n\n{% note danger %}\n\n1. 可能会遇到找不到依赖库的问题，安装就行了\n2. 中途遇见了一个链接问题，是因为glibc版本太新，实验依赖的版本太过老旧导致一个`matherr`找不到问题，观察代码其他地方并没有用到，直接omit注释掉了。\n{% endnote %}\n\n修改内容如下图：\n\n![](csapp-lab-4/seq.jpg)\n\nhcl代码如下：\n\n```vhdl 文件名：archlab/archlab-handout/sim/seq/seq-full.hcl\n#/* $begin seq-all-hcl */\n####################################################################\n#  HCL Description of Control for Single Cycle Y86-64 Processor SEQ   #\n#  Copyright (C) Randal E. Bryant, David R. O'Hallaron, 2010       #\n####################################################################\n\n## Your task is to implement the iaddq instruction\n## The file contains a declaration of the icodes\n## for iaddq (IIADDQ)\n## Your job is to add the rest of the logic to make it work\n\n####################################################################\n#    C Include's.  Don't alter these                               #\n####################################################################\n\nquote '#include <stdio.h>'\nquote '#include \"isa.h\"'\nquote '#include \"sim.h\"'\nquote 'int sim_main(int argc, char *argv[]);'\nquote 'word_t gen_pc(){return 0;}'\nquote 'int main(int argc, char *argv[])'\nquote '  {plusmode=0;return sim_main(argc,argv);}'\n\n####################################################################\n#    Declarations.  Do not change/remove/delete any of these       #\n####################################################################\n\n##### Symbolic representation of Y86-64 Instruction Codes #############\nwordsig INOP \t'I_NOP'\nwordsig IHALT\t'I_HALT'\nwordsig IRRMOVQ\t'I_RRMOVQ'\nwordsig IIRMOVQ\t'I_IRMOVQ'\nwordsig IRMMOVQ\t'I_RMMOVQ'\nwordsig IMRMOVQ\t'I_MRMOVQ'\nwordsig IOPQ\t'I_ALU'\nwordsig IJXX\t'I_JMP'\nwordsig ICALL\t'I_CALL'\nwordsig IRET\t'I_RET'\nwordsig IPUSHQ\t'I_PUSHQ'\nwordsig IPOPQ\t'I_POPQ'\n# Instruction code for iaddq instruction\nwordsig IIADDQ\t'I_IADDQ'\n\n##### Symbolic represenations of Y86-64 function codes                  #####\nwordsig FNONE    'F_NONE'        # Default function code\n\n##### Symbolic representation of Y86-64 Registers referenced explicitly #####\nwordsig RRSP     'REG_RSP'    \t# Stack Pointer\nwordsig RNONE    'REG_NONE'   \t# Special value indicating \"no register\"\n\n##### ALU Functions referenced explicitly                            #####\nwordsig ALUADD\t'A_ADD'\t\t# ALU should add its arguments\n\n##### Possible instruction status values                             #####\nwordsig SAOK\t'STAT_AOK'\t# Normal execution\nwordsig SADR\t'STAT_ADR'\t# Invalid memory address\nwordsig SINS\t'STAT_INS'\t# Invalid instruction\nwordsig SHLT\t'STAT_HLT'\t# Halt instruction encountered\n\n##### Signals that can be referenced by control logic ####################\n\n##### Fetch stage inputs\t\t#####\nwordsig pc 'pc'\t\t\t\t# Program counter\n##### Fetch stage computations\t\t#####\nwordsig imem_icode 'imem_icode'\t\t# icode field from instruction memory\nwordsig imem_ifun  'imem_ifun' \t\t# ifun field from instruction memory\nwordsig icode\t  'icode'\t\t# Instruction control code\nwordsig ifun\t  'ifun'\t\t# Instruction function\nwordsig rA\t  'ra'\t\t\t# rA field from instruction\nwordsig rB\t  'rb'\t\t\t# rB field from instruction\nwordsig valC\t  'valc'\t\t# Constant from instruction\nwordsig valP\t  'valp'\t\t# Address of following instruction\nboolsig imem_error 'imem_error'\t\t# Error signal from instruction memory\nboolsig instr_valid 'instr_valid'\t# Is fetched instruction valid?\n\n##### Decode stage computations\t\t#####\nwordsig valA\t'vala'\t\t\t# Value from register A port\nwordsig valB\t'valb'\t\t\t# Value from register B port\n\n##### Execute stage computations\t#####\nwordsig valE\t'vale'\t\t\t# Value computed by ALU\nboolsig Cnd\t'cond'\t\t\t# Branch test\n\n##### Memory stage computations\t\t#####\nwordsig valM\t'valm'\t\t\t# Value read from memory\nboolsig dmem_error 'dmem_error'\t\t# Error signal from data memory\n\n\n####################################################################\n#    Control Signal Definitions.                                   #\n####################################################################\n\n################ Fetch Stage     ###################################\n\n# Determine instruction code\nword icode = [\n\timem_error: INOP;\n\t1: imem_icode;\t\t# Default: get from instruction memory\n];\n\n# Determine instruction function\nword ifun = [\n\timem_error: FNONE;\n\t1: imem_ifun;\t\t# Default: get from instruction memory\n];\n\nbool instr_valid = icode in \n\t{ INOP, IHALT, IRRMOVQ, IIRMOVQ, IRMMOVQ, IMRMOVQ,\n\t       IOPQ, IIADDQ, IJXX, ICALL, IRET, IPUSHQ, IPOPQ };\n\n# Does fetched instruction require a regid byte?\nbool need_regids =\n\ticode in { IRRMOVQ, IOPQ, IIADDQ, IPUSHQ, IPOPQ, \n\t\t     IIRMOVQ, IRMMOVQ, IMRMOVQ };\n\n# Does fetched instruction require a constant word?\nbool need_valC =\n\ticode in { IIRMOVQ, IRMMOVQ, IMRMOVQ, IJXX, ICALL, IIADDQ };\n\n################ Decode Stage    ###################################\n\n## What register should be used as the A source?\nword srcA = [\n\ticode in { IRRMOVQ, IRMMOVQ, IOPQ, IPUSHQ  } : rA;\n\ticode in { IPOPQ, IRET } : RRSP;\n\t1 : RNONE; # Don't need register\n];\n\n## What register should be used as the B source?\nword srcB = [\n\ticode in { IOPQ, IRMMOVQ, IMRMOVQ, IIADDQ  } : rB;\n\ticode in { IPUSHQ, IPOPQ, ICALL, IRET } : RRSP;\n\t1 : RNONE;  # Don't need register\n];\n\n## What register should be used as the E destination?\nword dstE = [\n\ticode in { IRRMOVQ } && Cnd : rB;\n\ticode in { IIRMOVQ, IOPQ, IIADDQ } : rB;\n\ticode in { IPUSHQ, IPOPQ, ICALL, IRET } : RRSP;\n\t1 : RNONE;  # Don't write any register\n];\n\n## What register should be used as the M destination?\nword dstM = [\n\ticode in { IMRMOVQ, IPOPQ } : rA;\n\t1 : RNONE;  # Don't write any register\n];\n\n################ Execute Stage   ###################################\n\n## Select input A to ALU\nword aluA = [\n\ticode in { IRRMOVQ, IOPQ } : valA;\n\ticode in { IIRMOVQ, IRMMOVQ, IMRMOVQ, IIADDQ } : valC;\n\ticode in { ICALL, IPUSHQ } : -8;\n\ticode in { IRET, IPOPQ } : 8;\n\t# Other instructions don't need ALU\n];\n\n## Select input B to ALU\nword aluB = [\n\ticode in { IRMMOVQ, IMRMOVQ, IOPQ, IIADDQ, ICALL, \n\t\t      IPUSHQ, IRET, IPOPQ } : valB;\n\ticode in { IRRMOVQ, IIRMOVQ } : 0;\n\t# Other instructions don't need ALU\n];\n\n## Set the ALU function\nword alufun = [\n\ticode == IOPQ : ifun;\n\t1 : ALUADD;\n];\n\n## Should the condition codes be updated?\nbool set_cc = icode in { IOPQ, IIADDQ };\n\n################ Memory Stage    ###################################\n\n## Set read control signal\nbool mem_read = icode in { IMRMOVQ, IPOPQ, IRET };\n\n## Set write control signal\nbool mem_write = icode in { IRMMOVQ, IPUSHQ, ICALL };\n\n## Select memory address\nword mem_addr = [\n\ticode in { IRMMOVQ, IPUSHQ, ICALL, IMRMOVQ } : valE;\n\ticode in { IPOPQ, IRET } : valA;\n\t# Other instructions don't need address\n];\n\n## Select memory input data\nword mem_data = [\n\t# Value from register\n\ticode in { IRMMOVQ, IPUSHQ } : valA;\n\t# Return PC\n\ticode == ICALL : valP;\n\t# Default: Don't write anything\n];\n\n## Determine instruction status\nword Stat = [\n\timem_error || dmem_error : SADR;\n\t!instr_valid: SINS;\n\ticode == IHALT : SHLT;\n\t1 : SAOK;\n];\n\n################ Program Counter Update ############################\n\n## What address should instruction be fetched at\n\nword new_pc = [\n\t# Call.  Use instruction constant\n\ticode == ICALL : valC;\n\t# Taken branch.  Use instruction constant\n\ticode == IJXX && Cnd : valC;\n\t# Completion of RET instruction.  Use value from stack\n\ticode == IRET : valM;\n\t# Default: Use incremented PC\n\t1 : valP;\n];\n#/* $end seq-all-hcl */\n\n```\n\n然后按照writeup跑测试，通过。\n\n### Part C\n\nPart C 的具体内容就是加速内存元素的拷贝问题。修改`ncopy.ys`和`pipe-full.hcl`代码使得CPE（cycles per element）尽可能小，即单个元素拷贝时间越少越好。\n\n\n首先添加iaddq指令，原来是通过`irmovq`和`addq`来实现的，改为iaddq指令后起到很微弱的效果，并不能明显的减少CPE，如果你的irmovq指令在循环内部那就另说了，当然也不是最快。\n\n![](csapp-lab-4/pipe.jpg)\n\n具体代码如下：\n\n```vhdl 文件名：archlab/archlab-handout/sim/pipe/pipe-full.hcl\n#/* $begin pipe-all-hcl */\n####################################################################\n#    HCL Description of Control for Pipelined Y86-64 Processor     #\n#    Copyright (C) Randal E. Bryant, David R. O'Hallaron, 2014     #\n####################################################################\n\n## Your task is to implement the iaddq instruction\n## The file contains a declaration of the icodes\n## for iaddq (IIADDQ)\n## Your job is to add the rest of the logic to make it work\n\n####################################################################\n#    C Include's.  Don't alter these                               #\n####################################################################\n\nquote '#include <stdio.h>'\nquote '#include \"isa.h\"'\nquote '#include \"pipeline.h\"'\nquote '#include \"stages.h\"'\nquote '#include \"sim.h\"'\nquote 'int sim_main(int argc, char *argv[]);'\nquote 'int main(int argc, char *argv[]){return sim_main(argc,argv);}'\n\n####################################################################\n#    Declarations.  Do not change/remove/delete any of these       #\n####################################################################\n\n##### Symbolic representation of Y86-64 Instruction Codes #############\nwordsig INOP \t'I_NOP'\nwordsig IHALT\t'I_HALT'\nwordsig IRRMOVQ\t'I_RRMOVQ'\nwordsig IIRMOVQ\t'I_IRMOVQ'\nwordsig IRMMOVQ\t'I_RMMOVQ'\nwordsig IMRMOVQ\t'I_MRMOVQ'\nwordsig IOPQ\t'I_ALU'\nwordsig IJXX\t'I_JMP'\nwordsig ICALL\t'I_CALL'\nwordsig IRET\t'I_RET'\nwordsig IPUSHQ\t'I_PUSHQ'\nwordsig IPOPQ\t'I_POPQ'\n# Instruction code for iaddq instruction\nwordsig IIADDQ\t'I_IADDQ'\n\n##### Symbolic represenations of Y86-64 function codes            #####\nwordsig FNONE    'F_NONE'        # Default function code\n\n##### Symbolic representation of Y86-64 Registers referenced      #####\nwordsig RRSP     'REG_RSP'    \t     # Stack Pointer\nwordsig RNONE    'REG_NONE'   \t     # Special value indicating \"no register\"\n\n##### ALU Functions referenced explicitly ##########################\nwordsig ALUADD\t'A_ADD'\t\t     # ALU should add its arguments\n\n##### Possible instruction status values                       #####\nwordsig SBUB\t'STAT_BUB'\t# Bubble in stage\nwordsig SAOK\t'STAT_AOK'\t# Normal execution\nwordsig SADR\t'STAT_ADR'\t# Invalid memory address\nwordsig SINS\t'STAT_INS'\t# Invalid instruction\nwordsig SHLT\t'STAT_HLT'\t# Halt instruction encountered\n\n##### Signals that can be referenced by control logic ##############\n\n##### Pipeline Register F ##########################################\n\nwordsig F_predPC 'pc_curr->pc'\t     # Predicted value of PC\n\n##### Intermediate Values in Fetch Stage ###########################\n\nwordsig imem_icode  'imem_icode'      # icode field from instruction memory\nwordsig imem_ifun   'imem_ifun'       # ifun  field from instruction memory\nwordsig f_icode\t'if_id_next->icode'  # (Possibly modified) instruction code\nwordsig f_ifun\t'if_id_next->ifun'   # Fetched instruction function\nwordsig f_valC\t'if_id_next->valc'   # Constant data of fetched instruction\nwordsig f_valP\t'if_id_next->valp'   # Address of following instruction\nboolsig imem_error 'imem_error'\t     # Error signal from instruction memory\nboolsig instr_valid 'instr_valid'    # Is fetched instruction valid?\n\n##### Pipeline Register D ##########################################\nwordsig D_icode 'if_id_curr->icode'   # Instruction code\nwordsig D_rA 'if_id_curr->ra'\t     # rA field from instruction\nwordsig D_rB 'if_id_curr->rb'\t     # rB field from instruction\nwordsig D_valP 'if_id_curr->valp'     # Incremented PC\n\n##### Intermediate Values in Decode Stage  #########################\n\nwordsig d_srcA\t 'id_ex_next->srca'  # srcA from decoded instruction\nwordsig d_srcB\t 'id_ex_next->srcb'  # srcB from decoded instruction\nwordsig d_rvalA 'd_regvala'\t     # valA read from register file\nwordsig d_rvalB 'd_regvalb'\t     # valB read from register file\n\n##### Pipeline Register E ##########################################\nwordsig E_icode 'id_ex_curr->icode'   # Instruction code\nwordsig E_ifun  'id_ex_curr->ifun'    # Instruction function\nwordsig E_valC  'id_ex_curr->valc'    # Constant data\nwordsig E_srcA  'id_ex_curr->srca'    # Source A register ID\nwordsig E_valA  'id_ex_curr->vala'    # Source A value\nwordsig E_srcB  'id_ex_curr->srcb'    # Source B register ID\nwordsig E_valB  'id_ex_curr->valb'    # Source B value\nwordsig E_dstE 'id_ex_curr->deste'    # Destination E register ID\nwordsig E_dstM 'id_ex_curr->destm'    # Destination M register ID\n\n##### Intermediate Values in Execute Stage #########################\nwordsig e_valE 'ex_mem_next->vale'\t# valE generated by ALU\nboolsig e_Cnd 'ex_mem_next->takebranch' # Does condition hold?\nwordsig e_dstE 'ex_mem_next->deste'      # dstE (possibly modified to be RNONE)\n\n##### Pipeline Register M                  #########################\nwordsig M_stat 'ex_mem_curr->status'     # Instruction status\nwordsig M_icode 'ex_mem_curr->icode'\t# Instruction code\nwordsig M_ifun  'ex_mem_curr->ifun'\t# Instruction function\nwordsig M_valA  'ex_mem_curr->vala'      # Source A value\nwordsig M_dstE 'ex_mem_curr->deste'\t# Destination E register ID\nwordsig M_valE  'ex_mem_curr->vale'      # ALU E value\nwordsig M_dstM 'ex_mem_curr->destm'\t# Destination M register ID\nboolsig M_Cnd 'ex_mem_curr->takebranch'\t# Condition flag\nboolsig dmem_error 'dmem_error'\t        # Error signal from instruction memory\n\n##### Intermediate Values in Memory Stage ##########################\nwordsig m_valM 'mem_wb_next->valm'\t# valM generated by memory\nwordsig m_stat 'mem_wb_next->status'\t# stat (possibly modified to be SADR)\n\n##### Pipeline Register W ##########################################\nwordsig W_stat 'mem_wb_curr->status'     # Instruction status\nwordsig W_icode 'mem_wb_curr->icode'\t# Instruction code\nwordsig W_dstE 'mem_wb_curr->deste'\t# Destination E register ID\nwordsig W_valE  'mem_wb_curr->vale'      # ALU E value\nwordsig W_dstM 'mem_wb_curr->destm'\t# Destination M register ID\nwordsig W_valM  'mem_wb_curr->valm'\t# Memory M value\n\n####################################################################\n#    Control Signal Definitions.                                   #\n####################################################################\n\n################ Fetch Stage     ###################################\n\n## What address should instruction be fetched at\nword f_pc = [\n\t# Mispredicted branch.  Fetch at incremented PC\n\tM_icode == IJXX && !M_Cnd : M_valA;\n\t# Completion of RET instruction\n\tW_icode == IRET : W_valM;\n\t# Default: Use predicted value of PC\n\t1 : F_predPC;\n];\n\n## Determine icode of fetched instruction\nword f_icode = [\n\timem_error : INOP;\n\t1: imem_icode;\n];\n\n# Determine ifun\nword f_ifun = [\n\timem_error : FNONE;\n\t1: imem_ifun;\n];\n\n# Is instruction valid?\nbool instr_valid = f_icode in \n\t{ INOP, IHALT, IRRMOVQ, IIRMOVQ, IRMMOVQ, IMRMOVQ,\n\t  IOPQ, IIADDQ, IJXX, ICALL, IRET, IPUSHQ, IPOPQ };\n\n# Determine status code for fetched instruction\nword f_stat = [\n\timem_error: SADR;\n\t!instr_valid : SINS;\n\tf_icode == IHALT : SHLT;\n\t1 : SAOK;\n];\n\n# Does fetched instruction require a regid byte?\nbool need_regids =\n\tf_icode in { IRRMOVQ, IOPQ, IIADDQ, IPUSHQ, IPOPQ, \n\t\t     IIRMOVQ, IRMMOVQ, IMRMOVQ };\n\n# Does fetched instruction require a constant word?\nbool need_valC =\n\tf_icode in { IIRMOVQ, IRMMOVQ, IMRMOVQ, IJXX, ICALL, IIADDQ };\n\n# Predict next value of PC\nword f_predPC = [\n\tf_icode in { IJXX, ICALL } : f_valC;\n\t1 : f_valP;\n];\n\n################ Decode Stage ######################################\n\n\n## What register should be used as the A source?\nword d_srcA = [\n\tD_icode in { IRRMOVQ, IRMMOVQ, IOPQ, IPUSHQ  } : D_rA;\n\tD_icode in { IPOPQ, IRET } : RRSP;\n\t1 : RNONE; # Don't need register\n];\n\n## What register should be used as the B source?\nword d_srcB = [\n\tD_icode in { IOPQ, IIADDQ, IRMMOVQ, IMRMOVQ  } : D_rB;\n\tD_icode in { IPUSHQ, IPOPQ, ICALL, IRET } : RRSP;\n\t1 : RNONE;  # Don't need register\n];\n\n## What register should be used as the E destination?\nword d_dstE = [\n\tD_icode in { IRRMOVQ, IIRMOVQ, IOPQ, IIADDQ } : D_rB;\n\tD_icode in { IPUSHQ, IPOPQ, ICALL, IRET } : RRSP;\n\t1 : RNONE;  # Don't write any register\n];\n\n## What register should be used as the M destination?\nword d_dstM = [\n\tD_icode in { IMRMOVQ, IPOPQ } : D_rA;\n\t1 : RNONE;  # Don't write any register\n];\n\n## What should be the A value?\n## Forward into decode stage for valA\nword d_valA = [\n\tD_icode in { ICALL, IJXX } : D_valP; # Use incremented PC\n\td_srcA == e_dstE : e_valE;    # Forward valE from execute\n\td_srcA == M_dstM : m_valM;    # Forward valM from memory\n\td_srcA == M_dstE : M_valE;    # Forward valE from memory\n\td_srcA == W_dstM : W_valM;    # Forward valM from write back\n\td_srcA == W_dstE : W_valE;    # Forward valE from write back\n\t1 : d_rvalA;  # Use value read from register file\n];\n\nword d_valB = [\n\td_srcB == e_dstE : e_valE;    # Forward valE from execute\n\td_srcB == M_dstM : m_valM;    # Forward valM from memory\n\td_srcB == M_dstE : M_valE;    # Forward valE from memory\n\td_srcB == W_dstM : W_valM;    # Forward valM from write back\n\td_srcB == W_dstE : W_valE;    # Forward valE from write back\n\t1 : d_rvalB;  # Use value read from register file\n];\n\n################ Execute Stage #####################################\n\n## Select input A to ALU\nword aluA = [\n\tE_icode in { IRRMOVQ, IOPQ } : E_valA;\n\tE_icode in { IIRMOVQ, IRMMOVQ, IMRMOVQ, IIADDQ } : E_valC;\n\tE_icode in { ICALL, IPUSHQ } : -8;\n\tE_icode in { IRET, IPOPQ } : 8;\n\t# Other instructions don't need ALU\n];\n\n## Select input B to ALU\nword aluB = [\n\tE_icode in { IRMMOVQ, IMRMOVQ, IOPQ, IIADDQ, ICALL, \n\t\t     IPUSHQ, IRET, IPOPQ } : E_valB;\n\tE_icode in { IRRMOVQ, IIRMOVQ } : 0;\n\t# Other instructions don't need ALU\n];\n\n## Set the ALU function\nword alufun = [\n\tE_icode == IOPQ : E_ifun;\n\t1 : ALUADD;\n];\n\n## Should the condition codes be updated?\nbool set_cc = (E_icode == IOPQ||E_icode == IIADDQ) &&\n\t# State changes only during normal operation\n\t!m_stat in { SADR, SINS, SHLT } && !W_stat in { SADR, SINS, SHLT };\n\n## Generate valA in execute stage\nword e_valA = E_valA;    # Pass valA through stage\n\n## Set dstE to RNONE in event of not-taken conditional move\nword e_dstE = [\n\tE_icode == IRRMOVQ && !e_Cnd : RNONE;\n\t1 : E_dstE;\n];\n\n################ Memory Stage ######################################\n\n## Select memory address\nword mem_addr = [\n\tM_icode in { IRMMOVQ, IPUSHQ, ICALL, IMRMOVQ } : M_valE;\n\tM_icode in { IPOPQ, IRET } : M_valA;\n\t# Other instructions don't need address\n];\n\n## Set read control signal\nbool mem_read = M_icode in { IMRMOVQ, IPOPQ, IRET };\n\n## Set write control signal\nbool mem_write = M_icode in { IRMMOVQ, IPUSHQ, ICALL };\n\n#/* $begin pipe-m_stat-hcl */\n## Update the status\nword m_stat = [\n\tdmem_error : SADR;\n\t1 : M_stat;\n];\n#/* $end pipe-m_stat-hcl */\n\n## Set E port register ID\nword w_dstE = W_dstE;\n\n## Set E port value\nword w_valE = W_valE;\n\n## Set M port register ID\nword w_dstM = W_dstM;\n\n## Set M port value\nword w_valM = W_valM;\n\n## Update processor status\nword Stat = [\n\tW_stat == SBUB : SAOK;\n\t1 : W_stat;\n];\n\n################ Pipeline Register Control #########################\n\n# Should I stall or inject a bubble into Pipeline Register F?\n# At most one of these can be true.\nbool F_bubble = 0;\nbool F_stall =\n\t# Conditions for a load/use hazard\n\tE_icode in { IMRMOVQ, IPOPQ } &&\n\t E_dstM in { d_srcA, d_srcB } ||\n\t# Stalling at fetch while ret passes through pipeline\n\tIRET in { D_icode, E_icode, M_icode };\n\n# Should I stall or inject a bubble into Pipeline Register D?\n# At most one of these can be true.\nbool D_stall = \n\t# Conditions for a load/use hazard\n\tE_icode in { IMRMOVQ, IPOPQ } &&\n\t E_dstM in { d_srcA, d_srcB };\n\nbool D_bubble =\n\t# Mispredicted branch\n\t(E_icode == IJXX && !e_Cnd) ||\n\t# Stalling at fetch while ret passes through pipeline\n\t# but not condition for a load/use hazard\n\t!(E_icode in { IMRMOVQ, IPOPQ } && E_dstM in { d_srcA, d_srcB }) &&\n\t  IRET in { D_icode, E_icode, M_icode };\n\n# Should I stall or inject a bubble into Pipeline Register E?\n# At most one of these can be true.\nbool E_stall = 0;\nbool E_bubble =\n\t# Mispredicted branch\n\t(E_icode == IJXX && !e_Cnd) ||\n\t# Conditions for a load/use hazard\n\tE_icode in { IMRMOVQ, IPOPQ } &&\n\t E_dstM in { d_srcA, d_srcB};\n\n# Should I stall or inject a bubble into Pipeline Register M?\n# At most one of these can be true.\nbool M_stall = 0;\n# Start injecting bubbles as soon as exception passes through memory stage\nbool M_bubble = m_stat in { SADR, SINS, SHLT } || W_stat in { SADR, SINS, SHLT };\n\n# Should I stall or inject a bubble into Pipeline Register W?\nbool W_stall = W_stat in { SADR, SINS, SHLT };\nbool W_bubble = 0;\n#/* $end pipe-all-hcl */\n\n```\n\n然后修改ncopy.ys文件\n\n#### Version 1.0\n\n```x86asm 文件名：archlab/archlab-handout/sim/pipe/ncopy.ys\n#/* $begin ncopy-ys */\n##################################################################\n# ncopy.ys - Copy a src block of len words to dst.\n# Return the number of positive words (>0) contained in src.\n#\n# Include your name and ID here.\n#\n# Describe how and why you modified the baseline code.\n#\n##################################################################\n# Do not modify this portion\n# Function prologue.\n# %rdi = src, %rsi = dst, %rdx = len\nncopy:\n\n##################################################################\n# You can modify this portion\n\t# Loop header\n\txorq %rax,%rax\t\t# count = 0;\n\tandq %rdx,%rdx\t\t# len <= 0?\n\tjle Done\t\t# if so, goto Done:\n\nLoop:\tmrmovq (%rdi), %r10\t# read val from src...\n\trmmovq %r10, (%rsi)\t# ...and store it to dst\n\tandq %r10, %r10\t\t# val <= 0?\n\tjle Npos\t\t# if so, goto Npos:\n\tiaddq $1, %rax\t\t# count++\nNpos:\t\n\tiaddq $-1, %rdx\t\t# len--\n\tiaddq $8, %rdi\t\t# src++\n\tiaddq $8, %rsi\t\t# dst++\n\tandq %rdx,%rdx\t\t# len > 0?\n\tjg Loop\t\t\t# if so, goto Loop:\n##################################################################\n# Do not modify the following section of code\n# Function epilogue.\nDone:\n\tret\n##################################################################\n# Keep the following label at the end of your function\nEnd:\n#/* $end ncopy-ys */\n\n```\n\n然而还是0分。\n\n![](csapp-lab-4/result.png)\n\n主要考虑还是要减少bubble，还有程序优化问题。\n\n看完第五章再来二刷吧。\n\n#### Version 2.0\n\n结果：\n![](csapp-lab-4/result2.png)\n\n\n所作修改：\n\n- 4x4循环展开，因为C=4，L=1\n- 消除了一些load/use指令组合\n\n```x86asm 文件名：archlab/archlab-handout/sim/pipe/ncopy.ys\n#/* $begin ncopy-ys */\n##################################################################\n# ncopy.ys - Copy a src block of len words to dst.\n# Return the number of positive words (>0) contained in src.\n#\n# Include your name and ID here.\n#\n# Describe how and why you modified the baseline code.\n#\n##################################################################\n# Do not modify this portion\n# Function prologue.\n# %rdi = src, %rsi = dst, %rdx = len\nncopy:\n\n##################################################################\n# You can modify this portion\n\t# Loop header\n\txorq %rax,%rax\t\t# count = 0;\n\tandq %rdx,%rdx\t\t# len <= 0?\n\tjle Done\t\t# if so, goto Done:\n\ntestType:\n\tirmovq $3,%r8\n\tandq %rdx, %r8\n\tje Loop\n\trrmovq %r8,%r11\n\tirmovq $1, %rcx\noriginLoop:\n\tmrmovq (%rdi), %r10\n\tiaddq $8, %rdi\t\t# src++\n\tandq %r10, %r10\n\trmmovq %r10, (%rsi)\n\tjle neg\n\tiaddq $1, %rax\nneg:\n\tiaddq $8, %rsi\t\t# dst++\n\tsubq %rcx, %r8\n\tjg originLoop\n\tsubq %r11,%rdx\t\t# len > 0?\n\tjle Done\nLoop:\t\n\tmrmovq (%rdi), %r10\t# read val from src...\n\tmrmovq 8(%rdi), %r11\n\tmrmovq 16(%rdi), %r8\n\tmrmovq 24(%rdi), %r9\n\trmmovq %r10, (%rsi)\t# ...and store it to dst\n\trmmovq %r11, 8(%rsi)\n\trmmovq %r8, 16(%rsi)\n\trmmovq %r9, 24(%rsi)\n\tandq %r10, %r10\t\t# val <= 0?\n\tjle second\t\t# if so,go next item:\n\tiaddq $1, %rax\t\t# count++\nsecond:\n\tandq %r11, %r11\n\tjle third\n\tiaddq $1, %rax\nthird:\n\tandq %r8, %r8\n\tjle forth\n\tiaddq $1, %rax\nforth:\n\tandq %r9, %r9\n\tjle Npos\n\tiaddq $1, %rax\nNpos:\t\n\tiaddq $-4, %rdx\t\t# len--\n\tiaddq $32, %rdi\t\t# src++\n\tiaddq $32, %rsi\t\t# dst++\n\tandq %rdx,%rdx\t\t# len > 0?\n\tjg Loop\t\t\t# if so, goto Loop:\n##################################################################\n# Do not modify the following section of code\n# Function epilogue.\nDone:\n\tret\n##################################################################\n# Keep the following label at the end of your function\nEnd:\n#/* $end ncopy-ys */\n\n```\n\n\n## 总结\n\n粗略的总结了一下。有问题请在评论区或者daovoice指正。\n\n### 所感\n\n1. 最近做问题不够专注，时间观念不够强，可能是太过松散了\n2. 。。。\n\n\n### 所得\n\n1. 从阅读《编码》这本书中浅浅的了解了处理器体系结构，到csapp3e进一步了解\n2. 熟悉了ISA设计的基本方法，指令分类、分阶段、流水线、冒险问题、异常处理、性能评价等\n\n### 下一步\n\n1. 阅读第5章，二刷part C\n2. 使用番茄todo做好时间规划，并执行训练","source":"_posts/csapp-lab-4.md","raw":"---\ntitle: CSAPP 之 Arch Lab\nmathjax: false\ncopyright: true\ncomment: true\ndate: 2019-04-14 16:39:24\ntags:\n- Operating System\n- CSAPP\n- CSAPP Lab\ncategories:\n- Computer Science\n- Operating System\n\n---\n\n{% note primary %}\n《深入理解计算机系统》之Architecture Lab。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 前言\n\n本次实验主要是对第四章处理器体系结构的测验，还有一部分第五章的内容。\n\n## Music\n\n<iframe frameborder=\"no\"  marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=28786838&auto=1&height=66\"></iframe>\n\n\n## CSAPP 实验记录\n\n{% note info %}\n\n**[本系列文章](/tags/CSAPP-Lab/)主要记录 CSAPP 3.0 的实验过程，所有实验记录文章请查看[这儿](/tags/CSAPP-Lab/)**\n{% endnote %}\n\n\n快速开始请访问 `CSAPP` [Lab](http://csapp.cs.cmu.edu/3e/labs.html) 官网，本次实验记录是基于 CSAPP 3.0，实验日期始于：`2019-4-1`\n\n\n## 实验目标\n\n实验分为三部分，第一部分很简单，就是简单地考察一下汇编；第二部分是在hcl文件中添加iaddq指令的逻辑；第三部分是修改hcl和ncopy汇编文件使内存元素复制的速度尽可能达到最快。\n\n### Part A\n\n{% note info no-icon %}\n\n目标：使用Y86-64汇编程序实现以下三个函数：\n{% endnote %}\n\n```c\n/* \n * Architecture Lab: Part A \n * \n * High level specs for the functions that the students will rewrite\n * in Y86-64 assembly language\n */\n\n/* $begin examples */\n/* linked list element */\ntypedef struct ELE {\n    long val;\n    struct ELE *next;\n} *list_ptr;\n\n/* sum_list - Sum the elements of a linked list */\nlong sum_list(list_ptr ls)\n{\n    long val = 0;\n    while (ls) {\n\tval += ls->val;\n\tls = ls->next;\n    }\n    return val;\n}\n\n/* rsum_list - Recursive version of sum_list */\nlong rsum_list(list_ptr ls)\n{\n    if (!ls)\n\treturn 0;\n    else {\n\tlong val = ls->val;\n\tlong rest = rsum_list(ls->next);\n\treturn val + rest;\n    }\n}\n\n/* copy_block - Copy src to dest and return xor checksum of src */\nlong copy_block(long *src, long *dest, long len)\n{\n    long result = 0;\n    while (len > 0) {\n\tlong val = *src++;\n\t*dest++ = val;\n\tresult ^= val;\n\tlen--;\n    }\n    return result;\n}\n/* $end examples */\n\n```\n\n### Part B\n\n{% note info no-icon %}\n\n在hcl文件中添加iaddq指令的逻辑。\n{% endnote %}\n\n### Part C\n\n{% note info no-icon %}\n\n修改hcl和ncopy汇编文件使内存元素复制的速度尽可能达到最快，即CPE（cycles per element）越来越小。\n- 修改hcl内容首先要添加iaddq的实现\n- 降低CPI，即处理ret、jmp预测、加载使用冒险。ret没必要处理。\n- 程序性能优化（3e第五章）\n{% endnote %}\n\n## 实验前的归纳\n\n概括一下这次实验用到的知识点。\n\n首先是汇编相关的内容，通过第三章的学习，part A直接上手完成是没有问题的。\n其次是hcl逻辑块的实现，这就需要对SEQ以及PIPE的实现及ISA有一定的了解。\n\n## Arch Lab\n\n正式开始记录实验，Part C由于第五章内容还没有了解完全，所以准备后期二刷Part C。\n\n### Part A\n\n这一部分凭借汇编基础即可完成。不过还需要注意一下汇编的一些伪指令和格式问题。\n\n- sum_list\n\n```x86asm 文件名：archlab/archlab-handout/sim/misc/sum.ys\n# sum_list function coded by scarborough_coral\n\n.pos 0\n\tirmovq stack,%rsp\n\tcall main\n\thalt\n\n# Sample linked list\n.align 8\nele1:\n.quad 0x00a\n.quad ele2\nele2:\n.quad 0x0b0\n.quad ele3\nele3:\n.quad 0xc00\n.quad 0\n\nsum_list:\n\txorq %rax,%rax\n\t\nloop_start:\n\tandq %rdi,%rdi\n\tje loop_end\n\n\tmrmovq 0(%rdi),%rsi\n\taddq %rsi,%rax\n\tmrmovq 8(%rdi),%rsi\n\trrmovq %rsi,%rdi\t\n\n\tjmp loop_start\n\nloop_end:\n\tret\n\nmain:\n\tirmovq ele1,%rdi\n\tcall sum_list\n\tret\n\n\n.pos 1024\nstack:\n\n```\n- rsum_list\n\n```x86asm 文件名：archlab/archlab-handout/sim/misc/rsum.ys\n.pos 0\n\tirmovq stack,%rsp\n\tcall main\n\thalt\n\n.align 8\nele1:\n.quad 0x00a\n.quad ele2\nele2:\n.quad 0x0b0\n.quad ele3\nele3:\n.quad 0xc00\n.quad 0\n\nrsum_list:\n\txorq %rax,%rax\n\tandq %rdi,%rdi\n\tjne not_null\n\tret\nnot_null:\n\tmrmovq 0(%rdi),%rsi\n\tpushq %rsi\n\tmrmovq 8(%rdi),%rdi\n\tcall rsum_list\n\tpopq %rsi\n\taddq %rsi,%rax\n\tret\n\n\n\nmain:\n\tirmovq ele1,%rdi\n\tcall rsum_list\n\tret\n\n\n.pos 1024\nstack:\n\n```\n\n- copy_block\n\n```x86asm 文件名：archlab/archlab-handout/sim/misc/copy.ys\n.pos 0\n\tirmovq stack,%rsp\n\tcall main\n\thalt\n\t\n\n\n.align 8\nsrc:\n\t.quad 0x00a\n\t.quad 0x0b0\n\t.quad 0xc00\n\ndest:\n\t.quad 0x111\n\t.quad 0x222\n\t.quad 0x333\n\ncopy_block:\n\txorq %rax,%rax\n\tpushq %r12\n\tpushq %r13\n\tirmovq $1,%r13\n\tirmovq $8,%r12\nloop_start:\t\n\tandq %rdx,%rdx\n\tje loop_end\n\tmrmovq (%rdi),%rcx\n\trmmovq %rcx,(%rsi)\n\taddq %r12,%rdi\n\taddq %r12,%rsi\n\txorq %rcx,%rax\n\tsubq %r13,%rdx\n\tjmp loop_start\nloop_end:\n\tpopq %r12\n\tpopq %r13\n\tret\n\nmain:\n\tirmovq src,%rdi\n\tirmovq dest,%rsi\n\tirmovq $3,%rdx\n\tcall copy_block\n\tret\n\n\n.pos 1024\nstack:\n\n```\n\n### Part B\n\nPart B 只需要按照writeup查看3e课本iaddq指令的阶段实现即可实现。\n\n{% note danger %}\n\n1. 可能会遇到找不到依赖库的问题，安装就行了\n2. 中途遇见了一个链接问题，是因为glibc版本太新，实验依赖的版本太过老旧导致一个`matherr`找不到问题，观察代码其他地方并没有用到，直接omit注释掉了。\n{% endnote %}\n\n修改内容如下图：\n\n![](csapp-lab-4/seq.jpg)\n\nhcl代码如下：\n\n```vhdl 文件名：archlab/archlab-handout/sim/seq/seq-full.hcl\n#/* $begin seq-all-hcl */\n####################################################################\n#  HCL Description of Control for Single Cycle Y86-64 Processor SEQ   #\n#  Copyright (C) Randal E. Bryant, David R. O'Hallaron, 2010       #\n####################################################################\n\n## Your task is to implement the iaddq instruction\n## The file contains a declaration of the icodes\n## for iaddq (IIADDQ)\n## Your job is to add the rest of the logic to make it work\n\n####################################################################\n#    C Include's.  Don't alter these                               #\n####################################################################\n\nquote '#include <stdio.h>'\nquote '#include \"isa.h\"'\nquote '#include \"sim.h\"'\nquote 'int sim_main(int argc, char *argv[]);'\nquote 'word_t gen_pc(){return 0;}'\nquote 'int main(int argc, char *argv[])'\nquote '  {plusmode=0;return sim_main(argc,argv);}'\n\n####################################################################\n#    Declarations.  Do not change/remove/delete any of these       #\n####################################################################\n\n##### Symbolic representation of Y86-64 Instruction Codes #############\nwordsig INOP \t'I_NOP'\nwordsig IHALT\t'I_HALT'\nwordsig IRRMOVQ\t'I_RRMOVQ'\nwordsig IIRMOVQ\t'I_IRMOVQ'\nwordsig IRMMOVQ\t'I_RMMOVQ'\nwordsig IMRMOVQ\t'I_MRMOVQ'\nwordsig IOPQ\t'I_ALU'\nwordsig IJXX\t'I_JMP'\nwordsig ICALL\t'I_CALL'\nwordsig IRET\t'I_RET'\nwordsig IPUSHQ\t'I_PUSHQ'\nwordsig IPOPQ\t'I_POPQ'\n# Instruction code for iaddq instruction\nwordsig IIADDQ\t'I_IADDQ'\n\n##### Symbolic represenations of Y86-64 function codes                  #####\nwordsig FNONE    'F_NONE'        # Default function code\n\n##### Symbolic representation of Y86-64 Registers referenced explicitly #####\nwordsig RRSP     'REG_RSP'    \t# Stack Pointer\nwordsig RNONE    'REG_NONE'   \t# Special value indicating \"no register\"\n\n##### ALU Functions referenced explicitly                            #####\nwordsig ALUADD\t'A_ADD'\t\t# ALU should add its arguments\n\n##### Possible instruction status values                             #####\nwordsig SAOK\t'STAT_AOK'\t# Normal execution\nwordsig SADR\t'STAT_ADR'\t# Invalid memory address\nwordsig SINS\t'STAT_INS'\t# Invalid instruction\nwordsig SHLT\t'STAT_HLT'\t# Halt instruction encountered\n\n##### Signals that can be referenced by control logic ####################\n\n##### Fetch stage inputs\t\t#####\nwordsig pc 'pc'\t\t\t\t# Program counter\n##### Fetch stage computations\t\t#####\nwordsig imem_icode 'imem_icode'\t\t# icode field from instruction memory\nwordsig imem_ifun  'imem_ifun' \t\t# ifun field from instruction memory\nwordsig icode\t  'icode'\t\t# Instruction control code\nwordsig ifun\t  'ifun'\t\t# Instruction function\nwordsig rA\t  'ra'\t\t\t# rA field from instruction\nwordsig rB\t  'rb'\t\t\t# rB field from instruction\nwordsig valC\t  'valc'\t\t# Constant from instruction\nwordsig valP\t  'valp'\t\t# Address of following instruction\nboolsig imem_error 'imem_error'\t\t# Error signal from instruction memory\nboolsig instr_valid 'instr_valid'\t# Is fetched instruction valid?\n\n##### Decode stage computations\t\t#####\nwordsig valA\t'vala'\t\t\t# Value from register A port\nwordsig valB\t'valb'\t\t\t# Value from register B port\n\n##### Execute stage computations\t#####\nwordsig valE\t'vale'\t\t\t# Value computed by ALU\nboolsig Cnd\t'cond'\t\t\t# Branch test\n\n##### Memory stage computations\t\t#####\nwordsig valM\t'valm'\t\t\t# Value read from memory\nboolsig dmem_error 'dmem_error'\t\t# Error signal from data memory\n\n\n####################################################################\n#    Control Signal Definitions.                                   #\n####################################################################\n\n################ Fetch Stage     ###################################\n\n# Determine instruction code\nword icode = [\n\timem_error: INOP;\n\t1: imem_icode;\t\t# Default: get from instruction memory\n];\n\n# Determine instruction function\nword ifun = [\n\timem_error: FNONE;\n\t1: imem_ifun;\t\t# Default: get from instruction memory\n];\n\nbool instr_valid = icode in \n\t{ INOP, IHALT, IRRMOVQ, IIRMOVQ, IRMMOVQ, IMRMOVQ,\n\t       IOPQ, IIADDQ, IJXX, ICALL, IRET, IPUSHQ, IPOPQ };\n\n# Does fetched instruction require a regid byte?\nbool need_regids =\n\ticode in { IRRMOVQ, IOPQ, IIADDQ, IPUSHQ, IPOPQ, \n\t\t     IIRMOVQ, IRMMOVQ, IMRMOVQ };\n\n# Does fetched instruction require a constant word?\nbool need_valC =\n\ticode in { IIRMOVQ, IRMMOVQ, IMRMOVQ, IJXX, ICALL, IIADDQ };\n\n################ Decode Stage    ###################################\n\n## What register should be used as the A source?\nword srcA = [\n\ticode in { IRRMOVQ, IRMMOVQ, IOPQ, IPUSHQ  } : rA;\n\ticode in { IPOPQ, IRET } : RRSP;\n\t1 : RNONE; # Don't need register\n];\n\n## What register should be used as the B source?\nword srcB = [\n\ticode in { IOPQ, IRMMOVQ, IMRMOVQ, IIADDQ  } : rB;\n\ticode in { IPUSHQ, IPOPQ, ICALL, IRET } : RRSP;\n\t1 : RNONE;  # Don't need register\n];\n\n## What register should be used as the E destination?\nword dstE = [\n\ticode in { IRRMOVQ } && Cnd : rB;\n\ticode in { IIRMOVQ, IOPQ, IIADDQ } : rB;\n\ticode in { IPUSHQ, IPOPQ, ICALL, IRET } : RRSP;\n\t1 : RNONE;  # Don't write any register\n];\n\n## What register should be used as the M destination?\nword dstM = [\n\ticode in { IMRMOVQ, IPOPQ } : rA;\n\t1 : RNONE;  # Don't write any register\n];\n\n################ Execute Stage   ###################################\n\n## Select input A to ALU\nword aluA = [\n\ticode in { IRRMOVQ, IOPQ } : valA;\n\ticode in { IIRMOVQ, IRMMOVQ, IMRMOVQ, IIADDQ } : valC;\n\ticode in { ICALL, IPUSHQ } : -8;\n\ticode in { IRET, IPOPQ } : 8;\n\t# Other instructions don't need ALU\n];\n\n## Select input B to ALU\nword aluB = [\n\ticode in { IRMMOVQ, IMRMOVQ, IOPQ, IIADDQ, ICALL, \n\t\t      IPUSHQ, IRET, IPOPQ } : valB;\n\ticode in { IRRMOVQ, IIRMOVQ } : 0;\n\t# Other instructions don't need ALU\n];\n\n## Set the ALU function\nword alufun = [\n\ticode == IOPQ : ifun;\n\t1 : ALUADD;\n];\n\n## Should the condition codes be updated?\nbool set_cc = icode in { IOPQ, IIADDQ };\n\n################ Memory Stage    ###################################\n\n## Set read control signal\nbool mem_read = icode in { IMRMOVQ, IPOPQ, IRET };\n\n## Set write control signal\nbool mem_write = icode in { IRMMOVQ, IPUSHQ, ICALL };\n\n## Select memory address\nword mem_addr = [\n\ticode in { IRMMOVQ, IPUSHQ, ICALL, IMRMOVQ } : valE;\n\ticode in { IPOPQ, IRET } : valA;\n\t# Other instructions don't need address\n];\n\n## Select memory input data\nword mem_data = [\n\t# Value from register\n\ticode in { IRMMOVQ, IPUSHQ } : valA;\n\t# Return PC\n\ticode == ICALL : valP;\n\t# Default: Don't write anything\n];\n\n## Determine instruction status\nword Stat = [\n\timem_error || dmem_error : SADR;\n\t!instr_valid: SINS;\n\ticode == IHALT : SHLT;\n\t1 : SAOK;\n];\n\n################ Program Counter Update ############################\n\n## What address should instruction be fetched at\n\nword new_pc = [\n\t# Call.  Use instruction constant\n\ticode == ICALL : valC;\n\t# Taken branch.  Use instruction constant\n\ticode == IJXX && Cnd : valC;\n\t# Completion of RET instruction.  Use value from stack\n\ticode == IRET : valM;\n\t# Default: Use incremented PC\n\t1 : valP;\n];\n#/* $end seq-all-hcl */\n\n```\n\n然后按照writeup跑测试，通过。\n\n### Part C\n\nPart C 的具体内容就是加速内存元素的拷贝问题。修改`ncopy.ys`和`pipe-full.hcl`代码使得CPE（cycles per element）尽可能小，即单个元素拷贝时间越少越好。\n\n\n首先添加iaddq指令，原来是通过`irmovq`和`addq`来实现的，改为iaddq指令后起到很微弱的效果，并不能明显的减少CPE，如果你的irmovq指令在循环内部那就另说了，当然也不是最快。\n\n![](csapp-lab-4/pipe.jpg)\n\n具体代码如下：\n\n```vhdl 文件名：archlab/archlab-handout/sim/pipe/pipe-full.hcl\n#/* $begin pipe-all-hcl */\n####################################################################\n#    HCL Description of Control for Pipelined Y86-64 Processor     #\n#    Copyright (C) Randal E. Bryant, David R. O'Hallaron, 2014     #\n####################################################################\n\n## Your task is to implement the iaddq instruction\n## The file contains a declaration of the icodes\n## for iaddq (IIADDQ)\n## Your job is to add the rest of the logic to make it work\n\n####################################################################\n#    C Include's.  Don't alter these                               #\n####################################################################\n\nquote '#include <stdio.h>'\nquote '#include \"isa.h\"'\nquote '#include \"pipeline.h\"'\nquote '#include \"stages.h\"'\nquote '#include \"sim.h\"'\nquote 'int sim_main(int argc, char *argv[]);'\nquote 'int main(int argc, char *argv[]){return sim_main(argc,argv);}'\n\n####################################################################\n#    Declarations.  Do not change/remove/delete any of these       #\n####################################################################\n\n##### Symbolic representation of Y86-64 Instruction Codes #############\nwordsig INOP \t'I_NOP'\nwordsig IHALT\t'I_HALT'\nwordsig IRRMOVQ\t'I_RRMOVQ'\nwordsig IIRMOVQ\t'I_IRMOVQ'\nwordsig IRMMOVQ\t'I_RMMOVQ'\nwordsig IMRMOVQ\t'I_MRMOVQ'\nwordsig IOPQ\t'I_ALU'\nwordsig IJXX\t'I_JMP'\nwordsig ICALL\t'I_CALL'\nwordsig IRET\t'I_RET'\nwordsig IPUSHQ\t'I_PUSHQ'\nwordsig IPOPQ\t'I_POPQ'\n# Instruction code for iaddq instruction\nwordsig IIADDQ\t'I_IADDQ'\n\n##### Symbolic represenations of Y86-64 function codes            #####\nwordsig FNONE    'F_NONE'        # Default function code\n\n##### Symbolic representation of Y86-64 Registers referenced      #####\nwordsig RRSP     'REG_RSP'    \t     # Stack Pointer\nwordsig RNONE    'REG_NONE'   \t     # Special value indicating \"no register\"\n\n##### ALU Functions referenced explicitly ##########################\nwordsig ALUADD\t'A_ADD'\t\t     # ALU should add its arguments\n\n##### Possible instruction status values                       #####\nwordsig SBUB\t'STAT_BUB'\t# Bubble in stage\nwordsig SAOK\t'STAT_AOK'\t# Normal execution\nwordsig SADR\t'STAT_ADR'\t# Invalid memory address\nwordsig SINS\t'STAT_INS'\t# Invalid instruction\nwordsig SHLT\t'STAT_HLT'\t# Halt instruction encountered\n\n##### Signals that can be referenced by control logic ##############\n\n##### Pipeline Register F ##########################################\n\nwordsig F_predPC 'pc_curr->pc'\t     # Predicted value of PC\n\n##### Intermediate Values in Fetch Stage ###########################\n\nwordsig imem_icode  'imem_icode'      # icode field from instruction memory\nwordsig imem_ifun   'imem_ifun'       # ifun  field from instruction memory\nwordsig f_icode\t'if_id_next->icode'  # (Possibly modified) instruction code\nwordsig f_ifun\t'if_id_next->ifun'   # Fetched instruction function\nwordsig f_valC\t'if_id_next->valc'   # Constant data of fetched instruction\nwordsig f_valP\t'if_id_next->valp'   # Address of following instruction\nboolsig imem_error 'imem_error'\t     # Error signal from instruction memory\nboolsig instr_valid 'instr_valid'    # Is fetched instruction valid?\n\n##### Pipeline Register D ##########################################\nwordsig D_icode 'if_id_curr->icode'   # Instruction code\nwordsig D_rA 'if_id_curr->ra'\t     # rA field from instruction\nwordsig D_rB 'if_id_curr->rb'\t     # rB field from instruction\nwordsig D_valP 'if_id_curr->valp'     # Incremented PC\n\n##### Intermediate Values in Decode Stage  #########################\n\nwordsig d_srcA\t 'id_ex_next->srca'  # srcA from decoded instruction\nwordsig d_srcB\t 'id_ex_next->srcb'  # srcB from decoded instruction\nwordsig d_rvalA 'd_regvala'\t     # valA read from register file\nwordsig d_rvalB 'd_regvalb'\t     # valB read from register file\n\n##### Pipeline Register E ##########################################\nwordsig E_icode 'id_ex_curr->icode'   # Instruction code\nwordsig E_ifun  'id_ex_curr->ifun'    # Instruction function\nwordsig E_valC  'id_ex_curr->valc'    # Constant data\nwordsig E_srcA  'id_ex_curr->srca'    # Source A register ID\nwordsig E_valA  'id_ex_curr->vala'    # Source A value\nwordsig E_srcB  'id_ex_curr->srcb'    # Source B register ID\nwordsig E_valB  'id_ex_curr->valb'    # Source B value\nwordsig E_dstE 'id_ex_curr->deste'    # Destination E register ID\nwordsig E_dstM 'id_ex_curr->destm'    # Destination M register ID\n\n##### Intermediate Values in Execute Stage #########################\nwordsig e_valE 'ex_mem_next->vale'\t# valE generated by ALU\nboolsig e_Cnd 'ex_mem_next->takebranch' # Does condition hold?\nwordsig e_dstE 'ex_mem_next->deste'      # dstE (possibly modified to be RNONE)\n\n##### Pipeline Register M                  #########################\nwordsig M_stat 'ex_mem_curr->status'     # Instruction status\nwordsig M_icode 'ex_mem_curr->icode'\t# Instruction code\nwordsig M_ifun  'ex_mem_curr->ifun'\t# Instruction function\nwordsig M_valA  'ex_mem_curr->vala'      # Source A value\nwordsig M_dstE 'ex_mem_curr->deste'\t# Destination E register ID\nwordsig M_valE  'ex_mem_curr->vale'      # ALU E value\nwordsig M_dstM 'ex_mem_curr->destm'\t# Destination M register ID\nboolsig M_Cnd 'ex_mem_curr->takebranch'\t# Condition flag\nboolsig dmem_error 'dmem_error'\t        # Error signal from instruction memory\n\n##### Intermediate Values in Memory Stage ##########################\nwordsig m_valM 'mem_wb_next->valm'\t# valM generated by memory\nwordsig m_stat 'mem_wb_next->status'\t# stat (possibly modified to be SADR)\n\n##### Pipeline Register W ##########################################\nwordsig W_stat 'mem_wb_curr->status'     # Instruction status\nwordsig W_icode 'mem_wb_curr->icode'\t# Instruction code\nwordsig W_dstE 'mem_wb_curr->deste'\t# Destination E register ID\nwordsig W_valE  'mem_wb_curr->vale'      # ALU E value\nwordsig W_dstM 'mem_wb_curr->destm'\t# Destination M register ID\nwordsig W_valM  'mem_wb_curr->valm'\t# Memory M value\n\n####################################################################\n#    Control Signal Definitions.                                   #\n####################################################################\n\n################ Fetch Stage     ###################################\n\n## What address should instruction be fetched at\nword f_pc = [\n\t# Mispredicted branch.  Fetch at incremented PC\n\tM_icode == IJXX && !M_Cnd : M_valA;\n\t# Completion of RET instruction\n\tW_icode == IRET : W_valM;\n\t# Default: Use predicted value of PC\n\t1 : F_predPC;\n];\n\n## Determine icode of fetched instruction\nword f_icode = [\n\timem_error : INOP;\n\t1: imem_icode;\n];\n\n# Determine ifun\nword f_ifun = [\n\timem_error : FNONE;\n\t1: imem_ifun;\n];\n\n# Is instruction valid?\nbool instr_valid = f_icode in \n\t{ INOP, IHALT, IRRMOVQ, IIRMOVQ, IRMMOVQ, IMRMOVQ,\n\t  IOPQ, IIADDQ, IJXX, ICALL, IRET, IPUSHQ, IPOPQ };\n\n# Determine status code for fetched instruction\nword f_stat = [\n\timem_error: SADR;\n\t!instr_valid : SINS;\n\tf_icode == IHALT : SHLT;\n\t1 : SAOK;\n];\n\n# Does fetched instruction require a regid byte?\nbool need_regids =\n\tf_icode in { IRRMOVQ, IOPQ, IIADDQ, IPUSHQ, IPOPQ, \n\t\t     IIRMOVQ, IRMMOVQ, IMRMOVQ };\n\n# Does fetched instruction require a constant word?\nbool need_valC =\n\tf_icode in { IIRMOVQ, IRMMOVQ, IMRMOVQ, IJXX, ICALL, IIADDQ };\n\n# Predict next value of PC\nword f_predPC = [\n\tf_icode in { IJXX, ICALL } : f_valC;\n\t1 : f_valP;\n];\n\n################ Decode Stage ######################################\n\n\n## What register should be used as the A source?\nword d_srcA = [\n\tD_icode in { IRRMOVQ, IRMMOVQ, IOPQ, IPUSHQ  } : D_rA;\n\tD_icode in { IPOPQ, IRET } : RRSP;\n\t1 : RNONE; # Don't need register\n];\n\n## What register should be used as the B source?\nword d_srcB = [\n\tD_icode in { IOPQ, IIADDQ, IRMMOVQ, IMRMOVQ  } : D_rB;\n\tD_icode in { IPUSHQ, IPOPQ, ICALL, IRET } : RRSP;\n\t1 : RNONE;  # Don't need register\n];\n\n## What register should be used as the E destination?\nword d_dstE = [\n\tD_icode in { IRRMOVQ, IIRMOVQ, IOPQ, IIADDQ } : D_rB;\n\tD_icode in { IPUSHQ, IPOPQ, ICALL, IRET } : RRSP;\n\t1 : RNONE;  # Don't write any register\n];\n\n## What register should be used as the M destination?\nword d_dstM = [\n\tD_icode in { IMRMOVQ, IPOPQ } : D_rA;\n\t1 : RNONE;  # Don't write any register\n];\n\n## What should be the A value?\n## Forward into decode stage for valA\nword d_valA = [\n\tD_icode in { ICALL, IJXX } : D_valP; # Use incremented PC\n\td_srcA == e_dstE : e_valE;    # Forward valE from execute\n\td_srcA == M_dstM : m_valM;    # Forward valM from memory\n\td_srcA == M_dstE : M_valE;    # Forward valE from memory\n\td_srcA == W_dstM : W_valM;    # Forward valM from write back\n\td_srcA == W_dstE : W_valE;    # Forward valE from write back\n\t1 : d_rvalA;  # Use value read from register file\n];\n\nword d_valB = [\n\td_srcB == e_dstE : e_valE;    # Forward valE from execute\n\td_srcB == M_dstM : m_valM;    # Forward valM from memory\n\td_srcB == M_dstE : M_valE;    # Forward valE from memory\n\td_srcB == W_dstM : W_valM;    # Forward valM from write back\n\td_srcB == W_dstE : W_valE;    # Forward valE from write back\n\t1 : d_rvalB;  # Use value read from register file\n];\n\n################ Execute Stage #####################################\n\n## Select input A to ALU\nword aluA = [\n\tE_icode in { IRRMOVQ, IOPQ } : E_valA;\n\tE_icode in { IIRMOVQ, IRMMOVQ, IMRMOVQ, IIADDQ } : E_valC;\n\tE_icode in { ICALL, IPUSHQ } : -8;\n\tE_icode in { IRET, IPOPQ } : 8;\n\t# Other instructions don't need ALU\n];\n\n## Select input B to ALU\nword aluB = [\n\tE_icode in { IRMMOVQ, IMRMOVQ, IOPQ, IIADDQ, ICALL, \n\t\t     IPUSHQ, IRET, IPOPQ } : E_valB;\n\tE_icode in { IRRMOVQ, IIRMOVQ } : 0;\n\t# Other instructions don't need ALU\n];\n\n## Set the ALU function\nword alufun = [\n\tE_icode == IOPQ : E_ifun;\n\t1 : ALUADD;\n];\n\n## Should the condition codes be updated?\nbool set_cc = (E_icode == IOPQ||E_icode == IIADDQ) &&\n\t# State changes only during normal operation\n\t!m_stat in { SADR, SINS, SHLT } && !W_stat in { SADR, SINS, SHLT };\n\n## Generate valA in execute stage\nword e_valA = E_valA;    # Pass valA through stage\n\n## Set dstE to RNONE in event of not-taken conditional move\nword e_dstE = [\n\tE_icode == IRRMOVQ && !e_Cnd : RNONE;\n\t1 : E_dstE;\n];\n\n################ Memory Stage ######################################\n\n## Select memory address\nword mem_addr = [\n\tM_icode in { IRMMOVQ, IPUSHQ, ICALL, IMRMOVQ } : M_valE;\n\tM_icode in { IPOPQ, IRET } : M_valA;\n\t# Other instructions don't need address\n];\n\n## Set read control signal\nbool mem_read = M_icode in { IMRMOVQ, IPOPQ, IRET };\n\n## Set write control signal\nbool mem_write = M_icode in { IRMMOVQ, IPUSHQ, ICALL };\n\n#/* $begin pipe-m_stat-hcl */\n## Update the status\nword m_stat = [\n\tdmem_error : SADR;\n\t1 : M_stat;\n];\n#/* $end pipe-m_stat-hcl */\n\n## Set E port register ID\nword w_dstE = W_dstE;\n\n## Set E port value\nword w_valE = W_valE;\n\n## Set M port register ID\nword w_dstM = W_dstM;\n\n## Set M port value\nword w_valM = W_valM;\n\n## Update processor status\nword Stat = [\n\tW_stat == SBUB : SAOK;\n\t1 : W_stat;\n];\n\n################ Pipeline Register Control #########################\n\n# Should I stall or inject a bubble into Pipeline Register F?\n# At most one of these can be true.\nbool F_bubble = 0;\nbool F_stall =\n\t# Conditions for a load/use hazard\n\tE_icode in { IMRMOVQ, IPOPQ } &&\n\t E_dstM in { d_srcA, d_srcB } ||\n\t# Stalling at fetch while ret passes through pipeline\n\tIRET in { D_icode, E_icode, M_icode };\n\n# Should I stall or inject a bubble into Pipeline Register D?\n# At most one of these can be true.\nbool D_stall = \n\t# Conditions for a load/use hazard\n\tE_icode in { IMRMOVQ, IPOPQ } &&\n\t E_dstM in { d_srcA, d_srcB };\n\nbool D_bubble =\n\t# Mispredicted branch\n\t(E_icode == IJXX && !e_Cnd) ||\n\t# Stalling at fetch while ret passes through pipeline\n\t# but not condition for a load/use hazard\n\t!(E_icode in { IMRMOVQ, IPOPQ } && E_dstM in { d_srcA, d_srcB }) &&\n\t  IRET in { D_icode, E_icode, M_icode };\n\n# Should I stall or inject a bubble into Pipeline Register E?\n# At most one of these can be true.\nbool E_stall = 0;\nbool E_bubble =\n\t# Mispredicted branch\n\t(E_icode == IJXX && !e_Cnd) ||\n\t# Conditions for a load/use hazard\n\tE_icode in { IMRMOVQ, IPOPQ } &&\n\t E_dstM in { d_srcA, d_srcB};\n\n# Should I stall or inject a bubble into Pipeline Register M?\n# At most one of these can be true.\nbool M_stall = 0;\n# Start injecting bubbles as soon as exception passes through memory stage\nbool M_bubble = m_stat in { SADR, SINS, SHLT } || W_stat in { SADR, SINS, SHLT };\n\n# Should I stall or inject a bubble into Pipeline Register W?\nbool W_stall = W_stat in { SADR, SINS, SHLT };\nbool W_bubble = 0;\n#/* $end pipe-all-hcl */\n\n```\n\n然后修改ncopy.ys文件\n\n#### Version 1.0\n\n```x86asm 文件名：archlab/archlab-handout/sim/pipe/ncopy.ys\n#/* $begin ncopy-ys */\n##################################################################\n# ncopy.ys - Copy a src block of len words to dst.\n# Return the number of positive words (>0) contained in src.\n#\n# Include your name and ID here.\n#\n# Describe how and why you modified the baseline code.\n#\n##################################################################\n# Do not modify this portion\n# Function prologue.\n# %rdi = src, %rsi = dst, %rdx = len\nncopy:\n\n##################################################################\n# You can modify this portion\n\t# Loop header\n\txorq %rax,%rax\t\t# count = 0;\n\tandq %rdx,%rdx\t\t# len <= 0?\n\tjle Done\t\t# if so, goto Done:\n\nLoop:\tmrmovq (%rdi), %r10\t# read val from src...\n\trmmovq %r10, (%rsi)\t# ...and store it to dst\n\tandq %r10, %r10\t\t# val <= 0?\n\tjle Npos\t\t# if so, goto Npos:\n\tiaddq $1, %rax\t\t# count++\nNpos:\t\n\tiaddq $-1, %rdx\t\t# len--\n\tiaddq $8, %rdi\t\t# src++\n\tiaddq $8, %rsi\t\t# dst++\n\tandq %rdx,%rdx\t\t# len > 0?\n\tjg Loop\t\t\t# if so, goto Loop:\n##################################################################\n# Do not modify the following section of code\n# Function epilogue.\nDone:\n\tret\n##################################################################\n# Keep the following label at the end of your function\nEnd:\n#/* $end ncopy-ys */\n\n```\n\n然而还是0分。\n\n![](csapp-lab-4/result.png)\n\n主要考虑还是要减少bubble，还有程序优化问题。\n\n看完第五章再来二刷吧。\n\n#### Version 2.0\n\n结果：\n![](csapp-lab-4/result2.png)\n\n\n所作修改：\n\n- 4x4循环展开，因为C=4，L=1\n- 消除了一些load/use指令组合\n\n```x86asm 文件名：archlab/archlab-handout/sim/pipe/ncopy.ys\n#/* $begin ncopy-ys */\n##################################################################\n# ncopy.ys - Copy a src block of len words to dst.\n# Return the number of positive words (>0) contained in src.\n#\n# Include your name and ID here.\n#\n# Describe how and why you modified the baseline code.\n#\n##################################################################\n# Do not modify this portion\n# Function prologue.\n# %rdi = src, %rsi = dst, %rdx = len\nncopy:\n\n##################################################################\n# You can modify this portion\n\t# Loop header\n\txorq %rax,%rax\t\t# count = 0;\n\tandq %rdx,%rdx\t\t# len <= 0?\n\tjle Done\t\t# if so, goto Done:\n\ntestType:\n\tirmovq $3,%r8\n\tandq %rdx, %r8\n\tje Loop\n\trrmovq %r8,%r11\n\tirmovq $1, %rcx\noriginLoop:\n\tmrmovq (%rdi), %r10\n\tiaddq $8, %rdi\t\t# src++\n\tandq %r10, %r10\n\trmmovq %r10, (%rsi)\n\tjle neg\n\tiaddq $1, %rax\nneg:\n\tiaddq $8, %rsi\t\t# dst++\n\tsubq %rcx, %r8\n\tjg originLoop\n\tsubq %r11,%rdx\t\t# len > 0?\n\tjle Done\nLoop:\t\n\tmrmovq (%rdi), %r10\t# read val from src...\n\tmrmovq 8(%rdi), %r11\n\tmrmovq 16(%rdi), %r8\n\tmrmovq 24(%rdi), %r9\n\trmmovq %r10, (%rsi)\t# ...and store it to dst\n\trmmovq %r11, 8(%rsi)\n\trmmovq %r8, 16(%rsi)\n\trmmovq %r9, 24(%rsi)\n\tandq %r10, %r10\t\t# val <= 0?\n\tjle second\t\t# if so,go next item:\n\tiaddq $1, %rax\t\t# count++\nsecond:\n\tandq %r11, %r11\n\tjle third\n\tiaddq $1, %rax\nthird:\n\tandq %r8, %r8\n\tjle forth\n\tiaddq $1, %rax\nforth:\n\tandq %r9, %r9\n\tjle Npos\n\tiaddq $1, %rax\nNpos:\t\n\tiaddq $-4, %rdx\t\t# len--\n\tiaddq $32, %rdi\t\t# src++\n\tiaddq $32, %rsi\t\t# dst++\n\tandq %rdx,%rdx\t\t# len > 0?\n\tjg Loop\t\t\t# if so, goto Loop:\n##################################################################\n# Do not modify the following section of code\n# Function epilogue.\nDone:\n\tret\n##################################################################\n# Keep the following label at the end of your function\nEnd:\n#/* $end ncopy-ys */\n\n```\n\n\n## 总结\n\n粗略的总结了一下。有问题请在评论区或者daovoice指正。\n\n### 所感\n\n1. 最近做问题不够专注，时间观念不够强，可能是太过松散了\n2. 。。。\n\n\n### 所得\n\n1. 从阅读《编码》这本书中浅浅的了解了处理器体系结构，到csapp3e进一步了解\n2. 熟悉了ISA设计的基本方法，指令分类、分阶段、流水线、冒险问题、异常处理、性能评价等\n\n### 下一步\n\n1. 阅读第5章，二刷part C\n2. 使用番茄todo做好时间规划，并执行训练","slug":"csapp-lab-4","published":1,"updated":"2022-01-06T04:09:12.220Z","_id":"cksq5v7o500b8n0puekhqdg1x","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note primary\"><p>《深入理解计算机系统》之Architecture Lab。</p>\n</div>\n\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本次实验主要是对第四章处理器体系结构的测验，还有一部分第五章的内容。</p>\n<h2 id=\"Music\"><a href=\"#Music\" class=\"headerlink\" title=\"Music\"></a>Music</h2><iframe frameborder=\"no\"  marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=28786838&auto=1&height=66\"></iframe>\n\n\n<h2 id=\"CSAPP-实验记录\"><a href=\"#CSAPP-实验记录\" class=\"headerlink\" title=\"CSAPP 实验记录\"></a>CSAPP 实验记录</h2><div class=\"note info\"><p><strong><a href=\"/tags/CSAPP-Lab/\">本系列文章</a>主要记录 CSAPP 3.0 的实验过程，所有实验记录文章请查看<a href=\"/tags/CSAPP-Lab/\">这儿</a></strong></p>\n</div>\n\n\n<p>快速开始请访问 <code>CSAPP</code> <a href=\"http://csapp.cs.cmu.edu/3e/labs.html\">Lab</a> 官网，本次实验记录是基于 CSAPP 3.0，实验日期始于：<code>2019-4-1</code></p>\n<h2 id=\"实验目标\"><a href=\"#实验目标\" class=\"headerlink\" title=\"实验目标\"></a>实验目标</h2><p>实验分为三部分，第一部分很简单，就是简单地考察一下汇编；第二部分是在hcl文件中添加iaddq指令的逻辑；第三部分是修改hcl和ncopy汇编文件使内存元素复制的速度尽可能达到最快。</p>\n<h3 id=\"Part-A\"><a href=\"#Part-A\" class=\"headerlink\" title=\"Part A\"></a>Part A</h3><div class=\"note info no-icon\"><p>目标：使用Y86-64汇编程序实现以下三个函数：</p>\n</div>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"> * Architecture Lab: Part A </span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * High level specs for the functions that the students will rewrite</span></span><br><span class=\"line\"><span class=\"comment\"> * in Y86-64 assembly language</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* $begin examples */</span></span><br><span class=\"line\"><span class=\"comment\">/* linked list element */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ELE</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> val;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ELE</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125; *list_ptr;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* sum_list - Sum the elements of a linked list */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">sum_list</span><span class=\"params\">(list_ptr ls)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> val = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ls) &#123;</span><br><span class=\"line\">\tval += ls-&gt;val;</span><br><span class=\"line\">\tls = ls-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* rsum_list - Recursive version of sum_list */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">rsum_list</span><span class=\"params\">(list_ptr ls)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!ls)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> val = ls-&gt;val;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> rest = rsum_list(ls-&gt;next);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> val + rest;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* copy_block - Copy src to dest and return xor checksum of src */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">copy_block</span><span class=\"params\">(<span class=\"keyword\">long</span> *src, <span class=\"keyword\">long</span> *dest, <span class=\"keyword\">long</span> len)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (len &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> val = *src++;</span><br><span class=\"line\">\t*dest++ = val;</span><br><span class=\"line\">\tresult ^= val;</span><br><span class=\"line\">\tlen--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* $end examples */</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Part-B\"><a href=\"#Part-B\" class=\"headerlink\" title=\"Part B\"></a>Part B</h3><div class=\"note info no-icon\"><p>在hcl文件中添加iaddq指令的逻辑。</p>\n</div>\n\n<h3 id=\"Part-C\"><a href=\"#Part-C\" class=\"headerlink\" title=\"Part C\"></a>Part C</h3><div class=\"note info no-icon\"><p>修改hcl和ncopy汇编文件使内存元素复制的速度尽可能达到最快，即CPE（cycles per element）越来越小。</p>\n<ul>\n<li>修改hcl内容首先要添加iaddq的实现</li>\n<li>降低CPI，即处理ret、jmp预测、加载使用冒险。ret没必要处理。</li>\n<li>程序性能优化（3e第五章）</li>\n</ul>\n</div>\n\n<h2 id=\"实验前的归纳\"><a href=\"#实验前的归纳\" class=\"headerlink\" title=\"实验前的归纳\"></a>实验前的归纳</h2><p>概括一下这次实验用到的知识点。</p>\n<p>首先是汇编相关的内容，通过第三章的学习，part A直接上手完成是没有问题的。<br>其次是hcl逻辑块的实现，这就需要对SEQ以及PIPE的实现及ISA有一定的了解。</p>\n<h2 id=\"Arch-Lab\"><a href=\"#Arch-Lab\" class=\"headerlink\" title=\"Arch Lab\"></a>Arch Lab</h2><p>正式开始记录实验，Part C由于第五章内容还没有了解完全，所以准备后期二刷Part C。</p>\n<h3 id=\"Part-A-1\"><a href=\"#Part-A-1\" class=\"headerlink\" title=\"Part A\"></a>Part A</h3><p>这一部分凭借汇编基础即可完成。不过还需要注意一下汇编的一些伪指令和格式问题。</p>\n<ul>\n<li>sum_list</li>\n</ul>\n<figure class=\"highlight x86asm\"><figcaption><span>文件名：archlab/archlab-handout/sim/misc/sum.ys</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># sum_list function coded by scarborough_coral</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">.pos</span> <span class=\"number\">0</span></span><br><span class=\"line\">\tirmovq stack,%rsp</span><br><span class=\"line\">\t<span class=\"keyword\">call</span> main</span><br><span class=\"line\">\thalt</span><br><span class=\"line\"></span><br><span class=\"line\"># Sample linked list</span><br><span class=\"line\"><span class=\"meta\">.align</span> <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"symbol\">ele1:</span></span><br><span class=\"line\"><span class=\"meta\">.quad</span> <span class=\"number\">0x00a</span></span><br><span class=\"line\"><span class=\"meta\">.quad</span> ele2</span><br><span class=\"line\"><span class=\"symbol\">ele2:</span></span><br><span class=\"line\"><span class=\"meta\">.quad</span> <span class=\"number\">0x0b0</span></span><br><span class=\"line\"><span class=\"meta\">.quad</span> ele3</span><br><span class=\"line\"><span class=\"symbol\">ele3:</span></span><br><span class=\"line\"><span class=\"meta\">.quad</span> <span class=\"number\">0xc00</span></span><br><span class=\"line\"><span class=\"meta\">.quad</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"symbol\"></span></span><br><span class=\"line\"><span class=\"symbol\">sum_list:</span></span><br><span class=\"line\">\txorq %rax,%rax</span><br><span class=\"line\"><span class=\"symbol\">\t</span></span><br><span class=\"line\"><span class=\"symbol\">loop_start:</span></span><br><span class=\"line\">\tandq %rdi,%rdi</span><br><span class=\"line\">\t<span class=\"keyword\">je</span> loop_end</span><br><span class=\"line\"></span><br><span class=\"line\">\tmrmovq <span class=\"number\">0</span>(%rdi),%rsi</span><br><span class=\"line\">\taddq %rsi,%rax</span><br><span class=\"line\">\tmrmovq <span class=\"number\">8</span>(%rdi),%rsi</span><br><span class=\"line\">\trrmovq %rsi,%rdi\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">jmp</span> loop_start</span><br><span class=\"line\"><span class=\"symbol\"></span></span><br><span class=\"line\"><span class=\"symbol\">loop_end:</span></span><br><span class=\"line\">\t<span class=\"keyword\">ret</span></span><br><span class=\"line\"><span class=\"symbol\"></span></span><br><span class=\"line\"><span class=\"symbol\">main:</span></span><br><span class=\"line\">\tirmovq ele1,%rdi</span><br><span class=\"line\">\t<span class=\"keyword\">call</span> sum_list</span><br><span class=\"line\">\t<span class=\"keyword\">ret</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">.pos</span> <span class=\"number\">1024</span></span><br><span class=\"line\"><span class=\"symbol\">stack:</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>rsum_list</li>\n</ul>\n<figure class=\"highlight x86asm\"><figcaption><span>文件名：archlab/archlab-handout/sim/misc/rsum.ys</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">.pos</span> <span class=\"number\">0</span></span><br><span class=\"line\">\tirmovq stack,%rsp</span><br><span class=\"line\">\t<span class=\"keyword\">call</span> main</span><br><span class=\"line\">\thalt</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">.align</span> <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"symbol\">ele1:</span></span><br><span class=\"line\"><span class=\"meta\">.quad</span> <span class=\"number\">0x00a</span></span><br><span class=\"line\"><span class=\"meta\">.quad</span> ele2</span><br><span class=\"line\"><span class=\"symbol\">ele2:</span></span><br><span class=\"line\"><span class=\"meta\">.quad</span> <span class=\"number\">0x0b0</span></span><br><span class=\"line\"><span class=\"meta\">.quad</span> ele3</span><br><span class=\"line\"><span class=\"symbol\">ele3:</span></span><br><span class=\"line\"><span class=\"meta\">.quad</span> <span class=\"number\">0xc00</span></span><br><span class=\"line\"><span class=\"meta\">.quad</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"symbol\"></span></span><br><span class=\"line\"><span class=\"symbol\">rsum_list:</span></span><br><span class=\"line\">\txorq %rax,%rax</span><br><span class=\"line\">\tandq %rdi,%rdi</span><br><span class=\"line\">\t<span class=\"keyword\">jne</span> not_null</span><br><span class=\"line\">\t<span class=\"keyword\">ret</span></span><br><span class=\"line\"><span class=\"symbol\">not_null:</span></span><br><span class=\"line\">\tmrmovq <span class=\"number\">0</span>(%rdi),%rsi</span><br><span class=\"line\">\tpushq %rsi</span><br><span class=\"line\">\tmrmovq <span class=\"number\">8</span>(%rdi),%rdi</span><br><span class=\"line\">\t<span class=\"keyword\">call</span> rsum_list</span><br><span class=\"line\">\tpopq %rsi</span><br><span class=\"line\">\taddq %rsi,%rax</span><br><span class=\"line\">\t<span class=\"keyword\">ret</span></span><br><span class=\"line\"><span class=\"symbol\"></span></span><br><span class=\"line\"><span class=\"symbol\"></span></span><br><span class=\"line\"><span class=\"symbol\"></span></span><br><span class=\"line\"><span class=\"symbol\">main:</span></span><br><span class=\"line\">\tirmovq ele1,%rdi</span><br><span class=\"line\">\t<span class=\"keyword\">call</span> rsum_list</span><br><span class=\"line\">\t<span class=\"keyword\">ret</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">.pos</span> <span class=\"number\">1024</span></span><br><span class=\"line\"><span class=\"symbol\">stack:</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>copy_block</li>\n</ul>\n<figure class=\"highlight x86asm\"><figcaption><span>文件名：archlab/archlab-handout/sim/misc/copy.ys</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">.pos</span> <span class=\"number\">0</span></span><br><span class=\"line\">\tirmovq stack,%rsp</span><br><span class=\"line\">\t<span class=\"keyword\">call</span> main</span><br><span class=\"line\">\thalt</span><br><span class=\"line\"><span class=\"meta\">\t</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">.align</span> <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"symbol\">src:</span></span><br><span class=\"line\"><span class=\"meta\">\t.quad</span> <span class=\"number\">0x00a</span></span><br><span class=\"line\"><span class=\"meta\">\t.quad</span> <span class=\"number\">0x0b0</span></span><br><span class=\"line\"><span class=\"meta\">\t.quad</span> <span class=\"number\">0xc00</span></span><br><span class=\"line\"><span class=\"symbol\"></span></span><br><span class=\"line\"><span class=\"symbol\">dest:</span></span><br><span class=\"line\"><span class=\"meta\">\t.quad</span> <span class=\"number\">0x111</span></span><br><span class=\"line\"><span class=\"meta\">\t.quad</span> <span class=\"number\">0x222</span></span><br><span class=\"line\"><span class=\"meta\">\t.quad</span> <span class=\"number\">0x333</span></span><br><span class=\"line\"><span class=\"symbol\"></span></span><br><span class=\"line\"><span class=\"symbol\">copy_block:</span></span><br><span class=\"line\">\txorq %rax,%rax</span><br><span class=\"line\">\tpushq %r12</span><br><span class=\"line\">\tpushq %r13</span><br><span class=\"line\">\tirmovq <span class=\"number\">$1</span>,%r13</span><br><span class=\"line\">\tirmovq <span class=\"number\">$8</span>,%r12</span><br><span class=\"line\"><span class=\"symbol\">loop_start:</span>\t</span><br><span class=\"line\">\tandq %rdx,%rdx</span><br><span class=\"line\">\t<span class=\"keyword\">je</span> loop_end</span><br><span class=\"line\">\tmrmovq (%rdi),%rcx</span><br><span class=\"line\">\trmmovq %rcx,(%rsi)</span><br><span class=\"line\">\taddq %r12,%rdi</span><br><span class=\"line\">\taddq %r12,%rsi</span><br><span class=\"line\">\txorq %rcx,%rax</span><br><span class=\"line\">\tsubq %r13,%rdx</span><br><span class=\"line\">\t<span class=\"keyword\">jmp</span> loop_start</span><br><span class=\"line\"><span class=\"symbol\">loop_end:</span></span><br><span class=\"line\">\tpopq %r12</span><br><span class=\"line\">\tpopq %r13</span><br><span class=\"line\">\t<span class=\"keyword\">ret</span></span><br><span class=\"line\"><span class=\"symbol\"></span></span><br><span class=\"line\"><span class=\"symbol\">main:</span></span><br><span class=\"line\">\tirmovq src,%rdi</span><br><span class=\"line\">\tirmovq dest,%rsi</span><br><span class=\"line\">\tirmovq <span class=\"number\">$3</span>,%rdx</span><br><span class=\"line\">\t<span class=\"keyword\">call</span> copy_block</span><br><span class=\"line\">\t<span class=\"keyword\">ret</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">.pos</span> <span class=\"number\">1024</span></span><br><span class=\"line\"><span class=\"symbol\">stack:</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Part-B-1\"><a href=\"#Part-B-1\" class=\"headerlink\" title=\"Part B\"></a>Part B</h3><p>Part B 只需要按照writeup查看3e课本iaddq指令的阶段实现即可实现。</p>\n<div class=\"note danger\"><ol>\n<li>可能会遇到找不到依赖库的问题，安装就行了</li>\n<li>中途遇见了一个链接问题，是因为glibc版本太新，实验依赖的版本太过老旧导致一个<code>matherr</code>找不到问题，观察代码其他地方并没有用到，直接omit注释掉了。</li>\n</ol>\n</div>\n\n<p>修改内容如下图：</p>\n<p><img data-src=\"csapp-lab-4/seq.jpg\"></p>\n<p>hcl代码如下：</p>\n<figure class=\"highlight vhdl\"><figcaption><span>文件名：archlab/archlab-handout/sim/seq/seq-full.hcl</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#<span class=\"comment\">/* $begin seq-all-hcl */</span></span><br><span class=\"line\">####################################################################</span><br><span class=\"line\">#  HCL Description <span class=\"keyword\">of</span> Control <span class=\"keyword\">for</span> Single Cycle Y86-<span class=\"number\">64</span> Processor SEQ   #</span><br><span class=\"line\">#  Copyright (C) Randal E. Bryant, David R. O<span class=\"symbol\">&#x27;Hallaron</span>, <span class=\"number\">2010</span>       #</span><br><span class=\"line\">####################################################################</span><br><span class=\"line\"></span><br><span class=\"line\">## Your task <span class=\"keyword\">is</span> <span class=\"keyword\">to</span> implement the iaddq instruction</span><br><span class=\"line\">## The <span class=\"keyword\">file</span> contains a declaration <span class=\"keyword\">of</span> the icodes</span><br><span class=\"line\">## <span class=\"keyword\">for</span> iaddq (IIADDQ)</span><br><span class=\"line\">## Your job <span class=\"keyword\">is</span> <span class=\"keyword\">to</span> add the rest <span class=\"keyword\">of</span> the logic <span class=\"keyword\">to</span> make it work</span><br><span class=\"line\"></span><br><span class=\"line\">####################################################################</span><br><span class=\"line\">#    C Include<span class=\"symbol\">&#x27;s</span>.  Don<span class=\"symbol\">&#x27;t</span> alter these                               #</span><br><span class=\"line\">####################################################################</span><br><span class=\"line\"></span><br><span class=\"line\">quote &#x27;#include &lt;stdio.h&gt;&#x27;</span><br><span class=\"line\">quote &#x27;#include <span class=\"string\">&quot;isa.h&quot;</span>&#x27;</span><br><span class=\"line\">quote &#x27;#include <span class=\"string\">&quot;sim.h&quot;</span>&#x27;</span><br><span class=\"line\">quote <span class=\"symbol\">&#x27;int</span> sim_main(int argc, char *argv[]);&#x27;</span><br><span class=\"line\">quote <span class=\"symbol\">&#x27;word_t</span> gen_pc()&#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;&#x27;</span><br><span class=\"line\">quote <span class=\"symbol\">&#x27;int</span> main(int argc, char *argv[])&#x27;</span><br><span class=\"line\">quote &#x27;  &#123;plusmode=<span class=\"number\">0</span>;<span class=\"keyword\">return</span> sim_main(argc,argv);&#125;&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">####################################################################</span><br><span class=\"line\">#    Declarations.  Do <span class=\"keyword\">not</span> change/remove/delete any <span class=\"keyword\">of</span> these       #</span><br><span class=\"line\">####################################################################</span><br><span class=\"line\"></span><br><span class=\"line\">##### Symbolic representation <span class=\"keyword\">of</span> Y86-<span class=\"number\">64</span> Instruction Codes #############</span><br><span class=\"line\">wordsig INOP \t<span class=\"symbol\">&#x27;I_NOP</span>&#x27;</span><br><span class=\"line\">wordsig IHALT\t<span class=\"symbol\">&#x27;I_HALT</span>&#x27;</span><br><span class=\"line\">wordsig IRRMOVQ\t<span class=\"symbol\">&#x27;I_RRMOVQ</span>&#x27;</span><br><span class=\"line\">wordsig IIRMOVQ\t<span class=\"symbol\">&#x27;I_IRMOVQ</span>&#x27;</span><br><span class=\"line\">wordsig IRMMOVQ\t<span class=\"symbol\">&#x27;I_RMMOVQ</span>&#x27;</span><br><span class=\"line\">wordsig IMRMOVQ\t<span class=\"symbol\">&#x27;I_MRMOVQ</span>&#x27;</span><br><span class=\"line\">wordsig IOPQ\t<span class=\"symbol\">&#x27;I_ALU</span>&#x27;</span><br><span class=\"line\">wordsig IJXX\t<span class=\"symbol\">&#x27;I_JMP</span>&#x27;</span><br><span class=\"line\">wordsig ICALL\t<span class=\"symbol\">&#x27;I_CALL</span>&#x27;</span><br><span class=\"line\">wordsig IRET\t<span class=\"symbol\">&#x27;I_RET</span>&#x27;</span><br><span class=\"line\">wordsig IPUSHQ\t<span class=\"symbol\">&#x27;I_PUSHQ</span>&#x27;</span><br><span class=\"line\">wordsig IPOPQ\t<span class=\"symbol\">&#x27;I_POPQ</span>&#x27;</span><br><span class=\"line\"># Instruction code <span class=\"keyword\">for</span> iaddq instruction</span><br><span class=\"line\">wordsig IIADDQ\t<span class=\"symbol\">&#x27;I_IADDQ</span>&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">##### Symbolic represenations <span class=\"keyword\">of</span> Y86-<span class=\"number\">64</span> <span class=\"keyword\">function</span> codes                  #####</span><br><span class=\"line\">wordsig FNONE    <span class=\"symbol\">&#x27;F_NONE</span>&#x27;        # <span class=\"keyword\">Default</span> <span class=\"keyword\">function</span> code</span><br><span class=\"line\"></span><br><span class=\"line\">##### Symbolic representation <span class=\"keyword\">of</span> Y86-<span class=\"number\">64</span> Registers referenced explicitly #####</span><br><span class=\"line\">wordsig RRSP     <span class=\"symbol\">&#x27;REG_RSP</span>&#x27;    \t# Stack Pointer</span><br><span class=\"line\">wordsig RNONE    <span class=\"symbol\">&#x27;REG_NONE</span>&#x27;   \t# Special value indicating <span class=\"string\">&quot;no register&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">##### ALU Functions referenced explicitly                            #####</span><br><span class=\"line\">wordsig ALUADD\t<span class=\"symbol\">&#x27;A_ADD</span>&#x27;\t\t# ALU should add its arguments</span><br><span class=\"line\"></span><br><span class=\"line\">##### Possible instruction status values                             #####</span><br><span class=\"line\">wordsig SAOK\t<span class=\"symbol\">&#x27;STAT_AOK</span>&#x27;\t# Normal execution</span><br><span class=\"line\">wordsig SADR\t<span class=\"symbol\">&#x27;STAT_ADR</span>&#x27;\t# Invalid memory address</span><br><span class=\"line\">wordsig SINS\t<span class=\"symbol\">&#x27;STAT_INS</span>&#x27;\t# Invalid instruction</span><br><span class=\"line\">wordsig SHLT\t<span class=\"symbol\">&#x27;STAT_HLT</span>&#x27;\t# Halt instruction encountered</span><br><span class=\"line\"></span><br><span class=\"line\">##### Signals that can be referenced by control logic ####################</span><br><span class=\"line\"></span><br><span class=\"line\">##### Fetch stage inputs\t\t#####</span><br><span class=\"line\">wordsig pc <span class=\"symbol\">&#x27;pc</span>&#x27;\t\t\t\t# Program counter</span><br><span class=\"line\">##### Fetch stage computations\t\t#####</span><br><span class=\"line\">wordsig imem_icode <span class=\"symbol\">&#x27;imem_icode</span>&#x27;\t\t# icode field from instruction memory</span><br><span class=\"line\">wordsig imem_ifun  <span class=\"symbol\">&#x27;imem_ifun</span>&#x27; \t\t# ifun field from instruction memory</span><br><span class=\"line\">wordsig icode\t  <span class=\"symbol\">&#x27;icode</span>&#x27;\t\t# Instruction control code</span><br><span class=\"line\">wordsig ifun\t  <span class=\"symbol\">&#x27;ifun</span>&#x27;\t\t# Instruction <span class=\"keyword\">function</span></span><br><span class=\"line\">wordsig rA\t  <span class=\"symbol\">&#x27;ra</span>&#x27;\t\t\t# rA field from instruction</span><br><span class=\"line\">wordsig rB\t  <span class=\"symbol\">&#x27;rb</span>&#x27;\t\t\t# rB field from instruction</span><br><span class=\"line\">wordsig valC\t  <span class=\"symbol\">&#x27;valc</span>&#x27;\t\t# <span class=\"keyword\">Constant</span> from instruction</span><br><span class=\"line\">wordsig valP\t  <span class=\"symbol\">&#x27;valp</span>&#x27;\t\t# Address <span class=\"keyword\">of</span> following instruction</span><br><span class=\"line\">boolsig imem_error <span class=\"symbol\">&#x27;imem_error</span>&#x27;\t\t# <span class=\"literal\">Error</span> <span class=\"keyword\">signal</span> from instruction memory</span><br><span class=\"line\">boolsig instr_valid <span class=\"symbol\">&#x27;instr_valid</span>&#x27;\t# <span class=\"keyword\">Is</span> fetched instruction valid?</span><br><span class=\"line\"></span><br><span class=\"line\">##### Decode stage computations\t\t#####</span><br><span class=\"line\">wordsig valA\t<span class=\"symbol\">&#x27;vala</span>&#x27;\t\t\t# Value from <span class=\"keyword\">register</span> A <span class=\"keyword\">port</span></span><br><span class=\"line\">wordsig valB\t<span class=\"symbol\">&#x27;valb</span>&#x27;\t\t\t# Value from <span class=\"keyword\">register</span> B <span class=\"keyword\">port</span></span><br><span class=\"line\"></span><br><span class=\"line\">##### Execute stage computations\t#####</span><br><span class=\"line\">wordsig valE\t<span class=\"symbol\">&#x27;vale</span>&#x27;\t\t\t# Value computed by ALU</span><br><span class=\"line\">boolsig Cnd\t<span class=\"symbol\">&#x27;cond</span>&#x27;\t\t\t# Branch test</span><br><span class=\"line\"></span><br><span class=\"line\">##### Memory stage computations\t\t#####</span><br><span class=\"line\">wordsig valM\t<span class=\"symbol\">&#x27;valm</span>&#x27;\t\t\t# Value read from memory</span><br><span class=\"line\">boolsig dmem_error <span class=\"symbol\">&#x27;dmem_error</span>&#x27;\t\t# <span class=\"literal\">Error</span> <span class=\"keyword\">signal</span> from data memory</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">####################################################################</span><br><span class=\"line\">#    Control <span class=\"keyword\">Signal</span> Definitions.                                   #</span><br><span class=\"line\">####################################################################</span><br><span class=\"line\"></span><br><span class=\"line\">################ Fetch Stage     ###################################</span><br><span class=\"line\"></span><br><span class=\"line\"># Determine instruction code</span><br><span class=\"line\">word icode = [</span><br><span class=\"line\">\timem_error: INOP;</span><br><span class=\"line\">\t<span class=\"number\">1</span>: imem_icode;\t\t# <span class=\"keyword\">Default</span>: get from instruction memory</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"># Determine instruction <span class=\"keyword\">function</span></span><br><span class=\"line\">word ifun = [</span><br><span class=\"line\">\timem_error: FNONE;</span><br><span class=\"line\">\t<span class=\"number\">1</span>: imem_ifun;\t\t# <span class=\"keyword\">Default</span>: get from instruction memory</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">bool instr_valid = icode <span class=\"keyword\">in</span> </span><br><span class=\"line\">\t&#123; INOP, IHALT, IRRMOVQ, IIRMOVQ, IRMMOVQ, IMRMOVQ,</span><br><span class=\"line\">\t       IOPQ, IIADDQ, IJXX, ICALL, IRET, IPUSHQ, IPOPQ &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"># Does fetched instruction require a regid byte?</span><br><span class=\"line\">bool need_regids =</span><br><span class=\"line\">\ticode <span class=\"keyword\">in</span> &#123; IRRMOVQ, IOPQ, IIADDQ, IPUSHQ, IPOPQ, </span><br><span class=\"line\">\t\t     IIRMOVQ, IRMMOVQ, IMRMOVQ &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"># Does fetched instruction require a <span class=\"keyword\">constant</span> word?</span><br><span class=\"line\">bool need_valC =</span><br><span class=\"line\">\ticode <span class=\"keyword\">in</span> &#123; IIRMOVQ, IRMMOVQ, IMRMOVQ, IJXX, ICALL, IIADDQ &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">################ Decode Stage    ###################################</span><br><span class=\"line\"></span><br><span class=\"line\">## What <span class=\"keyword\">register</span> should be used as the A source?</span><br><span class=\"line\">word srcA = [</span><br><span class=\"line\">\ticode <span class=\"keyword\">in</span> &#123; IRRMOVQ, IRMMOVQ, IOPQ, IPUSHQ  &#125; : rA;</span><br><span class=\"line\">\ticode <span class=\"keyword\">in</span> &#123; IPOPQ, IRET &#125; : RRSP;</span><br><span class=\"line\">\t<span class=\"number\">1</span> : RNONE; # Don<span class=\"symbol\">&#x27;t</span> need <span class=\"keyword\">register</span></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">## What <span class=\"keyword\">register</span> should be used as the B source?</span><br><span class=\"line\">word srcB = [</span><br><span class=\"line\">\ticode <span class=\"keyword\">in</span> &#123; IOPQ, IRMMOVQ, IMRMOVQ, IIADDQ  &#125; : rB;</span><br><span class=\"line\">\ticode <span class=\"keyword\">in</span> &#123; IPUSHQ, IPOPQ, ICALL, IRET &#125; : RRSP;</span><br><span class=\"line\">\t<span class=\"number\">1</span> : RNONE;  # Don<span class=\"symbol\">&#x27;t</span> need <span class=\"keyword\">register</span></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">## What <span class=\"keyword\">register</span> should be used as the E destination?</span><br><span class=\"line\">word dstE = [</span><br><span class=\"line\">\ticode <span class=\"keyword\">in</span> &#123; IRRMOVQ &#125; &amp;&amp; Cnd : rB;</span><br><span class=\"line\">\ticode <span class=\"keyword\">in</span> &#123; IIRMOVQ, IOPQ, IIADDQ &#125; : rB;</span><br><span class=\"line\">\ticode <span class=\"keyword\">in</span> &#123; IPUSHQ, IPOPQ, ICALL, IRET &#125; : RRSP;</span><br><span class=\"line\">\t<span class=\"number\">1</span> : RNONE;  # Don<span class=\"symbol\">&#x27;t</span> write any <span class=\"keyword\">register</span></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">## What <span class=\"keyword\">register</span> should be used as the M destination?</span><br><span class=\"line\">word dstM = [</span><br><span class=\"line\">\ticode <span class=\"keyword\">in</span> &#123; IMRMOVQ, IPOPQ &#125; : rA;</span><br><span class=\"line\">\t<span class=\"number\">1</span> : RNONE;  # Don<span class=\"symbol\">&#x27;t</span> write any <span class=\"keyword\">register</span></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">################ Execute Stage   ###################################</span><br><span class=\"line\"></span><br><span class=\"line\">## <span class=\"keyword\">Select</span> input A <span class=\"keyword\">to</span> ALU</span><br><span class=\"line\">word aluA = [</span><br><span class=\"line\">\ticode <span class=\"keyword\">in</span> &#123; IRRMOVQ, IOPQ &#125; : valA;</span><br><span class=\"line\">\ticode <span class=\"keyword\">in</span> &#123; IIRMOVQ, IRMMOVQ, IMRMOVQ, IIADDQ &#125; : valC;</span><br><span class=\"line\">\ticode <span class=\"keyword\">in</span> &#123; ICALL, IPUSHQ &#125; : -<span class=\"number\">8</span>;</span><br><span class=\"line\">\ticode <span class=\"keyword\">in</span> &#123; IRET, IPOPQ &#125; : <span class=\"number\">8</span>;</span><br><span class=\"line\">\t# Other instructions don<span class=\"symbol\">&#x27;t</span> need ALU</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">## <span class=\"keyword\">Select</span> input B <span class=\"keyword\">to</span> ALU</span><br><span class=\"line\">word aluB = [</span><br><span class=\"line\">\ticode <span class=\"keyword\">in</span> &#123; IRMMOVQ, IMRMOVQ, IOPQ, IIADDQ, ICALL, </span><br><span class=\"line\">\t\t      IPUSHQ, IRET, IPOPQ &#125; : valB;</span><br><span class=\"line\">\ticode <span class=\"keyword\">in</span> &#123; IRRMOVQ, IIRMOVQ &#125; : <span class=\"number\">0</span>;</span><br><span class=\"line\">\t# Other instructions don<span class=\"symbol\">&#x27;t</span> need ALU</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">## Set the ALU <span class=\"keyword\">function</span></span><br><span class=\"line\">word alufun = [</span><br><span class=\"line\">\ticode == IOPQ : ifun;</span><br><span class=\"line\">\t<span class=\"number\">1</span> : ALUADD;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">## Should the condition codes be updated?</span><br><span class=\"line\">bool set_cc = icode <span class=\"keyword\">in</span> &#123; IOPQ, IIADDQ &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">################ Memory Stage    ###################################</span><br><span class=\"line\"></span><br><span class=\"line\">## Set read control <span class=\"keyword\">signal</span></span><br><span class=\"line\">bool mem_read = icode <span class=\"keyword\">in</span> &#123; IMRMOVQ, IPOPQ, IRET &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">## Set write control <span class=\"keyword\">signal</span></span><br><span class=\"line\">bool mem_write = icode <span class=\"keyword\">in</span> &#123; IRMMOVQ, IPUSHQ, ICALL &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">## <span class=\"keyword\">Select</span> memory address</span><br><span class=\"line\">word mem_addr = [</span><br><span class=\"line\">\ticode <span class=\"keyword\">in</span> &#123; IRMMOVQ, IPUSHQ, ICALL, IMRMOVQ &#125; : valE;</span><br><span class=\"line\">\ticode <span class=\"keyword\">in</span> &#123; IPOPQ, IRET &#125; : valA;</span><br><span class=\"line\">\t# Other instructions don<span class=\"symbol\">&#x27;t</span> need address</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">## <span class=\"keyword\">Select</span> memory input data</span><br><span class=\"line\">word mem_data = [</span><br><span class=\"line\">\t# Value from <span class=\"keyword\">register</span></span><br><span class=\"line\">\ticode <span class=\"keyword\">in</span> &#123; IRMMOVQ, IPUSHQ &#125; : valA;</span><br><span class=\"line\">\t# <span class=\"keyword\">Return</span> PC</span><br><span class=\"line\">\ticode == ICALL : valP;</span><br><span class=\"line\">\t# <span class=\"keyword\">Default</span>: Don<span class=\"symbol\">&#x27;t</span> write anything</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">## Determine instruction status</span><br><span class=\"line\">word Stat = [</span><br><span class=\"line\">\timem_error || dmem_error : SADR;</span><br><span class=\"line\">\t!instr_valid: SINS;</span><br><span class=\"line\">\ticode == IHALT : SHLT;</span><br><span class=\"line\">\t<span class=\"number\">1</span> : SAOK;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">################ Program Counter Update ############################</span><br><span class=\"line\"></span><br><span class=\"line\">## What address should instruction be fetched at</span><br><span class=\"line\"></span><br><span class=\"line\">word new_pc = [</span><br><span class=\"line\">\t# Call.  <span class=\"keyword\">Use</span> instruction <span class=\"keyword\">constant</span></span><br><span class=\"line\">\ticode == ICALL : valC;</span><br><span class=\"line\">\t# Taken branch.  <span class=\"keyword\">Use</span> instruction <span class=\"keyword\">constant</span></span><br><span class=\"line\">\ticode == IJXX &amp;&amp; Cnd : valC;</span><br><span class=\"line\">\t# Completion <span class=\"keyword\">of</span> RET instruction.  <span class=\"keyword\">Use</span> value from stack</span><br><span class=\"line\">\ticode == IRET : valM;</span><br><span class=\"line\">\t# <span class=\"keyword\">Default</span>: <span class=\"keyword\">Use</span> incremented PC</span><br><span class=\"line\">\t<span class=\"number\">1</span> : valP;</span><br><span class=\"line\">];</span><br><span class=\"line\">#<span class=\"comment\">/* $end seq-all-hcl */</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>然后按照writeup跑测试，通过。</p>\n<h3 id=\"Part-C-1\"><a href=\"#Part-C-1\" class=\"headerlink\" title=\"Part C\"></a>Part C</h3><p>Part C 的具体内容就是加速内存元素的拷贝问题。修改<code>ncopy.ys</code>和<code>pipe-full.hcl</code>代码使得CPE（cycles per element）尽可能小，即单个元素拷贝时间越少越好。</p>\n<p>首先添加iaddq指令，原来是通过<code>irmovq</code>和<code>addq</code>来实现的，改为iaddq指令后起到很微弱的效果，并不能明显的减少CPE，如果你的irmovq指令在循环内部那就另说了，当然也不是最快。</p>\n<p><img data-src=\"csapp-lab-4/pipe.jpg\"></p>\n<p>具体代码如下：</p>\n<figure class=\"highlight vhdl\"><figcaption><span>文件名：archlab/archlab-handout/sim/pipe/pipe-full.hcl</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#<span class=\"comment\">/* $begin pipe-all-hcl */</span></span><br><span class=\"line\">####################################################################</span><br><span class=\"line\">#    HCL Description <span class=\"keyword\">of</span> Control <span class=\"keyword\">for</span> Pipelined Y86-<span class=\"number\">64</span> Processor     #</span><br><span class=\"line\">#    Copyright (C) Randal E. Bryant, David R. O<span class=\"symbol\">&#x27;Hallaron</span>, <span class=\"number\">2014</span>     #</span><br><span class=\"line\">####################################################################</span><br><span class=\"line\"></span><br><span class=\"line\">## Your task <span class=\"keyword\">is</span> <span class=\"keyword\">to</span> implement the iaddq instruction</span><br><span class=\"line\">## The <span class=\"keyword\">file</span> contains a declaration <span class=\"keyword\">of</span> the icodes</span><br><span class=\"line\">## <span class=\"keyword\">for</span> iaddq (IIADDQ)</span><br><span class=\"line\">## Your job <span class=\"keyword\">is</span> <span class=\"keyword\">to</span> add the rest <span class=\"keyword\">of</span> the logic <span class=\"keyword\">to</span> make it work</span><br><span class=\"line\"></span><br><span class=\"line\">####################################################################</span><br><span class=\"line\">#    C Include<span class=\"symbol\">&#x27;s</span>.  Don<span class=\"symbol\">&#x27;t</span> alter these                               #</span><br><span class=\"line\">####################################################################</span><br><span class=\"line\"></span><br><span class=\"line\">quote &#x27;#include &lt;stdio.h&gt;&#x27;</span><br><span class=\"line\">quote &#x27;#include <span class=\"string\">&quot;isa.h&quot;</span>&#x27;</span><br><span class=\"line\">quote &#x27;#include <span class=\"string\">&quot;pipeline.h&quot;</span>&#x27;</span><br><span class=\"line\">quote &#x27;#include <span class=\"string\">&quot;stages.h&quot;</span>&#x27;</span><br><span class=\"line\">quote &#x27;#include <span class=\"string\">&quot;sim.h&quot;</span>&#x27;</span><br><span class=\"line\">quote <span class=\"symbol\">&#x27;int</span> sim_main(int argc, char *argv[]);&#x27;</span><br><span class=\"line\">quote <span class=\"symbol\">&#x27;int</span> main(int argc, char *argv[])&#123;<span class=\"keyword\">return</span> sim_main(argc,argv);&#125;&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">####################################################################</span><br><span class=\"line\">#    Declarations.  Do <span class=\"keyword\">not</span> change/remove/delete any <span class=\"keyword\">of</span> these       #</span><br><span class=\"line\">####################################################################</span><br><span class=\"line\"></span><br><span class=\"line\">##### Symbolic representation <span class=\"keyword\">of</span> Y86-<span class=\"number\">64</span> Instruction Codes #############</span><br><span class=\"line\">wordsig INOP \t<span class=\"symbol\">&#x27;I_NOP</span>&#x27;</span><br><span class=\"line\">wordsig IHALT\t<span class=\"symbol\">&#x27;I_HALT</span>&#x27;</span><br><span class=\"line\">wordsig IRRMOVQ\t<span class=\"symbol\">&#x27;I_RRMOVQ</span>&#x27;</span><br><span class=\"line\">wordsig IIRMOVQ\t<span class=\"symbol\">&#x27;I_IRMOVQ</span>&#x27;</span><br><span class=\"line\">wordsig IRMMOVQ\t<span class=\"symbol\">&#x27;I_RMMOVQ</span>&#x27;</span><br><span class=\"line\">wordsig IMRMOVQ\t<span class=\"symbol\">&#x27;I_MRMOVQ</span>&#x27;</span><br><span class=\"line\">wordsig IOPQ\t<span class=\"symbol\">&#x27;I_ALU</span>&#x27;</span><br><span class=\"line\">wordsig IJXX\t<span class=\"symbol\">&#x27;I_JMP</span>&#x27;</span><br><span class=\"line\">wordsig ICALL\t<span class=\"symbol\">&#x27;I_CALL</span>&#x27;</span><br><span class=\"line\">wordsig IRET\t<span class=\"symbol\">&#x27;I_RET</span>&#x27;</span><br><span class=\"line\">wordsig IPUSHQ\t<span class=\"symbol\">&#x27;I_PUSHQ</span>&#x27;</span><br><span class=\"line\">wordsig IPOPQ\t<span class=\"symbol\">&#x27;I_POPQ</span>&#x27;</span><br><span class=\"line\"># Instruction code <span class=\"keyword\">for</span> iaddq instruction</span><br><span class=\"line\">wordsig IIADDQ\t<span class=\"symbol\">&#x27;I_IADDQ</span>&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">##### Symbolic represenations <span class=\"keyword\">of</span> Y86-<span class=\"number\">64</span> <span class=\"keyword\">function</span> codes            #####</span><br><span class=\"line\">wordsig FNONE    <span class=\"symbol\">&#x27;F_NONE</span>&#x27;        # <span class=\"keyword\">Default</span> <span class=\"keyword\">function</span> code</span><br><span class=\"line\"></span><br><span class=\"line\">##### Symbolic representation <span class=\"keyword\">of</span> Y86-<span class=\"number\">64</span> Registers referenced      #####</span><br><span class=\"line\">wordsig RRSP     <span class=\"symbol\">&#x27;REG_RSP</span>&#x27;    \t     # Stack Pointer</span><br><span class=\"line\">wordsig RNONE    <span class=\"symbol\">&#x27;REG_NONE</span>&#x27;   \t     # Special value indicating <span class=\"string\">&quot;no register&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">##### ALU Functions referenced explicitly ##########################</span><br><span class=\"line\">wordsig ALUADD\t<span class=\"symbol\">&#x27;A_ADD</span>&#x27;\t\t     # ALU should add its arguments</span><br><span class=\"line\"></span><br><span class=\"line\">##### Possible instruction status values                       #####</span><br><span class=\"line\">wordsig SBUB\t<span class=\"symbol\">&#x27;STAT_BUB</span>&#x27;\t# Bubble <span class=\"keyword\">in</span> stage</span><br><span class=\"line\">wordsig SAOK\t<span class=\"symbol\">&#x27;STAT_AOK</span>&#x27;\t# Normal execution</span><br><span class=\"line\">wordsig SADR\t<span class=\"symbol\">&#x27;STAT_ADR</span>&#x27;\t# Invalid memory address</span><br><span class=\"line\">wordsig SINS\t<span class=\"symbol\">&#x27;STAT_INS</span>&#x27;\t# Invalid instruction</span><br><span class=\"line\">wordsig SHLT\t<span class=\"symbol\">&#x27;STAT_HLT</span>&#x27;\t# Halt instruction encountered</span><br><span class=\"line\"></span><br><span class=\"line\">##### Signals that can be referenced by control logic ##############</span><br><span class=\"line\"></span><br><span class=\"line\">##### Pipeline <span class=\"keyword\">Register</span> F ##########################################</span><br><span class=\"line\"></span><br><span class=\"line\">wordsig F_predPC <span class=\"symbol\">&#x27;pc_curr</span>-&gt;pc&#x27;\t     # Predicted value <span class=\"keyword\">of</span> PC</span><br><span class=\"line\"></span><br><span class=\"line\">##### Intermediate Values <span class=\"keyword\">in</span> Fetch Stage ###########################</span><br><span class=\"line\"></span><br><span class=\"line\">wordsig imem_icode  <span class=\"symbol\">&#x27;imem_icode</span>&#x27;      # icode field from instruction memory</span><br><span class=\"line\">wordsig imem_ifun   <span class=\"symbol\">&#x27;imem_ifun</span>&#x27;       # ifun  field from instruction memory</span><br><span class=\"line\">wordsig f_icode\t<span class=\"symbol\">&#x27;if_id_next</span>-&gt;icode&#x27;  # (Possibly modified) instruction code</span><br><span class=\"line\">wordsig f_ifun\t<span class=\"symbol\">&#x27;if_id_next</span>-&gt;ifun&#x27;   # Fetched instruction <span class=\"keyword\">function</span></span><br><span class=\"line\">wordsig f_valC\t<span class=\"symbol\">&#x27;if_id_next</span>-&gt;valc&#x27;   # <span class=\"keyword\">Constant</span> data <span class=\"keyword\">of</span> fetched instruction</span><br><span class=\"line\">wordsig f_valP\t<span class=\"symbol\">&#x27;if_id_next</span>-&gt;valp&#x27;   # Address <span class=\"keyword\">of</span> following instruction</span><br><span class=\"line\">boolsig imem_error <span class=\"symbol\">&#x27;imem_error</span>&#x27;\t     # <span class=\"literal\">Error</span> <span class=\"keyword\">signal</span> from instruction memory</span><br><span class=\"line\">boolsig instr_valid <span class=\"symbol\">&#x27;instr_valid</span>&#x27;    # <span class=\"keyword\">Is</span> fetched instruction valid?</span><br><span class=\"line\"></span><br><span class=\"line\">##### Pipeline <span class=\"keyword\">Register</span> D ##########################################</span><br><span class=\"line\">wordsig D_icode <span class=\"symbol\">&#x27;if_id_curr</span>-&gt;icode&#x27;   # Instruction code</span><br><span class=\"line\">wordsig D_rA <span class=\"symbol\">&#x27;if_id_curr</span>-&gt;ra&#x27;\t     # rA field from instruction</span><br><span class=\"line\">wordsig D_rB <span class=\"symbol\">&#x27;if_id_curr</span>-&gt;rb&#x27;\t     # rB field from instruction</span><br><span class=\"line\">wordsig D_valP <span class=\"symbol\">&#x27;if_id_curr</span>-&gt;valp&#x27;     # Incremented PC</span><br><span class=\"line\"></span><br><span class=\"line\">##### Intermediate Values <span class=\"keyword\">in</span> Decode Stage  #########################</span><br><span class=\"line\"></span><br><span class=\"line\">wordsig d_srcA\t <span class=\"symbol\">&#x27;id_ex_next</span>-&gt;srca&#x27;  # srcA from decoded instruction</span><br><span class=\"line\">wordsig d_srcB\t <span class=\"symbol\">&#x27;id_ex_next</span>-&gt;srcb&#x27;  # srcB from decoded instruction</span><br><span class=\"line\">wordsig d_rvalA <span class=\"symbol\">&#x27;d_regvala</span>&#x27;\t     # valA read from <span class=\"keyword\">register</span> <span class=\"keyword\">file</span></span><br><span class=\"line\">wordsig d_rvalB <span class=\"symbol\">&#x27;d_regvalb</span>&#x27;\t     # valB read from <span class=\"keyword\">register</span> <span class=\"keyword\">file</span></span><br><span class=\"line\"></span><br><span class=\"line\">##### Pipeline <span class=\"keyword\">Register</span> E ##########################################</span><br><span class=\"line\">wordsig E_icode <span class=\"symbol\">&#x27;id_ex_curr</span>-&gt;icode&#x27;   # Instruction code</span><br><span class=\"line\">wordsig E_ifun  <span class=\"symbol\">&#x27;id_ex_curr</span>-&gt;ifun&#x27;    # Instruction <span class=\"keyword\">function</span></span><br><span class=\"line\">wordsig E_valC  <span class=\"symbol\">&#x27;id_ex_curr</span>-&gt;valc&#x27;    # <span class=\"keyword\">Constant</span> data</span><br><span class=\"line\">wordsig E_srcA  <span class=\"symbol\">&#x27;id_ex_curr</span>-&gt;srca&#x27;    # Source A <span class=\"keyword\">register</span> ID</span><br><span class=\"line\">wordsig E_valA  <span class=\"symbol\">&#x27;id_ex_curr</span>-&gt;vala&#x27;    # Source A value</span><br><span class=\"line\">wordsig E_srcB  <span class=\"symbol\">&#x27;id_ex_curr</span>-&gt;srcb&#x27;    # Source B <span class=\"keyword\">register</span> ID</span><br><span class=\"line\">wordsig E_valB  <span class=\"symbol\">&#x27;id_ex_curr</span>-&gt;valb&#x27;    # Source B value</span><br><span class=\"line\">wordsig E_dstE <span class=\"symbol\">&#x27;id_ex_curr</span>-&gt;deste&#x27;    # Destination E <span class=\"keyword\">register</span> ID</span><br><span class=\"line\">wordsig E_dstM <span class=\"symbol\">&#x27;id_ex_curr</span>-&gt;destm&#x27;    # Destination M <span class=\"keyword\">register</span> ID</span><br><span class=\"line\"></span><br><span class=\"line\">##### Intermediate Values <span class=\"keyword\">in</span> Execute Stage #########################</span><br><span class=\"line\">wordsig e_valE <span class=\"symbol\">&#x27;ex_mem_next</span>-&gt;vale&#x27;\t# valE generated by ALU</span><br><span class=\"line\">boolsig e_Cnd <span class=\"symbol\">&#x27;ex_mem_next</span>-&gt;takebranch&#x27; # Does condition hold?</span><br><span class=\"line\">wordsig e_dstE <span class=\"symbol\">&#x27;ex_mem_next</span>-&gt;deste&#x27;      # dstE (possibly modified <span class=\"keyword\">to</span> be RNONE)</span><br><span class=\"line\"></span><br><span class=\"line\">##### Pipeline <span class=\"keyword\">Register</span> M                  #########################</span><br><span class=\"line\">wordsig M_stat <span class=\"symbol\">&#x27;ex_mem_curr</span>-&gt;status&#x27;     # Instruction status</span><br><span class=\"line\">wordsig M_icode <span class=\"symbol\">&#x27;ex_mem_curr</span>-&gt;icode&#x27;\t# Instruction code</span><br><span class=\"line\">wordsig M_ifun  <span class=\"symbol\">&#x27;ex_mem_curr</span>-&gt;ifun&#x27;\t# Instruction <span class=\"keyword\">function</span></span><br><span class=\"line\">wordsig M_valA  <span class=\"symbol\">&#x27;ex_mem_curr</span>-&gt;vala&#x27;      # Source A value</span><br><span class=\"line\">wordsig M_dstE <span class=\"symbol\">&#x27;ex_mem_curr</span>-&gt;deste&#x27;\t# Destination E <span class=\"keyword\">register</span> ID</span><br><span class=\"line\">wordsig M_valE  <span class=\"symbol\">&#x27;ex_mem_curr</span>-&gt;vale&#x27;      # ALU E value</span><br><span class=\"line\">wordsig M_dstM <span class=\"symbol\">&#x27;ex_mem_curr</span>-&gt;destm&#x27;\t# Destination M <span class=\"keyword\">register</span> ID</span><br><span class=\"line\">boolsig M_Cnd <span class=\"symbol\">&#x27;ex_mem_curr</span>-&gt;takebranch&#x27;\t# Condition flag</span><br><span class=\"line\">boolsig dmem_error <span class=\"symbol\">&#x27;dmem_error</span>&#x27;\t        # <span class=\"literal\">Error</span> <span class=\"keyword\">signal</span> from instruction memory</span><br><span class=\"line\"></span><br><span class=\"line\">##### Intermediate Values <span class=\"keyword\">in</span> Memory Stage ##########################</span><br><span class=\"line\">wordsig m_valM <span class=\"symbol\">&#x27;mem_wb_next</span>-&gt;valm&#x27;\t# valM generated by memory</span><br><span class=\"line\">wordsig m_stat <span class=\"symbol\">&#x27;mem_wb_next</span>-&gt;status&#x27;\t# stat (possibly modified <span class=\"keyword\">to</span> be SADR)</span><br><span class=\"line\"></span><br><span class=\"line\">##### Pipeline <span class=\"keyword\">Register</span> W ##########################################</span><br><span class=\"line\">wordsig W_stat <span class=\"symbol\">&#x27;mem_wb_curr</span>-&gt;status&#x27;     # Instruction status</span><br><span class=\"line\">wordsig W_icode <span class=\"symbol\">&#x27;mem_wb_curr</span>-&gt;icode&#x27;\t# Instruction code</span><br><span class=\"line\">wordsig W_dstE <span class=\"symbol\">&#x27;mem_wb_curr</span>-&gt;deste&#x27;\t# Destination E <span class=\"keyword\">register</span> ID</span><br><span class=\"line\">wordsig W_valE  <span class=\"symbol\">&#x27;mem_wb_curr</span>-&gt;vale&#x27;      # ALU E value</span><br><span class=\"line\">wordsig W_dstM <span class=\"symbol\">&#x27;mem_wb_curr</span>-&gt;destm&#x27;\t# Destination M <span class=\"keyword\">register</span> ID</span><br><span class=\"line\">wordsig W_valM  <span class=\"symbol\">&#x27;mem_wb_curr</span>-&gt;valm&#x27;\t# Memory M value</span><br><span class=\"line\"></span><br><span class=\"line\">####################################################################</span><br><span class=\"line\">#    Control <span class=\"keyword\">Signal</span> Definitions.                                   #</span><br><span class=\"line\">####################################################################</span><br><span class=\"line\"></span><br><span class=\"line\">################ Fetch Stage     ###################################</span><br><span class=\"line\"></span><br><span class=\"line\">## What address should instruction be fetched at</span><br><span class=\"line\">word f_pc = [</span><br><span class=\"line\">\t# Mispredicted branch.  Fetch at incremented PC</span><br><span class=\"line\">\tM_icode == IJXX &amp;&amp; !M_Cnd : M_valA;</span><br><span class=\"line\">\t# Completion <span class=\"keyword\">of</span> RET instruction</span><br><span class=\"line\">\tW_icode == IRET : W_valM;</span><br><span class=\"line\">\t# <span class=\"keyword\">Default</span>: <span class=\"keyword\">Use</span> predicted value <span class=\"keyword\">of</span> PC</span><br><span class=\"line\">\t<span class=\"number\">1</span> : F_predPC;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">## Determine icode <span class=\"keyword\">of</span> fetched instruction</span><br><span class=\"line\">word f_icode = [</span><br><span class=\"line\">\timem_error : INOP;</span><br><span class=\"line\">\t<span class=\"number\">1</span>: imem_icode;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"># Determine ifun</span><br><span class=\"line\">word f_ifun = [</span><br><span class=\"line\">\timem_error : FNONE;</span><br><span class=\"line\">\t<span class=\"number\">1</span>: imem_ifun;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"># <span class=\"keyword\">Is</span> instruction valid?</span><br><span class=\"line\">bool instr_valid = f_icode <span class=\"keyword\">in</span> </span><br><span class=\"line\">\t&#123; INOP, IHALT, IRRMOVQ, IIRMOVQ, IRMMOVQ, IMRMOVQ,</span><br><span class=\"line\">\t  IOPQ, IIADDQ, IJXX, ICALL, IRET, IPUSHQ, IPOPQ &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"># Determine status code <span class=\"keyword\">for</span> fetched instruction</span><br><span class=\"line\">word f_stat = [</span><br><span class=\"line\">\timem_error: SADR;</span><br><span class=\"line\">\t!instr_valid : SINS;</span><br><span class=\"line\">\tf_icode == IHALT : SHLT;</span><br><span class=\"line\">\t<span class=\"number\">1</span> : SAOK;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"># Does fetched instruction require a regid byte?</span><br><span class=\"line\">bool need_regids =</span><br><span class=\"line\">\tf_icode <span class=\"keyword\">in</span> &#123; IRRMOVQ, IOPQ, IIADDQ, IPUSHQ, IPOPQ, </span><br><span class=\"line\">\t\t     IIRMOVQ, IRMMOVQ, IMRMOVQ &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"># Does fetched instruction require a <span class=\"keyword\">constant</span> word?</span><br><span class=\"line\">bool need_valC =</span><br><span class=\"line\">\tf_icode <span class=\"keyword\">in</span> &#123; IIRMOVQ, IRMMOVQ, IMRMOVQ, IJXX, ICALL, IIADDQ &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"># Predict <span class=\"keyword\">next</span> value <span class=\"keyword\">of</span> PC</span><br><span class=\"line\">word f_predPC = [</span><br><span class=\"line\">\tf_icode <span class=\"keyword\">in</span> &#123; IJXX, ICALL &#125; : f_valC;</span><br><span class=\"line\">\t<span class=\"number\">1</span> : f_valP;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">################ Decode Stage ######################################</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## What <span class=\"keyword\">register</span> should be used as the A source?</span><br><span class=\"line\">word d_srcA = [</span><br><span class=\"line\">\tD_icode <span class=\"keyword\">in</span> &#123; IRRMOVQ, IRMMOVQ, IOPQ, IPUSHQ  &#125; : D_rA;</span><br><span class=\"line\">\tD_icode <span class=\"keyword\">in</span> &#123; IPOPQ, IRET &#125; : RRSP;</span><br><span class=\"line\">\t<span class=\"number\">1</span> : RNONE; # Don<span class=\"symbol\">&#x27;t</span> need <span class=\"keyword\">register</span></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">## What <span class=\"keyword\">register</span> should be used as the B source?</span><br><span class=\"line\">word d_srcB = [</span><br><span class=\"line\">\tD_icode <span class=\"keyword\">in</span> &#123; IOPQ, IIADDQ, IRMMOVQ, IMRMOVQ  &#125; : D_rB;</span><br><span class=\"line\">\tD_icode <span class=\"keyword\">in</span> &#123; IPUSHQ, IPOPQ, ICALL, IRET &#125; : RRSP;</span><br><span class=\"line\">\t<span class=\"number\">1</span> : RNONE;  # Don<span class=\"symbol\">&#x27;t</span> need <span class=\"keyword\">register</span></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">## What <span class=\"keyword\">register</span> should be used as the E destination?</span><br><span class=\"line\">word d_dstE = [</span><br><span class=\"line\">\tD_icode <span class=\"keyword\">in</span> &#123; IRRMOVQ, IIRMOVQ, IOPQ, IIADDQ &#125; : D_rB;</span><br><span class=\"line\">\tD_icode <span class=\"keyword\">in</span> &#123; IPUSHQ, IPOPQ, ICALL, IRET &#125; : RRSP;</span><br><span class=\"line\">\t<span class=\"number\">1</span> : RNONE;  # Don<span class=\"symbol\">&#x27;t</span> write any <span class=\"keyword\">register</span></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">## What <span class=\"keyword\">register</span> should be used as the M destination?</span><br><span class=\"line\">word d_dstM = [</span><br><span class=\"line\">\tD_icode <span class=\"keyword\">in</span> &#123; IMRMOVQ, IPOPQ &#125; : D_rA;</span><br><span class=\"line\">\t<span class=\"number\">1</span> : RNONE;  # Don<span class=\"symbol\">&#x27;t</span> write any <span class=\"keyword\">register</span></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">## What should be the A value?</span><br><span class=\"line\">## Forward into decode stage <span class=\"keyword\">for</span> valA</span><br><span class=\"line\">word d_valA = [</span><br><span class=\"line\">\tD_icode <span class=\"keyword\">in</span> &#123; ICALL, IJXX &#125; : D_valP; # <span class=\"keyword\">Use</span> incremented PC</span><br><span class=\"line\">\td_srcA == e_dstE : e_valE;    # Forward valE from execute</span><br><span class=\"line\">\td_srcA == M_dstM : m_valM;    # Forward valM from memory</span><br><span class=\"line\">\td_srcA == M_dstE : M_valE;    # Forward valE from memory</span><br><span class=\"line\">\td_srcA == W_dstM : W_valM;    # Forward valM from write back</span><br><span class=\"line\">\td_srcA == W_dstE : W_valE;    # Forward valE from write back</span><br><span class=\"line\">\t<span class=\"number\">1</span> : d_rvalA;  # <span class=\"keyword\">Use</span> value read from <span class=\"keyword\">register</span> <span class=\"keyword\">file</span></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">word d_valB = [</span><br><span class=\"line\">\td_srcB == e_dstE : e_valE;    # Forward valE from execute</span><br><span class=\"line\">\td_srcB == M_dstM : m_valM;    # Forward valM from memory</span><br><span class=\"line\">\td_srcB == M_dstE : M_valE;    # Forward valE from memory</span><br><span class=\"line\">\td_srcB == W_dstM : W_valM;    # Forward valM from write back</span><br><span class=\"line\">\td_srcB == W_dstE : W_valE;    # Forward valE from write back</span><br><span class=\"line\">\t<span class=\"number\">1</span> : d_rvalB;  # <span class=\"keyword\">Use</span> value read from <span class=\"keyword\">register</span> <span class=\"keyword\">file</span></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">################ Execute Stage #####################################</span><br><span class=\"line\"></span><br><span class=\"line\">## <span class=\"keyword\">Select</span> input A <span class=\"keyword\">to</span> ALU</span><br><span class=\"line\">word aluA = [</span><br><span class=\"line\">\tE_icode <span class=\"keyword\">in</span> &#123; IRRMOVQ, IOPQ &#125; : E_valA;</span><br><span class=\"line\">\tE_icode <span class=\"keyword\">in</span> &#123; IIRMOVQ, IRMMOVQ, IMRMOVQ, IIADDQ &#125; : E_valC;</span><br><span class=\"line\">\tE_icode <span class=\"keyword\">in</span> &#123; ICALL, IPUSHQ &#125; : -<span class=\"number\">8</span>;</span><br><span class=\"line\">\tE_icode <span class=\"keyword\">in</span> &#123; IRET, IPOPQ &#125; : <span class=\"number\">8</span>;</span><br><span class=\"line\">\t# Other instructions don<span class=\"symbol\">&#x27;t</span> need ALU</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">## <span class=\"keyword\">Select</span> input B <span class=\"keyword\">to</span> ALU</span><br><span class=\"line\">word aluB = [</span><br><span class=\"line\">\tE_icode <span class=\"keyword\">in</span> &#123; IRMMOVQ, IMRMOVQ, IOPQ, IIADDQ, ICALL, </span><br><span class=\"line\">\t\t     IPUSHQ, IRET, IPOPQ &#125; : E_valB;</span><br><span class=\"line\">\tE_icode <span class=\"keyword\">in</span> &#123; IRRMOVQ, IIRMOVQ &#125; : <span class=\"number\">0</span>;</span><br><span class=\"line\">\t# Other instructions don<span class=\"symbol\">&#x27;t</span> need ALU</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">## Set the ALU <span class=\"keyword\">function</span></span><br><span class=\"line\">word alufun = [</span><br><span class=\"line\">\tE_icode == IOPQ : E_ifun;</span><br><span class=\"line\">\t<span class=\"number\">1</span> : ALUADD;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">## Should the condition codes be updated?</span><br><span class=\"line\">bool set_cc = (E_icode == IOPQ||E_icode == IIADDQ) &amp;&amp;</span><br><span class=\"line\">\t# State changes only during normal operation</span><br><span class=\"line\">\t!m_stat <span class=\"keyword\">in</span> &#123; SADR, SINS, SHLT &#125; &amp;&amp; !W_stat <span class=\"keyword\">in</span> &#123; SADR, SINS, SHLT &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">## <span class=\"keyword\">Generate</span> valA <span class=\"keyword\">in</span> execute stage</span><br><span class=\"line\">word e_valA = E_valA;    # Pass valA through stage</span><br><span class=\"line\"></span><br><span class=\"line\">## Set dstE <span class=\"keyword\">to</span> RNONE <span class=\"keyword\">in</span> event <span class=\"keyword\">of</span> <span class=\"keyword\">not</span>-taken conditional move</span><br><span class=\"line\">word e_dstE = [</span><br><span class=\"line\">\tE_icode == IRRMOVQ &amp;&amp; !e_Cnd : RNONE;</span><br><span class=\"line\">\t<span class=\"number\">1</span> : E_dstE;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">################ Memory Stage ######################################</span><br><span class=\"line\"></span><br><span class=\"line\">## <span class=\"keyword\">Select</span> memory address</span><br><span class=\"line\">word mem_addr = [</span><br><span class=\"line\">\tM_icode <span class=\"keyword\">in</span> &#123; IRMMOVQ, IPUSHQ, ICALL, IMRMOVQ &#125; : M_valE;</span><br><span class=\"line\">\tM_icode <span class=\"keyword\">in</span> &#123; IPOPQ, IRET &#125; : M_valA;</span><br><span class=\"line\">\t# Other instructions don<span class=\"symbol\">&#x27;t</span> need address</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">## Set read control <span class=\"keyword\">signal</span></span><br><span class=\"line\">bool mem_read = M_icode <span class=\"keyword\">in</span> &#123; IMRMOVQ, IPOPQ, IRET &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">## Set write control <span class=\"keyword\">signal</span></span><br><span class=\"line\">bool mem_write = M_icode <span class=\"keyword\">in</span> &#123; IRMMOVQ, IPUSHQ, ICALL &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">#<span class=\"comment\">/* $begin pipe-m_stat-hcl */</span></span><br><span class=\"line\">## Update the status</span><br><span class=\"line\">word m_stat = [</span><br><span class=\"line\">\tdmem_error : SADR;</span><br><span class=\"line\">\t<span class=\"number\">1</span> : M_stat;</span><br><span class=\"line\">];</span><br><span class=\"line\">#<span class=\"comment\">/* $end pipe-m_stat-hcl */</span></span><br><span class=\"line\"></span><br><span class=\"line\">## Set E <span class=\"keyword\">port</span> <span class=\"keyword\">register</span> ID</span><br><span class=\"line\">word w_dstE = W_dstE;</span><br><span class=\"line\"></span><br><span class=\"line\">## Set E <span class=\"keyword\">port</span> value</span><br><span class=\"line\">word w_valE = W_valE;</span><br><span class=\"line\"></span><br><span class=\"line\">## Set M <span class=\"keyword\">port</span> <span class=\"keyword\">register</span> ID</span><br><span class=\"line\">word w_dstM = W_dstM;</span><br><span class=\"line\"></span><br><span class=\"line\">## Set M <span class=\"keyword\">port</span> value</span><br><span class=\"line\">word w_valM = W_valM;</span><br><span class=\"line\"></span><br><span class=\"line\">## Update processor status</span><br><span class=\"line\">word Stat = [</span><br><span class=\"line\">\tW_stat == SBUB : SAOK;</span><br><span class=\"line\">\t<span class=\"number\">1</span> : W_stat;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">################ Pipeline <span class=\"keyword\">Register</span> Control #########################</span><br><span class=\"line\"></span><br><span class=\"line\"># Should I stall <span class=\"keyword\">or</span> inject a bubble into Pipeline <span class=\"keyword\">Register</span> F?</span><br><span class=\"line\"># At most one <span class=\"keyword\">of</span> these can be <span class=\"literal\">true</span>.</span><br><span class=\"line\">bool F_bubble = <span class=\"number\">0</span>;</span><br><span class=\"line\">bool F_stall =</span><br><span class=\"line\">\t# Conditions <span class=\"keyword\">for</span> a load/<span class=\"keyword\">use</span> hazard</span><br><span class=\"line\">\tE_icode <span class=\"keyword\">in</span> &#123; IMRMOVQ, IPOPQ &#125; &amp;&amp;</span><br><span class=\"line\">\t E_dstM <span class=\"keyword\">in</span> &#123; d_srcA, d_srcB &#125; ||</span><br><span class=\"line\">\t# Stalling at fetch <span class=\"keyword\">while</span> ret passes through pipeline</span><br><span class=\"line\">\tIRET <span class=\"keyword\">in</span> &#123; D_icode, E_icode, M_icode &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"># Should I stall <span class=\"keyword\">or</span> inject a bubble into Pipeline <span class=\"keyword\">Register</span> D?</span><br><span class=\"line\"># At most one <span class=\"keyword\">of</span> these can be <span class=\"literal\">true</span>.</span><br><span class=\"line\">bool D_stall = </span><br><span class=\"line\">\t# Conditions <span class=\"keyword\">for</span> a load/<span class=\"keyword\">use</span> hazard</span><br><span class=\"line\">\tE_icode <span class=\"keyword\">in</span> &#123; IMRMOVQ, IPOPQ &#125; &amp;&amp;</span><br><span class=\"line\">\t E_dstM <span class=\"keyword\">in</span> &#123; d_srcA, d_srcB &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">bool D_bubble =</span><br><span class=\"line\">\t# Mispredicted branch</span><br><span class=\"line\">\t(E_icode == IJXX &amp;&amp; !e_Cnd) ||</span><br><span class=\"line\">\t# Stalling at fetch <span class=\"keyword\">while</span> ret passes through pipeline</span><br><span class=\"line\">\t# but <span class=\"keyword\">not</span> condition <span class=\"keyword\">for</span> a load/<span class=\"keyword\">use</span> hazard</span><br><span class=\"line\">\t!(E_icode <span class=\"keyword\">in</span> &#123; IMRMOVQ, IPOPQ &#125; &amp;&amp; E_dstM <span class=\"keyword\">in</span> &#123; d_srcA, d_srcB &#125;) &amp;&amp;</span><br><span class=\"line\">\t  IRET <span class=\"keyword\">in</span> &#123; D_icode, E_icode, M_icode &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"># Should I stall <span class=\"keyword\">or</span> inject a bubble into Pipeline <span class=\"keyword\">Register</span> E?</span><br><span class=\"line\"># At most one <span class=\"keyword\">of</span> these can be <span class=\"literal\">true</span>.</span><br><span class=\"line\">bool E_stall = <span class=\"number\">0</span>;</span><br><span class=\"line\">bool E_bubble =</span><br><span class=\"line\">\t# Mispredicted branch</span><br><span class=\"line\">\t(E_icode == IJXX &amp;&amp; !e_Cnd) ||</span><br><span class=\"line\">\t# Conditions <span class=\"keyword\">for</span> a load/<span class=\"keyword\">use</span> hazard</span><br><span class=\"line\">\tE_icode <span class=\"keyword\">in</span> &#123; IMRMOVQ, IPOPQ &#125; &amp;&amp;</span><br><span class=\"line\">\t E_dstM <span class=\"keyword\">in</span> &#123; d_srcA, d_srcB&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"># Should I stall <span class=\"keyword\">or</span> inject a bubble into Pipeline <span class=\"keyword\">Register</span> M?</span><br><span class=\"line\"># At most one <span class=\"keyword\">of</span> these can be <span class=\"literal\">true</span>.</span><br><span class=\"line\">bool M_stall = <span class=\"number\">0</span>;</span><br><span class=\"line\"># Start injecting bubbles as soon as exception passes through memory stage</span><br><span class=\"line\">bool M_bubble = m_stat <span class=\"keyword\">in</span> &#123; SADR, SINS, SHLT &#125; || W_stat <span class=\"keyword\">in</span> &#123; SADR, SINS, SHLT &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"># Should I stall <span class=\"keyword\">or</span> inject a bubble into Pipeline <span class=\"keyword\">Register</span> W?</span><br><span class=\"line\">bool W_stall = W_stat <span class=\"keyword\">in</span> &#123; SADR, SINS, SHLT &#125;;</span><br><span class=\"line\">bool W_bubble = <span class=\"number\">0</span>;</span><br><span class=\"line\">#<span class=\"comment\">/* $end pipe-all-hcl */</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>然后修改ncopy.ys文件</p>\n<h4 id=\"Version-1-0\"><a href=\"#Version-1-0\" class=\"headerlink\" title=\"Version 1.0\"></a>Version 1.0</h4><figure class=\"highlight x86asm\"><figcaption><span>文件名：archlab/archlab-handout/sim/pipe/ncopy.ys</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#/* $begin ncopy-ys */</span><br><span class=\"line\">##################################################################</span><br><span class=\"line\"># ncopy<span class=\"number\">.</span>ys - Copy a src block of len words to dst.</span><br><span class=\"line\"># Return the number of positive words (&gt;<span class=\"number\">0</span>) contained <span class=\"keyword\">in</span> src.</span><br><span class=\"line\">#</span><br><span class=\"line\"># Include your name <span class=\"keyword\">and</span> ID here.</span><br><span class=\"line\">#</span><br><span class=\"line\"># Describe how <span class=\"keyword\">and</span> why you modified the baseline code.</span><br><span class=\"line\">#</span><br><span class=\"line\">##################################################################</span><br><span class=\"line\"># <span class=\"built_in\">Do</span> <span class=\"keyword\">not</span> modify this portion</span><br><span class=\"line\"># Function prologue.</span><br><span class=\"line\"># %rdi = src, %rsi = dst, %rdx = len</span><br><span class=\"line\"><span class=\"symbol\">ncopy:</span></span><br><span class=\"line\"></span><br><span class=\"line\">##################################################################</span><br><span class=\"line\"># You can modify this portion</span><br><span class=\"line\">\t# <span class=\"keyword\">Loop</span> header</span><br><span class=\"line\">\txorq %rax,%rax\t\t# count = <span class=\"number\">0</span><span class=\"comment\">;</span></span><br><span class=\"line\">\tandq %rdx,%rdx\t\t# len &lt;= <span class=\"number\">0</span>?</span><br><span class=\"line\">\t<span class=\"keyword\">jle</span> Done\t\t# if so, goto Done:</span><br><span class=\"line\"><span class=\"symbol\"></span></span><br><span class=\"line\"><span class=\"symbol\">Loop:</span>\tmrmovq (%rdi), %r10\t# read val from src...</span><br><span class=\"line\">\trmmovq %r10, (%rsi)\t# ...and store it to dst</span><br><span class=\"line\">\tandq %r10, %r10\t\t# val &lt;= <span class=\"number\">0</span>?</span><br><span class=\"line\">\t<span class=\"keyword\">jle</span> Npos\t\t# if so, goto Npos:</span><br><span class=\"line\">\tiaddq <span class=\"number\">$1</span>, %rax\t\t# count++</span><br><span class=\"line\"><span class=\"symbol\">Npos:</span>\t</span><br><span class=\"line\">\tiaddq $-<span class=\"number\">1</span>, %rdx\t\t# len--</span><br><span class=\"line\">\tiaddq <span class=\"number\">$8</span>, %rdi\t\t# src++</span><br><span class=\"line\">\tiaddq <span class=\"number\">$8</span>, %rsi\t\t# dst++</span><br><span class=\"line\">\tandq %rdx,%rdx\t\t# len &gt; <span class=\"number\">0</span>?</span><br><span class=\"line\">\t<span class=\"keyword\">jg</span> <span class=\"keyword\">Loop</span>\t\t\t# if so, goto <span class=\"keyword\">Loop</span>:</span><br><span class=\"line\">##################################################################</span><br><span class=\"line\"># <span class=\"built_in\">Do</span> <span class=\"keyword\">not</span> modify the following <span class=\"meta\">section</span> of code</span><br><span class=\"line\"># Function epilogue.</span><br><span class=\"line\"><span class=\"symbol\">Done:</span></span><br><span class=\"line\">\t<span class=\"keyword\">ret</span></span><br><span class=\"line\">##################################################################</span><br><span class=\"line\"># Keep the following label <span class=\"meta\">at</span> the end of your function</span><br><span class=\"line\"><span class=\"symbol\">End:</span></span><br><span class=\"line\">#/* $end ncopy-ys */</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>然而还是0分。</p>\n<p><img data-src=\"csapp-lab-4/result.png\"></p>\n<p>主要考虑还是要减少bubble，还有程序优化问题。</p>\n<p>看完第五章再来二刷吧。</p>\n<h4 id=\"Version-2-0\"><a href=\"#Version-2-0\" class=\"headerlink\" title=\"Version 2.0\"></a>Version 2.0</h4><p>结果：<br><img data-src=\"csapp-lab-4/result2.png\"></p>\n<p>所作修改：</p>\n<ul>\n<li>4x4循环展开，因为C=4，L=1</li>\n<li>消除了一些load/use指令组合</li>\n</ul>\n<figure class=\"highlight x86asm\"><figcaption><span>文件名：archlab/archlab-handout/sim/pipe/ncopy.ys</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#/* $begin ncopy-ys */</span><br><span class=\"line\">##################################################################</span><br><span class=\"line\"># ncopy<span class=\"number\">.</span>ys - Copy a src block of len words to dst.</span><br><span class=\"line\"># Return the number of positive words (&gt;<span class=\"number\">0</span>) contained <span class=\"keyword\">in</span> src.</span><br><span class=\"line\">#</span><br><span class=\"line\"># Include your name <span class=\"keyword\">and</span> ID here.</span><br><span class=\"line\">#</span><br><span class=\"line\"># Describe how <span class=\"keyword\">and</span> why you modified the baseline code.</span><br><span class=\"line\">#</span><br><span class=\"line\">##################################################################</span><br><span class=\"line\"># <span class=\"built_in\">Do</span> <span class=\"keyword\">not</span> modify this portion</span><br><span class=\"line\"># Function prologue.</span><br><span class=\"line\"># %rdi = src, %rsi = dst, %rdx = len</span><br><span class=\"line\"><span class=\"symbol\">ncopy:</span></span><br><span class=\"line\"></span><br><span class=\"line\">##################################################################</span><br><span class=\"line\"># You can modify this portion</span><br><span class=\"line\">\t# <span class=\"keyword\">Loop</span> header</span><br><span class=\"line\">\txorq %rax,%rax\t\t# count = <span class=\"number\">0</span><span class=\"comment\">;</span></span><br><span class=\"line\">\tandq %rdx,%rdx\t\t# len &lt;= <span class=\"number\">0</span>?</span><br><span class=\"line\">\t<span class=\"keyword\">jle</span> Done\t\t# if so, goto Done:</span><br><span class=\"line\"><span class=\"symbol\"></span></span><br><span class=\"line\"><span class=\"symbol\">testType:</span></span><br><span class=\"line\">\tirmovq <span class=\"number\">$3</span>,%r8</span><br><span class=\"line\">\tandq %rdx, %r8</span><br><span class=\"line\">\t<span class=\"keyword\">je</span> <span class=\"keyword\">Loop</span></span><br><span class=\"line\">\trrmovq %r8,%r11</span><br><span class=\"line\">\tirmovq <span class=\"number\">$1</span>, %rcx</span><br><span class=\"line\"><span class=\"symbol\">originLoop:</span></span><br><span class=\"line\">\tmrmovq (%rdi), %r10</span><br><span class=\"line\">\tiaddq <span class=\"number\">$8</span>, %rdi\t\t# src++</span><br><span class=\"line\">\tandq %r10, %r10</span><br><span class=\"line\">\trmmovq %r10, (%rsi)</span><br><span class=\"line\">\t<span class=\"keyword\">jle</span> <span class=\"keyword\">neg</span></span><br><span class=\"line\">\tiaddq <span class=\"number\">$1</span>, %rax</span><br><span class=\"line\"><span class=\"symbol\">neg:</span></span><br><span class=\"line\">\tiaddq <span class=\"number\">$8</span>, %rsi\t\t# dst++</span><br><span class=\"line\">\tsubq %rcx, %r8</span><br><span class=\"line\">\t<span class=\"keyword\">jg</span> originLoop</span><br><span class=\"line\">\tsubq %r11,%rdx\t\t# len &gt; <span class=\"number\">0</span>?</span><br><span class=\"line\">\t<span class=\"keyword\">jle</span> Done</span><br><span class=\"line\"><span class=\"symbol\">Loop:</span>\t</span><br><span class=\"line\">\tmrmovq (%rdi), %r10\t# read val from src...</span><br><span class=\"line\">\tmrmovq <span class=\"number\">8</span>(%rdi), %r11</span><br><span class=\"line\">\tmrmovq <span class=\"number\">16</span>(%rdi), %r8</span><br><span class=\"line\">\tmrmovq <span class=\"number\">24</span>(%rdi), %r9</span><br><span class=\"line\">\trmmovq %r10, (%rsi)\t# ...and store it to dst</span><br><span class=\"line\">\trmmovq %r11, <span class=\"number\">8</span>(%rsi)</span><br><span class=\"line\">\trmmovq %r8, <span class=\"number\">16</span>(%rsi)</span><br><span class=\"line\">\trmmovq %r9, <span class=\"number\">24</span>(%rsi)</span><br><span class=\"line\">\tandq %r10, %r10\t\t# val &lt;= <span class=\"number\">0</span>?</span><br><span class=\"line\">\t<span class=\"keyword\">jle</span> second\t\t# if so,go next item:</span><br><span class=\"line\">\tiaddq <span class=\"number\">$1</span>, %rax\t\t# count++</span><br><span class=\"line\"><span class=\"symbol\">second:</span></span><br><span class=\"line\">\tandq %r11, %r11</span><br><span class=\"line\">\t<span class=\"keyword\">jle</span> third</span><br><span class=\"line\">\tiaddq <span class=\"number\">$1</span>, %rax</span><br><span class=\"line\"><span class=\"symbol\">third:</span></span><br><span class=\"line\">\tandq %r8, %r8</span><br><span class=\"line\">\t<span class=\"keyword\">jle</span> forth</span><br><span class=\"line\">\tiaddq <span class=\"number\">$1</span>, %rax</span><br><span class=\"line\"><span class=\"symbol\">forth:</span></span><br><span class=\"line\">\tandq %r9, %r9</span><br><span class=\"line\">\t<span class=\"keyword\">jle</span> Npos</span><br><span class=\"line\">\tiaddq <span class=\"number\">$1</span>, %rax</span><br><span class=\"line\"><span class=\"symbol\">Npos:</span>\t</span><br><span class=\"line\">\tiaddq $-<span class=\"number\">4</span>, %rdx\t\t# len--</span><br><span class=\"line\">\tiaddq <span class=\"number\">$32</span>, %rdi\t\t# src++</span><br><span class=\"line\">\tiaddq <span class=\"number\">$32</span>, %rsi\t\t# dst++</span><br><span class=\"line\">\tandq %rdx,%rdx\t\t# len &gt; <span class=\"number\">0</span>?</span><br><span class=\"line\">\t<span class=\"keyword\">jg</span> <span class=\"keyword\">Loop</span>\t\t\t# if so, goto <span class=\"keyword\">Loop</span>:</span><br><span class=\"line\">##################################################################</span><br><span class=\"line\"># <span class=\"built_in\">Do</span> <span class=\"keyword\">not</span> modify the following <span class=\"meta\">section</span> of code</span><br><span class=\"line\"># Function epilogue.</span><br><span class=\"line\"><span class=\"symbol\">Done:</span></span><br><span class=\"line\">\t<span class=\"keyword\">ret</span></span><br><span class=\"line\">##################################################################</span><br><span class=\"line\"># Keep the following label <span class=\"meta\">at</span> the end of your function</span><br><span class=\"line\"><span class=\"symbol\">End:</span></span><br><span class=\"line\">#/* $end ncopy-ys */</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>粗略的总结了一下。有问题请在评论区或者daovoice指正。</p>\n<h3 id=\"所感\"><a href=\"#所感\" class=\"headerlink\" title=\"所感\"></a>所感</h3><ol>\n<li>最近做问题不够专注，时间观念不够强，可能是太过松散了</li>\n<li>。。。</li>\n</ol>\n<h3 id=\"所得\"><a href=\"#所得\" class=\"headerlink\" title=\"所得\"></a>所得</h3><ol>\n<li>从阅读《编码》这本书中浅浅的了解了处理器体系结构，到csapp3e进一步了解</li>\n<li>熟悉了ISA设计的基本方法，指令分类、分阶段、流水线、冒险问题、异常处理、性能评价等</li>\n</ol>\n<h3 id=\"下一步\"><a href=\"#下一步\" class=\"headerlink\" title=\"下一步\"></a>下一步</h3><ol>\n<li>阅读第5章，二刷part C</li>\n<li>使用番茄todo做好时间规划，并执行训练</li>\n</ol>\n","site":{"data":{}},"excerpt":"<div class=\"note primary\"><p>《深入理解计算机系统》之Architecture Lab。</p>\n</div>","more":"<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本次实验主要是对第四章处理器体系结构的测验，还有一部分第五章的内容。</p>\n<h2 id=\"Music\"><a href=\"#Music\" class=\"headerlink\" title=\"Music\"></a>Music</h2><iframe frameborder=\"no\"  marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=28786838&auto=1&height=66\"></iframe>\n\n\n<h2 id=\"CSAPP-实验记录\"><a href=\"#CSAPP-实验记录\" class=\"headerlink\" title=\"CSAPP 实验记录\"></a>CSAPP 实验记录</h2><div class=\"note info\"><p><strong><a href=\"/tags/CSAPP-Lab/\">本系列文章</a>主要记录 CSAPP 3.0 的实验过程，所有实验记录文章请查看<a href=\"/tags/CSAPP-Lab/\">这儿</a></strong></p>\n</div>\n\n\n<p>快速开始请访问 <code>CSAPP</code> <a href=\"http://csapp.cs.cmu.edu/3e/labs.html\">Lab</a> 官网，本次实验记录是基于 CSAPP 3.0，实验日期始于：<code>2019-4-1</code></p>\n<h2 id=\"实验目标\"><a href=\"#实验目标\" class=\"headerlink\" title=\"实验目标\"></a>实验目标</h2><p>实验分为三部分，第一部分很简单，就是简单地考察一下汇编；第二部分是在hcl文件中添加iaddq指令的逻辑；第三部分是修改hcl和ncopy汇编文件使内存元素复制的速度尽可能达到最快。</p>\n<h3 id=\"Part-A\"><a href=\"#Part-A\" class=\"headerlink\" title=\"Part A\"></a>Part A</h3><div class=\"note info no-icon\"><p>目标：使用Y86-64汇编程序实现以下三个函数：</p>\n</div>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"> * Architecture Lab: Part A </span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * High level specs for the functions that the students will rewrite</span></span><br><span class=\"line\"><span class=\"comment\"> * in Y86-64 assembly language</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* $begin examples */</span></span><br><span class=\"line\"><span class=\"comment\">/* linked list element */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ELE</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> val;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ELE</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125; *list_ptr;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* sum_list - Sum the elements of a linked list */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">sum_list</span><span class=\"params\">(list_ptr ls)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> val = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ls) &#123;</span><br><span class=\"line\">\tval += ls-&gt;val;</span><br><span class=\"line\">\tls = ls-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* rsum_list - Recursive version of sum_list */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">rsum_list</span><span class=\"params\">(list_ptr ls)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!ls)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> val = ls-&gt;val;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> rest = rsum_list(ls-&gt;next);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> val + rest;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* copy_block - Copy src to dest and return xor checksum of src */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">copy_block</span><span class=\"params\">(<span class=\"keyword\">long</span> *src, <span class=\"keyword\">long</span> *dest, <span class=\"keyword\">long</span> len)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (len &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> val = *src++;</span><br><span class=\"line\">\t*dest++ = val;</span><br><span class=\"line\">\tresult ^= val;</span><br><span class=\"line\">\tlen--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* $end examples */</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Part-B\"><a href=\"#Part-B\" class=\"headerlink\" title=\"Part B\"></a>Part B</h3><div class=\"note info no-icon\"><p>在hcl文件中添加iaddq指令的逻辑。</p>\n</div>\n\n<h3 id=\"Part-C\"><a href=\"#Part-C\" class=\"headerlink\" title=\"Part C\"></a>Part C</h3><div class=\"note info no-icon\"><p>修改hcl和ncopy汇编文件使内存元素复制的速度尽可能达到最快，即CPE（cycles per element）越来越小。</p>\n<ul>\n<li>修改hcl内容首先要添加iaddq的实现</li>\n<li>降低CPI，即处理ret、jmp预测、加载使用冒险。ret没必要处理。</li>\n<li>程序性能优化（3e第五章）</li>\n</ul>\n</div>\n\n<h2 id=\"实验前的归纳\"><a href=\"#实验前的归纳\" class=\"headerlink\" title=\"实验前的归纳\"></a>实验前的归纳</h2><p>概括一下这次实验用到的知识点。</p>\n<p>首先是汇编相关的内容，通过第三章的学习，part A直接上手完成是没有问题的。<br>其次是hcl逻辑块的实现，这就需要对SEQ以及PIPE的实现及ISA有一定的了解。</p>\n<h2 id=\"Arch-Lab\"><a href=\"#Arch-Lab\" class=\"headerlink\" title=\"Arch Lab\"></a>Arch Lab</h2><p>正式开始记录实验，Part C由于第五章内容还没有了解完全，所以准备后期二刷Part C。</p>\n<h3 id=\"Part-A-1\"><a href=\"#Part-A-1\" class=\"headerlink\" title=\"Part A\"></a>Part A</h3><p>这一部分凭借汇编基础即可完成。不过还需要注意一下汇编的一些伪指令和格式问题。</p>\n<ul>\n<li>sum_list</li>\n</ul>\n<figure class=\"highlight x86asm\"><figcaption><span>文件名：archlab/archlab-handout/sim/misc/sum.ys</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># sum_list function coded by scarborough_coral</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">.pos</span> <span class=\"number\">0</span></span><br><span class=\"line\">\tirmovq stack,%rsp</span><br><span class=\"line\">\t<span class=\"keyword\">call</span> main</span><br><span class=\"line\">\thalt</span><br><span class=\"line\"></span><br><span class=\"line\"># Sample linked list</span><br><span class=\"line\"><span class=\"meta\">.align</span> <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"symbol\">ele1:</span></span><br><span class=\"line\"><span class=\"meta\">.quad</span> <span class=\"number\">0x00a</span></span><br><span class=\"line\"><span class=\"meta\">.quad</span> ele2</span><br><span class=\"line\"><span class=\"symbol\">ele2:</span></span><br><span class=\"line\"><span class=\"meta\">.quad</span> <span class=\"number\">0x0b0</span></span><br><span class=\"line\"><span class=\"meta\">.quad</span> ele3</span><br><span class=\"line\"><span class=\"symbol\">ele3:</span></span><br><span class=\"line\"><span class=\"meta\">.quad</span> <span class=\"number\">0xc00</span></span><br><span class=\"line\"><span class=\"meta\">.quad</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"symbol\"></span></span><br><span class=\"line\"><span class=\"symbol\">sum_list:</span></span><br><span class=\"line\">\txorq %rax,%rax</span><br><span class=\"line\"><span class=\"symbol\">\t</span></span><br><span class=\"line\"><span class=\"symbol\">loop_start:</span></span><br><span class=\"line\">\tandq %rdi,%rdi</span><br><span class=\"line\">\t<span class=\"keyword\">je</span> loop_end</span><br><span class=\"line\"></span><br><span class=\"line\">\tmrmovq <span class=\"number\">0</span>(%rdi),%rsi</span><br><span class=\"line\">\taddq %rsi,%rax</span><br><span class=\"line\">\tmrmovq <span class=\"number\">8</span>(%rdi),%rsi</span><br><span class=\"line\">\trrmovq %rsi,%rdi\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">jmp</span> loop_start</span><br><span class=\"line\"><span class=\"symbol\"></span></span><br><span class=\"line\"><span class=\"symbol\">loop_end:</span></span><br><span class=\"line\">\t<span class=\"keyword\">ret</span></span><br><span class=\"line\"><span class=\"symbol\"></span></span><br><span class=\"line\"><span class=\"symbol\">main:</span></span><br><span class=\"line\">\tirmovq ele1,%rdi</span><br><span class=\"line\">\t<span class=\"keyword\">call</span> sum_list</span><br><span class=\"line\">\t<span class=\"keyword\">ret</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">.pos</span> <span class=\"number\">1024</span></span><br><span class=\"line\"><span class=\"symbol\">stack:</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>rsum_list</li>\n</ul>\n<figure class=\"highlight x86asm\"><figcaption><span>文件名：archlab/archlab-handout/sim/misc/rsum.ys</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">.pos</span> <span class=\"number\">0</span></span><br><span class=\"line\">\tirmovq stack,%rsp</span><br><span class=\"line\">\t<span class=\"keyword\">call</span> main</span><br><span class=\"line\">\thalt</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">.align</span> <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"symbol\">ele1:</span></span><br><span class=\"line\"><span class=\"meta\">.quad</span> <span class=\"number\">0x00a</span></span><br><span class=\"line\"><span class=\"meta\">.quad</span> ele2</span><br><span class=\"line\"><span class=\"symbol\">ele2:</span></span><br><span class=\"line\"><span class=\"meta\">.quad</span> <span class=\"number\">0x0b0</span></span><br><span class=\"line\"><span class=\"meta\">.quad</span> ele3</span><br><span class=\"line\"><span class=\"symbol\">ele3:</span></span><br><span class=\"line\"><span class=\"meta\">.quad</span> <span class=\"number\">0xc00</span></span><br><span class=\"line\"><span class=\"meta\">.quad</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"symbol\"></span></span><br><span class=\"line\"><span class=\"symbol\">rsum_list:</span></span><br><span class=\"line\">\txorq %rax,%rax</span><br><span class=\"line\">\tandq %rdi,%rdi</span><br><span class=\"line\">\t<span class=\"keyword\">jne</span> not_null</span><br><span class=\"line\">\t<span class=\"keyword\">ret</span></span><br><span class=\"line\"><span class=\"symbol\">not_null:</span></span><br><span class=\"line\">\tmrmovq <span class=\"number\">0</span>(%rdi),%rsi</span><br><span class=\"line\">\tpushq %rsi</span><br><span class=\"line\">\tmrmovq <span class=\"number\">8</span>(%rdi),%rdi</span><br><span class=\"line\">\t<span class=\"keyword\">call</span> rsum_list</span><br><span class=\"line\">\tpopq %rsi</span><br><span class=\"line\">\taddq %rsi,%rax</span><br><span class=\"line\">\t<span class=\"keyword\">ret</span></span><br><span class=\"line\"><span class=\"symbol\"></span></span><br><span class=\"line\"><span class=\"symbol\"></span></span><br><span class=\"line\"><span class=\"symbol\"></span></span><br><span class=\"line\"><span class=\"symbol\">main:</span></span><br><span class=\"line\">\tirmovq ele1,%rdi</span><br><span class=\"line\">\t<span class=\"keyword\">call</span> rsum_list</span><br><span class=\"line\">\t<span class=\"keyword\">ret</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">.pos</span> <span class=\"number\">1024</span></span><br><span class=\"line\"><span class=\"symbol\">stack:</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>copy_block</li>\n</ul>\n<figure class=\"highlight x86asm\"><figcaption><span>文件名：archlab/archlab-handout/sim/misc/copy.ys</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">.pos</span> <span class=\"number\">0</span></span><br><span class=\"line\">\tirmovq stack,%rsp</span><br><span class=\"line\">\t<span class=\"keyword\">call</span> main</span><br><span class=\"line\">\thalt</span><br><span class=\"line\"><span class=\"meta\">\t</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">.align</span> <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"symbol\">src:</span></span><br><span class=\"line\"><span class=\"meta\">\t.quad</span> <span class=\"number\">0x00a</span></span><br><span class=\"line\"><span class=\"meta\">\t.quad</span> <span class=\"number\">0x0b0</span></span><br><span class=\"line\"><span class=\"meta\">\t.quad</span> <span class=\"number\">0xc00</span></span><br><span class=\"line\"><span class=\"symbol\"></span></span><br><span class=\"line\"><span class=\"symbol\">dest:</span></span><br><span class=\"line\"><span class=\"meta\">\t.quad</span> <span class=\"number\">0x111</span></span><br><span class=\"line\"><span class=\"meta\">\t.quad</span> <span class=\"number\">0x222</span></span><br><span class=\"line\"><span class=\"meta\">\t.quad</span> <span class=\"number\">0x333</span></span><br><span class=\"line\"><span class=\"symbol\"></span></span><br><span class=\"line\"><span class=\"symbol\">copy_block:</span></span><br><span class=\"line\">\txorq %rax,%rax</span><br><span class=\"line\">\tpushq %r12</span><br><span class=\"line\">\tpushq %r13</span><br><span class=\"line\">\tirmovq <span class=\"number\">$1</span>,%r13</span><br><span class=\"line\">\tirmovq <span class=\"number\">$8</span>,%r12</span><br><span class=\"line\"><span class=\"symbol\">loop_start:</span>\t</span><br><span class=\"line\">\tandq %rdx,%rdx</span><br><span class=\"line\">\t<span class=\"keyword\">je</span> loop_end</span><br><span class=\"line\">\tmrmovq (%rdi),%rcx</span><br><span class=\"line\">\trmmovq %rcx,(%rsi)</span><br><span class=\"line\">\taddq %r12,%rdi</span><br><span class=\"line\">\taddq %r12,%rsi</span><br><span class=\"line\">\txorq %rcx,%rax</span><br><span class=\"line\">\tsubq %r13,%rdx</span><br><span class=\"line\">\t<span class=\"keyword\">jmp</span> loop_start</span><br><span class=\"line\"><span class=\"symbol\">loop_end:</span></span><br><span class=\"line\">\tpopq %r12</span><br><span class=\"line\">\tpopq %r13</span><br><span class=\"line\">\t<span class=\"keyword\">ret</span></span><br><span class=\"line\"><span class=\"symbol\"></span></span><br><span class=\"line\"><span class=\"symbol\">main:</span></span><br><span class=\"line\">\tirmovq src,%rdi</span><br><span class=\"line\">\tirmovq dest,%rsi</span><br><span class=\"line\">\tirmovq <span class=\"number\">$3</span>,%rdx</span><br><span class=\"line\">\t<span class=\"keyword\">call</span> copy_block</span><br><span class=\"line\">\t<span class=\"keyword\">ret</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">.pos</span> <span class=\"number\">1024</span></span><br><span class=\"line\"><span class=\"symbol\">stack:</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Part-B-1\"><a href=\"#Part-B-1\" class=\"headerlink\" title=\"Part B\"></a>Part B</h3><p>Part B 只需要按照writeup查看3e课本iaddq指令的阶段实现即可实现。</p>\n<div class=\"note danger\"><ol>\n<li>可能会遇到找不到依赖库的问题，安装就行了</li>\n<li>中途遇见了一个链接问题，是因为glibc版本太新，实验依赖的版本太过老旧导致一个<code>matherr</code>找不到问题，观察代码其他地方并没有用到，直接omit注释掉了。</li>\n</ol>\n</div>\n\n<p>修改内容如下图：</p>\n<p><img data-src=\"csapp-lab-4/seq.jpg\"></p>\n<p>hcl代码如下：</p>\n<figure class=\"highlight vhdl\"><figcaption><span>文件名：archlab/archlab-handout/sim/seq/seq-full.hcl</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#<span class=\"comment\">/* $begin seq-all-hcl */</span></span><br><span class=\"line\">####################################################################</span><br><span class=\"line\">#  HCL Description <span class=\"keyword\">of</span> Control <span class=\"keyword\">for</span> Single Cycle Y86-<span class=\"number\">64</span> Processor SEQ   #</span><br><span class=\"line\">#  Copyright (C) Randal E. Bryant, David R. O<span class=\"symbol\">&#x27;Hallaron</span>, <span class=\"number\">2010</span>       #</span><br><span class=\"line\">####################################################################</span><br><span class=\"line\"></span><br><span class=\"line\">## Your task <span class=\"keyword\">is</span> <span class=\"keyword\">to</span> implement the iaddq instruction</span><br><span class=\"line\">## The <span class=\"keyword\">file</span> contains a declaration <span class=\"keyword\">of</span> the icodes</span><br><span class=\"line\">## <span class=\"keyword\">for</span> iaddq (IIADDQ)</span><br><span class=\"line\">## Your job <span class=\"keyword\">is</span> <span class=\"keyword\">to</span> add the rest <span class=\"keyword\">of</span> the logic <span class=\"keyword\">to</span> make it work</span><br><span class=\"line\"></span><br><span class=\"line\">####################################################################</span><br><span class=\"line\">#    C Include<span class=\"symbol\">&#x27;s</span>.  Don<span class=\"symbol\">&#x27;t</span> alter these                               #</span><br><span class=\"line\">####################################################################</span><br><span class=\"line\"></span><br><span class=\"line\">quote &#x27;#include &lt;stdio.h&gt;&#x27;</span><br><span class=\"line\">quote &#x27;#include <span class=\"string\">&quot;isa.h&quot;</span>&#x27;</span><br><span class=\"line\">quote &#x27;#include <span class=\"string\">&quot;sim.h&quot;</span>&#x27;</span><br><span class=\"line\">quote <span class=\"symbol\">&#x27;int</span> sim_main(int argc, char *argv[]);&#x27;</span><br><span class=\"line\">quote <span class=\"symbol\">&#x27;word_t</span> gen_pc()&#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;&#x27;</span><br><span class=\"line\">quote <span class=\"symbol\">&#x27;int</span> main(int argc, char *argv[])&#x27;</span><br><span class=\"line\">quote &#x27;  &#123;plusmode=<span class=\"number\">0</span>;<span class=\"keyword\">return</span> sim_main(argc,argv);&#125;&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">####################################################################</span><br><span class=\"line\">#    Declarations.  Do <span class=\"keyword\">not</span> change/remove/delete any <span class=\"keyword\">of</span> these       #</span><br><span class=\"line\">####################################################################</span><br><span class=\"line\"></span><br><span class=\"line\">##### Symbolic representation <span class=\"keyword\">of</span> Y86-<span class=\"number\">64</span> Instruction Codes #############</span><br><span class=\"line\">wordsig INOP \t<span class=\"symbol\">&#x27;I_NOP</span>&#x27;</span><br><span class=\"line\">wordsig IHALT\t<span class=\"symbol\">&#x27;I_HALT</span>&#x27;</span><br><span class=\"line\">wordsig IRRMOVQ\t<span class=\"symbol\">&#x27;I_RRMOVQ</span>&#x27;</span><br><span class=\"line\">wordsig IIRMOVQ\t<span class=\"symbol\">&#x27;I_IRMOVQ</span>&#x27;</span><br><span class=\"line\">wordsig IRMMOVQ\t<span class=\"symbol\">&#x27;I_RMMOVQ</span>&#x27;</span><br><span class=\"line\">wordsig IMRMOVQ\t<span class=\"symbol\">&#x27;I_MRMOVQ</span>&#x27;</span><br><span class=\"line\">wordsig IOPQ\t<span class=\"symbol\">&#x27;I_ALU</span>&#x27;</span><br><span class=\"line\">wordsig IJXX\t<span class=\"symbol\">&#x27;I_JMP</span>&#x27;</span><br><span class=\"line\">wordsig ICALL\t<span class=\"symbol\">&#x27;I_CALL</span>&#x27;</span><br><span class=\"line\">wordsig IRET\t<span class=\"symbol\">&#x27;I_RET</span>&#x27;</span><br><span class=\"line\">wordsig IPUSHQ\t<span class=\"symbol\">&#x27;I_PUSHQ</span>&#x27;</span><br><span class=\"line\">wordsig IPOPQ\t<span class=\"symbol\">&#x27;I_POPQ</span>&#x27;</span><br><span class=\"line\"># Instruction code <span class=\"keyword\">for</span> iaddq instruction</span><br><span class=\"line\">wordsig IIADDQ\t<span class=\"symbol\">&#x27;I_IADDQ</span>&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">##### Symbolic represenations <span class=\"keyword\">of</span> Y86-<span class=\"number\">64</span> <span class=\"keyword\">function</span> codes                  #####</span><br><span class=\"line\">wordsig FNONE    <span class=\"symbol\">&#x27;F_NONE</span>&#x27;        # <span class=\"keyword\">Default</span> <span class=\"keyword\">function</span> code</span><br><span class=\"line\"></span><br><span class=\"line\">##### Symbolic representation <span class=\"keyword\">of</span> Y86-<span class=\"number\">64</span> Registers referenced explicitly #####</span><br><span class=\"line\">wordsig RRSP     <span class=\"symbol\">&#x27;REG_RSP</span>&#x27;    \t# Stack Pointer</span><br><span class=\"line\">wordsig RNONE    <span class=\"symbol\">&#x27;REG_NONE</span>&#x27;   \t# Special value indicating <span class=\"string\">&quot;no register&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">##### ALU Functions referenced explicitly                            #####</span><br><span class=\"line\">wordsig ALUADD\t<span class=\"symbol\">&#x27;A_ADD</span>&#x27;\t\t# ALU should add its arguments</span><br><span class=\"line\"></span><br><span class=\"line\">##### Possible instruction status values                             #####</span><br><span class=\"line\">wordsig SAOK\t<span class=\"symbol\">&#x27;STAT_AOK</span>&#x27;\t# Normal execution</span><br><span class=\"line\">wordsig SADR\t<span class=\"symbol\">&#x27;STAT_ADR</span>&#x27;\t# Invalid memory address</span><br><span class=\"line\">wordsig SINS\t<span class=\"symbol\">&#x27;STAT_INS</span>&#x27;\t# Invalid instruction</span><br><span class=\"line\">wordsig SHLT\t<span class=\"symbol\">&#x27;STAT_HLT</span>&#x27;\t# Halt instruction encountered</span><br><span class=\"line\"></span><br><span class=\"line\">##### Signals that can be referenced by control logic ####################</span><br><span class=\"line\"></span><br><span class=\"line\">##### Fetch stage inputs\t\t#####</span><br><span class=\"line\">wordsig pc <span class=\"symbol\">&#x27;pc</span>&#x27;\t\t\t\t# Program counter</span><br><span class=\"line\">##### Fetch stage computations\t\t#####</span><br><span class=\"line\">wordsig imem_icode <span class=\"symbol\">&#x27;imem_icode</span>&#x27;\t\t# icode field from instruction memory</span><br><span class=\"line\">wordsig imem_ifun  <span class=\"symbol\">&#x27;imem_ifun</span>&#x27; \t\t# ifun field from instruction memory</span><br><span class=\"line\">wordsig icode\t  <span class=\"symbol\">&#x27;icode</span>&#x27;\t\t# Instruction control code</span><br><span class=\"line\">wordsig ifun\t  <span class=\"symbol\">&#x27;ifun</span>&#x27;\t\t# Instruction <span class=\"keyword\">function</span></span><br><span class=\"line\">wordsig rA\t  <span class=\"symbol\">&#x27;ra</span>&#x27;\t\t\t# rA field from instruction</span><br><span class=\"line\">wordsig rB\t  <span class=\"symbol\">&#x27;rb</span>&#x27;\t\t\t# rB field from instruction</span><br><span class=\"line\">wordsig valC\t  <span class=\"symbol\">&#x27;valc</span>&#x27;\t\t# <span class=\"keyword\">Constant</span> from instruction</span><br><span class=\"line\">wordsig valP\t  <span class=\"symbol\">&#x27;valp</span>&#x27;\t\t# Address <span class=\"keyword\">of</span> following instruction</span><br><span class=\"line\">boolsig imem_error <span class=\"symbol\">&#x27;imem_error</span>&#x27;\t\t# <span class=\"literal\">Error</span> <span class=\"keyword\">signal</span> from instruction memory</span><br><span class=\"line\">boolsig instr_valid <span class=\"symbol\">&#x27;instr_valid</span>&#x27;\t# <span class=\"keyword\">Is</span> fetched instruction valid?</span><br><span class=\"line\"></span><br><span class=\"line\">##### Decode stage computations\t\t#####</span><br><span class=\"line\">wordsig valA\t<span class=\"symbol\">&#x27;vala</span>&#x27;\t\t\t# Value from <span class=\"keyword\">register</span> A <span class=\"keyword\">port</span></span><br><span class=\"line\">wordsig valB\t<span class=\"symbol\">&#x27;valb</span>&#x27;\t\t\t# Value from <span class=\"keyword\">register</span> B <span class=\"keyword\">port</span></span><br><span class=\"line\"></span><br><span class=\"line\">##### Execute stage computations\t#####</span><br><span class=\"line\">wordsig valE\t<span class=\"symbol\">&#x27;vale</span>&#x27;\t\t\t# Value computed by ALU</span><br><span class=\"line\">boolsig Cnd\t<span class=\"symbol\">&#x27;cond</span>&#x27;\t\t\t# Branch test</span><br><span class=\"line\"></span><br><span class=\"line\">##### Memory stage computations\t\t#####</span><br><span class=\"line\">wordsig valM\t<span class=\"symbol\">&#x27;valm</span>&#x27;\t\t\t# Value read from memory</span><br><span class=\"line\">boolsig dmem_error <span class=\"symbol\">&#x27;dmem_error</span>&#x27;\t\t# <span class=\"literal\">Error</span> <span class=\"keyword\">signal</span> from data memory</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">####################################################################</span><br><span class=\"line\">#    Control <span class=\"keyword\">Signal</span> Definitions.                                   #</span><br><span class=\"line\">####################################################################</span><br><span class=\"line\"></span><br><span class=\"line\">################ Fetch Stage     ###################################</span><br><span class=\"line\"></span><br><span class=\"line\"># Determine instruction code</span><br><span class=\"line\">word icode = [</span><br><span class=\"line\">\timem_error: INOP;</span><br><span class=\"line\">\t<span class=\"number\">1</span>: imem_icode;\t\t# <span class=\"keyword\">Default</span>: get from instruction memory</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"># Determine instruction <span class=\"keyword\">function</span></span><br><span class=\"line\">word ifun = [</span><br><span class=\"line\">\timem_error: FNONE;</span><br><span class=\"line\">\t<span class=\"number\">1</span>: imem_ifun;\t\t# <span class=\"keyword\">Default</span>: get from instruction memory</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">bool instr_valid = icode <span class=\"keyword\">in</span> </span><br><span class=\"line\">\t&#123; INOP, IHALT, IRRMOVQ, IIRMOVQ, IRMMOVQ, IMRMOVQ,</span><br><span class=\"line\">\t       IOPQ, IIADDQ, IJXX, ICALL, IRET, IPUSHQ, IPOPQ &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"># Does fetched instruction require a regid byte?</span><br><span class=\"line\">bool need_regids =</span><br><span class=\"line\">\ticode <span class=\"keyword\">in</span> &#123; IRRMOVQ, IOPQ, IIADDQ, IPUSHQ, IPOPQ, </span><br><span class=\"line\">\t\t     IIRMOVQ, IRMMOVQ, IMRMOVQ &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"># Does fetched instruction require a <span class=\"keyword\">constant</span> word?</span><br><span class=\"line\">bool need_valC =</span><br><span class=\"line\">\ticode <span class=\"keyword\">in</span> &#123; IIRMOVQ, IRMMOVQ, IMRMOVQ, IJXX, ICALL, IIADDQ &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">################ Decode Stage    ###################################</span><br><span class=\"line\"></span><br><span class=\"line\">## What <span class=\"keyword\">register</span> should be used as the A source?</span><br><span class=\"line\">word srcA = [</span><br><span class=\"line\">\ticode <span class=\"keyword\">in</span> &#123; IRRMOVQ, IRMMOVQ, IOPQ, IPUSHQ  &#125; : rA;</span><br><span class=\"line\">\ticode <span class=\"keyword\">in</span> &#123; IPOPQ, IRET &#125; : RRSP;</span><br><span class=\"line\">\t<span class=\"number\">1</span> : RNONE; # Don<span class=\"symbol\">&#x27;t</span> need <span class=\"keyword\">register</span></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">## What <span class=\"keyword\">register</span> should be used as the B source?</span><br><span class=\"line\">word srcB = [</span><br><span class=\"line\">\ticode <span class=\"keyword\">in</span> &#123; IOPQ, IRMMOVQ, IMRMOVQ, IIADDQ  &#125; : rB;</span><br><span class=\"line\">\ticode <span class=\"keyword\">in</span> &#123; IPUSHQ, IPOPQ, ICALL, IRET &#125; : RRSP;</span><br><span class=\"line\">\t<span class=\"number\">1</span> : RNONE;  # Don<span class=\"symbol\">&#x27;t</span> need <span class=\"keyword\">register</span></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">## What <span class=\"keyword\">register</span> should be used as the E destination?</span><br><span class=\"line\">word dstE = [</span><br><span class=\"line\">\ticode <span class=\"keyword\">in</span> &#123; IRRMOVQ &#125; &amp;&amp; Cnd : rB;</span><br><span class=\"line\">\ticode <span class=\"keyword\">in</span> &#123; IIRMOVQ, IOPQ, IIADDQ &#125; : rB;</span><br><span class=\"line\">\ticode <span class=\"keyword\">in</span> &#123; IPUSHQ, IPOPQ, ICALL, IRET &#125; : RRSP;</span><br><span class=\"line\">\t<span class=\"number\">1</span> : RNONE;  # Don<span class=\"symbol\">&#x27;t</span> write any <span class=\"keyword\">register</span></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">## What <span class=\"keyword\">register</span> should be used as the M destination?</span><br><span class=\"line\">word dstM = [</span><br><span class=\"line\">\ticode <span class=\"keyword\">in</span> &#123; IMRMOVQ, IPOPQ &#125; : rA;</span><br><span class=\"line\">\t<span class=\"number\">1</span> : RNONE;  # Don<span class=\"symbol\">&#x27;t</span> write any <span class=\"keyword\">register</span></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">################ Execute Stage   ###################################</span><br><span class=\"line\"></span><br><span class=\"line\">## <span class=\"keyword\">Select</span> input A <span class=\"keyword\">to</span> ALU</span><br><span class=\"line\">word aluA = [</span><br><span class=\"line\">\ticode <span class=\"keyword\">in</span> &#123; IRRMOVQ, IOPQ &#125; : valA;</span><br><span class=\"line\">\ticode <span class=\"keyword\">in</span> &#123; IIRMOVQ, IRMMOVQ, IMRMOVQ, IIADDQ &#125; : valC;</span><br><span class=\"line\">\ticode <span class=\"keyword\">in</span> &#123; ICALL, IPUSHQ &#125; : -<span class=\"number\">8</span>;</span><br><span class=\"line\">\ticode <span class=\"keyword\">in</span> &#123; IRET, IPOPQ &#125; : <span class=\"number\">8</span>;</span><br><span class=\"line\">\t# Other instructions don<span class=\"symbol\">&#x27;t</span> need ALU</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">## <span class=\"keyword\">Select</span> input B <span class=\"keyword\">to</span> ALU</span><br><span class=\"line\">word aluB = [</span><br><span class=\"line\">\ticode <span class=\"keyword\">in</span> &#123; IRMMOVQ, IMRMOVQ, IOPQ, IIADDQ, ICALL, </span><br><span class=\"line\">\t\t      IPUSHQ, IRET, IPOPQ &#125; : valB;</span><br><span class=\"line\">\ticode <span class=\"keyword\">in</span> &#123; IRRMOVQ, IIRMOVQ &#125; : <span class=\"number\">0</span>;</span><br><span class=\"line\">\t# Other instructions don<span class=\"symbol\">&#x27;t</span> need ALU</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">## Set the ALU <span class=\"keyword\">function</span></span><br><span class=\"line\">word alufun = [</span><br><span class=\"line\">\ticode == IOPQ : ifun;</span><br><span class=\"line\">\t<span class=\"number\">1</span> : ALUADD;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">## Should the condition codes be updated?</span><br><span class=\"line\">bool set_cc = icode <span class=\"keyword\">in</span> &#123; IOPQ, IIADDQ &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">################ Memory Stage    ###################################</span><br><span class=\"line\"></span><br><span class=\"line\">## Set read control <span class=\"keyword\">signal</span></span><br><span class=\"line\">bool mem_read = icode <span class=\"keyword\">in</span> &#123; IMRMOVQ, IPOPQ, IRET &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">## Set write control <span class=\"keyword\">signal</span></span><br><span class=\"line\">bool mem_write = icode <span class=\"keyword\">in</span> &#123; IRMMOVQ, IPUSHQ, ICALL &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">## <span class=\"keyword\">Select</span> memory address</span><br><span class=\"line\">word mem_addr = [</span><br><span class=\"line\">\ticode <span class=\"keyword\">in</span> &#123; IRMMOVQ, IPUSHQ, ICALL, IMRMOVQ &#125; : valE;</span><br><span class=\"line\">\ticode <span class=\"keyword\">in</span> &#123; IPOPQ, IRET &#125; : valA;</span><br><span class=\"line\">\t# Other instructions don<span class=\"symbol\">&#x27;t</span> need address</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">## <span class=\"keyword\">Select</span> memory input data</span><br><span class=\"line\">word mem_data = [</span><br><span class=\"line\">\t# Value from <span class=\"keyword\">register</span></span><br><span class=\"line\">\ticode <span class=\"keyword\">in</span> &#123; IRMMOVQ, IPUSHQ &#125; : valA;</span><br><span class=\"line\">\t# <span class=\"keyword\">Return</span> PC</span><br><span class=\"line\">\ticode == ICALL : valP;</span><br><span class=\"line\">\t# <span class=\"keyword\">Default</span>: Don<span class=\"symbol\">&#x27;t</span> write anything</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">## Determine instruction status</span><br><span class=\"line\">word Stat = [</span><br><span class=\"line\">\timem_error || dmem_error : SADR;</span><br><span class=\"line\">\t!instr_valid: SINS;</span><br><span class=\"line\">\ticode == IHALT : SHLT;</span><br><span class=\"line\">\t<span class=\"number\">1</span> : SAOK;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">################ Program Counter Update ############################</span><br><span class=\"line\"></span><br><span class=\"line\">## What address should instruction be fetched at</span><br><span class=\"line\"></span><br><span class=\"line\">word new_pc = [</span><br><span class=\"line\">\t# Call.  <span class=\"keyword\">Use</span> instruction <span class=\"keyword\">constant</span></span><br><span class=\"line\">\ticode == ICALL : valC;</span><br><span class=\"line\">\t# Taken branch.  <span class=\"keyword\">Use</span> instruction <span class=\"keyword\">constant</span></span><br><span class=\"line\">\ticode == IJXX &amp;&amp; Cnd : valC;</span><br><span class=\"line\">\t# Completion <span class=\"keyword\">of</span> RET instruction.  <span class=\"keyword\">Use</span> value from stack</span><br><span class=\"line\">\ticode == IRET : valM;</span><br><span class=\"line\">\t# <span class=\"keyword\">Default</span>: <span class=\"keyword\">Use</span> incremented PC</span><br><span class=\"line\">\t<span class=\"number\">1</span> : valP;</span><br><span class=\"line\">];</span><br><span class=\"line\">#<span class=\"comment\">/* $end seq-all-hcl */</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>然后按照writeup跑测试，通过。</p>\n<h3 id=\"Part-C-1\"><a href=\"#Part-C-1\" class=\"headerlink\" title=\"Part C\"></a>Part C</h3><p>Part C 的具体内容就是加速内存元素的拷贝问题。修改<code>ncopy.ys</code>和<code>pipe-full.hcl</code>代码使得CPE（cycles per element）尽可能小，即单个元素拷贝时间越少越好。</p>\n<p>首先添加iaddq指令，原来是通过<code>irmovq</code>和<code>addq</code>来实现的，改为iaddq指令后起到很微弱的效果，并不能明显的减少CPE，如果你的irmovq指令在循环内部那就另说了，当然也不是最快。</p>\n<p><img data-src=\"csapp-lab-4/pipe.jpg\"></p>\n<p>具体代码如下：</p>\n<figure class=\"highlight vhdl\"><figcaption><span>文件名：archlab/archlab-handout/sim/pipe/pipe-full.hcl</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#<span class=\"comment\">/* $begin pipe-all-hcl */</span></span><br><span class=\"line\">####################################################################</span><br><span class=\"line\">#    HCL Description <span class=\"keyword\">of</span> Control <span class=\"keyword\">for</span> Pipelined Y86-<span class=\"number\">64</span> Processor     #</span><br><span class=\"line\">#    Copyright (C) Randal E. Bryant, David R. O<span class=\"symbol\">&#x27;Hallaron</span>, <span class=\"number\">2014</span>     #</span><br><span class=\"line\">####################################################################</span><br><span class=\"line\"></span><br><span class=\"line\">## Your task <span class=\"keyword\">is</span> <span class=\"keyword\">to</span> implement the iaddq instruction</span><br><span class=\"line\">## The <span class=\"keyword\">file</span> contains a declaration <span class=\"keyword\">of</span> the icodes</span><br><span class=\"line\">## <span class=\"keyword\">for</span> iaddq (IIADDQ)</span><br><span class=\"line\">## Your job <span class=\"keyword\">is</span> <span class=\"keyword\">to</span> add the rest <span class=\"keyword\">of</span> the logic <span class=\"keyword\">to</span> make it work</span><br><span class=\"line\"></span><br><span class=\"line\">####################################################################</span><br><span class=\"line\">#    C Include<span class=\"symbol\">&#x27;s</span>.  Don<span class=\"symbol\">&#x27;t</span> alter these                               #</span><br><span class=\"line\">####################################################################</span><br><span class=\"line\"></span><br><span class=\"line\">quote &#x27;#include &lt;stdio.h&gt;&#x27;</span><br><span class=\"line\">quote &#x27;#include <span class=\"string\">&quot;isa.h&quot;</span>&#x27;</span><br><span class=\"line\">quote &#x27;#include <span class=\"string\">&quot;pipeline.h&quot;</span>&#x27;</span><br><span class=\"line\">quote &#x27;#include <span class=\"string\">&quot;stages.h&quot;</span>&#x27;</span><br><span class=\"line\">quote &#x27;#include <span class=\"string\">&quot;sim.h&quot;</span>&#x27;</span><br><span class=\"line\">quote <span class=\"symbol\">&#x27;int</span> sim_main(int argc, char *argv[]);&#x27;</span><br><span class=\"line\">quote <span class=\"symbol\">&#x27;int</span> main(int argc, char *argv[])&#123;<span class=\"keyword\">return</span> sim_main(argc,argv);&#125;&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">####################################################################</span><br><span class=\"line\">#    Declarations.  Do <span class=\"keyword\">not</span> change/remove/delete any <span class=\"keyword\">of</span> these       #</span><br><span class=\"line\">####################################################################</span><br><span class=\"line\"></span><br><span class=\"line\">##### Symbolic representation <span class=\"keyword\">of</span> Y86-<span class=\"number\">64</span> Instruction Codes #############</span><br><span class=\"line\">wordsig INOP \t<span class=\"symbol\">&#x27;I_NOP</span>&#x27;</span><br><span class=\"line\">wordsig IHALT\t<span class=\"symbol\">&#x27;I_HALT</span>&#x27;</span><br><span class=\"line\">wordsig IRRMOVQ\t<span class=\"symbol\">&#x27;I_RRMOVQ</span>&#x27;</span><br><span class=\"line\">wordsig IIRMOVQ\t<span class=\"symbol\">&#x27;I_IRMOVQ</span>&#x27;</span><br><span class=\"line\">wordsig IRMMOVQ\t<span class=\"symbol\">&#x27;I_RMMOVQ</span>&#x27;</span><br><span class=\"line\">wordsig IMRMOVQ\t<span class=\"symbol\">&#x27;I_MRMOVQ</span>&#x27;</span><br><span class=\"line\">wordsig IOPQ\t<span class=\"symbol\">&#x27;I_ALU</span>&#x27;</span><br><span class=\"line\">wordsig IJXX\t<span class=\"symbol\">&#x27;I_JMP</span>&#x27;</span><br><span class=\"line\">wordsig ICALL\t<span class=\"symbol\">&#x27;I_CALL</span>&#x27;</span><br><span class=\"line\">wordsig IRET\t<span class=\"symbol\">&#x27;I_RET</span>&#x27;</span><br><span class=\"line\">wordsig IPUSHQ\t<span class=\"symbol\">&#x27;I_PUSHQ</span>&#x27;</span><br><span class=\"line\">wordsig IPOPQ\t<span class=\"symbol\">&#x27;I_POPQ</span>&#x27;</span><br><span class=\"line\"># Instruction code <span class=\"keyword\">for</span> iaddq instruction</span><br><span class=\"line\">wordsig IIADDQ\t<span class=\"symbol\">&#x27;I_IADDQ</span>&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">##### Symbolic represenations <span class=\"keyword\">of</span> Y86-<span class=\"number\">64</span> <span class=\"keyword\">function</span> codes            #####</span><br><span class=\"line\">wordsig FNONE    <span class=\"symbol\">&#x27;F_NONE</span>&#x27;        # <span class=\"keyword\">Default</span> <span class=\"keyword\">function</span> code</span><br><span class=\"line\"></span><br><span class=\"line\">##### Symbolic representation <span class=\"keyword\">of</span> Y86-<span class=\"number\">64</span> Registers referenced      #####</span><br><span class=\"line\">wordsig RRSP     <span class=\"symbol\">&#x27;REG_RSP</span>&#x27;    \t     # Stack Pointer</span><br><span class=\"line\">wordsig RNONE    <span class=\"symbol\">&#x27;REG_NONE</span>&#x27;   \t     # Special value indicating <span class=\"string\">&quot;no register&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">##### ALU Functions referenced explicitly ##########################</span><br><span class=\"line\">wordsig ALUADD\t<span class=\"symbol\">&#x27;A_ADD</span>&#x27;\t\t     # ALU should add its arguments</span><br><span class=\"line\"></span><br><span class=\"line\">##### Possible instruction status values                       #####</span><br><span class=\"line\">wordsig SBUB\t<span class=\"symbol\">&#x27;STAT_BUB</span>&#x27;\t# Bubble <span class=\"keyword\">in</span> stage</span><br><span class=\"line\">wordsig SAOK\t<span class=\"symbol\">&#x27;STAT_AOK</span>&#x27;\t# Normal execution</span><br><span class=\"line\">wordsig SADR\t<span class=\"symbol\">&#x27;STAT_ADR</span>&#x27;\t# Invalid memory address</span><br><span class=\"line\">wordsig SINS\t<span class=\"symbol\">&#x27;STAT_INS</span>&#x27;\t# Invalid instruction</span><br><span class=\"line\">wordsig SHLT\t<span class=\"symbol\">&#x27;STAT_HLT</span>&#x27;\t# Halt instruction encountered</span><br><span class=\"line\"></span><br><span class=\"line\">##### Signals that can be referenced by control logic ##############</span><br><span class=\"line\"></span><br><span class=\"line\">##### Pipeline <span class=\"keyword\">Register</span> F ##########################################</span><br><span class=\"line\"></span><br><span class=\"line\">wordsig F_predPC <span class=\"symbol\">&#x27;pc_curr</span>-&gt;pc&#x27;\t     # Predicted value <span class=\"keyword\">of</span> PC</span><br><span class=\"line\"></span><br><span class=\"line\">##### Intermediate Values <span class=\"keyword\">in</span> Fetch Stage ###########################</span><br><span class=\"line\"></span><br><span class=\"line\">wordsig imem_icode  <span class=\"symbol\">&#x27;imem_icode</span>&#x27;      # icode field from instruction memory</span><br><span class=\"line\">wordsig imem_ifun   <span class=\"symbol\">&#x27;imem_ifun</span>&#x27;       # ifun  field from instruction memory</span><br><span class=\"line\">wordsig f_icode\t<span class=\"symbol\">&#x27;if_id_next</span>-&gt;icode&#x27;  # (Possibly modified) instruction code</span><br><span class=\"line\">wordsig f_ifun\t<span class=\"symbol\">&#x27;if_id_next</span>-&gt;ifun&#x27;   # Fetched instruction <span class=\"keyword\">function</span></span><br><span class=\"line\">wordsig f_valC\t<span class=\"symbol\">&#x27;if_id_next</span>-&gt;valc&#x27;   # <span class=\"keyword\">Constant</span> data <span class=\"keyword\">of</span> fetched instruction</span><br><span class=\"line\">wordsig f_valP\t<span class=\"symbol\">&#x27;if_id_next</span>-&gt;valp&#x27;   # Address <span class=\"keyword\">of</span> following instruction</span><br><span class=\"line\">boolsig imem_error <span class=\"symbol\">&#x27;imem_error</span>&#x27;\t     # <span class=\"literal\">Error</span> <span class=\"keyword\">signal</span> from instruction memory</span><br><span class=\"line\">boolsig instr_valid <span class=\"symbol\">&#x27;instr_valid</span>&#x27;    # <span class=\"keyword\">Is</span> fetched instruction valid?</span><br><span class=\"line\"></span><br><span class=\"line\">##### Pipeline <span class=\"keyword\">Register</span> D ##########################################</span><br><span class=\"line\">wordsig D_icode <span class=\"symbol\">&#x27;if_id_curr</span>-&gt;icode&#x27;   # Instruction code</span><br><span class=\"line\">wordsig D_rA <span class=\"symbol\">&#x27;if_id_curr</span>-&gt;ra&#x27;\t     # rA field from instruction</span><br><span class=\"line\">wordsig D_rB <span class=\"symbol\">&#x27;if_id_curr</span>-&gt;rb&#x27;\t     # rB field from instruction</span><br><span class=\"line\">wordsig D_valP <span class=\"symbol\">&#x27;if_id_curr</span>-&gt;valp&#x27;     # Incremented PC</span><br><span class=\"line\"></span><br><span class=\"line\">##### Intermediate Values <span class=\"keyword\">in</span> Decode Stage  #########################</span><br><span class=\"line\"></span><br><span class=\"line\">wordsig d_srcA\t <span class=\"symbol\">&#x27;id_ex_next</span>-&gt;srca&#x27;  # srcA from decoded instruction</span><br><span class=\"line\">wordsig d_srcB\t <span class=\"symbol\">&#x27;id_ex_next</span>-&gt;srcb&#x27;  # srcB from decoded instruction</span><br><span class=\"line\">wordsig d_rvalA <span class=\"symbol\">&#x27;d_regvala</span>&#x27;\t     # valA read from <span class=\"keyword\">register</span> <span class=\"keyword\">file</span></span><br><span class=\"line\">wordsig d_rvalB <span class=\"symbol\">&#x27;d_regvalb</span>&#x27;\t     # valB read from <span class=\"keyword\">register</span> <span class=\"keyword\">file</span></span><br><span class=\"line\"></span><br><span class=\"line\">##### Pipeline <span class=\"keyword\">Register</span> E ##########################################</span><br><span class=\"line\">wordsig E_icode <span class=\"symbol\">&#x27;id_ex_curr</span>-&gt;icode&#x27;   # Instruction code</span><br><span class=\"line\">wordsig E_ifun  <span class=\"symbol\">&#x27;id_ex_curr</span>-&gt;ifun&#x27;    # Instruction <span class=\"keyword\">function</span></span><br><span class=\"line\">wordsig E_valC  <span class=\"symbol\">&#x27;id_ex_curr</span>-&gt;valc&#x27;    # <span class=\"keyword\">Constant</span> data</span><br><span class=\"line\">wordsig E_srcA  <span class=\"symbol\">&#x27;id_ex_curr</span>-&gt;srca&#x27;    # Source A <span class=\"keyword\">register</span> ID</span><br><span class=\"line\">wordsig E_valA  <span class=\"symbol\">&#x27;id_ex_curr</span>-&gt;vala&#x27;    # Source A value</span><br><span class=\"line\">wordsig E_srcB  <span class=\"symbol\">&#x27;id_ex_curr</span>-&gt;srcb&#x27;    # Source B <span class=\"keyword\">register</span> ID</span><br><span class=\"line\">wordsig E_valB  <span class=\"symbol\">&#x27;id_ex_curr</span>-&gt;valb&#x27;    # Source B value</span><br><span class=\"line\">wordsig E_dstE <span class=\"symbol\">&#x27;id_ex_curr</span>-&gt;deste&#x27;    # Destination E <span class=\"keyword\">register</span> ID</span><br><span class=\"line\">wordsig E_dstM <span class=\"symbol\">&#x27;id_ex_curr</span>-&gt;destm&#x27;    # Destination M <span class=\"keyword\">register</span> ID</span><br><span class=\"line\"></span><br><span class=\"line\">##### Intermediate Values <span class=\"keyword\">in</span> Execute Stage #########################</span><br><span class=\"line\">wordsig e_valE <span class=\"symbol\">&#x27;ex_mem_next</span>-&gt;vale&#x27;\t# valE generated by ALU</span><br><span class=\"line\">boolsig e_Cnd <span class=\"symbol\">&#x27;ex_mem_next</span>-&gt;takebranch&#x27; # Does condition hold?</span><br><span class=\"line\">wordsig e_dstE <span class=\"symbol\">&#x27;ex_mem_next</span>-&gt;deste&#x27;      # dstE (possibly modified <span class=\"keyword\">to</span> be RNONE)</span><br><span class=\"line\"></span><br><span class=\"line\">##### Pipeline <span class=\"keyword\">Register</span> M                  #########################</span><br><span class=\"line\">wordsig M_stat <span class=\"symbol\">&#x27;ex_mem_curr</span>-&gt;status&#x27;     # Instruction status</span><br><span class=\"line\">wordsig M_icode <span class=\"symbol\">&#x27;ex_mem_curr</span>-&gt;icode&#x27;\t# Instruction code</span><br><span class=\"line\">wordsig M_ifun  <span class=\"symbol\">&#x27;ex_mem_curr</span>-&gt;ifun&#x27;\t# Instruction <span class=\"keyword\">function</span></span><br><span class=\"line\">wordsig M_valA  <span class=\"symbol\">&#x27;ex_mem_curr</span>-&gt;vala&#x27;      # Source A value</span><br><span class=\"line\">wordsig M_dstE <span class=\"symbol\">&#x27;ex_mem_curr</span>-&gt;deste&#x27;\t# Destination E <span class=\"keyword\">register</span> ID</span><br><span class=\"line\">wordsig M_valE  <span class=\"symbol\">&#x27;ex_mem_curr</span>-&gt;vale&#x27;      # ALU E value</span><br><span class=\"line\">wordsig M_dstM <span class=\"symbol\">&#x27;ex_mem_curr</span>-&gt;destm&#x27;\t# Destination M <span class=\"keyword\">register</span> ID</span><br><span class=\"line\">boolsig M_Cnd <span class=\"symbol\">&#x27;ex_mem_curr</span>-&gt;takebranch&#x27;\t# Condition flag</span><br><span class=\"line\">boolsig dmem_error <span class=\"symbol\">&#x27;dmem_error</span>&#x27;\t        # <span class=\"literal\">Error</span> <span class=\"keyword\">signal</span> from instruction memory</span><br><span class=\"line\"></span><br><span class=\"line\">##### Intermediate Values <span class=\"keyword\">in</span> Memory Stage ##########################</span><br><span class=\"line\">wordsig m_valM <span class=\"symbol\">&#x27;mem_wb_next</span>-&gt;valm&#x27;\t# valM generated by memory</span><br><span class=\"line\">wordsig m_stat <span class=\"symbol\">&#x27;mem_wb_next</span>-&gt;status&#x27;\t# stat (possibly modified <span class=\"keyword\">to</span> be SADR)</span><br><span class=\"line\"></span><br><span class=\"line\">##### Pipeline <span class=\"keyword\">Register</span> W ##########################################</span><br><span class=\"line\">wordsig W_stat <span class=\"symbol\">&#x27;mem_wb_curr</span>-&gt;status&#x27;     # Instruction status</span><br><span class=\"line\">wordsig W_icode <span class=\"symbol\">&#x27;mem_wb_curr</span>-&gt;icode&#x27;\t# Instruction code</span><br><span class=\"line\">wordsig W_dstE <span class=\"symbol\">&#x27;mem_wb_curr</span>-&gt;deste&#x27;\t# Destination E <span class=\"keyword\">register</span> ID</span><br><span class=\"line\">wordsig W_valE  <span class=\"symbol\">&#x27;mem_wb_curr</span>-&gt;vale&#x27;      # ALU E value</span><br><span class=\"line\">wordsig W_dstM <span class=\"symbol\">&#x27;mem_wb_curr</span>-&gt;destm&#x27;\t# Destination M <span class=\"keyword\">register</span> ID</span><br><span class=\"line\">wordsig W_valM  <span class=\"symbol\">&#x27;mem_wb_curr</span>-&gt;valm&#x27;\t# Memory M value</span><br><span class=\"line\"></span><br><span class=\"line\">####################################################################</span><br><span class=\"line\">#    Control <span class=\"keyword\">Signal</span> Definitions.                                   #</span><br><span class=\"line\">####################################################################</span><br><span class=\"line\"></span><br><span class=\"line\">################ Fetch Stage     ###################################</span><br><span class=\"line\"></span><br><span class=\"line\">## What address should instruction be fetched at</span><br><span class=\"line\">word f_pc = [</span><br><span class=\"line\">\t# Mispredicted branch.  Fetch at incremented PC</span><br><span class=\"line\">\tM_icode == IJXX &amp;&amp; !M_Cnd : M_valA;</span><br><span class=\"line\">\t# Completion <span class=\"keyword\">of</span> RET instruction</span><br><span class=\"line\">\tW_icode == IRET : W_valM;</span><br><span class=\"line\">\t# <span class=\"keyword\">Default</span>: <span class=\"keyword\">Use</span> predicted value <span class=\"keyword\">of</span> PC</span><br><span class=\"line\">\t<span class=\"number\">1</span> : F_predPC;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">## Determine icode <span class=\"keyword\">of</span> fetched instruction</span><br><span class=\"line\">word f_icode = [</span><br><span class=\"line\">\timem_error : INOP;</span><br><span class=\"line\">\t<span class=\"number\">1</span>: imem_icode;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"># Determine ifun</span><br><span class=\"line\">word f_ifun = [</span><br><span class=\"line\">\timem_error : FNONE;</span><br><span class=\"line\">\t<span class=\"number\">1</span>: imem_ifun;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"># <span class=\"keyword\">Is</span> instruction valid?</span><br><span class=\"line\">bool instr_valid = f_icode <span class=\"keyword\">in</span> </span><br><span class=\"line\">\t&#123; INOP, IHALT, IRRMOVQ, IIRMOVQ, IRMMOVQ, IMRMOVQ,</span><br><span class=\"line\">\t  IOPQ, IIADDQ, IJXX, ICALL, IRET, IPUSHQ, IPOPQ &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"># Determine status code <span class=\"keyword\">for</span> fetched instruction</span><br><span class=\"line\">word f_stat = [</span><br><span class=\"line\">\timem_error: SADR;</span><br><span class=\"line\">\t!instr_valid : SINS;</span><br><span class=\"line\">\tf_icode == IHALT : SHLT;</span><br><span class=\"line\">\t<span class=\"number\">1</span> : SAOK;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"># Does fetched instruction require a regid byte?</span><br><span class=\"line\">bool need_regids =</span><br><span class=\"line\">\tf_icode <span class=\"keyword\">in</span> &#123; IRRMOVQ, IOPQ, IIADDQ, IPUSHQ, IPOPQ, </span><br><span class=\"line\">\t\t     IIRMOVQ, IRMMOVQ, IMRMOVQ &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"># Does fetched instruction require a <span class=\"keyword\">constant</span> word?</span><br><span class=\"line\">bool need_valC =</span><br><span class=\"line\">\tf_icode <span class=\"keyword\">in</span> &#123; IIRMOVQ, IRMMOVQ, IMRMOVQ, IJXX, ICALL, IIADDQ &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"># Predict <span class=\"keyword\">next</span> value <span class=\"keyword\">of</span> PC</span><br><span class=\"line\">word f_predPC = [</span><br><span class=\"line\">\tf_icode <span class=\"keyword\">in</span> &#123; IJXX, ICALL &#125; : f_valC;</span><br><span class=\"line\">\t<span class=\"number\">1</span> : f_valP;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">################ Decode Stage ######################################</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## What <span class=\"keyword\">register</span> should be used as the A source?</span><br><span class=\"line\">word d_srcA = [</span><br><span class=\"line\">\tD_icode <span class=\"keyword\">in</span> &#123; IRRMOVQ, IRMMOVQ, IOPQ, IPUSHQ  &#125; : D_rA;</span><br><span class=\"line\">\tD_icode <span class=\"keyword\">in</span> &#123; IPOPQ, IRET &#125; : RRSP;</span><br><span class=\"line\">\t<span class=\"number\">1</span> : RNONE; # Don<span class=\"symbol\">&#x27;t</span> need <span class=\"keyword\">register</span></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">## What <span class=\"keyword\">register</span> should be used as the B source?</span><br><span class=\"line\">word d_srcB = [</span><br><span class=\"line\">\tD_icode <span class=\"keyword\">in</span> &#123; IOPQ, IIADDQ, IRMMOVQ, IMRMOVQ  &#125; : D_rB;</span><br><span class=\"line\">\tD_icode <span class=\"keyword\">in</span> &#123; IPUSHQ, IPOPQ, ICALL, IRET &#125; : RRSP;</span><br><span class=\"line\">\t<span class=\"number\">1</span> : RNONE;  # Don<span class=\"symbol\">&#x27;t</span> need <span class=\"keyword\">register</span></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">## What <span class=\"keyword\">register</span> should be used as the E destination?</span><br><span class=\"line\">word d_dstE = [</span><br><span class=\"line\">\tD_icode <span class=\"keyword\">in</span> &#123; IRRMOVQ, IIRMOVQ, IOPQ, IIADDQ &#125; : D_rB;</span><br><span class=\"line\">\tD_icode <span class=\"keyword\">in</span> &#123; IPUSHQ, IPOPQ, ICALL, IRET &#125; : RRSP;</span><br><span class=\"line\">\t<span class=\"number\">1</span> : RNONE;  # Don<span class=\"symbol\">&#x27;t</span> write any <span class=\"keyword\">register</span></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">## What <span class=\"keyword\">register</span> should be used as the M destination?</span><br><span class=\"line\">word d_dstM = [</span><br><span class=\"line\">\tD_icode <span class=\"keyword\">in</span> &#123; IMRMOVQ, IPOPQ &#125; : D_rA;</span><br><span class=\"line\">\t<span class=\"number\">1</span> : RNONE;  # Don<span class=\"symbol\">&#x27;t</span> write any <span class=\"keyword\">register</span></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">## What should be the A value?</span><br><span class=\"line\">## Forward into decode stage <span class=\"keyword\">for</span> valA</span><br><span class=\"line\">word d_valA = [</span><br><span class=\"line\">\tD_icode <span class=\"keyword\">in</span> &#123; ICALL, IJXX &#125; : D_valP; # <span class=\"keyword\">Use</span> incremented PC</span><br><span class=\"line\">\td_srcA == e_dstE : e_valE;    # Forward valE from execute</span><br><span class=\"line\">\td_srcA == M_dstM : m_valM;    # Forward valM from memory</span><br><span class=\"line\">\td_srcA == M_dstE : M_valE;    # Forward valE from memory</span><br><span class=\"line\">\td_srcA == W_dstM : W_valM;    # Forward valM from write back</span><br><span class=\"line\">\td_srcA == W_dstE : W_valE;    # Forward valE from write back</span><br><span class=\"line\">\t<span class=\"number\">1</span> : d_rvalA;  # <span class=\"keyword\">Use</span> value read from <span class=\"keyword\">register</span> <span class=\"keyword\">file</span></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">word d_valB = [</span><br><span class=\"line\">\td_srcB == e_dstE : e_valE;    # Forward valE from execute</span><br><span class=\"line\">\td_srcB == M_dstM : m_valM;    # Forward valM from memory</span><br><span class=\"line\">\td_srcB == M_dstE : M_valE;    # Forward valE from memory</span><br><span class=\"line\">\td_srcB == W_dstM : W_valM;    # Forward valM from write back</span><br><span class=\"line\">\td_srcB == W_dstE : W_valE;    # Forward valE from write back</span><br><span class=\"line\">\t<span class=\"number\">1</span> : d_rvalB;  # <span class=\"keyword\">Use</span> value read from <span class=\"keyword\">register</span> <span class=\"keyword\">file</span></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">################ Execute Stage #####################################</span><br><span class=\"line\"></span><br><span class=\"line\">## <span class=\"keyword\">Select</span> input A <span class=\"keyword\">to</span> ALU</span><br><span class=\"line\">word aluA = [</span><br><span class=\"line\">\tE_icode <span class=\"keyword\">in</span> &#123; IRRMOVQ, IOPQ &#125; : E_valA;</span><br><span class=\"line\">\tE_icode <span class=\"keyword\">in</span> &#123; IIRMOVQ, IRMMOVQ, IMRMOVQ, IIADDQ &#125; : E_valC;</span><br><span class=\"line\">\tE_icode <span class=\"keyword\">in</span> &#123; ICALL, IPUSHQ &#125; : -<span class=\"number\">8</span>;</span><br><span class=\"line\">\tE_icode <span class=\"keyword\">in</span> &#123; IRET, IPOPQ &#125; : <span class=\"number\">8</span>;</span><br><span class=\"line\">\t# Other instructions don<span class=\"symbol\">&#x27;t</span> need ALU</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">## <span class=\"keyword\">Select</span> input B <span class=\"keyword\">to</span> ALU</span><br><span class=\"line\">word aluB = [</span><br><span class=\"line\">\tE_icode <span class=\"keyword\">in</span> &#123; IRMMOVQ, IMRMOVQ, IOPQ, IIADDQ, ICALL, </span><br><span class=\"line\">\t\t     IPUSHQ, IRET, IPOPQ &#125; : E_valB;</span><br><span class=\"line\">\tE_icode <span class=\"keyword\">in</span> &#123; IRRMOVQ, IIRMOVQ &#125; : <span class=\"number\">0</span>;</span><br><span class=\"line\">\t# Other instructions don<span class=\"symbol\">&#x27;t</span> need ALU</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">## Set the ALU <span class=\"keyword\">function</span></span><br><span class=\"line\">word alufun = [</span><br><span class=\"line\">\tE_icode == IOPQ : E_ifun;</span><br><span class=\"line\">\t<span class=\"number\">1</span> : ALUADD;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">## Should the condition codes be updated?</span><br><span class=\"line\">bool set_cc = (E_icode == IOPQ||E_icode == IIADDQ) &amp;&amp;</span><br><span class=\"line\">\t# State changes only during normal operation</span><br><span class=\"line\">\t!m_stat <span class=\"keyword\">in</span> &#123; SADR, SINS, SHLT &#125; &amp;&amp; !W_stat <span class=\"keyword\">in</span> &#123; SADR, SINS, SHLT &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">## <span class=\"keyword\">Generate</span> valA <span class=\"keyword\">in</span> execute stage</span><br><span class=\"line\">word e_valA = E_valA;    # Pass valA through stage</span><br><span class=\"line\"></span><br><span class=\"line\">## Set dstE <span class=\"keyword\">to</span> RNONE <span class=\"keyword\">in</span> event <span class=\"keyword\">of</span> <span class=\"keyword\">not</span>-taken conditional move</span><br><span class=\"line\">word e_dstE = [</span><br><span class=\"line\">\tE_icode == IRRMOVQ &amp;&amp; !e_Cnd : RNONE;</span><br><span class=\"line\">\t<span class=\"number\">1</span> : E_dstE;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">################ Memory Stage ######################################</span><br><span class=\"line\"></span><br><span class=\"line\">## <span class=\"keyword\">Select</span> memory address</span><br><span class=\"line\">word mem_addr = [</span><br><span class=\"line\">\tM_icode <span class=\"keyword\">in</span> &#123; IRMMOVQ, IPUSHQ, ICALL, IMRMOVQ &#125; : M_valE;</span><br><span class=\"line\">\tM_icode <span class=\"keyword\">in</span> &#123; IPOPQ, IRET &#125; : M_valA;</span><br><span class=\"line\">\t# Other instructions don<span class=\"symbol\">&#x27;t</span> need address</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">## Set read control <span class=\"keyword\">signal</span></span><br><span class=\"line\">bool mem_read = M_icode <span class=\"keyword\">in</span> &#123; IMRMOVQ, IPOPQ, IRET &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">## Set write control <span class=\"keyword\">signal</span></span><br><span class=\"line\">bool mem_write = M_icode <span class=\"keyword\">in</span> &#123; IRMMOVQ, IPUSHQ, ICALL &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">#<span class=\"comment\">/* $begin pipe-m_stat-hcl */</span></span><br><span class=\"line\">## Update the status</span><br><span class=\"line\">word m_stat = [</span><br><span class=\"line\">\tdmem_error : SADR;</span><br><span class=\"line\">\t<span class=\"number\">1</span> : M_stat;</span><br><span class=\"line\">];</span><br><span class=\"line\">#<span class=\"comment\">/* $end pipe-m_stat-hcl */</span></span><br><span class=\"line\"></span><br><span class=\"line\">## Set E <span class=\"keyword\">port</span> <span class=\"keyword\">register</span> ID</span><br><span class=\"line\">word w_dstE = W_dstE;</span><br><span class=\"line\"></span><br><span class=\"line\">## Set E <span class=\"keyword\">port</span> value</span><br><span class=\"line\">word w_valE = W_valE;</span><br><span class=\"line\"></span><br><span class=\"line\">## Set M <span class=\"keyword\">port</span> <span class=\"keyword\">register</span> ID</span><br><span class=\"line\">word w_dstM = W_dstM;</span><br><span class=\"line\"></span><br><span class=\"line\">## Set M <span class=\"keyword\">port</span> value</span><br><span class=\"line\">word w_valM = W_valM;</span><br><span class=\"line\"></span><br><span class=\"line\">## Update processor status</span><br><span class=\"line\">word Stat = [</span><br><span class=\"line\">\tW_stat == SBUB : SAOK;</span><br><span class=\"line\">\t<span class=\"number\">1</span> : W_stat;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">################ Pipeline <span class=\"keyword\">Register</span> Control #########################</span><br><span class=\"line\"></span><br><span class=\"line\"># Should I stall <span class=\"keyword\">or</span> inject a bubble into Pipeline <span class=\"keyword\">Register</span> F?</span><br><span class=\"line\"># At most one <span class=\"keyword\">of</span> these can be <span class=\"literal\">true</span>.</span><br><span class=\"line\">bool F_bubble = <span class=\"number\">0</span>;</span><br><span class=\"line\">bool F_stall =</span><br><span class=\"line\">\t# Conditions <span class=\"keyword\">for</span> a load/<span class=\"keyword\">use</span> hazard</span><br><span class=\"line\">\tE_icode <span class=\"keyword\">in</span> &#123; IMRMOVQ, IPOPQ &#125; &amp;&amp;</span><br><span class=\"line\">\t E_dstM <span class=\"keyword\">in</span> &#123; d_srcA, d_srcB &#125; ||</span><br><span class=\"line\">\t# Stalling at fetch <span class=\"keyword\">while</span> ret passes through pipeline</span><br><span class=\"line\">\tIRET <span class=\"keyword\">in</span> &#123; D_icode, E_icode, M_icode &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"># Should I stall <span class=\"keyword\">or</span> inject a bubble into Pipeline <span class=\"keyword\">Register</span> D?</span><br><span class=\"line\"># At most one <span class=\"keyword\">of</span> these can be <span class=\"literal\">true</span>.</span><br><span class=\"line\">bool D_stall = </span><br><span class=\"line\">\t# Conditions <span class=\"keyword\">for</span> a load/<span class=\"keyword\">use</span> hazard</span><br><span class=\"line\">\tE_icode <span class=\"keyword\">in</span> &#123; IMRMOVQ, IPOPQ &#125; &amp;&amp;</span><br><span class=\"line\">\t E_dstM <span class=\"keyword\">in</span> &#123; d_srcA, d_srcB &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">bool D_bubble =</span><br><span class=\"line\">\t# Mispredicted branch</span><br><span class=\"line\">\t(E_icode == IJXX &amp;&amp; !e_Cnd) ||</span><br><span class=\"line\">\t# Stalling at fetch <span class=\"keyword\">while</span> ret passes through pipeline</span><br><span class=\"line\">\t# but <span class=\"keyword\">not</span> condition <span class=\"keyword\">for</span> a load/<span class=\"keyword\">use</span> hazard</span><br><span class=\"line\">\t!(E_icode <span class=\"keyword\">in</span> &#123; IMRMOVQ, IPOPQ &#125; &amp;&amp; E_dstM <span class=\"keyword\">in</span> &#123; d_srcA, d_srcB &#125;) &amp;&amp;</span><br><span class=\"line\">\t  IRET <span class=\"keyword\">in</span> &#123; D_icode, E_icode, M_icode &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"># Should I stall <span class=\"keyword\">or</span> inject a bubble into Pipeline <span class=\"keyword\">Register</span> E?</span><br><span class=\"line\"># At most one <span class=\"keyword\">of</span> these can be <span class=\"literal\">true</span>.</span><br><span class=\"line\">bool E_stall = <span class=\"number\">0</span>;</span><br><span class=\"line\">bool E_bubble =</span><br><span class=\"line\">\t# Mispredicted branch</span><br><span class=\"line\">\t(E_icode == IJXX &amp;&amp; !e_Cnd) ||</span><br><span class=\"line\">\t# Conditions <span class=\"keyword\">for</span> a load/<span class=\"keyword\">use</span> hazard</span><br><span class=\"line\">\tE_icode <span class=\"keyword\">in</span> &#123; IMRMOVQ, IPOPQ &#125; &amp;&amp;</span><br><span class=\"line\">\t E_dstM <span class=\"keyword\">in</span> &#123; d_srcA, d_srcB&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"># Should I stall <span class=\"keyword\">or</span> inject a bubble into Pipeline <span class=\"keyword\">Register</span> M?</span><br><span class=\"line\"># At most one <span class=\"keyword\">of</span> these can be <span class=\"literal\">true</span>.</span><br><span class=\"line\">bool M_stall = <span class=\"number\">0</span>;</span><br><span class=\"line\"># Start injecting bubbles as soon as exception passes through memory stage</span><br><span class=\"line\">bool M_bubble = m_stat <span class=\"keyword\">in</span> &#123; SADR, SINS, SHLT &#125; || W_stat <span class=\"keyword\">in</span> &#123; SADR, SINS, SHLT &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"># Should I stall <span class=\"keyword\">or</span> inject a bubble into Pipeline <span class=\"keyword\">Register</span> W?</span><br><span class=\"line\">bool W_stall = W_stat <span class=\"keyword\">in</span> &#123; SADR, SINS, SHLT &#125;;</span><br><span class=\"line\">bool W_bubble = <span class=\"number\">0</span>;</span><br><span class=\"line\">#<span class=\"comment\">/* $end pipe-all-hcl */</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>然后修改ncopy.ys文件</p>\n<h4 id=\"Version-1-0\"><a href=\"#Version-1-0\" class=\"headerlink\" title=\"Version 1.0\"></a>Version 1.0</h4><figure class=\"highlight x86asm\"><figcaption><span>文件名：archlab/archlab-handout/sim/pipe/ncopy.ys</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#/* $begin ncopy-ys */</span><br><span class=\"line\">##################################################################</span><br><span class=\"line\"># ncopy<span class=\"number\">.</span>ys - Copy a src block of len words to dst.</span><br><span class=\"line\"># Return the number of positive words (&gt;<span class=\"number\">0</span>) contained <span class=\"keyword\">in</span> src.</span><br><span class=\"line\">#</span><br><span class=\"line\"># Include your name <span class=\"keyword\">and</span> ID here.</span><br><span class=\"line\">#</span><br><span class=\"line\"># Describe how <span class=\"keyword\">and</span> why you modified the baseline code.</span><br><span class=\"line\">#</span><br><span class=\"line\">##################################################################</span><br><span class=\"line\"># <span class=\"built_in\">Do</span> <span class=\"keyword\">not</span> modify this portion</span><br><span class=\"line\"># Function prologue.</span><br><span class=\"line\"># %rdi = src, %rsi = dst, %rdx = len</span><br><span class=\"line\"><span class=\"symbol\">ncopy:</span></span><br><span class=\"line\"></span><br><span class=\"line\">##################################################################</span><br><span class=\"line\"># You can modify this portion</span><br><span class=\"line\">\t# <span class=\"keyword\">Loop</span> header</span><br><span class=\"line\">\txorq %rax,%rax\t\t# count = <span class=\"number\">0</span><span class=\"comment\">;</span></span><br><span class=\"line\">\tandq %rdx,%rdx\t\t# len &lt;= <span class=\"number\">0</span>?</span><br><span class=\"line\">\t<span class=\"keyword\">jle</span> Done\t\t# if so, goto Done:</span><br><span class=\"line\"><span class=\"symbol\"></span></span><br><span class=\"line\"><span class=\"symbol\">Loop:</span>\tmrmovq (%rdi), %r10\t# read val from src...</span><br><span class=\"line\">\trmmovq %r10, (%rsi)\t# ...and store it to dst</span><br><span class=\"line\">\tandq %r10, %r10\t\t# val &lt;= <span class=\"number\">0</span>?</span><br><span class=\"line\">\t<span class=\"keyword\">jle</span> Npos\t\t# if so, goto Npos:</span><br><span class=\"line\">\tiaddq <span class=\"number\">$1</span>, %rax\t\t# count++</span><br><span class=\"line\"><span class=\"symbol\">Npos:</span>\t</span><br><span class=\"line\">\tiaddq $-<span class=\"number\">1</span>, %rdx\t\t# len--</span><br><span class=\"line\">\tiaddq <span class=\"number\">$8</span>, %rdi\t\t# src++</span><br><span class=\"line\">\tiaddq <span class=\"number\">$8</span>, %rsi\t\t# dst++</span><br><span class=\"line\">\tandq %rdx,%rdx\t\t# len &gt; <span class=\"number\">0</span>?</span><br><span class=\"line\">\t<span class=\"keyword\">jg</span> <span class=\"keyword\">Loop</span>\t\t\t# if so, goto <span class=\"keyword\">Loop</span>:</span><br><span class=\"line\">##################################################################</span><br><span class=\"line\"># <span class=\"built_in\">Do</span> <span class=\"keyword\">not</span> modify the following <span class=\"meta\">section</span> of code</span><br><span class=\"line\"># Function epilogue.</span><br><span class=\"line\"><span class=\"symbol\">Done:</span></span><br><span class=\"line\">\t<span class=\"keyword\">ret</span></span><br><span class=\"line\">##################################################################</span><br><span class=\"line\"># Keep the following label <span class=\"meta\">at</span> the end of your function</span><br><span class=\"line\"><span class=\"symbol\">End:</span></span><br><span class=\"line\">#/* $end ncopy-ys */</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>然而还是0分。</p>\n<p><img data-src=\"csapp-lab-4/result.png\"></p>\n<p>主要考虑还是要减少bubble，还有程序优化问题。</p>\n<p>看完第五章再来二刷吧。</p>\n<h4 id=\"Version-2-0\"><a href=\"#Version-2-0\" class=\"headerlink\" title=\"Version 2.0\"></a>Version 2.0</h4><p>结果：<br><img data-src=\"csapp-lab-4/result2.png\"></p>\n<p>所作修改：</p>\n<ul>\n<li>4x4循环展开，因为C=4，L=1</li>\n<li>消除了一些load/use指令组合</li>\n</ul>\n<figure class=\"highlight x86asm\"><figcaption><span>文件名：archlab/archlab-handout/sim/pipe/ncopy.ys</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#/* $begin ncopy-ys */</span><br><span class=\"line\">##################################################################</span><br><span class=\"line\"># ncopy<span class=\"number\">.</span>ys - Copy a src block of len words to dst.</span><br><span class=\"line\"># Return the number of positive words (&gt;<span class=\"number\">0</span>) contained <span class=\"keyword\">in</span> src.</span><br><span class=\"line\">#</span><br><span class=\"line\"># Include your name <span class=\"keyword\">and</span> ID here.</span><br><span class=\"line\">#</span><br><span class=\"line\"># Describe how <span class=\"keyword\">and</span> why you modified the baseline code.</span><br><span class=\"line\">#</span><br><span class=\"line\">##################################################################</span><br><span class=\"line\"># <span class=\"built_in\">Do</span> <span class=\"keyword\">not</span> modify this portion</span><br><span class=\"line\"># Function prologue.</span><br><span class=\"line\"># %rdi = src, %rsi = dst, %rdx = len</span><br><span class=\"line\"><span class=\"symbol\">ncopy:</span></span><br><span class=\"line\"></span><br><span class=\"line\">##################################################################</span><br><span class=\"line\"># You can modify this portion</span><br><span class=\"line\">\t# <span class=\"keyword\">Loop</span> header</span><br><span class=\"line\">\txorq %rax,%rax\t\t# count = <span class=\"number\">0</span><span class=\"comment\">;</span></span><br><span class=\"line\">\tandq %rdx,%rdx\t\t# len &lt;= <span class=\"number\">0</span>?</span><br><span class=\"line\">\t<span class=\"keyword\">jle</span> Done\t\t# if so, goto Done:</span><br><span class=\"line\"><span class=\"symbol\"></span></span><br><span class=\"line\"><span class=\"symbol\">testType:</span></span><br><span class=\"line\">\tirmovq <span class=\"number\">$3</span>,%r8</span><br><span class=\"line\">\tandq %rdx, %r8</span><br><span class=\"line\">\t<span class=\"keyword\">je</span> <span class=\"keyword\">Loop</span></span><br><span class=\"line\">\trrmovq %r8,%r11</span><br><span class=\"line\">\tirmovq <span class=\"number\">$1</span>, %rcx</span><br><span class=\"line\"><span class=\"symbol\">originLoop:</span></span><br><span class=\"line\">\tmrmovq (%rdi), %r10</span><br><span class=\"line\">\tiaddq <span class=\"number\">$8</span>, %rdi\t\t# src++</span><br><span class=\"line\">\tandq %r10, %r10</span><br><span class=\"line\">\trmmovq %r10, (%rsi)</span><br><span class=\"line\">\t<span class=\"keyword\">jle</span> <span class=\"keyword\">neg</span></span><br><span class=\"line\">\tiaddq <span class=\"number\">$1</span>, %rax</span><br><span class=\"line\"><span class=\"symbol\">neg:</span></span><br><span class=\"line\">\tiaddq <span class=\"number\">$8</span>, %rsi\t\t# dst++</span><br><span class=\"line\">\tsubq %rcx, %r8</span><br><span class=\"line\">\t<span class=\"keyword\">jg</span> originLoop</span><br><span class=\"line\">\tsubq %r11,%rdx\t\t# len &gt; <span class=\"number\">0</span>?</span><br><span class=\"line\">\t<span class=\"keyword\">jle</span> Done</span><br><span class=\"line\"><span class=\"symbol\">Loop:</span>\t</span><br><span class=\"line\">\tmrmovq (%rdi), %r10\t# read val from src...</span><br><span class=\"line\">\tmrmovq <span class=\"number\">8</span>(%rdi), %r11</span><br><span class=\"line\">\tmrmovq <span class=\"number\">16</span>(%rdi), %r8</span><br><span class=\"line\">\tmrmovq <span class=\"number\">24</span>(%rdi), %r9</span><br><span class=\"line\">\trmmovq %r10, (%rsi)\t# ...and store it to dst</span><br><span class=\"line\">\trmmovq %r11, <span class=\"number\">8</span>(%rsi)</span><br><span class=\"line\">\trmmovq %r8, <span class=\"number\">16</span>(%rsi)</span><br><span class=\"line\">\trmmovq %r9, <span class=\"number\">24</span>(%rsi)</span><br><span class=\"line\">\tandq %r10, %r10\t\t# val &lt;= <span class=\"number\">0</span>?</span><br><span class=\"line\">\t<span class=\"keyword\">jle</span> second\t\t# if so,go next item:</span><br><span class=\"line\">\tiaddq <span class=\"number\">$1</span>, %rax\t\t# count++</span><br><span class=\"line\"><span class=\"symbol\">second:</span></span><br><span class=\"line\">\tandq %r11, %r11</span><br><span class=\"line\">\t<span class=\"keyword\">jle</span> third</span><br><span class=\"line\">\tiaddq <span class=\"number\">$1</span>, %rax</span><br><span class=\"line\"><span class=\"symbol\">third:</span></span><br><span class=\"line\">\tandq %r8, %r8</span><br><span class=\"line\">\t<span class=\"keyword\">jle</span> forth</span><br><span class=\"line\">\tiaddq <span class=\"number\">$1</span>, %rax</span><br><span class=\"line\"><span class=\"symbol\">forth:</span></span><br><span class=\"line\">\tandq %r9, %r9</span><br><span class=\"line\">\t<span class=\"keyword\">jle</span> Npos</span><br><span class=\"line\">\tiaddq <span class=\"number\">$1</span>, %rax</span><br><span class=\"line\"><span class=\"symbol\">Npos:</span>\t</span><br><span class=\"line\">\tiaddq $-<span class=\"number\">4</span>, %rdx\t\t# len--</span><br><span class=\"line\">\tiaddq <span class=\"number\">$32</span>, %rdi\t\t# src++</span><br><span class=\"line\">\tiaddq <span class=\"number\">$32</span>, %rsi\t\t# dst++</span><br><span class=\"line\">\tandq %rdx,%rdx\t\t# len &gt; <span class=\"number\">0</span>?</span><br><span class=\"line\">\t<span class=\"keyword\">jg</span> <span class=\"keyword\">Loop</span>\t\t\t# if so, goto <span class=\"keyword\">Loop</span>:</span><br><span class=\"line\">##################################################################</span><br><span class=\"line\"># <span class=\"built_in\">Do</span> <span class=\"keyword\">not</span> modify the following <span class=\"meta\">section</span> of code</span><br><span class=\"line\"># Function epilogue.</span><br><span class=\"line\"><span class=\"symbol\">Done:</span></span><br><span class=\"line\">\t<span class=\"keyword\">ret</span></span><br><span class=\"line\">##################################################################</span><br><span class=\"line\"># Keep the following label <span class=\"meta\">at</span> the end of your function</span><br><span class=\"line\"><span class=\"symbol\">End:</span></span><br><span class=\"line\">#/* $end ncopy-ys */</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>粗略的总结了一下。有问题请在评论区或者daovoice指正。</p>\n<h3 id=\"所感\"><a href=\"#所感\" class=\"headerlink\" title=\"所感\"></a>所感</h3><ol>\n<li>最近做问题不够专注，时间观念不够强，可能是太过松散了</li>\n<li>。。。</li>\n</ol>\n<h3 id=\"所得\"><a href=\"#所得\" class=\"headerlink\" title=\"所得\"></a>所得</h3><ol>\n<li>从阅读《编码》这本书中浅浅的了解了处理器体系结构，到csapp3e进一步了解</li>\n<li>熟悉了ISA设计的基本方法，指令分类、分阶段、流水线、冒险问题、异常处理、性能评价等</li>\n</ol>\n<h3 id=\"下一步\"><a href=\"#下一步\" class=\"headerlink\" title=\"下一步\"></a>下一步</h3><ol>\n<li>阅读第5章，二刷part C</li>\n<li>使用番茄todo做好时间规划，并执行训练</li>\n</ol>"},{"title":"通用操作系统原理之虚拟内存","date":"2018-12-09T04:51:13.000Z","top":true,"_content":"\n\n{% note default %}\n理论驱动实践，实践驱动理论。\n{% endnote %}\n\n<!-- more -->\n\n### 虚拟内存问题概述\n\n如果你了解过一点虚拟内存的知识，这篇笔记可能会让你更深入的理解。\n\n- 三个内存相关的问题\n  - 没有足够的内存\n  - 地址空间碎片化\n  - 地址冲突\n- 什么是虚拟内存\n  - 中间件\n  - 如何解决三个内存问题\n  - 页表和转换\n- 如何实现虚拟内存\n  - 怎么让转换变得更快\n- 虚拟内存和高速缓存Cache\n\n\n### 三个内存相关的问题\n\n- 没有足够的内存怎么办\n\nMIPS提供给每个应用程序32位的地址空间，每个应用程序可以访问这32个地址空间中的任意一个字节。最早的MIPS架构是32位，最新的版本已经变成64位。也就是说你可以使用2^32bytes也就是4GB，这只是理论上，实际可能会缩小到2GB可用空间。\n\n如果你的物理内存（内存条）是1GB该怎么办呢？就像下面这个图，可寻址空间大于实际物理内存大小。\n\n![](virtual-memory/vm-problem1.png)\n\n- 程序如何分配内存（对于碎片内存）\n\n就像下面这张图，首先内存加载程序p1和p2，开始3G空间被占用，剩余1G空间剩余，这时候p1退出，p3想使用内存，虽然还有2G剩余空间，但空间是碎片化的，这也是一个问题。这被称作**Memory fragmentation**`内存碎片化`。\n\n![](virtual-memory/vm-problem2.png)\n\n- 如何保证进程安全（进程之间地址不相互访问）\n\n就像下面这张图，两个程序同时访问`1024`这个地址的空间，内存中的信息会不会相互覆盖？\n\n![](virtual-memory/vm-problem3.png)\n\n总结一下，如果所有程序都有相同的32位的寻址空间，那么可能导致以下问题：\n* 如果实际物理能存大小小于4GB电脑可能会崩溃\n* 如果运行多个程序可能会用光所有内存，这不是真正的用光而是碎片化的内存无法真正利用，这种碎片化依赖于我们不同程序的运行次序\n* 不同的进程之间的数据可能会相互覆盖破坏，因为有相同的寻址地址\n\n那么如何解决？\n\n问题的关键在于**所有的程序有相同的寻址空间**，那么我们可不可以有属于自己的**虚拟内存**？如果可以的话，我们可以\n- 将程序的内存空间和物理内存之间做一个映射（这使得我们使用物理内存RAM变的更加灵活）\n- 当程序用光的时候，我们甚至可以将程序移动到硬盘\n\n### 什么是虚拟内存\n\n#### 中间件\n\n虚拟内存是一层“中间组件”，虚拟内存的想法来自于一句话：\n\n> Any problem in computer science can be solved by adding indirection.\n任何计算机问题都可以通过添加一个中间件来解决。\n\n如果没有虚拟内存这一层中间件，程序寻址空间将和实际物理内存相同。例如寻址空间大小大于实际RAM大小，如果你访问地址2024，得到的结果可能和访问地址24相同（因为地址越界最高位失效）。\n\n*虚拟内存的作用就是将程序地址空间做一层映射映射到实际RAM地址。*\n\n如下图所示：\n\n![](virtual-memory/whatis-vm1.png)\n\n#### 如何解决三个内存问题\n\n- 没有足够的内存\n将一部分程序地址空间映射到硬盘，我们需要他的时候只需要将这一部分加载到内存中即可。内存中的暂时不使用的程序（比如Program0）可以将其放到硬盘中，这个过程叫做`Page Out`，即内存页换出，并更新映射，然后当新程序（P3）来了就可以映射到内存中原来旧程序（P0）部分。\n\n![](virtual-memory/not-enough-memory.png)\n\n- 碎片内存使用\n\n这就是前面提到过的问题，如何充分利用程序退出后碎片化的内存？\n有了前面提及的映射，这个就比较容易解决了，**我们可以将地址空间按照任意方式映射到实际物理内存RAM**\n\n![](virtual-memory/memory-hole.png)\n\n\n- 进程安全（进程之间不相互访问）\n\n进程之间的内存如何能够独立、隔离（isolate）出来呢？例如同时访问`1024`的地址，两个程序如何能保证不是访问的实际物理内存中的同一个区域呢？\n\n通过映射方式我们可以想出来，**只需要保证不同程序的相同虚拟地址映射到不同的物理地址就可以了。**\n\n![](virtual-memory/program-secure.png)\n\n这样一来，因为每个程序都有自己的地址空间，那么他们不可能访问其他程序的数据，这非常的安全和可靠！\n\n这也是有缺点的，当两个程序合作的时候，如何共享内存呢？**只需要将两个程序各自的虚拟地址空间拿出一部分映射到相同的物理地址空间**。\n\n![](virtual-memory/memory-share.png)\n\n#### 页表和转换\n前面一直提到的映射就是页表的部分，页表所做的功能就是转换，`从VA（Virtual Address）虚拟地址转换为PA（Physical Address）物理地址`。页表映射的单位是一个`页`。\n\n那程序是如何访问内存的呢？\n- CPU执行使用虚拟地址。\n- MMU将虚拟地址转换成物理地址\n- （可选）如果转换过程中发现映射表中没有物理内存，那么操作系统就将它从硬盘加载到内存并修改映射表\n\n![](virtual-memory/vm-work1.png)\n\n- 通过物理地址读取RAM并将数据返还给程序。\n\n![](virtual-memory/vm-work2.png)\n\n##### 页表\n\n页表保存着VA虚拟地址到PA物理地址的映射方式。\n\n下面一步一步说明页表的构建过程，从有问题的页表到一个臻于完美的页表，这可能是现代计算机操作系统所利用的机制。\n\n既然页表保存着虚拟地址到物理地址的映射，那么页表就需要保存每一个虚拟地址到每一个物理地址的映射，我们称每一条记录为页表入口`Page Table Entry (PTE)`。如果是这样的话，那需要多大的页表？**结合下图：**如果是32位地址空间，每个字就需要1个PTE，这里一个字是32位，也就是4个字节，所以每4个大小也就是2位的地址空间就需要1个PTE，所以总共需要2^30个PTE。又因为每个PTE存储的是一个映射，由于虚拟地址是连续的可以只用偏移地址来表示，只需要存32位的物理地址，所以总共需要2^30x32b=4GB个大小。这说明1个4GB大小的RAM我们就需要拿出全部容量来存储页表，而且这没有考虑每个程序都需要一个页表。如果你没有明白这个计算公式，你仅需要知道如果这样构造页表所需容量太大，需要改造！\n\n![](virtual-memory/page-table1.png)\n\n那么如何改造呢？以上情况的映射是1个字对应一个PTE页表入口，我们称这种情况为`细粒度映射`，那我们可不可以使用`粗粒度映射`呢？就像这个图一样：\n\n![](virtual-memory/page-table2.png)\n\n这个图中，我们将每4Kb大小的地址空间做一个PTE，我们称之为`4KB Pages`，因为每个RAM按字节计量，或者你可以看为1K个字大小的页。这样我们就减少了映射也就是PTE的个数。这4KB大小的页映射的内部是连续的，如下图：\n\n![](virtual-memory/page-table3.png)\n\n有了以上改进，我们有了更少的PTE映射个数，但是我们页降低了使用RAM的灵活性，因为我们每次需要移动一个页（4KB）。\n\n现代计算机系统中，比较典型的就是4KB Pages（1024 words per page，每一页1024个字）。\n\n##### 地址转换\n\n我们需要将虚拟地址转换为物理地址。\n\n假设我们使用的是4KB Pages，我们有32位虚拟地址，28位物理地址，如下图\n\n![](virtual-memory/addr-trans1.png)\n\n那我们4KB大小的页内部没有做映射，这一部分如何映射呢？解决办法就是使用`偏移量offset`，如下图\n\n![](virtual-memory/addr-trans2.png)\n\n我们将一个虚拟地址转换为物理地址，虚拟地址的pagenumber部分通过页表转换为实际物理地址的pagenumber部分，虚拟地址的offset部分直接作为物理地址的offset部分。\n\n![](virtual-memory/addr-trans3.png)\n\n下面这个例子，32位虚拟地址，28位物理地址，4KB大小的页，所以需要12位offset。当虚拟地址为**0x00003204**的时候，将虚拟地址分为虚拟页编号（**0x00003**）、偏移量（**0x204**），offset直接使用，所以物理页内偏移量为**0x204**，虚拟页编号通过查页表，得到物理页编号为**0x0006**。所以得到的物理地址为**0x0006204**\n\n![](virtual-memory/addr-trans4.png)\n\n当然，如果查页表的时候可能会产生`page fault`，即所需要的内容没有在RAM中，如图中的**0x00000**，这就需要发生中断，加载内容到RAM，然后修改页表，返回到内存上次执行的位置，这时候就会找到所对应的物理页编号了。\n\n![](virtual-memory/addr-trans5.png)\n\n\n详细说一下当所需要的页不在内存中时会发生什么：\n\n- 页表入口PTE告诉你所需要的页在硬盘中\n- 硬件（CPU）生成一个Page Fault页错误\n- 硬件跳到Page Fault Handler页错误处理程序来处理\n  - 操作系统选择RAM中的一个页剔除写到硬盘中\n  - 如果是需要读取的页是脏页，就需要先将其写回到硬盘再读取\n  - 操作系统读取所需要的页到RAM\n  - 操作系统修改页表的映射\n- 操作系统跳转到发生页错误的地方开始执行（这一次就不会产生页错误了）\n\n> 脏页是指页中的数据被改变了，如果没有改变，那就没必要写回到硬盘了。\n\n> 脏页－linux内核中的概念，因为硬盘的读写速度远赶不上内存的速度，系统就把读写比较频繁的数据事先放到内存中，以提高读写速度，这就叫高速缓存，linux是以页作为高速缓存的单位，当进程修改了高速缓存里的数据时，该页就被内核标记为脏页，内核将会在合适的时间把脏页的数据写到磁盘中去，以保持高速缓存中的数据和磁盘中的数据是一致的。（来自百度百科）\n\n那么页不在内存中时，这个过程需要多长时间呢？大约需要80 million 周期，这是采样自现代CPU，其中硬盘的读取占了大多数时间。***页错误可能是计算机中最慢的操作了。***\n\n![](virtual-memory/addr-trans6.png)\n\n既然这么慢，那为什么还要用它呢？\n\n优点：\n- 你用光了内存计算机不会发生崩溃\n缺点：\n- 如果发生页错误会很慢\n\n但是现代计算机还是使用内存页机制。如果你有非常大、足够大的RAM就不会发生页置换，这就是我们为什么认为内存越大计算机就变的越快的原因。\n\n足够大的内存这是不可能的，不过一些现代操作系统不会发生页置换：\n\n- IOS：如果你用了过多的内存，系统会杀死你的进程\n- OS X 10.9：系统会先压缩你的程序，只有不得不置换的时候才会发生\n\n> 这可能就是为什么在国内Apple比较受欢迎的原因吧，o(*￣︶￣*)o\n\n\n每个程序都有自己的页表，我们可以把每个程序的虚拟地址映射到独一无二的内存中，这是为了程序之间不会没有预测的访问数据。\n\n![](virtual-memory/mem-protection1.png)\n\n这说明每一个程序都有自己的32位虚拟地址空间，下面是Linux虚拟内存空间的使用情况。\n\n![](virtual-memory/mem-protection2.png)\n\n1GB预留给linux内核作为内核区，栈区可以向下扩展到一个固定的最大值，Libraries区用于一些共享库的放置，堆区用于存储动态申请的内存向上扩展，接下来是data数据区用于存储静态变量，代码区用于放置程序编译之后的`二进制代码`。这之间有一些随机的偏移，这提高了安全性因为你不知道数据和代码区具体在哪儿。\n\n这是一个具体的例子。\n\n![](virtual-memory/mem-protection3.png)\n\n每个程序都有自己的虚拟地址空间，都有自己的页表映射方式保证了程序之间的隔离，因为不会随意相互访问内存，映射到内存的相同区域保证了程序之间的可合作性。\n\n看一看实际如何使用独立的页表映射方式。这儿有两个程序，CPU都要执行这段指令`ld R2,2(R0)`，就是将内存地址2的数据加载到R2寄存器中，这里的内存地址是虚拟地址，因此需要通过查页表的方式来查询实际物理内存地址，然后取出数据。因为两个程序有不同的页表，执行指令时取得的虚拟地址2对应的物理地址一般不同或者相同（共享，这只需要将不同地址的虚拟地址映射到相同的RAM物理地址即可），因此最终访问的RAM地址也是不同的。CPU执行上下文切换切换进程时会将进程资源一起切换，这个切换就包含页表的切换。就像下面这张图。\n\n![](virtual-memory/mem-protection4.png)\n### 如何实现虚拟内存\n\n如何让虚拟内存有作用呢？因为虚拟内存使得内存使用更加灵活，但也有可能降低计算机系统的效率，我们只需要让虚拟内存机制达到尽可能大的效率即可。\n\n虚拟内存的使用过程中需要做什么事情？\n\n- 访问内存中的页表\n- 通过查询页表将虚拟地址转换为物理地址\n- 访问RAM相应物理内存中的数据\n\n这个过程中访问了内存2次，访问内存有很多的工作要做，要了解到我们平均每条指令就需要访问1.33次内存（4/3，每三条指令访问4次内存），这部分显得很低效，这是优化的部分之一！\n\n使用虚拟内存有优点，因为有“无限制”的程序和内存（每个程序都有地址空间，内存页可以换入换出），可以保护程序内存实现隔离，使用内存变得很灵活；但使用虚拟内存也会带来很昂贵的资源消耗，每个内存操作都需要查询页表，而且需要访问两次内存（1次页表访问、1次内存物理地址（访问RAM数据）访问）\n\n\n#### 如何更快地完成虚拟地址到物理地址的转换\n\n\n- TLB\n因为页表的访问是必须的，所以不可能减少这一部分工作。那我们可不可以通过软件来实现？我们知道这又增加了指令条数，也就增加了内存访问次数。那可不可以通过硬件来实现？添加一个缓存Cache。我们称这个`Page Table Cache`为`Translation Lookaside Buffer(TLB)`。他的工作机制如下图\n\n![](virtual-memory/mem-fast1.png)\n\n最初，通过访问RAM中的页表来将虚拟地址转换为物理地址，这是非常慢的操作。\n\n![](virtual-memory/mem-fast2.png)\n\n我们通过访问TLB缓存来获取虚拟地址对应的物理地址这是十分迅速的，因为访问速度比RAM快，这非常像一个Cache。如果想让TLB非常迅速，TLB就必须尽可能小。我们通常将TLB分离成指令页缓存（iTLB）和数据页缓存（dTLB），比如现代intel所生产的，每一页4KB，一共有64个页表入口PTE，或者是每一页2MB，32个PTE，都是4路关联（4路组关联，区别于全关联）\n\n全部页表有1M个PTE，但是TLB里只有64个，这个差别很多大，这样访问页的时候如果在TLB里那就会变得很快。\n\n- 页在RAM中\n  - PTE在TLB\n    - 最快\n    - 1个周期用于地址转换，然后访问RAM或cache中的数据\n  - PTE不在TLB\n    - 较慢\n    - 20-1000个周期从RAM中加载PTE到TLB，然后访问RAM数据\n- 页不在RAM\n  - PTE在TLB（几乎不可能，因为最近不经常使用的内存页被置换到硬盘，所以TLB在这段时间内也被置换了）\n    - 很慢\n    - 大约80M周期从硬盘加载到内存\n  - PTE不在TLB\n    - 比很慢还慢一点（o(*￣︶￣*)o）\n    - 20-1000个周期地址转换，这时知道内存页在硬盘\n    - 大约80M周期从硬盘加载到内存\n\nTLB非常的小，怎么让TLB看着大一点，换句话说如何充分利用这么小的一个空间？\n\n- 让每一页变的大一点。例如从64个4KB大小的页（共256KB数据）换为32个2MB大小的页（共64MB数据）\n- 添加一个二级TLB，可能比一级TLB大一点，但是有一点慢。大多数二级TLB是一级TLB大小的八倍，当一级TLB的PTE没有命中的话就去二级TLB去查找加载到一级TLB\n\n![](virtual-memory/mem-fast3.png)\n\n- 让硬件自动填充TLB（因为不会经过操作系统的处理）。这被称为`Hardware Page Table Walk`，由MMU来完成。\n\n下面是如何通过TLB将虚拟地址转化为物理地址的例子。\n\n![](virtual-memory/tlb-example1.png)\n\nCPU执行指令的时候，使用到了虚拟内存地址`0x00003204`，需要将虚拟地址转化为物理地址，首先去TLB查找缓存页表，这个例子中发现TLB中没有所要查找的页表入口PTE，然后就需要通过查找RAM中的页表中的PTE，找到了之后就需要将该PTE加载到TLB，然后将虚拟页编号映射到物理页编号（`0x00003->0x0006`），页内偏移直接使用，最终获取物理地址`0x0006204`。\n\n下面再看一个PTE在TLB中的例子。\n\n![](virtual-memory/tlb-example2.png)\n\n这个例子中CPU中使用虚拟地址`0x00003208`，首先通过虚拟页编号到TLB中去找，虚拟页编号`0x00003`，发现该页在TLB中，那就直接转化为物理地址。\n\n下面又是一种情况，当所查找的页不在TLB中且TLB中满时需要做什么，**需要将TLB中选取一个PTE剔除以释放空间**\n\n![](virtual-memory/tlb-example3.png)\n\n当所需要的页不在RAM中时会发生什么？CPU使用虚拟地址`0x00000860`，发现页编号`0x0000`不在TLB中，然后去RAM页表中查找，发现所需物理页在DISK中，然后就需要将DISK中数据加载到RAM中并更新RAM中的页表，然后将页表中对应的PTE加载到TLB中，将虚拟页号转换为物理页号获取物理地址。\n\n![](virtual-memory/tlb-example4.png)\n\n- 多级页表\n\n多级页表是使优化地址转换的另一方法。首先我们考虑一下页表的大小，虽然我们使用了4KB大小的页来减少页表中PTE中的数量，但对于32位大小的虚拟地址空间来说还是会有1M个PTE，每个PTE大约占4B（20位物理地址，还有其他的权限标志位等）。总共4MB。但是我们**每个程序都需要一个页表**，假设我们有**100**个程序在运行，那内存中就需要有400MB来维护各个程序的页表！还有一点，我们无法将页表换出到DISK硬盘中，因为我们需要通过页表来获取实际RAM物理地址，如果页表不在RAM中那我们就没有办法找到页表了（因为我们需要页表进行地址转换，其他设备的数据都是通过页表加载到内存并更新页表）。\n\n那怎么解决这个问题呢？\n\n我们虚拟内存的实现是通过添加一个中间件的思想实现的，那我们可不可以再添加更过的中间件来处理这个问题，答案是肯定的，使用`多级页表`。\n\n下图是一个例子。\n\n![](virtual-memory/multi-level-page-table1.png)\n\n这个例子中使用了二级页表,一级页表中存了1024个4KB的页的PTE，每个PTE中物理页编号指向的是一个二级页表，这个页表对应存储的才是真正数据对应的物理页。对于每个程序，每个二级页表有1024个PTE，一共有1024个二级页表，那么有1024x1024个PTE，刚好就是1M个PTE，和未使用多级页表中的情况是一样的。\n\n所以有了多级页表机制，我们可以把一级以下的页表换出到DISK硬盘中，因为我们可以通过一级页表来获取它，这也说明了一点我们必须要把一级页表存储在RAM中，就像下面这张图。\n\n![](virtual-memory/multi-level-page-table2.png)\n\n我们来思考一下，使用了多级页表，对于一个32位应用程序我们至少需要多大的内存空间来保存页表呢？`4KB+4KB`，因为使用了多级页表，一级页表必须存储在RAM中，因为一级页表只告诉我们二级页表的物理地址，所以我们还需要一个二级页表来获取实际的程序数据所在物理地址。一级页表有1024个PTE，每个PTE大约4B，所以一级页表是4KB，二级页表同样如此，所以总共为4KB+4KB，这比4MB好多了！\n\n\n下面是一个二级页表使用的一个例子。\n\n![](virtual-memory/multi-level-page-table3.png)\n\nCPU使用到了虚拟地址`0x00402204`，那就需要将其转换为物理地址，转换过程中将虚拟地址分为两个部分：虚拟页号和页内偏移，虚拟页号又分为一级页表编号和二级页表编号。两级页表分别使用虚拟页号的一半（10位），对于虚拟地址0x00402204，一级页表编号N1是`0000 0000 01`，二级页表编号N2是`00 0000 0010`，首先使用N1查询RAM中的一级页表得到二级页表的物理页地址（一个页刚好是4KB，二级页表的大小），如果页不在RAM中就需要将它加载到RAM中并更新一级页表，然后使用N2查询二级表获取实际数据的物理页地址，如果实际数据的内存页不在RAM中就需要加载到RAM中并更新二级页表，最终通过物理页地址和虚拟地址的页内偏移得到了最终的物理地址。\n\n小结一下：\n\n- 每个运行的程序需要一个一级页表存储在RAM中，这样可以获取低级的页表以获取实际数据的物理页。\n- 需要一个二级页表存储在RAM中，这样我们可以翻译程序的某些地址，随时切换。\n- 使用两级页表共同完成地址`VA->PA`的转换\n- 高10位地址用于索引一级页表的PTE\n- 接下来的10位用于索引二级页表的PTE\n- 我们可以置换页表中的一部分到DISK硬盘中\n\n### 虚拟内存和高速缓存Cache\n\n这一部分讨论有关TLB转译后备缓冲区和高速缓存Cache的交互问题。\n\n我们通常有两种方式来将TLB和Cache来交互：\n\n- 物理缓存（`Physical Cache`），Cache使用物理地址（比较慢，访问cache之前必须做一次TLB地址转换，假设TLB转换需要1个周期、物理地址读取Cache需要1个周期）\n\n![](virtual-memory/tlb-cache1.png)\n\n- 虚拟缓存（`Virtual Cache`），Cache使用虚拟地址直接获取缓存数据（很快，1个周期），不必进行地址转换，如果Cache没有命中才会发生地址转换。\n\n![](virtual-memory/tlb-cache2.png)\n\n对于虚拟缓存来说，两个程序不能共享虚拟缓存，因为虚拟缓存使用的是虚拟地址，虚拟内存的程序隔离机制无法起作用（因为地址没有转换），这也是虚拟缓存的一个问题。我们也可以简单地解决这个问题，方法就是不仅仅使用虚拟地址，再添加一个标志位用于区分是哪一个应用程序（比如PID）。\n\n有没有两全其美的方法，访问Cache的同时访问TLB，仍然可以使用虚拟内存的隔离机制。\n\n- 还是使用虚拟地址**VA**访问Cache，cache数据记录中有一个物理标志**PTag**，同时通过TLB将虚拟地址**VA**转换为物理地址**PA**\n- 通过物理标志**PTag（缓存数据所在的RAM物理地址）**和TLB获取的物理地址**PA**比较是不是命中\n\n这只是想法，具体实现还是有些差别，下面一步步说明。\n\n![](virtual-memory/tlb-cache3.png)\n\n这种访问我们称之为`虚索引实标签缓存（Virtually Indexed,Physically Tagged）`，这是当今处理器中最常用的一级缓存。\n\n> 这种缓存利用了页面技术的一个特征，即虚拟地址和物理地址享有相同的页内偏移值（page offset）。(Wikipedia)\n\n\n- Cache通过页内偏移（虚拟和物理是相通的）索引\n- 用物理页面号做标志\n\n这样我们既实现了使用虚拟地址访问Cache（快速，不用地址转换），又实现了虚拟内存隔离保护机制（物理地址做标志）。\n\n> 这种技术的一个缺点是，在使用直接匹配缓存的前提下，缓存大小不能超过页面大小，否则页面偏移范围就不足以覆盖缓存索引范围。这个弊端可以通过提高组相联路数来改善。(Wikipedia)**（待完善）**\n\n\n总结一下：\n- TLB地址转换和查询Cache同时进行\n  - 使用虚拟页号进行地址TLB转换\n  - 使用虚拟地址偏移量进行cache索引\n  - 通过TLB获取了物理页号\n  - 通过Cache获取了物理标志（物理页号）\n- TLB转换得到的物理页号和物理标志`PA Tag`相等说明缓存命中。\n\n这种方式快速的原因是地址转换和cache索引同时进行，安全的原因是Cache只有在物理地址匹配的情况下才会命中。\n![](virtual-memory/tlb-cache4.png)\n\n\n### 总结\n\n***以上便是对虚拟内存的学习和总结，可能还有一些地方会有错误或者知识点漏洞，希望读者可以热情的提出[issue](https://github.com/ScarboroughCoral/OS-Notes/issues/new)。如果还有不理解的地方可以查阅文章末尾我所参考的一些资料，谢谢阅读！***\n\n### 参考资料\n\n#### 引用作品\n\n- David Black-Schaffer.(2014).[Virtual Memory](https://www.youtube.com/watch?v=qcBIvnQt0Bw&index=1&list=PLiwt1iVUib9s2Uo5BeYmwkDFUh70fJPxX)\n\n#### 引用文献\n- Aniruddha-Tapas.(2014).[Operating Systems Notes](https://github.com/Aniruddha-Tapas/Operating-Systems-Notes)\n- wikipedia.(2018).[CPU Cache](https://zh.wikipedia.org/wiki/CPU%E7%BC%93%E5%AD%98)\n\n#### 参阅书目\n","source":"_posts/virtual-memory.md","raw":"---\ntitle: 通用操作系统原理之虚拟内存\ndate: 2018-12-09 12:51:13\ntop: true\ntags:\n- Operating System\ncategories: \n- Computer Science\n- Operating System\n\n---\n\n\n{% note default %}\n理论驱动实践，实践驱动理论。\n{% endnote %}\n\n<!-- more -->\n\n### 虚拟内存问题概述\n\n如果你了解过一点虚拟内存的知识，这篇笔记可能会让你更深入的理解。\n\n- 三个内存相关的问题\n  - 没有足够的内存\n  - 地址空间碎片化\n  - 地址冲突\n- 什么是虚拟内存\n  - 中间件\n  - 如何解决三个内存问题\n  - 页表和转换\n- 如何实现虚拟内存\n  - 怎么让转换变得更快\n- 虚拟内存和高速缓存Cache\n\n\n### 三个内存相关的问题\n\n- 没有足够的内存怎么办\n\nMIPS提供给每个应用程序32位的地址空间，每个应用程序可以访问这32个地址空间中的任意一个字节。最早的MIPS架构是32位，最新的版本已经变成64位。也就是说你可以使用2^32bytes也就是4GB，这只是理论上，实际可能会缩小到2GB可用空间。\n\n如果你的物理内存（内存条）是1GB该怎么办呢？就像下面这个图，可寻址空间大于实际物理内存大小。\n\n![](virtual-memory/vm-problem1.png)\n\n- 程序如何分配内存（对于碎片内存）\n\n就像下面这张图，首先内存加载程序p1和p2，开始3G空间被占用，剩余1G空间剩余，这时候p1退出，p3想使用内存，虽然还有2G剩余空间，但空间是碎片化的，这也是一个问题。这被称作**Memory fragmentation**`内存碎片化`。\n\n![](virtual-memory/vm-problem2.png)\n\n- 如何保证进程安全（进程之间地址不相互访问）\n\n就像下面这张图，两个程序同时访问`1024`这个地址的空间，内存中的信息会不会相互覆盖？\n\n![](virtual-memory/vm-problem3.png)\n\n总结一下，如果所有程序都有相同的32位的寻址空间，那么可能导致以下问题：\n* 如果实际物理能存大小小于4GB电脑可能会崩溃\n* 如果运行多个程序可能会用光所有内存，这不是真正的用光而是碎片化的内存无法真正利用，这种碎片化依赖于我们不同程序的运行次序\n* 不同的进程之间的数据可能会相互覆盖破坏，因为有相同的寻址地址\n\n那么如何解决？\n\n问题的关键在于**所有的程序有相同的寻址空间**，那么我们可不可以有属于自己的**虚拟内存**？如果可以的话，我们可以\n- 将程序的内存空间和物理内存之间做一个映射（这使得我们使用物理内存RAM变的更加灵活）\n- 当程序用光的时候，我们甚至可以将程序移动到硬盘\n\n### 什么是虚拟内存\n\n#### 中间件\n\n虚拟内存是一层“中间组件”，虚拟内存的想法来自于一句话：\n\n> Any problem in computer science can be solved by adding indirection.\n任何计算机问题都可以通过添加一个中间件来解决。\n\n如果没有虚拟内存这一层中间件，程序寻址空间将和实际物理内存相同。例如寻址空间大小大于实际RAM大小，如果你访问地址2024，得到的结果可能和访问地址24相同（因为地址越界最高位失效）。\n\n*虚拟内存的作用就是将程序地址空间做一层映射映射到实际RAM地址。*\n\n如下图所示：\n\n![](virtual-memory/whatis-vm1.png)\n\n#### 如何解决三个内存问题\n\n- 没有足够的内存\n将一部分程序地址空间映射到硬盘，我们需要他的时候只需要将这一部分加载到内存中即可。内存中的暂时不使用的程序（比如Program0）可以将其放到硬盘中，这个过程叫做`Page Out`，即内存页换出，并更新映射，然后当新程序（P3）来了就可以映射到内存中原来旧程序（P0）部分。\n\n![](virtual-memory/not-enough-memory.png)\n\n- 碎片内存使用\n\n这就是前面提到过的问题，如何充分利用程序退出后碎片化的内存？\n有了前面提及的映射，这个就比较容易解决了，**我们可以将地址空间按照任意方式映射到实际物理内存RAM**\n\n![](virtual-memory/memory-hole.png)\n\n\n- 进程安全（进程之间不相互访问）\n\n进程之间的内存如何能够独立、隔离（isolate）出来呢？例如同时访问`1024`的地址，两个程序如何能保证不是访问的实际物理内存中的同一个区域呢？\n\n通过映射方式我们可以想出来，**只需要保证不同程序的相同虚拟地址映射到不同的物理地址就可以了。**\n\n![](virtual-memory/program-secure.png)\n\n这样一来，因为每个程序都有自己的地址空间，那么他们不可能访问其他程序的数据，这非常的安全和可靠！\n\n这也是有缺点的，当两个程序合作的时候，如何共享内存呢？**只需要将两个程序各自的虚拟地址空间拿出一部分映射到相同的物理地址空间**。\n\n![](virtual-memory/memory-share.png)\n\n#### 页表和转换\n前面一直提到的映射就是页表的部分，页表所做的功能就是转换，`从VA（Virtual Address）虚拟地址转换为PA（Physical Address）物理地址`。页表映射的单位是一个`页`。\n\n那程序是如何访问内存的呢？\n- CPU执行使用虚拟地址。\n- MMU将虚拟地址转换成物理地址\n- （可选）如果转换过程中发现映射表中没有物理内存，那么操作系统就将它从硬盘加载到内存并修改映射表\n\n![](virtual-memory/vm-work1.png)\n\n- 通过物理地址读取RAM并将数据返还给程序。\n\n![](virtual-memory/vm-work2.png)\n\n##### 页表\n\n页表保存着VA虚拟地址到PA物理地址的映射方式。\n\n下面一步一步说明页表的构建过程，从有问题的页表到一个臻于完美的页表，这可能是现代计算机操作系统所利用的机制。\n\n既然页表保存着虚拟地址到物理地址的映射，那么页表就需要保存每一个虚拟地址到每一个物理地址的映射，我们称每一条记录为页表入口`Page Table Entry (PTE)`。如果是这样的话，那需要多大的页表？**结合下图：**如果是32位地址空间，每个字就需要1个PTE，这里一个字是32位，也就是4个字节，所以每4个大小也就是2位的地址空间就需要1个PTE，所以总共需要2^30个PTE。又因为每个PTE存储的是一个映射，由于虚拟地址是连续的可以只用偏移地址来表示，只需要存32位的物理地址，所以总共需要2^30x32b=4GB个大小。这说明1个4GB大小的RAM我们就需要拿出全部容量来存储页表，而且这没有考虑每个程序都需要一个页表。如果你没有明白这个计算公式，你仅需要知道如果这样构造页表所需容量太大，需要改造！\n\n![](virtual-memory/page-table1.png)\n\n那么如何改造呢？以上情况的映射是1个字对应一个PTE页表入口，我们称这种情况为`细粒度映射`，那我们可不可以使用`粗粒度映射`呢？就像这个图一样：\n\n![](virtual-memory/page-table2.png)\n\n这个图中，我们将每4Kb大小的地址空间做一个PTE，我们称之为`4KB Pages`，因为每个RAM按字节计量，或者你可以看为1K个字大小的页。这样我们就减少了映射也就是PTE的个数。这4KB大小的页映射的内部是连续的，如下图：\n\n![](virtual-memory/page-table3.png)\n\n有了以上改进，我们有了更少的PTE映射个数，但是我们页降低了使用RAM的灵活性，因为我们每次需要移动一个页（4KB）。\n\n现代计算机系统中，比较典型的就是4KB Pages（1024 words per page，每一页1024个字）。\n\n##### 地址转换\n\n我们需要将虚拟地址转换为物理地址。\n\n假设我们使用的是4KB Pages，我们有32位虚拟地址，28位物理地址，如下图\n\n![](virtual-memory/addr-trans1.png)\n\n那我们4KB大小的页内部没有做映射，这一部分如何映射呢？解决办法就是使用`偏移量offset`，如下图\n\n![](virtual-memory/addr-trans2.png)\n\n我们将一个虚拟地址转换为物理地址，虚拟地址的pagenumber部分通过页表转换为实际物理地址的pagenumber部分，虚拟地址的offset部分直接作为物理地址的offset部分。\n\n![](virtual-memory/addr-trans3.png)\n\n下面这个例子，32位虚拟地址，28位物理地址，4KB大小的页，所以需要12位offset。当虚拟地址为**0x00003204**的时候，将虚拟地址分为虚拟页编号（**0x00003**）、偏移量（**0x204**），offset直接使用，所以物理页内偏移量为**0x204**，虚拟页编号通过查页表，得到物理页编号为**0x0006**。所以得到的物理地址为**0x0006204**\n\n![](virtual-memory/addr-trans4.png)\n\n当然，如果查页表的时候可能会产生`page fault`，即所需要的内容没有在RAM中，如图中的**0x00000**，这就需要发生中断，加载内容到RAM，然后修改页表，返回到内存上次执行的位置，这时候就会找到所对应的物理页编号了。\n\n![](virtual-memory/addr-trans5.png)\n\n\n详细说一下当所需要的页不在内存中时会发生什么：\n\n- 页表入口PTE告诉你所需要的页在硬盘中\n- 硬件（CPU）生成一个Page Fault页错误\n- 硬件跳到Page Fault Handler页错误处理程序来处理\n  - 操作系统选择RAM中的一个页剔除写到硬盘中\n  - 如果是需要读取的页是脏页，就需要先将其写回到硬盘再读取\n  - 操作系统读取所需要的页到RAM\n  - 操作系统修改页表的映射\n- 操作系统跳转到发生页错误的地方开始执行（这一次就不会产生页错误了）\n\n> 脏页是指页中的数据被改变了，如果没有改变，那就没必要写回到硬盘了。\n\n> 脏页－linux内核中的概念，因为硬盘的读写速度远赶不上内存的速度，系统就把读写比较频繁的数据事先放到内存中，以提高读写速度，这就叫高速缓存，linux是以页作为高速缓存的单位，当进程修改了高速缓存里的数据时，该页就被内核标记为脏页，内核将会在合适的时间把脏页的数据写到磁盘中去，以保持高速缓存中的数据和磁盘中的数据是一致的。（来自百度百科）\n\n那么页不在内存中时，这个过程需要多长时间呢？大约需要80 million 周期，这是采样自现代CPU，其中硬盘的读取占了大多数时间。***页错误可能是计算机中最慢的操作了。***\n\n![](virtual-memory/addr-trans6.png)\n\n既然这么慢，那为什么还要用它呢？\n\n优点：\n- 你用光了内存计算机不会发生崩溃\n缺点：\n- 如果发生页错误会很慢\n\n但是现代计算机还是使用内存页机制。如果你有非常大、足够大的RAM就不会发生页置换，这就是我们为什么认为内存越大计算机就变的越快的原因。\n\n足够大的内存这是不可能的，不过一些现代操作系统不会发生页置换：\n\n- IOS：如果你用了过多的内存，系统会杀死你的进程\n- OS X 10.9：系统会先压缩你的程序，只有不得不置换的时候才会发生\n\n> 这可能就是为什么在国内Apple比较受欢迎的原因吧，o(*￣︶￣*)o\n\n\n每个程序都有自己的页表，我们可以把每个程序的虚拟地址映射到独一无二的内存中，这是为了程序之间不会没有预测的访问数据。\n\n![](virtual-memory/mem-protection1.png)\n\n这说明每一个程序都有自己的32位虚拟地址空间，下面是Linux虚拟内存空间的使用情况。\n\n![](virtual-memory/mem-protection2.png)\n\n1GB预留给linux内核作为内核区，栈区可以向下扩展到一个固定的最大值，Libraries区用于一些共享库的放置，堆区用于存储动态申请的内存向上扩展，接下来是data数据区用于存储静态变量，代码区用于放置程序编译之后的`二进制代码`。这之间有一些随机的偏移，这提高了安全性因为你不知道数据和代码区具体在哪儿。\n\n这是一个具体的例子。\n\n![](virtual-memory/mem-protection3.png)\n\n每个程序都有自己的虚拟地址空间，都有自己的页表映射方式保证了程序之间的隔离，因为不会随意相互访问内存，映射到内存的相同区域保证了程序之间的可合作性。\n\n看一看实际如何使用独立的页表映射方式。这儿有两个程序，CPU都要执行这段指令`ld R2,2(R0)`，就是将内存地址2的数据加载到R2寄存器中，这里的内存地址是虚拟地址，因此需要通过查页表的方式来查询实际物理内存地址，然后取出数据。因为两个程序有不同的页表，执行指令时取得的虚拟地址2对应的物理地址一般不同或者相同（共享，这只需要将不同地址的虚拟地址映射到相同的RAM物理地址即可），因此最终访问的RAM地址也是不同的。CPU执行上下文切换切换进程时会将进程资源一起切换，这个切换就包含页表的切换。就像下面这张图。\n\n![](virtual-memory/mem-protection4.png)\n### 如何实现虚拟内存\n\n如何让虚拟内存有作用呢？因为虚拟内存使得内存使用更加灵活，但也有可能降低计算机系统的效率，我们只需要让虚拟内存机制达到尽可能大的效率即可。\n\n虚拟内存的使用过程中需要做什么事情？\n\n- 访问内存中的页表\n- 通过查询页表将虚拟地址转换为物理地址\n- 访问RAM相应物理内存中的数据\n\n这个过程中访问了内存2次，访问内存有很多的工作要做，要了解到我们平均每条指令就需要访问1.33次内存（4/3，每三条指令访问4次内存），这部分显得很低效，这是优化的部分之一！\n\n使用虚拟内存有优点，因为有“无限制”的程序和内存（每个程序都有地址空间，内存页可以换入换出），可以保护程序内存实现隔离，使用内存变得很灵活；但使用虚拟内存也会带来很昂贵的资源消耗，每个内存操作都需要查询页表，而且需要访问两次内存（1次页表访问、1次内存物理地址（访问RAM数据）访问）\n\n\n#### 如何更快地完成虚拟地址到物理地址的转换\n\n\n- TLB\n因为页表的访问是必须的，所以不可能减少这一部分工作。那我们可不可以通过软件来实现？我们知道这又增加了指令条数，也就增加了内存访问次数。那可不可以通过硬件来实现？添加一个缓存Cache。我们称这个`Page Table Cache`为`Translation Lookaside Buffer(TLB)`。他的工作机制如下图\n\n![](virtual-memory/mem-fast1.png)\n\n最初，通过访问RAM中的页表来将虚拟地址转换为物理地址，这是非常慢的操作。\n\n![](virtual-memory/mem-fast2.png)\n\n我们通过访问TLB缓存来获取虚拟地址对应的物理地址这是十分迅速的，因为访问速度比RAM快，这非常像一个Cache。如果想让TLB非常迅速，TLB就必须尽可能小。我们通常将TLB分离成指令页缓存（iTLB）和数据页缓存（dTLB），比如现代intel所生产的，每一页4KB，一共有64个页表入口PTE，或者是每一页2MB，32个PTE，都是4路关联（4路组关联，区别于全关联）\n\n全部页表有1M个PTE，但是TLB里只有64个，这个差别很多大，这样访问页的时候如果在TLB里那就会变得很快。\n\n- 页在RAM中\n  - PTE在TLB\n    - 最快\n    - 1个周期用于地址转换，然后访问RAM或cache中的数据\n  - PTE不在TLB\n    - 较慢\n    - 20-1000个周期从RAM中加载PTE到TLB，然后访问RAM数据\n- 页不在RAM\n  - PTE在TLB（几乎不可能，因为最近不经常使用的内存页被置换到硬盘，所以TLB在这段时间内也被置换了）\n    - 很慢\n    - 大约80M周期从硬盘加载到内存\n  - PTE不在TLB\n    - 比很慢还慢一点（o(*￣︶￣*)o）\n    - 20-1000个周期地址转换，这时知道内存页在硬盘\n    - 大约80M周期从硬盘加载到内存\n\nTLB非常的小，怎么让TLB看着大一点，换句话说如何充分利用这么小的一个空间？\n\n- 让每一页变的大一点。例如从64个4KB大小的页（共256KB数据）换为32个2MB大小的页（共64MB数据）\n- 添加一个二级TLB，可能比一级TLB大一点，但是有一点慢。大多数二级TLB是一级TLB大小的八倍，当一级TLB的PTE没有命中的话就去二级TLB去查找加载到一级TLB\n\n![](virtual-memory/mem-fast3.png)\n\n- 让硬件自动填充TLB（因为不会经过操作系统的处理）。这被称为`Hardware Page Table Walk`，由MMU来完成。\n\n下面是如何通过TLB将虚拟地址转化为物理地址的例子。\n\n![](virtual-memory/tlb-example1.png)\n\nCPU执行指令的时候，使用到了虚拟内存地址`0x00003204`，需要将虚拟地址转化为物理地址，首先去TLB查找缓存页表，这个例子中发现TLB中没有所要查找的页表入口PTE，然后就需要通过查找RAM中的页表中的PTE，找到了之后就需要将该PTE加载到TLB，然后将虚拟页编号映射到物理页编号（`0x00003->0x0006`），页内偏移直接使用，最终获取物理地址`0x0006204`。\n\n下面再看一个PTE在TLB中的例子。\n\n![](virtual-memory/tlb-example2.png)\n\n这个例子中CPU中使用虚拟地址`0x00003208`，首先通过虚拟页编号到TLB中去找，虚拟页编号`0x00003`，发现该页在TLB中，那就直接转化为物理地址。\n\n下面又是一种情况，当所查找的页不在TLB中且TLB中满时需要做什么，**需要将TLB中选取一个PTE剔除以释放空间**\n\n![](virtual-memory/tlb-example3.png)\n\n当所需要的页不在RAM中时会发生什么？CPU使用虚拟地址`0x00000860`，发现页编号`0x0000`不在TLB中，然后去RAM页表中查找，发现所需物理页在DISK中，然后就需要将DISK中数据加载到RAM中并更新RAM中的页表，然后将页表中对应的PTE加载到TLB中，将虚拟页号转换为物理页号获取物理地址。\n\n![](virtual-memory/tlb-example4.png)\n\n- 多级页表\n\n多级页表是使优化地址转换的另一方法。首先我们考虑一下页表的大小，虽然我们使用了4KB大小的页来减少页表中PTE中的数量，但对于32位大小的虚拟地址空间来说还是会有1M个PTE，每个PTE大约占4B（20位物理地址，还有其他的权限标志位等）。总共4MB。但是我们**每个程序都需要一个页表**，假设我们有**100**个程序在运行，那内存中就需要有400MB来维护各个程序的页表！还有一点，我们无法将页表换出到DISK硬盘中，因为我们需要通过页表来获取实际RAM物理地址，如果页表不在RAM中那我们就没有办法找到页表了（因为我们需要页表进行地址转换，其他设备的数据都是通过页表加载到内存并更新页表）。\n\n那怎么解决这个问题呢？\n\n我们虚拟内存的实现是通过添加一个中间件的思想实现的，那我们可不可以再添加更过的中间件来处理这个问题，答案是肯定的，使用`多级页表`。\n\n下图是一个例子。\n\n![](virtual-memory/multi-level-page-table1.png)\n\n这个例子中使用了二级页表,一级页表中存了1024个4KB的页的PTE，每个PTE中物理页编号指向的是一个二级页表，这个页表对应存储的才是真正数据对应的物理页。对于每个程序，每个二级页表有1024个PTE，一共有1024个二级页表，那么有1024x1024个PTE，刚好就是1M个PTE，和未使用多级页表中的情况是一样的。\n\n所以有了多级页表机制，我们可以把一级以下的页表换出到DISK硬盘中，因为我们可以通过一级页表来获取它，这也说明了一点我们必须要把一级页表存储在RAM中，就像下面这张图。\n\n![](virtual-memory/multi-level-page-table2.png)\n\n我们来思考一下，使用了多级页表，对于一个32位应用程序我们至少需要多大的内存空间来保存页表呢？`4KB+4KB`，因为使用了多级页表，一级页表必须存储在RAM中，因为一级页表只告诉我们二级页表的物理地址，所以我们还需要一个二级页表来获取实际的程序数据所在物理地址。一级页表有1024个PTE，每个PTE大约4B，所以一级页表是4KB，二级页表同样如此，所以总共为4KB+4KB，这比4MB好多了！\n\n\n下面是一个二级页表使用的一个例子。\n\n![](virtual-memory/multi-level-page-table3.png)\n\nCPU使用到了虚拟地址`0x00402204`，那就需要将其转换为物理地址，转换过程中将虚拟地址分为两个部分：虚拟页号和页内偏移，虚拟页号又分为一级页表编号和二级页表编号。两级页表分别使用虚拟页号的一半（10位），对于虚拟地址0x00402204，一级页表编号N1是`0000 0000 01`，二级页表编号N2是`00 0000 0010`，首先使用N1查询RAM中的一级页表得到二级页表的物理页地址（一个页刚好是4KB，二级页表的大小），如果页不在RAM中就需要将它加载到RAM中并更新一级页表，然后使用N2查询二级表获取实际数据的物理页地址，如果实际数据的内存页不在RAM中就需要加载到RAM中并更新二级页表，最终通过物理页地址和虚拟地址的页内偏移得到了最终的物理地址。\n\n小结一下：\n\n- 每个运行的程序需要一个一级页表存储在RAM中，这样可以获取低级的页表以获取实际数据的物理页。\n- 需要一个二级页表存储在RAM中，这样我们可以翻译程序的某些地址，随时切换。\n- 使用两级页表共同完成地址`VA->PA`的转换\n- 高10位地址用于索引一级页表的PTE\n- 接下来的10位用于索引二级页表的PTE\n- 我们可以置换页表中的一部分到DISK硬盘中\n\n### 虚拟内存和高速缓存Cache\n\n这一部分讨论有关TLB转译后备缓冲区和高速缓存Cache的交互问题。\n\n我们通常有两种方式来将TLB和Cache来交互：\n\n- 物理缓存（`Physical Cache`），Cache使用物理地址（比较慢，访问cache之前必须做一次TLB地址转换，假设TLB转换需要1个周期、物理地址读取Cache需要1个周期）\n\n![](virtual-memory/tlb-cache1.png)\n\n- 虚拟缓存（`Virtual Cache`），Cache使用虚拟地址直接获取缓存数据（很快，1个周期），不必进行地址转换，如果Cache没有命中才会发生地址转换。\n\n![](virtual-memory/tlb-cache2.png)\n\n对于虚拟缓存来说，两个程序不能共享虚拟缓存，因为虚拟缓存使用的是虚拟地址，虚拟内存的程序隔离机制无法起作用（因为地址没有转换），这也是虚拟缓存的一个问题。我们也可以简单地解决这个问题，方法就是不仅仅使用虚拟地址，再添加一个标志位用于区分是哪一个应用程序（比如PID）。\n\n有没有两全其美的方法，访问Cache的同时访问TLB，仍然可以使用虚拟内存的隔离机制。\n\n- 还是使用虚拟地址**VA**访问Cache，cache数据记录中有一个物理标志**PTag**，同时通过TLB将虚拟地址**VA**转换为物理地址**PA**\n- 通过物理标志**PTag（缓存数据所在的RAM物理地址）**和TLB获取的物理地址**PA**比较是不是命中\n\n这只是想法，具体实现还是有些差别，下面一步步说明。\n\n![](virtual-memory/tlb-cache3.png)\n\n这种访问我们称之为`虚索引实标签缓存（Virtually Indexed,Physically Tagged）`，这是当今处理器中最常用的一级缓存。\n\n> 这种缓存利用了页面技术的一个特征，即虚拟地址和物理地址享有相同的页内偏移值（page offset）。(Wikipedia)\n\n\n- Cache通过页内偏移（虚拟和物理是相通的）索引\n- 用物理页面号做标志\n\n这样我们既实现了使用虚拟地址访问Cache（快速，不用地址转换），又实现了虚拟内存隔离保护机制（物理地址做标志）。\n\n> 这种技术的一个缺点是，在使用直接匹配缓存的前提下，缓存大小不能超过页面大小，否则页面偏移范围就不足以覆盖缓存索引范围。这个弊端可以通过提高组相联路数来改善。(Wikipedia)**（待完善）**\n\n\n总结一下：\n- TLB地址转换和查询Cache同时进行\n  - 使用虚拟页号进行地址TLB转换\n  - 使用虚拟地址偏移量进行cache索引\n  - 通过TLB获取了物理页号\n  - 通过Cache获取了物理标志（物理页号）\n- TLB转换得到的物理页号和物理标志`PA Tag`相等说明缓存命中。\n\n这种方式快速的原因是地址转换和cache索引同时进行，安全的原因是Cache只有在物理地址匹配的情况下才会命中。\n![](virtual-memory/tlb-cache4.png)\n\n\n### 总结\n\n***以上便是对虚拟内存的学习和总结，可能还有一些地方会有错误或者知识点漏洞，希望读者可以热情的提出[issue](https://github.com/ScarboroughCoral/OS-Notes/issues/new)。如果还有不理解的地方可以查阅文章末尾我所参考的一些资料，谢谢阅读！***\n\n### 参考资料\n\n#### 引用作品\n\n- David Black-Schaffer.(2014).[Virtual Memory](https://www.youtube.com/watch?v=qcBIvnQt0Bw&index=1&list=PLiwt1iVUib9s2Uo5BeYmwkDFUh70fJPxX)\n\n#### 引用文献\n- Aniruddha-Tapas.(2014).[Operating Systems Notes](https://github.com/Aniruddha-Tapas/Operating-Systems-Notes)\n- wikipedia.(2018).[CPU Cache](https://zh.wikipedia.org/wiki/CPU%E7%BC%93%E5%AD%98)\n\n#### 参阅书目\n","slug":"virtual-memory","published":1,"updated":"2022-01-06T04:09:12.503Z","_id":"cksq5v7o600bbn0pu0227fxnx","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note default\"><p>理论驱动实践，实践驱动理论。</p>\n</div>\n\n<span id=\"more\"></span>\n\n<h3 id=\"虚拟内存问题概述\"><a href=\"#虚拟内存问题概述\" class=\"headerlink\" title=\"虚拟内存问题概述\"></a>虚拟内存问题概述</h3><p>如果你了解过一点虚拟内存的知识，这篇笔记可能会让你更深入的理解。</p>\n<ul>\n<li>三个内存相关的问题<ul>\n<li>没有足够的内存</li>\n<li>地址空间碎片化</li>\n<li>地址冲突</li>\n</ul>\n</li>\n<li>什么是虚拟内存<ul>\n<li>中间件</li>\n<li>如何解决三个内存问题</li>\n<li>页表和转换</li>\n</ul>\n</li>\n<li>如何实现虚拟内存<ul>\n<li>怎么让转换变得更快</li>\n</ul>\n</li>\n<li>虚拟内存和高速缓存Cache</li>\n</ul>\n<h3 id=\"三个内存相关的问题\"><a href=\"#三个内存相关的问题\" class=\"headerlink\" title=\"三个内存相关的问题\"></a>三个内存相关的问题</h3><ul>\n<li>没有足够的内存怎么办</li>\n</ul>\n<p>MIPS提供给每个应用程序32位的地址空间，每个应用程序可以访问这32个地址空间中的任意一个字节。最早的MIPS架构是32位，最新的版本已经变成64位。也就是说你可以使用2^32bytes也就是4GB，这只是理论上，实际可能会缩小到2GB可用空间。</p>\n<p>如果你的物理内存（内存条）是1GB该怎么办呢？就像下面这个图，可寻址空间大于实际物理内存大小。</p>\n<p><img data-src=\"virtual-memory/vm-problem1.png\"></p>\n<ul>\n<li>程序如何分配内存（对于碎片内存）</li>\n</ul>\n<p>就像下面这张图，首先内存加载程序p1和p2，开始3G空间被占用，剩余1G空间剩余，这时候p1退出，p3想使用内存，虽然还有2G剩余空间，但空间是碎片化的，这也是一个问题。这被称作<strong>Memory fragmentation</strong><code>内存碎片化</code>。</p>\n<p><img data-src=\"virtual-memory/vm-problem2.png\"></p>\n<ul>\n<li>如何保证进程安全（进程之间地址不相互访问）</li>\n</ul>\n<p>就像下面这张图，两个程序同时访问<code>1024</code>这个地址的空间，内存中的信息会不会相互覆盖？</p>\n<p><img data-src=\"virtual-memory/vm-problem3.png\"></p>\n<p>总结一下，如果所有程序都有相同的32位的寻址空间，那么可能导致以下问题：</p>\n<ul>\n<li>如果实际物理能存大小小于4GB电脑可能会崩溃</li>\n<li>如果运行多个程序可能会用光所有内存，这不是真正的用光而是碎片化的内存无法真正利用，这种碎片化依赖于我们不同程序的运行次序</li>\n<li>不同的进程之间的数据可能会相互覆盖破坏，因为有相同的寻址地址</li>\n</ul>\n<p>那么如何解决？</p>\n<p>问题的关键在于<strong>所有的程序有相同的寻址空间</strong>，那么我们可不可以有属于自己的<strong>虚拟内存</strong>？如果可以的话，我们可以</p>\n<ul>\n<li>将程序的内存空间和物理内存之间做一个映射（这使得我们使用物理内存RAM变的更加灵活）</li>\n<li>当程序用光的时候，我们甚至可以将程序移动到硬盘</li>\n</ul>\n<h3 id=\"什么是虚拟内存\"><a href=\"#什么是虚拟内存\" class=\"headerlink\" title=\"什么是虚拟内存\"></a>什么是虚拟内存</h3><h4 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h4><p>虚拟内存是一层“中间组件”，虚拟内存的想法来自于一句话：</p>\n<blockquote>\n<p>Any problem in computer science can be solved by adding indirection.<br>任何计算机问题都可以通过添加一个中间件来解决。</p>\n</blockquote>\n<p>如果没有虚拟内存这一层中间件，程序寻址空间将和实际物理内存相同。例如寻址空间大小大于实际RAM大小，如果你访问地址2024，得到的结果可能和访问地址24相同（因为地址越界最高位失效）。</p>\n<p><em>虚拟内存的作用就是将程序地址空间做一层映射映射到实际RAM地址。</em></p>\n<p>如下图所示：</p>\n<p><img data-src=\"virtual-memory/whatis-vm1.png\"></p>\n<h4 id=\"如何解决三个内存问题\"><a href=\"#如何解决三个内存问题\" class=\"headerlink\" title=\"如何解决三个内存问题\"></a>如何解决三个内存问题</h4><ul>\n<li>没有足够的内存<br>将一部分程序地址空间映射到硬盘，我们需要他的时候只需要将这一部分加载到内存中即可。内存中的暂时不使用的程序（比如Program0）可以将其放到硬盘中，这个过程叫做<code>Page Out</code>，即内存页换出，并更新映射，然后当新程序（P3）来了就可以映射到内存中原来旧程序（P0）部分。</li>\n</ul>\n<p><img data-src=\"virtual-memory/not-enough-memory.png\"></p>\n<ul>\n<li>碎片内存使用</li>\n</ul>\n<p>这就是前面提到过的问题，如何充分利用程序退出后碎片化的内存？<br>有了前面提及的映射，这个就比较容易解决了，<strong>我们可以将地址空间按照任意方式映射到实际物理内存RAM</strong></p>\n<p><img data-src=\"virtual-memory/memory-hole.png\"></p>\n<ul>\n<li>进程安全（进程之间不相互访问）</li>\n</ul>\n<p>进程之间的内存如何能够独立、隔离（isolate）出来呢？例如同时访问<code>1024</code>的地址，两个程序如何能保证不是访问的实际物理内存中的同一个区域呢？</p>\n<p>通过映射方式我们可以想出来，<strong>只需要保证不同程序的相同虚拟地址映射到不同的物理地址就可以了。</strong></p>\n<p><img data-src=\"virtual-memory/program-secure.png\"></p>\n<p>这样一来，因为每个程序都有自己的地址空间，那么他们不可能访问其他程序的数据，这非常的安全和可靠！</p>\n<p>这也是有缺点的，当两个程序合作的时候，如何共享内存呢？<strong>只需要将两个程序各自的虚拟地址空间拿出一部分映射到相同的物理地址空间</strong>。</p>\n<p><img data-src=\"virtual-memory/memory-share.png\"></p>\n<h4 id=\"页表和转换\"><a href=\"#页表和转换\" class=\"headerlink\" title=\"页表和转换\"></a>页表和转换</h4><p>前面一直提到的映射就是页表的部分，页表所做的功能就是转换，<code>从VA（Virtual Address）虚拟地址转换为PA（Physical Address）物理地址</code>。页表映射的单位是一个<code>页</code>。</p>\n<p>那程序是如何访问内存的呢？</p>\n<ul>\n<li>CPU执行使用虚拟地址。</li>\n<li>MMU将虚拟地址转换成物理地址</li>\n<li>（可选）如果转换过程中发现映射表中没有物理内存，那么操作系统就将它从硬盘加载到内存并修改映射表</li>\n</ul>\n<p><img data-src=\"virtual-memory/vm-work1.png\"></p>\n<ul>\n<li>通过物理地址读取RAM并将数据返还给程序。</li>\n</ul>\n<p><img data-src=\"virtual-memory/vm-work2.png\"></p>\n<h5 id=\"页表\"><a href=\"#页表\" class=\"headerlink\" title=\"页表\"></a>页表</h5><p>页表保存着VA虚拟地址到PA物理地址的映射方式。</p>\n<p>下面一步一步说明页表的构建过程，从有问题的页表到一个臻于完美的页表，这可能是现代计算机操作系统所利用的机制。</p>\n<p>既然页表保存着虚拟地址到物理地址的映射，那么页表就需要保存每一个虚拟地址到每一个物理地址的映射，我们称每一条记录为页表入口<code>Page Table Entry (PTE)</code>。如果是这样的话，那需要多大的页表？<strong>结合下图：</strong>如果是32位地址空间，每个字就需要1个PTE，这里一个字是32位，也就是4个字节，所以每4个大小也就是2位的地址空间就需要1个PTE，所以总共需要2^30个PTE。又因为每个PTE存储的是一个映射，由于虚拟地址是连续的可以只用偏移地址来表示，只需要存32位的物理地址，所以总共需要2^30x32b=4GB个大小。这说明1个4GB大小的RAM我们就需要拿出全部容量来存储页表，而且这没有考虑每个程序都需要一个页表。如果你没有明白这个计算公式，你仅需要知道如果这样构造页表所需容量太大，需要改造！</p>\n<p><img data-src=\"virtual-memory/page-table1.png\"></p>\n<p>那么如何改造呢？以上情况的映射是1个字对应一个PTE页表入口，我们称这种情况为<code>细粒度映射</code>，那我们可不可以使用<code>粗粒度映射</code>呢？就像这个图一样：</p>\n<p><img data-src=\"virtual-memory/page-table2.png\"></p>\n<p>这个图中，我们将每4Kb大小的地址空间做一个PTE，我们称之为<code>4KB Pages</code>，因为每个RAM按字节计量，或者你可以看为1K个字大小的页。这样我们就减少了映射也就是PTE的个数。这4KB大小的页映射的内部是连续的，如下图：</p>\n<p><img data-src=\"virtual-memory/page-table3.png\"></p>\n<p>有了以上改进，我们有了更少的PTE映射个数，但是我们页降低了使用RAM的灵活性，因为我们每次需要移动一个页（4KB）。</p>\n<p>现代计算机系统中，比较典型的就是4KB Pages（1024 words per page，每一页1024个字）。</p>\n<h5 id=\"地址转换\"><a href=\"#地址转换\" class=\"headerlink\" title=\"地址转换\"></a>地址转换</h5><p>我们需要将虚拟地址转换为物理地址。</p>\n<p>假设我们使用的是4KB Pages，我们有32位虚拟地址，28位物理地址，如下图</p>\n<p><img data-src=\"virtual-memory/addr-trans1.png\"></p>\n<p>那我们4KB大小的页内部没有做映射，这一部分如何映射呢？解决办法就是使用<code>偏移量offset</code>，如下图</p>\n<p><img data-src=\"virtual-memory/addr-trans2.png\"></p>\n<p>我们将一个虚拟地址转换为物理地址，虚拟地址的pagenumber部分通过页表转换为实际物理地址的pagenumber部分，虚拟地址的offset部分直接作为物理地址的offset部分。</p>\n<p><img data-src=\"virtual-memory/addr-trans3.png\"></p>\n<p>下面这个例子，32位虚拟地址，28位物理地址，4KB大小的页，所以需要12位offset。当虚拟地址为<strong>0x00003204</strong>的时候，将虚拟地址分为虚拟页编号（<strong>0x00003</strong>）、偏移量（<strong>0x204</strong>），offset直接使用，所以物理页内偏移量为<strong>0x204</strong>，虚拟页编号通过查页表，得到物理页编号为<strong>0x0006</strong>。所以得到的物理地址为<strong>0x0006204</strong></p>\n<p><img data-src=\"virtual-memory/addr-trans4.png\"></p>\n<p>当然，如果查页表的时候可能会产生<code>page fault</code>，即所需要的内容没有在RAM中，如图中的<strong>0x00000</strong>，这就需要发生中断，加载内容到RAM，然后修改页表，返回到内存上次执行的位置，这时候就会找到所对应的物理页编号了。</p>\n<p><img data-src=\"virtual-memory/addr-trans5.png\"></p>\n<p>详细说一下当所需要的页不在内存中时会发生什么：</p>\n<ul>\n<li>页表入口PTE告诉你所需要的页在硬盘中</li>\n<li>硬件（CPU）生成一个Page Fault页错误</li>\n<li>硬件跳到Page Fault Handler页错误处理程序来处理<ul>\n<li>操作系统选择RAM中的一个页剔除写到硬盘中</li>\n<li>如果是需要读取的页是脏页，就需要先将其写回到硬盘再读取</li>\n<li>操作系统读取所需要的页到RAM</li>\n<li>操作系统修改页表的映射</li>\n</ul>\n</li>\n<li>操作系统跳转到发生页错误的地方开始执行（这一次就不会产生页错误了）</li>\n</ul>\n<blockquote>\n<p>脏页是指页中的数据被改变了，如果没有改变，那就没必要写回到硬盘了。</p>\n</blockquote>\n<blockquote>\n<p>脏页－linux内核中的概念，因为硬盘的读写速度远赶不上内存的速度，系统就把读写比较频繁的数据事先放到内存中，以提高读写速度，这就叫高速缓存，linux是以页作为高速缓存的单位，当进程修改了高速缓存里的数据时，该页就被内核标记为脏页，内核将会在合适的时间把脏页的数据写到磁盘中去，以保持高速缓存中的数据和磁盘中的数据是一致的。（来自百度百科）</p>\n</blockquote>\n<p>那么页不在内存中时，这个过程需要多长时间呢？大约需要80 million 周期，这是采样自现代CPU，其中硬盘的读取占了大多数时间。<em><strong>页错误可能是计算机中最慢的操作了。</strong></em></p>\n<p><img data-src=\"virtual-memory/addr-trans6.png\"></p>\n<p>既然这么慢，那为什么还要用它呢？</p>\n<p>优点：</p>\n<ul>\n<li>你用光了内存计算机不会发生崩溃<br>缺点：</li>\n<li>如果发生页错误会很慢</li>\n</ul>\n<p>但是现代计算机还是使用内存页机制。如果你有非常大、足够大的RAM就不会发生页置换，这就是我们为什么认为内存越大计算机就变的越快的原因。</p>\n<p>足够大的内存这是不可能的，不过一些现代操作系统不会发生页置换：</p>\n<ul>\n<li>IOS：如果你用了过多的内存，系统会杀死你的进程</li>\n<li>OS X 10.9：系统会先压缩你的程序，只有不得不置换的时候才会发生</li>\n</ul>\n<blockquote>\n<p>这可能就是为什么在国内Apple比较受欢迎的原因吧，o(<em>￣︶￣</em>)o</p>\n</blockquote>\n<p>每个程序都有自己的页表，我们可以把每个程序的虚拟地址映射到独一无二的内存中，这是为了程序之间不会没有预测的访问数据。</p>\n<p><img data-src=\"virtual-memory/mem-protection1.png\"></p>\n<p>这说明每一个程序都有自己的32位虚拟地址空间，下面是Linux虚拟内存空间的使用情况。</p>\n<p><img data-src=\"virtual-memory/mem-protection2.png\"></p>\n<p>1GB预留给linux内核作为内核区，栈区可以向下扩展到一个固定的最大值，Libraries区用于一些共享库的放置，堆区用于存储动态申请的内存向上扩展，接下来是data数据区用于存储静态变量，代码区用于放置程序编译之后的<code>二进制代码</code>。这之间有一些随机的偏移，这提高了安全性因为你不知道数据和代码区具体在哪儿。</p>\n<p>这是一个具体的例子。</p>\n<p><img data-src=\"virtual-memory/mem-protection3.png\"></p>\n<p>每个程序都有自己的虚拟地址空间，都有自己的页表映射方式保证了程序之间的隔离，因为不会随意相互访问内存，映射到内存的相同区域保证了程序之间的可合作性。</p>\n<p>看一看实际如何使用独立的页表映射方式。这儿有两个程序，CPU都要执行这段指令<code>ld R2,2(R0)</code>，就是将内存地址2的数据加载到R2寄存器中，这里的内存地址是虚拟地址，因此需要通过查页表的方式来查询实际物理内存地址，然后取出数据。因为两个程序有不同的页表，执行指令时取得的虚拟地址2对应的物理地址一般不同或者相同（共享，这只需要将不同地址的虚拟地址映射到相同的RAM物理地址即可），因此最终访问的RAM地址也是不同的。CPU执行上下文切换切换进程时会将进程资源一起切换，这个切换就包含页表的切换。就像下面这张图。</p>\n<p><img data-src=\"virtual-memory/mem-protection4.png\"></p>\n<h3 id=\"如何实现虚拟内存\"><a href=\"#如何实现虚拟内存\" class=\"headerlink\" title=\"如何实现虚拟内存\"></a>如何实现虚拟内存</h3><p>如何让虚拟内存有作用呢？因为虚拟内存使得内存使用更加灵活，但也有可能降低计算机系统的效率，我们只需要让虚拟内存机制达到尽可能大的效率即可。</p>\n<p>虚拟内存的使用过程中需要做什么事情？</p>\n<ul>\n<li>访问内存中的页表</li>\n<li>通过查询页表将虚拟地址转换为物理地址</li>\n<li>访问RAM相应物理内存中的数据</li>\n</ul>\n<p>这个过程中访问了内存2次，访问内存有很多的工作要做，要了解到我们平均每条指令就需要访问1.33次内存（4/3，每三条指令访问4次内存），这部分显得很低效，这是优化的部分之一！</p>\n<p>使用虚拟内存有优点，因为有“无限制”的程序和内存（每个程序都有地址空间，内存页可以换入换出），可以保护程序内存实现隔离，使用内存变得很灵活；但使用虚拟内存也会带来很昂贵的资源消耗，每个内存操作都需要查询页表，而且需要访问两次内存（1次页表访问、1次内存物理地址（访问RAM数据）访问）</p>\n<h4 id=\"如何更快地完成虚拟地址到物理地址的转换\"><a href=\"#如何更快地完成虚拟地址到物理地址的转换\" class=\"headerlink\" title=\"如何更快地完成虚拟地址到物理地址的转换\"></a>如何更快地完成虚拟地址到物理地址的转换</h4><ul>\n<li>TLB<br>因为页表的访问是必须的，所以不可能减少这一部分工作。那我们可不可以通过软件来实现？我们知道这又增加了指令条数，也就增加了内存访问次数。那可不可以通过硬件来实现？添加一个缓存Cache。我们称这个<code>Page Table Cache</code>为<code>Translation Lookaside Buffer(TLB)</code>。他的工作机制如下图</li>\n</ul>\n<p><img data-src=\"virtual-memory/mem-fast1.png\"></p>\n<p>最初，通过访问RAM中的页表来将虚拟地址转换为物理地址，这是非常慢的操作。</p>\n<p><img data-src=\"virtual-memory/mem-fast2.png\"></p>\n<p>我们通过访问TLB缓存来获取虚拟地址对应的物理地址这是十分迅速的，因为访问速度比RAM快，这非常像一个Cache。如果想让TLB非常迅速，TLB就必须尽可能小。我们通常将TLB分离成指令页缓存（iTLB）和数据页缓存（dTLB），比如现代intel所生产的，每一页4KB，一共有64个页表入口PTE，或者是每一页2MB，32个PTE，都是4路关联（4路组关联，区别于全关联）</p>\n<p>全部页表有1M个PTE，但是TLB里只有64个，这个差别很多大，这样访问页的时候如果在TLB里那就会变得很快。</p>\n<ul>\n<li>页在RAM中<ul>\n<li>PTE在TLB<ul>\n<li>最快</li>\n<li>1个周期用于地址转换，然后访问RAM或cache中的数据</li>\n</ul>\n</li>\n<li>PTE不在TLB<ul>\n<li>较慢</li>\n<li>20-1000个周期从RAM中加载PTE到TLB，然后访问RAM数据</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>页不在RAM<ul>\n<li>PTE在TLB（几乎不可能，因为最近不经常使用的内存页被置换到硬盘，所以TLB在这段时间内也被置换了）<ul>\n<li>很慢</li>\n<li>大约80M周期从硬盘加载到内存</li>\n</ul>\n</li>\n<li>PTE不在TLB<ul>\n<li>比很慢还慢一点（o(<em>￣︶￣</em>)o）</li>\n<li>20-1000个周期地址转换，这时知道内存页在硬盘</li>\n<li>大约80M周期从硬盘加载到内存</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>TLB非常的小，怎么让TLB看着大一点，换句话说如何充分利用这么小的一个空间？</p>\n<ul>\n<li>让每一页变的大一点。例如从64个4KB大小的页（共256KB数据）换为32个2MB大小的页（共64MB数据）</li>\n<li>添加一个二级TLB，可能比一级TLB大一点，但是有一点慢。大多数二级TLB是一级TLB大小的八倍，当一级TLB的PTE没有命中的话就去二级TLB去查找加载到一级TLB</li>\n</ul>\n<p><img data-src=\"virtual-memory/mem-fast3.png\"></p>\n<ul>\n<li>让硬件自动填充TLB（因为不会经过操作系统的处理）。这被称为<code>Hardware Page Table Walk</code>，由MMU来完成。</li>\n</ul>\n<p>下面是如何通过TLB将虚拟地址转化为物理地址的例子。</p>\n<p><img data-src=\"virtual-memory/tlb-example1.png\"></p>\n<p>CPU执行指令的时候，使用到了虚拟内存地址<code>0x00003204</code>，需要将虚拟地址转化为物理地址，首先去TLB查找缓存页表，这个例子中发现TLB中没有所要查找的页表入口PTE，然后就需要通过查找RAM中的页表中的PTE，找到了之后就需要将该PTE加载到TLB，然后将虚拟页编号映射到物理页编号（<code>0x00003-&gt;0x0006</code>），页内偏移直接使用，最终获取物理地址<code>0x0006204</code>。</p>\n<p>下面再看一个PTE在TLB中的例子。</p>\n<p><img data-src=\"virtual-memory/tlb-example2.png\"></p>\n<p>这个例子中CPU中使用虚拟地址<code>0x00003208</code>，首先通过虚拟页编号到TLB中去找，虚拟页编号<code>0x00003</code>，发现该页在TLB中，那就直接转化为物理地址。</p>\n<p>下面又是一种情况，当所查找的页不在TLB中且TLB中满时需要做什么，<strong>需要将TLB中选取一个PTE剔除以释放空间</strong></p>\n<p><img data-src=\"virtual-memory/tlb-example3.png\"></p>\n<p>当所需要的页不在RAM中时会发生什么？CPU使用虚拟地址<code>0x00000860</code>，发现页编号<code>0x0000</code>不在TLB中，然后去RAM页表中查找，发现所需物理页在DISK中，然后就需要将DISK中数据加载到RAM中并更新RAM中的页表，然后将页表中对应的PTE加载到TLB中，将虚拟页号转换为物理页号获取物理地址。</p>\n<p><img data-src=\"virtual-memory/tlb-example4.png\"></p>\n<ul>\n<li>多级页表</li>\n</ul>\n<p>多级页表是使优化地址转换的另一方法。首先我们考虑一下页表的大小，虽然我们使用了4KB大小的页来减少页表中PTE中的数量，但对于32位大小的虚拟地址空间来说还是会有1M个PTE，每个PTE大约占4B（20位物理地址，还有其他的权限标志位等）。总共4MB。但是我们<strong>每个程序都需要一个页表</strong>，假设我们有<strong>100</strong>个程序在运行，那内存中就需要有400MB来维护各个程序的页表！还有一点，我们无法将页表换出到DISK硬盘中，因为我们需要通过页表来获取实际RAM物理地址，如果页表不在RAM中那我们就没有办法找到页表了（因为我们需要页表进行地址转换，其他设备的数据都是通过页表加载到内存并更新页表）。</p>\n<p>那怎么解决这个问题呢？</p>\n<p>我们虚拟内存的实现是通过添加一个中间件的思想实现的，那我们可不可以再添加更过的中间件来处理这个问题，答案是肯定的，使用<code>多级页表</code>。</p>\n<p>下图是一个例子。</p>\n<p><img data-src=\"virtual-memory/multi-level-page-table1.png\"></p>\n<p>这个例子中使用了二级页表,一级页表中存了1024个4KB的页的PTE，每个PTE中物理页编号指向的是一个二级页表，这个页表对应存储的才是真正数据对应的物理页。对于每个程序，每个二级页表有1024个PTE，一共有1024个二级页表，那么有1024x1024个PTE，刚好就是1M个PTE，和未使用多级页表中的情况是一样的。</p>\n<p>所以有了多级页表机制，我们可以把一级以下的页表换出到DISK硬盘中，因为我们可以通过一级页表来获取它，这也说明了一点我们必须要把一级页表存储在RAM中，就像下面这张图。</p>\n<p><img data-src=\"virtual-memory/multi-level-page-table2.png\"></p>\n<p>我们来思考一下，使用了多级页表，对于一个32位应用程序我们至少需要多大的内存空间来保存页表呢？<code>4KB+4KB</code>，因为使用了多级页表，一级页表必须存储在RAM中，因为一级页表只告诉我们二级页表的物理地址，所以我们还需要一个二级页表来获取实际的程序数据所在物理地址。一级页表有1024个PTE，每个PTE大约4B，所以一级页表是4KB，二级页表同样如此，所以总共为4KB+4KB，这比4MB好多了！</p>\n<p>下面是一个二级页表使用的一个例子。</p>\n<p><img data-src=\"virtual-memory/multi-level-page-table3.png\"></p>\n<p>CPU使用到了虚拟地址<code>0x00402204</code>，那就需要将其转换为物理地址，转换过程中将虚拟地址分为两个部分：虚拟页号和页内偏移，虚拟页号又分为一级页表编号和二级页表编号。两级页表分别使用虚拟页号的一半（10位），对于虚拟地址0x00402204，一级页表编号N1是<code>0000 0000 01</code>，二级页表编号N2是<code>00 0000 0010</code>，首先使用N1查询RAM中的一级页表得到二级页表的物理页地址（一个页刚好是4KB，二级页表的大小），如果页不在RAM中就需要将它加载到RAM中并更新一级页表，然后使用N2查询二级表获取实际数据的物理页地址，如果实际数据的内存页不在RAM中就需要加载到RAM中并更新二级页表，最终通过物理页地址和虚拟地址的页内偏移得到了最终的物理地址。</p>\n<p>小结一下：</p>\n<ul>\n<li>每个运行的程序需要一个一级页表存储在RAM中，这样可以获取低级的页表以获取实际数据的物理页。</li>\n<li>需要一个二级页表存储在RAM中，这样我们可以翻译程序的某些地址，随时切换。</li>\n<li>使用两级页表共同完成地址<code>VA-&gt;PA</code>的转换</li>\n<li>高10位地址用于索引一级页表的PTE</li>\n<li>接下来的10位用于索引二级页表的PTE</li>\n<li>我们可以置换页表中的一部分到DISK硬盘中</li>\n</ul>\n<h3 id=\"虚拟内存和高速缓存Cache\"><a href=\"#虚拟内存和高速缓存Cache\" class=\"headerlink\" title=\"虚拟内存和高速缓存Cache\"></a>虚拟内存和高速缓存Cache</h3><p>这一部分讨论有关TLB转译后备缓冲区和高速缓存Cache的交互问题。</p>\n<p>我们通常有两种方式来将TLB和Cache来交互：</p>\n<ul>\n<li>物理缓存（<code>Physical Cache</code>），Cache使用物理地址（比较慢，访问cache之前必须做一次TLB地址转换，假设TLB转换需要1个周期、物理地址读取Cache需要1个周期）</li>\n</ul>\n<p><img data-src=\"virtual-memory/tlb-cache1.png\"></p>\n<ul>\n<li>虚拟缓存（<code>Virtual Cache</code>），Cache使用虚拟地址直接获取缓存数据（很快，1个周期），不必进行地址转换，如果Cache没有命中才会发生地址转换。</li>\n</ul>\n<p><img data-src=\"virtual-memory/tlb-cache2.png\"></p>\n<p>对于虚拟缓存来说，两个程序不能共享虚拟缓存，因为虚拟缓存使用的是虚拟地址，虚拟内存的程序隔离机制无法起作用（因为地址没有转换），这也是虚拟缓存的一个问题。我们也可以简单地解决这个问题，方法就是不仅仅使用虚拟地址，再添加一个标志位用于区分是哪一个应用程序（比如PID）。</p>\n<p>有没有两全其美的方法，访问Cache的同时访问TLB，仍然可以使用虚拟内存的隔离机制。</p>\n<ul>\n<li>还是使用虚拟地址<strong>VA</strong>访问Cache，cache数据记录中有一个物理标志<strong>PTag</strong>，同时通过TLB将虚拟地址<strong>VA</strong>转换为物理地址<strong>PA</strong></li>\n<li>通过物理标志<strong>PTag（缓存数据所在的RAM物理地址）</strong>和TLB获取的物理地址<strong>PA</strong>比较是不是命中</li>\n</ul>\n<p>这只是想法，具体实现还是有些差别，下面一步步说明。</p>\n<p><img data-src=\"virtual-memory/tlb-cache3.png\"></p>\n<p>这种访问我们称之为<code>虚索引实标签缓存（Virtually Indexed,Physically Tagged）</code>，这是当今处理器中最常用的一级缓存。</p>\n<blockquote>\n<p>这种缓存利用了页面技术的一个特征，即虚拟地址和物理地址享有相同的页内偏移值（page offset）。(Wikipedia)</p>\n</blockquote>\n<ul>\n<li>Cache通过页内偏移（虚拟和物理是相通的）索引</li>\n<li>用物理页面号做标志</li>\n</ul>\n<p>这样我们既实现了使用虚拟地址访问Cache（快速，不用地址转换），又实现了虚拟内存隔离保护机制（物理地址做标志）。</p>\n<blockquote>\n<p>这种技术的一个缺点是，在使用直接匹配缓存的前提下，缓存大小不能超过页面大小，否则页面偏移范围就不足以覆盖缓存索引范围。这个弊端可以通过提高组相联路数来改善。(Wikipedia)<strong>（待完善）</strong></p>\n</blockquote>\n<p>总结一下：</p>\n<ul>\n<li>TLB地址转换和查询Cache同时进行<ul>\n<li>使用虚拟页号进行地址TLB转换</li>\n<li>使用虚拟地址偏移量进行cache索引</li>\n<li>通过TLB获取了物理页号</li>\n<li>通过Cache获取了物理标志（物理页号）</li>\n</ul>\n</li>\n<li>TLB转换得到的物理页号和物理标志<code>PA Tag</code>相等说明缓存命中。</li>\n</ul>\n<p>这种方式快速的原因是地址转换和cache索引同时进行，安全的原因是Cache只有在物理地址匹配的情况下才会命中。<br><img data-src=\"virtual-memory/tlb-cache4.png\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><em><strong>以上便是对虚拟内存的学习和总结，可能还有一些地方会有错误或者知识点漏洞，希望读者可以热情的提出<a href=\"https://github.com/ScarboroughCoral/OS-Notes/issues/new\">issue</a>。如果还有不理解的地方可以查阅文章末尾我所参考的一些资料，谢谢阅读！</strong></em></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><h4 id=\"引用作品\"><a href=\"#引用作品\" class=\"headerlink\" title=\"引用作品\"></a>引用作品</h4><ul>\n<li>David Black-Schaffer.(2014).<a href=\"https://www.youtube.com/watch?v=qcBIvnQt0Bw&index=1&list=PLiwt1iVUib9s2Uo5BeYmwkDFUh70fJPxX\">Virtual Memory</a></li>\n</ul>\n<h4 id=\"引用文献\"><a href=\"#引用文献\" class=\"headerlink\" title=\"引用文献\"></a>引用文献</h4><ul>\n<li>Aniruddha-Tapas.(2014).<a href=\"https://github.com/Aniruddha-Tapas/Operating-Systems-Notes\">Operating Systems Notes</a></li>\n<li>wikipedia.(2018).<a href=\"https://zh.wikipedia.org/wiki/CPU%E7%BC%93%E5%AD%98\">CPU Cache</a></li>\n</ul>\n<h4 id=\"参阅书目\"><a href=\"#参阅书目\" class=\"headerlink\" title=\"参阅书目\"></a>参阅书目</h4>","site":{"data":{}},"excerpt":"<div class=\"note default\"><p>理论驱动实践，实践驱动理论。</p>\n</div>","more":"<h3 id=\"虚拟内存问题概述\"><a href=\"#虚拟内存问题概述\" class=\"headerlink\" title=\"虚拟内存问题概述\"></a>虚拟内存问题概述</h3><p>如果你了解过一点虚拟内存的知识，这篇笔记可能会让你更深入的理解。</p>\n<ul>\n<li>三个内存相关的问题<ul>\n<li>没有足够的内存</li>\n<li>地址空间碎片化</li>\n<li>地址冲突</li>\n</ul>\n</li>\n<li>什么是虚拟内存<ul>\n<li>中间件</li>\n<li>如何解决三个内存问题</li>\n<li>页表和转换</li>\n</ul>\n</li>\n<li>如何实现虚拟内存<ul>\n<li>怎么让转换变得更快</li>\n</ul>\n</li>\n<li>虚拟内存和高速缓存Cache</li>\n</ul>\n<h3 id=\"三个内存相关的问题\"><a href=\"#三个内存相关的问题\" class=\"headerlink\" title=\"三个内存相关的问题\"></a>三个内存相关的问题</h3><ul>\n<li>没有足够的内存怎么办</li>\n</ul>\n<p>MIPS提供给每个应用程序32位的地址空间，每个应用程序可以访问这32个地址空间中的任意一个字节。最早的MIPS架构是32位，最新的版本已经变成64位。也就是说你可以使用2^32bytes也就是4GB，这只是理论上，实际可能会缩小到2GB可用空间。</p>\n<p>如果你的物理内存（内存条）是1GB该怎么办呢？就像下面这个图，可寻址空间大于实际物理内存大小。</p>\n<p><img data-src=\"virtual-memory/vm-problem1.png\"></p>\n<ul>\n<li>程序如何分配内存（对于碎片内存）</li>\n</ul>\n<p>就像下面这张图，首先内存加载程序p1和p2，开始3G空间被占用，剩余1G空间剩余，这时候p1退出，p3想使用内存，虽然还有2G剩余空间，但空间是碎片化的，这也是一个问题。这被称作<strong>Memory fragmentation</strong><code>内存碎片化</code>。</p>\n<p><img data-src=\"virtual-memory/vm-problem2.png\"></p>\n<ul>\n<li>如何保证进程安全（进程之间地址不相互访问）</li>\n</ul>\n<p>就像下面这张图，两个程序同时访问<code>1024</code>这个地址的空间，内存中的信息会不会相互覆盖？</p>\n<p><img data-src=\"virtual-memory/vm-problem3.png\"></p>\n<p>总结一下，如果所有程序都有相同的32位的寻址空间，那么可能导致以下问题：</p>\n<ul>\n<li>如果实际物理能存大小小于4GB电脑可能会崩溃</li>\n<li>如果运行多个程序可能会用光所有内存，这不是真正的用光而是碎片化的内存无法真正利用，这种碎片化依赖于我们不同程序的运行次序</li>\n<li>不同的进程之间的数据可能会相互覆盖破坏，因为有相同的寻址地址</li>\n</ul>\n<p>那么如何解决？</p>\n<p>问题的关键在于<strong>所有的程序有相同的寻址空间</strong>，那么我们可不可以有属于自己的<strong>虚拟内存</strong>？如果可以的话，我们可以</p>\n<ul>\n<li>将程序的内存空间和物理内存之间做一个映射（这使得我们使用物理内存RAM变的更加灵活）</li>\n<li>当程序用光的时候，我们甚至可以将程序移动到硬盘</li>\n</ul>\n<h3 id=\"什么是虚拟内存\"><a href=\"#什么是虚拟内存\" class=\"headerlink\" title=\"什么是虚拟内存\"></a>什么是虚拟内存</h3><h4 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h4><p>虚拟内存是一层“中间组件”，虚拟内存的想法来自于一句话：</p>\n<blockquote>\n<p>Any problem in computer science can be solved by adding indirection.<br>任何计算机问题都可以通过添加一个中间件来解决。</p>\n</blockquote>\n<p>如果没有虚拟内存这一层中间件，程序寻址空间将和实际物理内存相同。例如寻址空间大小大于实际RAM大小，如果你访问地址2024，得到的结果可能和访问地址24相同（因为地址越界最高位失效）。</p>\n<p><em>虚拟内存的作用就是将程序地址空间做一层映射映射到实际RAM地址。</em></p>\n<p>如下图所示：</p>\n<p><img data-src=\"virtual-memory/whatis-vm1.png\"></p>\n<h4 id=\"如何解决三个内存问题\"><a href=\"#如何解决三个内存问题\" class=\"headerlink\" title=\"如何解决三个内存问题\"></a>如何解决三个内存问题</h4><ul>\n<li>没有足够的内存<br>将一部分程序地址空间映射到硬盘，我们需要他的时候只需要将这一部分加载到内存中即可。内存中的暂时不使用的程序（比如Program0）可以将其放到硬盘中，这个过程叫做<code>Page Out</code>，即内存页换出，并更新映射，然后当新程序（P3）来了就可以映射到内存中原来旧程序（P0）部分。</li>\n</ul>\n<p><img data-src=\"virtual-memory/not-enough-memory.png\"></p>\n<ul>\n<li>碎片内存使用</li>\n</ul>\n<p>这就是前面提到过的问题，如何充分利用程序退出后碎片化的内存？<br>有了前面提及的映射，这个就比较容易解决了，<strong>我们可以将地址空间按照任意方式映射到实际物理内存RAM</strong></p>\n<p><img data-src=\"virtual-memory/memory-hole.png\"></p>\n<ul>\n<li>进程安全（进程之间不相互访问）</li>\n</ul>\n<p>进程之间的内存如何能够独立、隔离（isolate）出来呢？例如同时访问<code>1024</code>的地址，两个程序如何能保证不是访问的实际物理内存中的同一个区域呢？</p>\n<p>通过映射方式我们可以想出来，<strong>只需要保证不同程序的相同虚拟地址映射到不同的物理地址就可以了。</strong></p>\n<p><img data-src=\"virtual-memory/program-secure.png\"></p>\n<p>这样一来，因为每个程序都有自己的地址空间，那么他们不可能访问其他程序的数据，这非常的安全和可靠！</p>\n<p>这也是有缺点的，当两个程序合作的时候，如何共享内存呢？<strong>只需要将两个程序各自的虚拟地址空间拿出一部分映射到相同的物理地址空间</strong>。</p>\n<p><img data-src=\"virtual-memory/memory-share.png\"></p>\n<h4 id=\"页表和转换\"><a href=\"#页表和转换\" class=\"headerlink\" title=\"页表和转换\"></a>页表和转换</h4><p>前面一直提到的映射就是页表的部分，页表所做的功能就是转换，<code>从VA（Virtual Address）虚拟地址转换为PA（Physical Address）物理地址</code>。页表映射的单位是一个<code>页</code>。</p>\n<p>那程序是如何访问内存的呢？</p>\n<ul>\n<li>CPU执行使用虚拟地址。</li>\n<li>MMU将虚拟地址转换成物理地址</li>\n<li>（可选）如果转换过程中发现映射表中没有物理内存，那么操作系统就将它从硬盘加载到内存并修改映射表</li>\n</ul>\n<p><img data-src=\"virtual-memory/vm-work1.png\"></p>\n<ul>\n<li>通过物理地址读取RAM并将数据返还给程序。</li>\n</ul>\n<p><img data-src=\"virtual-memory/vm-work2.png\"></p>\n<h5 id=\"页表\"><a href=\"#页表\" class=\"headerlink\" title=\"页表\"></a>页表</h5><p>页表保存着VA虚拟地址到PA物理地址的映射方式。</p>\n<p>下面一步一步说明页表的构建过程，从有问题的页表到一个臻于完美的页表，这可能是现代计算机操作系统所利用的机制。</p>\n<p>既然页表保存着虚拟地址到物理地址的映射，那么页表就需要保存每一个虚拟地址到每一个物理地址的映射，我们称每一条记录为页表入口<code>Page Table Entry (PTE)</code>。如果是这样的话，那需要多大的页表？<strong>结合下图：</strong>如果是32位地址空间，每个字就需要1个PTE，这里一个字是32位，也就是4个字节，所以每4个大小也就是2位的地址空间就需要1个PTE，所以总共需要2^30个PTE。又因为每个PTE存储的是一个映射，由于虚拟地址是连续的可以只用偏移地址来表示，只需要存32位的物理地址，所以总共需要2^30x32b=4GB个大小。这说明1个4GB大小的RAM我们就需要拿出全部容量来存储页表，而且这没有考虑每个程序都需要一个页表。如果你没有明白这个计算公式，你仅需要知道如果这样构造页表所需容量太大，需要改造！</p>\n<p><img data-src=\"virtual-memory/page-table1.png\"></p>\n<p>那么如何改造呢？以上情况的映射是1个字对应一个PTE页表入口，我们称这种情况为<code>细粒度映射</code>，那我们可不可以使用<code>粗粒度映射</code>呢？就像这个图一样：</p>\n<p><img data-src=\"virtual-memory/page-table2.png\"></p>\n<p>这个图中，我们将每4Kb大小的地址空间做一个PTE，我们称之为<code>4KB Pages</code>，因为每个RAM按字节计量，或者你可以看为1K个字大小的页。这样我们就减少了映射也就是PTE的个数。这4KB大小的页映射的内部是连续的，如下图：</p>\n<p><img data-src=\"virtual-memory/page-table3.png\"></p>\n<p>有了以上改进，我们有了更少的PTE映射个数，但是我们页降低了使用RAM的灵活性，因为我们每次需要移动一个页（4KB）。</p>\n<p>现代计算机系统中，比较典型的就是4KB Pages（1024 words per page，每一页1024个字）。</p>\n<h5 id=\"地址转换\"><a href=\"#地址转换\" class=\"headerlink\" title=\"地址转换\"></a>地址转换</h5><p>我们需要将虚拟地址转换为物理地址。</p>\n<p>假设我们使用的是4KB Pages，我们有32位虚拟地址，28位物理地址，如下图</p>\n<p><img data-src=\"virtual-memory/addr-trans1.png\"></p>\n<p>那我们4KB大小的页内部没有做映射，这一部分如何映射呢？解决办法就是使用<code>偏移量offset</code>，如下图</p>\n<p><img data-src=\"virtual-memory/addr-trans2.png\"></p>\n<p>我们将一个虚拟地址转换为物理地址，虚拟地址的pagenumber部分通过页表转换为实际物理地址的pagenumber部分，虚拟地址的offset部分直接作为物理地址的offset部分。</p>\n<p><img data-src=\"virtual-memory/addr-trans3.png\"></p>\n<p>下面这个例子，32位虚拟地址，28位物理地址，4KB大小的页，所以需要12位offset。当虚拟地址为<strong>0x00003204</strong>的时候，将虚拟地址分为虚拟页编号（<strong>0x00003</strong>）、偏移量（<strong>0x204</strong>），offset直接使用，所以物理页内偏移量为<strong>0x204</strong>，虚拟页编号通过查页表，得到物理页编号为<strong>0x0006</strong>。所以得到的物理地址为<strong>0x0006204</strong></p>\n<p><img data-src=\"virtual-memory/addr-trans4.png\"></p>\n<p>当然，如果查页表的时候可能会产生<code>page fault</code>，即所需要的内容没有在RAM中，如图中的<strong>0x00000</strong>，这就需要发生中断，加载内容到RAM，然后修改页表，返回到内存上次执行的位置，这时候就会找到所对应的物理页编号了。</p>\n<p><img data-src=\"virtual-memory/addr-trans5.png\"></p>\n<p>详细说一下当所需要的页不在内存中时会发生什么：</p>\n<ul>\n<li>页表入口PTE告诉你所需要的页在硬盘中</li>\n<li>硬件（CPU）生成一个Page Fault页错误</li>\n<li>硬件跳到Page Fault Handler页错误处理程序来处理<ul>\n<li>操作系统选择RAM中的一个页剔除写到硬盘中</li>\n<li>如果是需要读取的页是脏页，就需要先将其写回到硬盘再读取</li>\n<li>操作系统读取所需要的页到RAM</li>\n<li>操作系统修改页表的映射</li>\n</ul>\n</li>\n<li>操作系统跳转到发生页错误的地方开始执行（这一次就不会产生页错误了）</li>\n</ul>\n<blockquote>\n<p>脏页是指页中的数据被改变了，如果没有改变，那就没必要写回到硬盘了。</p>\n</blockquote>\n<blockquote>\n<p>脏页－linux内核中的概念，因为硬盘的读写速度远赶不上内存的速度，系统就把读写比较频繁的数据事先放到内存中，以提高读写速度，这就叫高速缓存，linux是以页作为高速缓存的单位，当进程修改了高速缓存里的数据时，该页就被内核标记为脏页，内核将会在合适的时间把脏页的数据写到磁盘中去，以保持高速缓存中的数据和磁盘中的数据是一致的。（来自百度百科）</p>\n</blockquote>\n<p>那么页不在内存中时，这个过程需要多长时间呢？大约需要80 million 周期，这是采样自现代CPU，其中硬盘的读取占了大多数时间。<em><strong>页错误可能是计算机中最慢的操作了。</strong></em></p>\n<p><img data-src=\"virtual-memory/addr-trans6.png\"></p>\n<p>既然这么慢，那为什么还要用它呢？</p>\n<p>优点：</p>\n<ul>\n<li>你用光了内存计算机不会发生崩溃<br>缺点：</li>\n<li>如果发生页错误会很慢</li>\n</ul>\n<p>但是现代计算机还是使用内存页机制。如果你有非常大、足够大的RAM就不会发生页置换，这就是我们为什么认为内存越大计算机就变的越快的原因。</p>\n<p>足够大的内存这是不可能的，不过一些现代操作系统不会发生页置换：</p>\n<ul>\n<li>IOS：如果你用了过多的内存，系统会杀死你的进程</li>\n<li>OS X 10.9：系统会先压缩你的程序，只有不得不置换的时候才会发生</li>\n</ul>\n<blockquote>\n<p>这可能就是为什么在国内Apple比较受欢迎的原因吧，o(<em>￣︶￣</em>)o</p>\n</blockquote>\n<p>每个程序都有自己的页表，我们可以把每个程序的虚拟地址映射到独一无二的内存中，这是为了程序之间不会没有预测的访问数据。</p>\n<p><img data-src=\"virtual-memory/mem-protection1.png\"></p>\n<p>这说明每一个程序都有自己的32位虚拟地址空间，下面是Linux虚拟内存空间的使用情况。</p>\n<p><img data-src=\"virtual-memory/mem-protection2.png\"></p>\n<p>1GB预留给linux内核作为内核区，栈区可以向下扩展到一个固定的最大值，Libraries区用于一些共享库的放置，堆区用于存储动态申请的内存向上扩展，接下来是data数据区用于存储静态变量，代码区用于放置程序编译之后的<code>二进制代码</code>。这之间有一些随机的偏移，这提高了安全性因为你不知道数据和代码区具体在哪儿。</p>\n<p>这是一个具体的例子。</p>\n<p><img data-src=\"virtual-memory/mem-protection3.png\"></p>\n<p>每个程序都有自己的虚拟地址空间，都有自己的页表映射方式保证了程序之间的隔离，因为不会随意相互访问内存，映射到内存的相同区域保证了程序之间的可合作性。</p>\n<p>看一看实际如何使用独立的页表映射方式。这儿有两个程序，CPU都要执行这段指令<code>ld R2,2(R0)</code>，就是将内存地址2的数据加载到R2寄存器中，这里的内存地址是虚拟地址，因此需要通过查页表的方式来查询实际物理内存地址，然后取出数据。因为两个程序有不同的页表，执行指令时取得的虚拟地址2对应的物理地址一般不同或者相同（共享，这只需要将不同地址的虚拟地址映射到相同的RAM物理地址即可），因此最终访问的RAM地址也是不同的。CPU执行上下文切换切换进程时会将进程资源一起切换，这个切换就包含页表的切换。就像下面这张图。</p>\n<p><img data-src=\"virtual-memory/mem-protection4.png\"></p>\n<h3 id=\"如何实现虚拟内存\"><a href=\"#如何实现虚拟内存\" class=\"headerlink\" title=\"如何实现虚拟内存\"></a>如何实现虚拟内存</h3><p>如何让虚拟内存有作用呢？因为虚拟内存使得内存使用更加灵活，但也有可能降低计算机系统的效率，我们只需要让虚拟内存机制达到尽可能大的效率即可。</p>\n<p>虚拟内存的使用过程中需要做什么事情？</p>\n<ul>\n<li>访问内存中的页表</li>\n<li>通过查询页表将虚拟地址转换为物理地址</li>\n<li>访问RAM相应物理内存中的数据</li>\n</ul>\n<p>这个过程中访问了内存2次，访问内存有很多的工作要做，要了解到我们平均每条指令就需要访问1.33次内存（4/3，每三条指令访问4次内存），这部分显得很低效，这是优化的部分之一！</p>\n<p>使用虚拟内存有优点，因为有“无限制”的程序和内存（每个程序都有地址空间，内存页可以换入换出），可以保护程序内存实现隔离，使用内存变得很灵活；但使用虚拟内存也会带来很昂贵的资源消耗，每个内存操作都需要查询页表，而且需要访问两次内存（1次页表访问、1次内存物理地址（访问RAM数据）访问）</p>\n<h4 id=\"如何更快地完成虚拟地址到物理地址的转换\"><a href=\"#如何更快地完成虚拟地址到物理地址的转换\" class=\"headerlink\" title=\"如何更快地完成虚拟地址到物理地址的转换\"></a>如何更快地完成虚拟地址到物理地址的转换</h4><ul>\n<li>TLB<br>因为页表的访问是必须的，所以不可能减少这一部分工作。那我们可不可以通过软件来实现？我们知道这又增加了指令条数，也就增加了内存访问次数。那可不可以通过硬件来实现？添加一个缓存Cache。我们称这个<code>Page Table Cache</code>为<code>Translation Lookaside Buffer(TLB)</code>。他的工作机制如下图</li>\n</ul>\n<p><img data-src=\"virtual-memory/mem-fast1.png\"></p>\n<p>最初，通过访问RAM中的页表来将虚拟地址转换为物理地址，这是非常慢的操作。</p>\n<p><img data-src=\"virtual-memory/mem-fast2.png\"></p>\n<p>我们通过访问TLB缓存来获取虚拟地址对应的物理地址这是十分迅速的，因为访问速度比RAM快，这非常像一个Cache。如果想让TLB非常迅速，TLB就必须尽可能小。我们通常将TLB分离成指令页缓存（iTLB）和数据页缓存（dTLB），比如现代intel所生产的，每一页4KB，一共有64个页表入口PTE，或者是每一页2MB，32个PTE，都是4路关联（4路组关联，区别于全关联）</p>\n<p>全部页表有1M个PTE，但是TLB里只有64个，这个差别很多大，这样访问页的时候如果在TLB里那就会变得很快。</p>\n<ul>\n<li>页在RAM中<ul>\n<li>PTE在TLB<ul>\n<li>最快</li>\n<li>1个周期用于地址转换，然后访问RAM或cache中的数据</li>\n</ul>\n</li>\n<li>PTE不在TLB<ul>\n<li>较慢</li>\n<li>20-1000个周期从RAM中加载PTE到TLB，然后访问RAM数据</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>页不在RAM<ul>\n<li>PTE在TLB（几乎不可能，因为最近不经常使用的内存页被置换到硬盘，所以TLB在这段时间内也被置换了）<ul>\n<li>很慢</li>\n<li>大约80M周期从硬盘加载到内存</li>\n</ul>\n</li>\n<li>PTE不在TLB<ul>\n<li>比很慢还慢一点（o(<em>￣︶￣</em>)o）</li>\n<li>20-1000个周期地址转换，这时知道内存页在硬盘</li>\n<li>大约80M周期从硬盘加载到内存</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>TLB非常的小，怎么让TLB看着大一点，换句话说如何充分利用这么小的一个空间？</p>\n<ul>\n<li>让每一页变的大一点。例如从64个4KB大小的页（共256KB数据）换为32个2MB大小的页（共64MB数据）</li>\n<li>添加一个二级TLB，可能比一级TLB大一点，但是有一点慢。大多数二级TLB是一级TLB大小的八倍，当一级TLB的PTE没有命中的话就去二级TLB去查找加载到一级TLB</li>\n</ul>\n<p><img data-src=\"virtual-memory/mem-fast3.png\"></p>\n<ul>\n<li>让硬件自动填充TLB（因为不会经过操作系统的处理）。这被称为<code>Hardware Page Table Walk</code>，由MMU来完成。</li>\n</ul>\n<p>下面是如何通过TLB将虚拟地址转化为物理地址的例子。</p>\n<p><img data-src=\"virtual-memory/tlb-example1.png\"></p>\n<p>CPU执行指令的时候，使用到了虚拟内存地址<code>0x00003204</code>，需要将虚拟地址转化为物理地址，首先去TLB查找缓存页表，这个例子中发现TLB中没有所要查找的页表入口PTE，然后就需要通过查找RAM中的页表中的PTE，找到了之后就需要将该PTE加载到TLB，然后将虚拟页编号映射到物理页编号（<code>0x00003-&gt;0x0006</code>），页内偏移直接使用，最终获取物理地址<code>0x0006204</code>。</p>\n<p>下面再看一个PTE在TLB中的例子。</p>\n<p><img data-src=\"virtual-memory/tlb-example2.png\"></p>\n<p>这个例子中CPU中使用虚拟地址<code>0x00003208</code>，首先通过虚拟页编号到TLB中去找，虚拟页编号<code>0x00003</code>，发现该页在TLB中，那就直接转化为物理地址。</p>\n<p>下面又是一种情况，当所查找的页不在TLB中且TLB中满时需要做什么，<strong>需要将TLB中选取一个PTE剔除以释放空间</strong></p>\n<p><img data-src=\"virtual-memory/tlb-example3.png\"></p>\n<p>当所需要的页不在RAM中时会发生什么？CPU使用虚拟地址<code>0x00000860</code>，发现页编号<code>0x0000</code>不在TLB中，然后去RAM页表中查找，发现所需物理页在DISK中，然后就需要将DISK中数据加载到RAM中并更新RAM中的页表，然后将页表中对应的PTE加载到TLB中，将虚拟页号转换为物理页号获取物理地址。</p>\n<p><img data-src=\"virtual-memory/tlb-example4.png\"></p>\n<ul>\n<li>多级页表</li>\n</ul>\n<p>多级页表是使优化地址转换的另一方法。首先我们考虑一下页表的大小，虽然我们使用了4KB大小的页来减少页表中PTE中的数量，但对于32位大小的虚拟地址空间来说还是会有1M个PTE，每个PTE大约占4B（20位物理地址，还有其他的权限标志位等）。总共4MB。但是我们<strong>每个程序都需要一个页表</strong>，假设我们有<strong>100</strong>个程序在运行，那内存中就需要有400MB来维护各个程序的页表！还有一点，我们无法将页表换出到DISK硬盘中，因为我们需要通过页表来获取实际RAM物理地址，如果页表不在RAM中那我们就没有办法找到页表了（因为我们需要页表进行地址转换，其他设备的数据都是通过页表加载到内存并更新页表）。</p>\n<p>那怎么解决这个问题呢？</p>\n<p>我们虚拟内存的实现是通过添加一个中间件的思想实现的，那我们可不可以再添加更过的中间件来处理这个问题，答案是肯定的，使用<code>多级页表</code>。</p>\n<p>下图是一个例子。</p>\n<p><img data-src=\"virtual-memory/multi-level-page-table1.png\"></p>\n<p>这个例子中使用了二级页表,一级页表中存了1024个4KB的页的PTE，每个PTE中物理页编号指向的是一个二级页表，这个页表对应存储的才是真正数据对应的物理页。对于每个程序，每个二级页表有1024个PTE，一共有1024个二级页表，那么有1024x1024个PTE，刚好就是1M个PTE，和未使用多级页表中的情况是一样的。</p>\n<p>所以有了多级页表机制，我们可以把一级以下的页表换出到DISK硬盘中，因为我们可以通过一级页表来获取它，这也说明了一点我们必须要把一级页表存储在RAM中，就像下面这张图。</p>\n<p><img data-src=\"virtual-memory/multi-level-page-table2.png\"></p>\n<p>我们来思考一下，使用了多级页表，对于一个32位应用程序我们至少需要多大的内存空间来保存页表呢？<code>4KB+4KB</code>，因为使用了多级页表，一级页表必须存储在RAM中，因为一级页表只告诉我们二级页表的物理地址，所以我们还需要一个二级页表来获取实际的程序数据所在物理地址。一级页表有1024个PTE，每个PTE大约4B，所以一级页表是4KB，二级页表同样如此，所以总共为4KB+4KB，这比4MB好多了！</p>\n<p>下面是一个二级页表使用的一个例子。</p>\n<p><img data-src=\"virtual-memory/multi-level-page-table3.png\"></p>\n<p>CPU使用到了虚拟地址<code>0x00402204</code>，那就需要将其转换为物理地址，转换过程中将虚拟地址分为两个部分：虚拟页号和页内偏移，虚拟页号又分为一级页表编号和二级页表编号。两级页表分别使用虚拟页号的一半（10位），对于虚拟地址0x00402204，一级页表编号N1是<code>0000 0000 01</code>，二级页表编号N2是<code>00 0000 0010</code>，首先使用N1查询RAM中的一级页表得到二级页表的物理页地址（一个页刚好是4KB，二级页表的大小），如果页不在RAM中就需要将它加载到RAM中并更新一级页表，然后使用N2查询二级表获取实际数据的物理页地址，如果实际数据的内存页不在RAM中就需要加载到RAM中并更新二级页表，最终通过物理页地址和虚拟地址的页内偏移得到了最终的物理地址。</p>\n<p>小结一下：</p>\n<ul>\n<li>每个运行的程序需要一个一级页表存储在RAM中，这样可以获取低级的页表以获取实际数据的物理页。</li>\n<li>需要一个二级页表存储在RAM中，这样我们可以翻译程序的某些地址，随时切换。</li>\n<li>使用两级页表共同完成地址<code>VA-&gt;PA</code>的转换</li>\n<li>高10位地址用于索引一级页表的PTE</li>\n<li>接下来的10位用于索引二级页表的PTE</li>\n<li>我们可以置换页表中的一部分到DISK硬盘中</li>\n</ul>\n<h3 id=\"虚拟内存和高速缓存Cache\"><a href=\"#虚拟内存和高速缓存Cache\" class=\"headerlink\" title=\"虚拟内存和高速缓存Cache\"></a>虚拟内存和高速缓存Cache</h3><p>这一部分讨论有关TLB转译后备缓冲区和高速缓存Cache的交互问题。</p>\n<p>我们通常有两种方式来将TLB和Cache来交互：</p>\n<ul>\n<li>物理缓存（<code>Physical Cache</code>），Cache使用物理地址（比较慢，访问cache之前必须做一次TLB地址转换，假设TLB转换需要1个周期、物理地址读取Cache需要1个周期）</li>\n</ul>\n<p><img data-src=\"virtual-memory/tlb-cache1.png\"></p>\n<ul>\n<li>虚拟缓存（<code>Virtual Cache</code>），Cache使用虚拟地址直接获取缓存数据（很快，1个周期），不必进行地址转换，如果Cache没有命中才会发生地址转换。</li>\n</ul>\n<p><img data-src=\"virtual-memory/tlb-cache2.png\"></p>\n<p>对于虚拟缓存来说，两个程序不能共享虚拟缓存，因为虚拟缓存使用的是虚拟地址，虚拟内存的程序隔离机制无法起作用（因为地址没有转换），这也是虚拟缓存的一个问题。我们也可以简单地解决这个问题，方法就是不仅仅使用虚拟地址，再添加一个标志位用于区分是哪一个应用程序（比如PID）。</p>\n<p>有没有两全其美的方法，访问Cache的同时访问TLB，仍然可以使用虚拟内存的隔离机制。</p>\n<ul>\n<li>还是使用虚拟地址<strong>VA</strong>访问Cache，cache数据记录中有一个物理标志<strong>PTag</strong>，同时通过TLB将虚拟地址<strong>VA</strong>转换为物理地址<strong>PA</strong></li>\n<li>通过物理标志<strong>PTag（缓存数据所在的RAM物理地址）</strong>和TLB获取的物理地址<strong>PA</strong>比较是不是命中</li>\n</ul>\n<p>这只是想法，具体实现还是有些差别，下面一步步说明。</p>\n<p><img data-src=\"virtual-memory/tlb-cache3.png\"></p>\n<p>这种访问我们称之为<code>虚索引实标签缓存（Virtually Indexed,Physically Tagged）</code>，这是当今处理器中最常用的一级缓存。</p>\n<blockquote>\n<p>这种缓存利用了页面技术的一个特征，即虚拟地址和物理地址享有相同的页内偏移值（page offset）。(Wikipedia)</p>\n</blockquote>\n<ul>\n<li>Cache通过页内偏移（虚拟和物理是相通的）索引</li>\n<li>用物理页面号做标志</li>\n</ul>\n<p>这样我们既实现了使用虚拟地址访问Cache（快速，不用地址转换），又实现了虚拟内存隔离保护机制（物理地址做标志）。</p>\n<blockquote>\n<p>这种技术的一个缺点是，在使用直接匹配缓存的前提下，缓存大小不能超过页面大小，否则页面偏移范围就不足以覆盖缓存索引范围。这个弊端可以通过提高组相联路数来改善。(Wikipedia)<strong>（待完善）</strong></p>\n</blockquote>\n<p>总结一下：</p>\n<ul>\n<li>TLB地址转换和查询Cache同时进行<ul>\n<li>使用虚拟页号进行地址TLB转换</li>\n<li>使用虚拟地址偏移量进行cache索引</li>\n<li>通过TLB获取了物理页号</li>\n<li>通过Cache获取了物理标志（物理页号）</li>\n</ul>\n</li>\n<li>TLB转换得到的物理页号和物理标志<code>PA Tag</code>相等说明缓存命中。</li>\n</ul>\n<p>这种方式快速的原因是地址转换和cache索引同时进行，安全的原因是Cache只有在物理地址匹配的情况下才会命中。<br><img data-src=\"virtual-memory/tlb-cache4.png\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><em><strong>以上便是对虚拟内存的学习和总结，可能还有一些地方会有错误或者知识点漏洞，希望读者可以热情的提出<a href=\"https://github.com/ScarboroughCoral/OS-Notes/issues/new\">issue</a>。如果还有不理解的地方可以查阅文章末尾我所参考的一些资料，谢谢阅读！</strong></em></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><h4 id=\"引用作品\"><a href=\"#引用作品\" class=\"headerlink\" title=\"引用作品\"></a>引用作品</h4><ul>\n<li>David Black-Schaffer.(2014).<a href=\"https://www.youtube.com/watch?v=qcBIvnQt0Bw&index=1&list=PLiwt1iVUib9s2Uo5BeYmwkDFUh70fJPxX\">Virtual Memory</a></li>\n</ul>\n<h4 id=\"引用文献\"><a href=\"#引用文献\" class=\"headerlink\" title=\"引用文献\"></a>引用文献</h4><ul>\n<li>Aniruddha-Tapas.(2014).<a href=\"https://github.com/Aniruddha-Tapas/Operating-Systems-Notes\">Operating Systems Notes</a></li>\n<li>wikipedia.(2018).<a href=\"https://zh.wikipedia.org/wiki/CPU%E7%BC%93%E5%AD%98\">CPU Cache</a></li>\n</ul>\n<h4 id=\"参阅书目\"><a href=\"#参阅书目\" class=\"headerlink\" title=\"参阅书目\"></a>参阅书目</h4>"},{"title":"rCore Lab 第一期：应用程序与基本执行环境","date":"2021-12-26T09:02:31.000Z","_content":"\n{% note primary %}\n实现彩色打印 Hello World。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 实验要求\n\n- 实现分支：ch1\n\n- 完成实验指导书中的内容并在裸机上实现 hello world 输出。\n\n- 实现彩色输出宏(只要求可以彩色输出，不要求 log 等级控制，不要求多种颜色)\n\n- 隐形要求：可以关闭内核所有输出。从 lab2 开始要求关闭内核所有输出（如果实现了 log 等级控制，那么这一点自然就实现了）。\n\n- 利用彩色输出宏输出 os 内存空间布局\n\n-  输出 .text、.data、.rodata、.bss 各段位置，输出等级为 INFO。\n\n> challenge: 支持多核，实现多个核的 boot。\n\n## 开始\n\n\n{% note info %}\n代码详情参考[Github](https://github.com/ScarboroughCoral/rCore-lab/tree/ch1)\n{% endnote %}\n\n\n\n基于[rCore-Tutorial-v3](https://github.com/rcore-os/rCore-Tutorial-v3) 的 `ch1` 进行开发彩色打印“hello world”很简单，只需要参考`println!`宏进行实现即可，难点在于裸机打印。\n\n先晒结果：\n\n![](rCore-lab-1/result.png)\n\n### 打印彩色字体\n彩色打印是基于[ANSI转义序列](https://zh.wikipedia.org/wiki/ANSI%E8%BD%AC%E4%B9%89%E5%BA%8F%E5%88%97)。在shell中执行如下命令就可以打印彩色字体。\n\n```bash\necho -e \"\\x1b[31mhello world\\x1b[0m\"\n```\n\n在前端开发中，浏览器 devTools 的输出也支持彩色打印字体、背景等，跟上述shell打印是一样的。\n\n```js\nconsole.log('\\x1b[31mhello world\\x1b[0m')\n```\n\n### 在裸机上实现 hello world 输出\n\n首先要了解在操作系统支持下打印“hello world”和在裸机上打印的区别。知道在操作系统支持下打印“hello world”究竟发生了什么，这是如何在裸机上打印的关键点。\n首先我们假设使用Rust向标准输出流打印“hello world”，会编写如下代码：\n```rust\nfn main() {\n    println!(\"hello world\");\n}\n```\n然后执行`cargo run`或者直接通过`rustc`进行编译执行，这样标准输出设备上就会显示“hello world”了。`println!`是一个rust标准库支持的宏，这个宏的实现实际上又调用了操作系统的系统调用，系统调用再调用硬件接口来实现打印功能。\n\n然而我们要在裸机上打印“hello world”，假设我们还需要使用上面的程序代码实现，这就有问题了，裸机并没有操作系统，所以没有系统调用供rust标准库来实现打印宏。\n\n还有一个问题，就算是裸机也有不同的硬件支持，我们编译的程序也需要知道编译结果需要在什么平台上运行，即目标平台，一般用（CPU架构，CPU厂商，操作系统，运行时）来区分，比如我们实验的平台就是`riscv64gc-unknown-none-elf`。rust标准库在裸机平台上没有实现，但在一些平台，比如`riscv64gc-unknown-linux-gnu`这种有操作系统和运行时的平台rust标准库是有实现的。\n\n综上，我们需要做的就是直接调用操作系统之下的运行环境接口（SBI，Supervisor Binary Interface）来打印而不使用标准库，并将rust程序编译为`riscv64gc-unknown-none-elf`平台上的程序，然后在对应裸机上执行。\n\n在这里，使用`qemu-system-riscv64`来模拟riscv裸机环境，其中有一些限制，你需要知道这个裸机对应的bootloader应该放在内存哪里，bootloader执行完成后跳转到的我们的程序起始位置在哪里。\n\n### log 控制等级、展示不同颜色\n\n因为rust有现成的crate可用，使用了log这个crate，只需要实现`Log`接口即可通过等级来打印不同颜色的日志，也可以设置最强日志等级进行拦截。\n\n### 利用彩色输出宏输出 os 内存空间布局\n\n获取内存空间布局，即各个段的位置，即获取一些全局符号，`.stext`、`.etext`等的位置，在这里我们使用如下代码：\n```rust\n    extern \"C\" {\n        fn stext();\n        fn etext();\n        fn srodata();\n        fn erodata();\n        fn sdata();\n        fn edata();\n        fn sbss();\n        fn ebss();\n        fn boot_stack();\n        fn boot_stack_top();\n    }\n```\n这是根据“C”这种约定的ABI来进行获取全局符号，这样我们就获得了各个段的开始和结尾。\n\n\n## Reference\n- https://rcore-os.github.io/rCore-Tutorial-Book-v3/appendix-c/index.html","source":"_posts/rCore-lab-1.md","raw":"---\ntitle: rCore Lab 第一期：应用程序与基本执行环境\ndate: 2021-12-26 17:02:31\ntags:\n- Operating System\n- Rust\n---\n\n{% note primary %}\n实现彩色打印 Hello World。\n{% endnote %}\n\n<!-- more -->\n\n---\n\n## 实验要求\n\n- 实现分支：ch1\n\n- 完成实验指导书中的内容并在裸机上实现 hello world 输出。\n\n- 实现彩色输出宏(只要求可以彩色输出，不要求 log 等级控制，不要求多种颜色)\n\n- 隐形要求：可以关闭内核所有输出。从 lab2 开始要求关闭内核所有输出（如果实现了 log 等级控制，那么这一点自然就实现了）。\n\n- 利用彩色输出宏输出 os 内存空间布局\n\n-  输出 .text、.data、.rodata、.bss 各段位置，输出等级为 INFO。\n\n> challenge: 支持多核，实现多个核的 boot。\n\n## 开始\n\n\n{% note info %}\n代码详情参考[Github](https://github.com/ScarboroughCoral/rCore-lab/tree/ch1)\n{% endnote %}\n\n\n\n基于[rCore-Tutorial-v3](https://github.com/rcore-os/rCore-Tutorial-v3) 的 `ch1` 进行开发彩色打印“hello world”很简单，只需要参考`println!`宏进行实现即可，难点在于裸机打印。\n\n先晒结果：\n\n![](rCore-lab-1/result.png)\n\n### 打印彩色字体\n彩色打印是基于[ANSI转义序列](https://zh.wikipedia.org/wiki/ANSI%E8%BD%AC%E4%B9%89%E5%BA%8F%E5%88%97)。在shell中执行如下命令就可以打印彩色字体。\n\n```bash\necho -e \"\\x1b[31mhello world\\x1b[0m\"\n```\n\n在前端开发中，浏览器 devTools 的输出也支持彩色打印字体、背景等，跟上述shell打印是一样的。\n\n```js\nconsole.log('\\x1b[31mhello world\\x1b[0m')\n```\n\n### 在裸机上实现 hello world 输出\n\n首先要了解在操作系统支持下打印“hello world”和在裸机上打印的区别。知道在操作系统支持下打印“hello world”究竟发生了什么，这是如何在裸机上打印的关键点。\n首先我们假设使用Rust向标准输出流打印“hello world”，会编写如下代码：\n```rust\nfn main() {\n    println!(\"hello world\");\n}\n```\n然后执行`cargo run`或者直接通过`rustc`进行编译执行，这样标准输出设备上就会显示“hello world”了。`println!`是一个rust标准库支持的宏，这个宏的实现实际上又调用了操作系统的系统调用，系统调用再调用硬件接口来实现打印功能。\n\n然而我们要在裸机上打印“hello world”，假设我们还需要使用上面的程序代码实现，这就有问题了，裸机并没有操作系统，所以没有系统调用供rust标准库来实现打印宏。\n\n还有一个问题，就算是裸机也有不同的硬件支持，我们编译的程序也需要知道编译结果需要在什么平台上运行，即目标平台，一般用（CPU架构，CPU厂商，操作系统，运行时）来区分，比如我们实验的平台就是`riscv64gc-unknown-none-elf`。rust标准库在裸机平台上没有实现，但在一些平台，比如`riscv64gc-unknown-linux-gnu`这种有操作系统和运行时的平台rust标准库是有实现的。\n\n综上，我们需要做的就是直接调用操作系统之下的运行环境接口（SBI，Supervisor Binary Interface）来打印而不使用标准库，并将rust程序编译为`riscv64gc-unknown-none-elf`平台上的程序，然后在对应裸机上执行。\n\n在这里，使用`qemu-system-riscv64`来模拟riscv裸机环境，其中有一些限制，你需要知道这个裸机对应的bootloader应该放在内存哪里，bootloader执行完成后跳转到的我们的程序起始位置在哪里。\n\n### log 控制等级、展示不同颜色\n\n因为rust有现成的crate可用，使用了log这个crate，只需要实现`Log`接口即可通过等级来打印不同颜色的日志，也可以设置最强日志等级进行拦截。\n\n### 利用彩色输出宏输出 os 内存空间布局\n\n获取内存空间布局，即各个段的位置，即获取一些全局符号，`.stext`、`.etext`等的位置，在这里我们使用如下代码：\n```rust\n    extern \"C\" {\n        fn stext();\n        fn etext();\n        fn srodata();\n        fn erodata();\n        fn sdata();\n        fn edata();\n        fn sbss();\n        fn ebss();\n        fn boot_stack();\n        fn boot_stack_top();\n    }\n```\n这是根据“C”这种约定的ABI来进行获取全局符号，这样我们就获得了各个段的开始和结尾。\n\n\n## Reference\n- https://rcore-os.github.io/rCore-Tutorial-Book-v3/appendix-c/index.html","slug":"rCore-lab-1","published":1,"updated":"2022-01-06T04:09:12.476Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky2gd74c0000wps02i454nfp","content":"<div class=\"note primary\"><p>实现彩色打印 Hello World。</p>\n</div>\n\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"实验要求\"><a href=\"#实验要求\" class=\"headerlink\" title=\"实验要求\"></a>实验要求</h2><ul>\n<li><p>实现分支：ch1</p>\n</li>\n<li><p>完成实验指导书中的内容并在裸机上实现 hello world 输出。</p>\n</li>\n<li><p>实现彩色输出宏(只要求可以彩色输出，不要求 log 等级控制，不要求多种颜色)</p>\n</li>\n<li><p>隐形要求：可以关闭内核所有输出。从 lab2 开始要求关闭内核所有输出（如果实现了 log 等级控制，那么这一点自然就实现了）。</p>\n</li>\n<li><p>利用彩色输出宏输出 os 内存空间布局</p>\n</li>\n<li><p> 输出 .text、.data、.rodata、.bss 各段位置，输出等级为 INFO。</p>\n</li>\n</ul>\n<blockquote>\n<p>challenge: 支持多核，实现多个核的 boot。</p>\n</blockquote>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><div class=\"note info\"><p>代码详情参考<a href=\"https://github.com/ScarboroughCoral/rCore-lab/tree/ch1\">Github</a></p>\n</div>\n\n\n\n<p>基于<a href=\"https://github.com/rcore-os/rCore-Tutorial-v3\">rCore-Tutorial-v3</a> 的 <code>ch1</code> 进行开发彩色打印“hello world”很简单，只需要参考<code>println!</code>宏进行实现即可，难点在于裸机打印。</p>\n<p>先晒结果：</p>\n<p><img data-src=\"rCore-lab-1/result.png\"></p>\n<h3 id=\"打印彩色字体\"><a href=\"#打印彩色字体\" class=\"headerlink\" title=\"打印彩色字体\"></a>打印彩色字体</h3><p>彩色打印是基于<a href=\"https://zh.wikipedia.org/wiki/ANSI%E8%BD%AC%E4%B9%89%E5%BA%8F%E5%88%97\">ANSI转义序列</a>。在shell中执行如下命令就可以打印彩色字体。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\x1b[31mhello world\\x1b[0m&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>在前端开发中，浏览器 devTools 的输出也支持彩色打印字体、背景等，跟上述shell打印是一样的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;\\x1b[31mhello world\\x1b[0m&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在裸机上实现-hello-world-输出\"><a href=\"#在裸机上实现-hello-world-输出\" class=\"headerlink\" title=\"在裸机上实现 hello world 输出\"></a>在裸机上实现 hello world 输出</h3><p>首先要了解在操作系统支持下打印“hello world”和在裸机上打印的区别。知道在操作系统支持下打印“hello world”究竟发生了什么，这是如何在裸机上打印的关键点。<br>首先我们假设使用Rust向标准输出流打印“hello world”，会编写如下代码：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;hello world&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后执行<code>cargo run</code>或者直接通过<code>rustc</code>进行编译执行，这样标准输出设备上就会显示“hello world”了。<code>println!</code>是一个rust标准库支持的宏，这个宏的实现实际上又调用了操作系统的系统调用，系统调用再调用硬件接口来实现打印功能。</p>\n<p>然而我们要在裸机上打印“hello world”，假设我们还需要使用上面的程序代码实现，这就有问题了，裸机并没有操作系统，所以没有系统调用供rust标准库来实现打印宏。</p>\n<p>还有一个问题，就算是裸机也有不同的硬件支持，我们编译的程序也需要知道编译结果需要在什么平台上运行，即目标平台，一般用（CPU架构，CPU厂商，操作系统，运行时）来区分，比如我们实验的平台就是<code>riscv64gc-unknown-none-elf</code>。rust标准库在裸机平台上没有实现，但在一些平台，比如<code>riscv64gc-unknown-linux-gnu</code>这种有操作系统和运行时的平台rust标准库是有实现的。</p>\n<p>综上，我们需要做的就是直接调用操作系统之下的运行环境接口（SBI，Supervisor Binary Interface）来打印而不使用标准库，并将rust程序编译为<code>riscv64gc-unknown-none-elf</code>平台上的程序，然后在对应裸机上执行。</p>\n<p>在这里，使用<code>qemu-system-riscv64</code>来模拟riscv裸机环境，其中有一些限制，你需要知道这个裸机对应的bootloader应该放在内存哪里，bootloader执行完成后跳转到的我们的程序起始位置在哪里。</p>\n<h3 id=\"log-控制等级、展示不同颜色\"><a href=\"#log-控制等级、展示不同颜色\" class=\"headerlink\" title=\"log 控制等级、展示不同颜色\"></a>log 控制等级、展示不同颜色</h3><p>因为rust有现成的crate可用，使用了log这个crate，只需要实现<code>Log</code>接口即可通过等级来打印不同颜色的日志，也可以设置最强日志等级进行拦截。</p>\n<h3 id=\"利用彩色输出宏输出-os-内存空间布局\"><a href=\"#利用彩色输出宏输出-os-内存空间布局\" class=\"headerlink\" title=\"利用彩色输出宏输出 os 内存空间布局\"></a>利用彩色输出宏输出 os 内存空间布局</h3><p>获取内存空间布局，即各个段的位置，即获取一些全局符号，<code>.stext</code>、<code>.etext</code>等的位置，在这里我们使用如下代码：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">stext</span></span>();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">etext</span></span>();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">srodata</span></span>();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">erodata</span></span>();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">sdata</span></span>();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">edata</span></span>();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">sbss</span></span>();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">ebss</span></span>();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">boot_stack</span></span>();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">boot_stack_top</span></span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是根据“C”这种约定的ABI来进行获取全局符号，这样我们就获得了各个段的开始和结尾。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://rcore-os.github.io/rCore-Tutorial-Book-v3/appendix-c/index.html\">https://rcore-os.github.io/rCore-Tutorial-Book-v3/appendix-c/index.html</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note primary\"><p>实现彩色打印 Hello World。</p>\n</div>","more":"<hr>\n<h2 id=\"实验要求\"><a href=\"#实验要求\" class=\"headerlink\" title=\"实验要求\"></a>实验要求</h2><ul>\n<li><p>实现分支：ch1</p>\n</li>\n<li><p>完成实验指导书中的内容并在裸机上实现 hello world 输出。</p>\n</li>\n<li><p>实现彩色输出宏(只要求可以彩色输出，不要求 log 等级控制，不要求多种颜色)</p>\n</li>\n<li><p>隐形要求：可以关闭内核所有输出。从 lab2 开始要求关闭内核所有输出（如果实现了 log 等级控制，那么这一点自然就实现了）。</p>\n</li>\n<li><p>利用彩色输出宏输出 os 内存空间布局</p>\n</li>\n<li><p> 输出 .text、.data、.rodata、.bss 各段位置，输出等级为 INFO。</p>\n</li>\n</ul>\n<blockquote>\n<p>challenge: 支持多核，实现多个核的 boot。</p>\n</blockquote>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><div class=\"note info\"><p>代码详情参考<a href=\"https://github.com/ScarboroughCoral/rCore-lab/tree/ch1\">Github</a></p>\n</div>\n\n\n\n<p>基于<a href=\"https://github.com/rcore-os/rCore-Tutorial-v3\">rCore-Tutorial-v3</a> 的 <code>ch1</code> 进行开发彩色打印“hello world”很简单，只需要参考<code>println!</code>宏进行实现即可，难点在于裸机打印。</p>\n<p>先晒结果：</p>\n<p><img data-src=\"rCore-lab-1/result.png\"></p>\n<h3 id=\"打印彩色字体\"><a href=\"#打印彩色字体\" class=\"headerlink\" title=\"打印彩色字体\"></a>打印彩色字体</h3><p>彩色打印是基于<a href=\"https://zh.wikipedia.org/wiki/ANSI%E8%BD%AC%E4%B9%89%E5%BA%8F%E5%88%97\">ANSI转义序列</a>。在shell中执行如下命令就可以打印彩色字体。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\x1b[31mhello world\\x1b[0m&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>在前端开发中，浏览器 devTools 的输出也支持彩色打印字体、背景等，跟上述shell打印是一样的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;\\x1b[31mhello world\\x1b[0m&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在裸机上实现-hello-world-输出\"><a href=\"#在裸机上实现-hello-world-输出\" class=\"headerlink\" title=\"在裸机上实现 hello world 输出\"></a>在裸机上实现 hello world 输出</h3><p>首先要了解在操作系统支持下打印“hello world”和在裸机上打印的区别。知道在操作系统支持下打印“hello world”究竟发生了什么，这是如何在裸机上打印的关键点。<br>首先我们假设使用Rust向标准输出流打印“hello world”，会编写如下代码：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;hello world&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后执行<code>cargo run</code>或者直接通过<code>rustc</code>进行编译执行，这样标准输出设备上就会显示“hello world”了。<code>println!</code>是一个rust标准库支持的宏，这个宏的实现实际上又调用了操作系统的系统调用，系统调用再调用硬件接口来实现打印功能。</p>\n<p>然而我们要在裸机上打印“hello world”，假设我们还需要使用上面的程序代码实现，这就有问题了，裸机并没有操作系统，所以没有系统调用供rust标准库来实现打印宏。</p>\n<p>还有一个问题，就算是裸机也有不同的硬件支持，我们编译的程序也需要知道编译结果需要在什么平台上运行，即目标平台，一般用（CPU架构，CPU厂商，操作系统，运行时）来区分，比如我们实验的平台就是<code>riscv64gc-unknown-none-elf</code>。rust标准库在裸机平台上没有实现，但在一些平台，比如<code>riscv64gc-unknown-linux-gnu</code>这种有操作系统和运行时的平台rust标准库是有实现的。</p>\n<p>综上，我们需要做的就是直接调用操作系统之下的运行环境接口（SBI，Supervisor Binary Interface）来打印而不使用标准库，并将rust程序编译为<code>riscv64gc-unknown-none-elf</code>平台上的程序，然后在对应裸机上执行。</p>\n<p>在这里，使用<code>qemu-system-riscv64</code>来模拟riscv裸机环境，其中有一些限制，你需要知道这个裸机对应的bootloader应该放在内存哪里，bootloader执行完成后跳转到的我们的程序起始位置在哪里。</p>\n<h3 id=\"log-控制等级、展示不同颜色\"><a href=\"#log-控制等级、展示不同颜色\" class=\"headerlink\" title=\"log 控制等级、展示不同颜色\"></a>log 控制等级、展示不同颜色</h3><p>因为rust有现成的crate可用，使用了log这个crate，只需要实现<code>Log</code>接口即可通过等级来打印不同颜色的日志，也可以设置最强日志等级进行拦截。</p>\n<h3 id=\"利用彩色输出宏输出-os-内存空间布局\"><a href=\"#利用彩色输出宏输出-os-内存空间布局\" class=\"headerlink\" title=\"利用彩色输出宏输出 os 内存空间布局\"></a>利用彩色输出宏输出 os 内存空间布局</h3><p>获取内存空间布局，即各个段的位置，即获取一些全局符号，<code>.stext</code>、<code>.etext</code>等的位置，在这里我们使用如下代码：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">stext</span></span>();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">etext</span></span>();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">srodata</span></span>();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">erodata</span></span>();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">sdata</span></span>();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">edata</span></span>();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">sbss</span></span>();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">ebss</span></span>();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">boot_stack</span></span>();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">boot_stack_top</span></span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是根据“C”这种约定的ABI来进行获取全局符号，这样我们就获得了各个段的开始和结尾。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://rcore-os.github.io/rCore-Tutorial-Book-v3/appendix-c/index.html\">https://rcore-os.github.io/rCore-Tutorial-Book-v3/appendix-c/index.html</a></li>\n</ul>"}],"PostAsset":[{"_id":"source/_posts/5g-technology-advent/1552395582880.png","slug":"1552395582880.png","post":"cksq5v7lu0001n0pu2xr7gl47","modified":0,"renderable":0},{"_id":"source/_posts/bitmap-resolver-rectify/1552183022513.png","slug":"1552183022513.png","post":"cksq5v7lz0007n0pu1v1xh6na","modified":0,"renderable":0},{"_id":"source/_posts/bitmap-resolver-rectify/n4xout.png","slug":"n4xout.png","post":"cksq5v7lz0007n0pu1v1xh6na","modified":0,"renderable":0},{"_id":"source/_posts/bmp-edge-dection/3-3.png","slug":"3-3.png","post":"cksq5v7m00009n0pugrvl2u98","modified":0,"renderable":0},{"_id":"source/_posts/bmp-edge-dection/3-log.png","slug":"3-log.png","post":"cksq5v7m00009n0pugrvl2u98","modified":0,"renderable":0},{"_id":"source/_posts/bmp-edge-dection/3-prewit.png","slug":"3-prewit.png","post":"cksq5v7m00009n0pugrvl2u98","modified":0,"renderable":0},{"_id":"source/_posts/bmp-edge-dection/3-sobel.png","slug":"3-sobel.png","post":"cksq5v7m00009n0pugrvl2u98","modified":0,"renderable":0},{"_id":"source/_posts/bitmap-resolver/degrey.png","slug":"degrey.png","post":"cksq5v7m00008n0pu2zp12533","modified":0,"renderable":0},{"_id":"source/_posts/bitmap-resolver/grey.png","slug":"grey.png","post":"cksq5v7m00008n0pu2zp12533","modified":0,"renderable":0},{"_id":"source/_posts/bitmap-resolver/origin.png","slug":"origin.png","post":"cksq5v7m00008n0pu2zp12533","modified":0,"renderable":0},{"_id":"source/_posts/bitmap-resolver/rdivision.png","slug":"rdivision.png","post":"cksq5v7m00008n0pu2zp12533","modified":0,"renderable":0},{"_id":"source/_posts/c-function-pointer/20140317171259_KCBfP.jpeg","slug":"20140317171259_KCBfP.jpeg","post":"cksq5v7m2000dn0pu8e8372l3","modified":0,"renderable":0},{"_id":"source/_posts/byte-alignment/1552037289894.png","slug":"1552037289894.png","post":"cksq5v7m1000cn0pu8w9d5mj7","modified":0,"renderable":0},{"_id":"source/_posts/byte-alignment/1552037549973.png","slug":"1552037549973.png","post":"cksq5v7m1000cn0pu8w9d5mj7","modified":0,"renderable":0},{"_id":"source/_posts/byte-alignment/1552038354295.png","slug":"1552038354295.png","post":"cksq5v7m1000cn0pu8w9d5mj7","modified":0,"renderable":0},{"_id":"source/_posts/byte-alignment/x64-size.png","slug":"x64-size.png","post":"cksq5v7m1000cn0pu8w9d5mj7","modified":0,"renderable":0},{"_id":"source/_posts/byte-alignment/x86-size.png","slug":"x86-size.png","post":"cksq5v7m1000cn0pu8w9d5mj7","modified":0,"renderable":0},{"_id":"source/_posts/concurrency-parallelism/multikernel.png","slug":"multikernel.png","post":"cksq5v7m4000hn0pua9hi1q3k","modified":0,"renderable":0},{"_id":"source/_posts/concurrency-parallelism/solver-class.png","slug":"solver-class.png","post":"cksq5v7m4000hn0pua9hi1q3k","modified":0,"renderable":0},{"_id":"source/_posts/csapp-lab-3/1553868529136.png","slug":"1553868529136.png","post":"cksq5v7m6000on0pu929c7htr","modified":0,"renderable":0},{"_id":"source/_posts/csapp-lab-3/1553869869465.png","slug":"1553869869465.png","post":"cksq5v7m6000on0pu929c7htr","modified":0,"renderable":0},{"_id":"source/_posts/csapp-lab-3/1553870526705.png","slug":"1553870526705.png","post":"cksq5v7m6000on0pu929c7htr","modified":0,"renderable":0},{"_id":"source/_posts/csapp-lab-3/phrase1-success.png","slug":"phrase1-success.png","post":"cksq5v7m6000on0pu929c7htr","modified":0,"renderable":0},{"_id":"source/_posts/csapp-lab-3/phrase1.png","slug":"phrase1.png","post":"cksq5v7m6000on0pu929c7htr","modified":0,"renderable":0},{"_id":"source/_posts/csapp-lab-3/phrase2-insert.png","slug":"phrase2-insert.png","post":"cksq5v7m6000on0pu929c7htr","modified":0,"renderable":0},{"_id":"source/_posts/csapp-lab-3/phrase2-success.png","slug":"phrase2-success.png","post":"cksq5v7m6000on0pu929c7htr","modified":0,"renderable":0},{"_id":"source/_posts/csapp-lab-3/phrase3-rsp-new.png","slug":"phrase3-rsp-new.png","post":"cksq5v7m6000on0pu929c7htr","modified":0,"renderable":0},{"_id":"source/_posts/csapp-lab-3/phrase3-rsp-old.png","slug":"phrase3-rsp-old.png","post":"cksq5v7m6000on0pu929c7htr","modified":0,"renderable":0},{"_id":"source/_posts/csapp-lab-3/phrase3-success.png","slug":"phrase3-success.png","post":"cksq5v7m6000on0pu929c7htr","modified":0,"renderable":0},{"_id":"source/_posts/csapp-lab-3/phrase4-success.png","slug":"phrase4-success.png","post":"cksq5v7m6000on0pu929c7htr","modified":0,"renderable":0},{"_id":"source/_posts/c-reference-pointer/reference-class-new.png","slug":"reference-class-new.png","post":"cksq5v7m4000jn0pu23545m9e","modified":0,"renderable":0},{"_id":"source/_posts/c-reference-pointer/reference-class.png","slug":"reference-class.png","post":"cksq5v7m4000jn0pu23545m9e","modified":0,"renderable":0},{"_id":"source/_posts/c-reference-pointer/reference-struct.png","slug":"reference-struct.png","post":"cksq5v7m4000jn0pu23545m9e","modified":0,"renderable":0},{"_id":"source/_posts/c-reference-pointer/reference.png","slug":"reference.png","post":"cksq5v7m4000jn0pu23545m9e","modified":0,"renderable":0},{"_id":"source/_posts/c-reference-pointer/reference2.png","slug":"reference2.png","post":"cksq5v7m4000jn0pu23545m9e","modified":0,"renderable":0},{"_id":"source/_posts/c-reference-pointer/segment.jpg","slug":"segment.jpg","post":"cksq5v7m4000jn0pu23545m9e","modified":0,"renderable":0},{"_id":"source/_posts/csapp-lab-2/bomb.png","slug":"bomb.png","post":"cksq5v7m7000qn0pu2zv630dj","modified":0,"renderable":0},{"_id":"source/_posts/csapp-lab-2/cgdb.png","slug":"cgdb.png","post":"cksq5v7m7000qn0pu2zv630dj","modified":0,"renderable":0},{"_id":"source/_posts/csapp-lab-2/phrase1-input.png","slug":"phrase1-input.png","post":"cksq5v7m7000qn0pu2zv630dj","modified":0,"renderable":0},{"_id":"source/_posts/csapp-lab-2/phrase1-inputstr.png","slug":"phrase1-inputstr.png","post":"cksq5v7m7000qn0pu2zv630dj","modified":0,"renderable":0},{"_id":"source/_posts/csapp-lab-2/phrase1.png","slug":"phrase1.png","post":"cksq5v7m7000qn0pu2zv630dj","modified":0,"renderable":0},{"_id":"source/_posts/csapp-lab-2/phrase2-readnum.png","slug":"phrase2-readnum.png","post":"cksq5v7m7000qn0pu2zv630dj","modified":0,"renderable":0},{"_id":"source/_posts/csapp-lab-2/phrase2.png","slug":"phrase2.png","post":"cksq5v7m7000qn0pu2zv630dj","modified":0,"renderable":0},{"_id":"source/_posts/csapp-lab-2/phrase3-result.png","slug":"phrase3-result.png","post":"cksq5v7m7000qn0pu2zv630dj","modified":0,"renderable":0},{"_id":"source/_posts/csapp-lab-2/phrase3-think.png","slug":"phrase3-think.png","post":"cksq5v7m7000qn0pu2zv630dj","modified":0,"renderable":0},{"_id":"source/_posts/csapp-lab-2/phrase3.png","slug":"phrase3.png","post":"cksq5v7m7000qn0pu2zv630dj","modified":0,"renderable":0},{"_id":"source/_posts/csapp-lab-2/phrase4-func.png","slug":"phrase4-func.png","post":"cksq5v7m7000qn0pu2zv630dj","modified":0,"renderable":0},{"_id":"source/_posts/csapp-lab-2/phrase4.png","slug":"phrase4.png","post":"cksq5v7m7000qn0pu2zv630dj","modified":0,"renderable":0},{"_id":"source/_posts/csapp-lab-2/phrase5.png","slug":"phrase5.png","post":"cksq5v7m7000qn0pu2zv630dj","modified":0,"renderable":0},{"_id":"source/_posts/csapp-lab-2/phrase6-1.png","slug":"phrase6-1.png","post":"cksq5v7m7000qn0pu2zv630dj","modified":0,"renderable":0},{"_id":"source/_posts/csapp-lab-2/phrase6-2.png","slug":"phrase6-2.png","post":"cksq5v7m7000qn0pu2zv630dj","modified":0,"renderable":0},{"_id":"source/_posts/csapp-lab-2/phrase6-linklist.png","slug":"phrase6-linklist.png","post":"cksq5v7m7000qn0pu2zv630dj","modified":0,"renderable":0},{"_id":"source/_posts/csapp-lab-2/registers.png","slug":"registers.png","post":"cksq5v7m7000qn0pu2zv630dj","modified":0,"renderable":0},{"_id":"source/_posts/csapp-lab-2/stackframe.png","slug":"stackframe.png","post":"cksq5v7m7000qn0pu2zv630dj","modified":0,"renderable":0},{"_id":"source/_posts/csapp-lab-2/success.png","slug":"success.png","post":"cksq5v7m7000qn0pu2zv630dj","modified":0,"renderable":0},{"_id":"source/_posts/csapp-lab-5/cache-simulator.png","slug":"cache-simulator.png","post":"cksq5v7m8000vn0pue0ung4sl","modified":0,"renderable":0},{"_id":"source/_posts/dao-specification/UMLer.jpg","slug":"UMLer.jpg","post":"cksq5v7mb0014n0pu7gwa2c2e","modified":0,"renderable":0},{"_id":"source/_posts/daul-system-principle/daul.jpg","slug":"daul.jpg","post":"cksq5v7me0017n0pufhesaacr","modified":0,"renderable":0},{"_id":"source/_posts/digital-image-kernel-collection/top.jpg","slug":"top.jpg","post":"cksq5v7me001an0pu8sdt330e","modified":0,"renderable":0},{"_id":"source/_posts/dip-transformation/3-3.png","slug":"3-3.png","post":"cksq5v7mf001cn0pugwzl1r5h","modified":0,"renderable":0},{"_id":"source/_posts/dip-transformation/back.png","slug":"back.png","post":"cksq5v7mf001cn0pugwzl1r5h","modified":0,"renderable":0},{"_id":"source/_posts/dip-transformation/rotate.png","slug":"rotate.png","post":"cksq5v7mf001cn0pugwzl1r5h","modified":0,"renderable":0},{"_id":"source/_posts/dip-transformation/scale.png","slug":"scale.png","post":"cksq5v7mf001cn0pugwzl1r5h","modified":0,"renderable":0},{"_id":"source/_posts/dip-transformation/shift.png","slug":"shift.png","post":"cksq5v7mf001cn0pugwzl1r5h","modified":0,"renderable":0},{"_id":"source/_posts/dip-transformation/x-mirror.png","slug":"x-mirror.png","post":"cksq5v7mf001cn0pugwzl1r5h","modified":0,"renderable":0},{"_id":"source/_posts/dip-transformation/y-mirror.png","slug":"y-mirror.png","post":"cksq5v7mf001cn0pugwzl1r5h","modified":0,"renderable":0},{"_id":"source/_posts/docker-one/docker.png","slug":"docker.png","post":"cksq5v7mh001kn0pu3byp8j69","modified":0,"renderable":0},{"_id":"source/_posts/fallout4/ScreenShot0.png","slug":"ScreenShot0.png","post":"cksq5v7mj001sn0puhcp32aqz","modified":0,"renderable":0},{"_id":"source/_posts/fallout4/ScreenShot1.png","slug":"ScreenShot1.png","post":"cksq5v7mj001sn0puhcp32aqz","modified":0,"renderable":0},{"_id":"source/_posts/fallout4/ScreenShot2.png","slug":"ScreenShot2.png","post":"cksq5v7mj001sn0puhcp32aqz","modified":0,"renderable":0},{"_id":"source/_posts/fallout4/ScreenShot3.png","slug":"ScreenShot3.png","post":"cksq5v7mj001sn0puhcp32aqz","modified":0,"renderable":0},{"_id":"source/_posts/fallout4/ScreenShot4.png","slug":"ScreenShot4.png","post":"cksq5v7mj001sn0puhcp32aqz","modified":0,"renderable":0},{"_id":"source/_posts/fallout4/ScreenShot5.png","slug":"ScreenShot5.png","post":"cksq5v7mj001sn0puhcp32aqz","modified":0,"renderable":0},{"_id":"source/_posts/float-think/float.png","slug":"float.png","post":"cksq5v7mk001xn0pu2f26b5su","modified":0,"renderable":0},{"_id":"source/_posts/grayscale-histogram-resolver/1.png","slug":"1.png","post":"cksq5v7mm0028n0pu7kyk8sg6","modified":0,"renderable":0},{"_id":"source/_posts/grayscale-histogram-resolver/1552461156688.png","slug":"1552461156688.png","post":"cksq5v7mm0028n0pu7kyk8sg6","modified":0,"renderable":0},{"_id":"source/_posts/grayscale-histogram-resolver/1552526052073.png","slug":"1552526052073.png","post":"cksq5v7mm0028n0pu7kyk8sg6","modified":0,"renderable":0},{"_id":"source/_posts/grayscale-histogram-resolver/2.png","slug":"2.png","post":"cksq5v7mm0028n0pu7kyk8sg6","modified":0,"renderable":0},{"_id":"source/_posts/grayscale-histogram-resolver/3.png","slug":"3.png","post":"cksq5v7mm0028n0pu7kyk8sg6","modified":0,"renderable":0},{"_id":"source/_posts/grayscale-histogram-resolver/4.png","slug":"4.png","post":"cksq5v7mm0028n0pu7kyk8sg6","modified":0,"renderable":0},{"_id":"source/_posts/grayscale-histogram-resolver/5.png","slug":"5.png","post":"cksq5v7mm0028n0pu7kyk8sg6","modified":0,"renderable":0},{"_id":"source/_posts/ieee754-float-instance-js/754-js.png","slug":"754-js.png","post":"cksq5v7mo002kn0pu12ow9zl5","modified":0,"renderable":0},{"_id":"source/_posts/js-concept-1/stackframe.png","slug":"stackframe.png","post":"cksq5v7mp002nn0pu1kz289vo","modified":0,"renderable":0},{"_id":"source/_posts/osdev-platform/osdev.png","slug":"osdev.png","post":"cksq5v7mz0043n0pu42rx9f2f","modified":0,"renderable":0},{"_id":"source/_posts/shadow-thinking-in-winapi/windows.jpg","slug":"windows.jpg","post":"cksq5v7n00048n0pu4qvk0d9q","modified":0,"renderable":0},{"_id":"source/_posts/spatial-filter/gray1.png","slug":"gray1.png","post":"cksq5v7n2004en0pud5fc9ftc","modified":0,"renderable":0},{"_id":"source/_posts/spatial-filter/gray2-3.png","slug":"gray2-3.png","post":"cksq5v7n2004en0pud5fc9ftc","modified":0,"renderable":0},{"_id":"source/_posts/spatial-filter/gray2.png","slug":"gray2.png","post":"cksq5v7n2004en0pud5fc9ftc","modified":0,"renderable":0},{"_id":"source/_posts/spatial-filter/gray3-3.png","slug":"gray3-3.png","post":"cksq5v7n2004en0pud5fc9ftc","modified":0,"renderable":0},{"_id":"source/_posts/spatial-filter/gray3.png","slug":"gray3.png","post":"cksq5v7n2004en0pud5fc9ftc","modified":0,"renderable":0},{"_id":"source/_posts/tflearn-1/tf.png","slug":"tf.png","post":"cksq5v7n3004jn0pu6u79ahcj","modified":0,"renderable":0},{"_id":"source/_posts/threshold-segmentation/gray.png","slug":"gray.png","post":"cksq5v7n4004rn0pu6xlb8squ","modified":0,"renderable":0},{"_id":"source/_posts/threshold-segmentation/origin.png","slug":"origin.png","post":"cksq5v7n4004rn0pu6xlb8squ","modified":0,"renderable":0},{"_id":"source/_posts/threshold-segmentation/threshold-histogram-iteration.png","slug":"threshold-histogram-iteration.png","post":"cksq5v7n4004rn0pu6xlb8squ","modified":0,"renderable":0},{"_id":"source/_posts/threshold-segmentation/threshold-histogram-otsu.png","slug":"threshold-histogram-otsu.png","post":"cksq5v7n4004rn0pu6xlb8squ","modified":0,"renderable":0},{"_id":"source/_posts/threshold-segmentation/threshold-histogram-seed.png","slug":"threshold-histogram-seed.png","post":"cksq5v7n4004rn0pu6xlb8squ","modified":0,"renderable":0},{"_id":"source/_posts/threshold-segmentation/threshold-iteration.png","slug":"threshold-iteration.png","post":"cksq5v7n4004rn0pu6xlb8squ","modified":0,"renderable":0},{"_id":"source/_posts/threshold-segmentation/threshold-otsu.png","slug":"threshold-otsu.png","post":"cksq5v7n4004rn0pu6xlb8squ","modified":0,"renderable":0},{"_id":"source/_posts/threshold-segmentation/threshold-seed.png","slug":"threshold-seed.png","post":"cksq5v7n4004rn0pu6xlb8squ","modified":0,"renderable":0},{"_id":"source/_posts/web-study/atom.png","slug":"atom.png","post":"cksq5v7o300azn0pu6ei39t8a","modified":0,"renderable":0},{"_id":"source/_posts/web-study/edit.png","slug":"edit.png","post":"cksq5v7o300azn0pu6ei39t8a","modified":0,"renderable":0},{"_id":"source/_posts/web-study/sublime.png","slug":"sublime.png","post":"cksq5v7o300azn0pu6ei39t8a","modified":0,"renderable":0},{"_id":"source/_posts/web-study/web-study.jpg","slug":"web-study.jpg","post":"cksq5v7o300azn0pu6ei39t8a","modified":0,"renderable":0},{"_id":"source/_posts/web-study/web前端.png","slug":"web前端.png","post":"cksq5v7o300azn0pu6ei39t8a","modified":0,"renderable":0},{"_id":"source/_posts/web-study/布局.png","slug":"布局.png","post":"cksq5v7o300azn0pu6ei39t8a","modified":0,"renderable":0},{"_id":"source/_posts/csapp-lab-1/1546740914782.png","slug":"1546740914782.png","post":"cksq5v7o500b5n0pu4pql5tw2","modified":0,"renderable":0},{"_id":"source/_posts/csapp-lab-1/result.png","slug":"result.png","post":"cksq5v7o500b5n0pu4pql5tw2","modified":0,"renderable":0},{"_id":"source/_posts/webpack-optimize/analyzer.png","slug":"analyzer.png","post":"cksq5v7o400b2n0pu29iabfag","modified":0,"renderable":0},{"_id":"source/_posts/webpack-optimize/optimize1.png","slug":"optimize1.png","post":"cksq5v7o400b2n0pu29iabfag","modified":0,"renderable":0},{"_id":"source/_posts/webpack-optimize/optimize2.png","slug":"optimize2.png","post":"cksq5v7o400b2n0pu29iabfag","modified":0,"renderable":0},{"_id":"source/_posts/webpack-optimize/optimize3.png","slug":"optimize3.png","post":"cksq5v7o400b2n0pu29iabfag","modified":0,"renderable":0},{"_id":"source/_posts/webpack-optimize/optimize4.png","slug":"optimize4.png","post":"cksq5v7o400b2n0pu29iabfag","modified":0,"renderable":0},{"_id":"source/_posts/webpack-optimize/optimize5.png","slug":"optimize5.png","post":"cksq5v7o400b2n0pu29iabfag","modified":0,"renderable":0},{"_id":"source/_posts/webpack-optimize/optimize6.png","slug":"optimize6.png","post":"cksq5v7o400b2n0pu29iabfag","modified":0,"renderable":0},{"_id":"source/_posts/webpack-optimize/optimize7.png","slug":"optimize7.png","post":"cksq5v7o400b2n0pu29iabfag","modified":0,"renderable":0},{"_id":"source/_posts/csapp-lab-4/pipe.jpg","slug":"pipe.jpg","post":"cksq5v7o500b8n0puekhqdg1x","modified":0,"renderable":0},{"_id":"source/_posts/csapp-lab-4/result.png","slug":"result.png","post":"cksq5v7o500b8n0puekhqdg1x","modified":0,"renderable":0},{"_id":"source/_posts/csapp-lab-4/result2.png","slug":"result2.png","post":"cksq5v7o500b8n0puekhqdg1x","modified":0,"renderable":0},{"_id":"source/_posts/csapp-lab-4/seq.jpg","slug":"seq.jpg","post":"cksq5v7o500b8n0puekhqdg1x","modified":0,"renderable":0},{"_id":"source/_posts/virtual-memory/addr-trans1.png","slug":"addr-trans1.png","post":"cksq5v7o600bbn0pu0227fxnx","modified":0,"renderable":0},{"_id":"source/_posts/virtual-memory/addr-trans2.png","slug":"addr-trans2.png","post":"cksq5v7o600bbn0pu0227fxnx","modified":0,"renderable":0},{"_id":"source/_posts/virtual-memory/addr-trans3.png","slug":"addr-trans3.png","post":"cksq5v7o600bbn0pu0227fxnx","modified":0,"renderable":0},{"_id":"source/_posts/virtual-memory/addr-trans4.png","slug":"addr-trans4.png","post":"cksq5v7o600bbn0pu0227fxnx","modified":0,"renderable":0},{"_id":"source/_posts/virtual-memory/addr-trans5.png","slug":"addr-trans5.png","post":"cksq5v7o600bbn0pu0227fxnx","modified":0,"renderable":0},{"_id":"source/_posts/virtual-memory/addr-trans6.png","slug":"addr-trans6.png","post":"cksq5v7o600bbn0pu0227fxnx","modified":0,"renderable":0},{"_id":"source/_posts/virtual-memory/mem-fast1.png","slug":"mem-fast1.png","post":"cksq5v7o600bbn0pu0227fxnx","modified":0,"renderable":0},{"_id":"source/_posts/virtual-memory/mem-fast2.png","slug":"mem-fast2.png","post":"cksq5v7o600bbn0pu0227fxnx","modified":0,"renderable":0},{"_id":"source/_posts/virtual-memory/mem-fast3.png","slug":"mem-fast3.png","post":"cksq5v7o600bbn0pu0227fxnx","modified":0,"renderable":0},{"_id":"source/_posts/virtual-memory/mem-protection1.png","slug":"mem-protection1.png","post":"cksq5v7o600bbn0pu0227fxnx","modified":0,"renderable":0},{"_id":"source/_posts/virtual-memory/mem-protection2.png","slug":"mem-protection2.png","post":"cksq5v7o600bbn0pu0227fxnx","modified":0,"renderable":0},{"_id":"source/_posts/virtual-memory/mem-protection3.png","slug":"mem-protection3.png","post":"cksq5v7o600bbn0pu0227fxnx","modified":0,"renderable":0},{"_id":"source/_posts/virtual-memory/mem-protection4.png","slug":"mem-protection4.png","post":"cksq5v7o600bbn0pu0227fxnx","modified":0,"renderable":0},{"_id":"source/_posts/virtual-memory/memory-hole.png","slug":"memory-hole.png","post":"cksq5v7o600bbn0pu0227fxnx","modified":0,"renderable":0},{"_id":"source/_posts/virtual-memory/memory-share.png","slug":"memory-share.png","post":"cksq5v7o600bbn0pu0227fxnx","modified":0,"renderable":0},{"_id":"source/_posts/virtual-memory/multi-level-page-table1.png","slug":"multi-level-page-table1.png","post":"cksq5v7o600bbn0pu0227fxnx","modified":0,"renderable":0},{"_id":"source/_posts/virtual-memory/multi-level-page-table2.png","slug":"multi-level-page-table2.png","post":"cksq5v7o600bbn0pu0227fxnx","modified":0,"renderable":0},{"_id":"source/_posts/virtual-memory/multi-level-page-table3.png","slug":"multi-level-page-table3.png","post":"cksq5v7o600bbn0pu0227fxnx","modified":0,"renderable":0},{"_id":"source/_posts/virtual-memory/not-enough-memory.png","slug":"not-enough-memory.png","post":"cksq5v7o600bbn0pu0227fxnx","modified":0,"renderable":0},{"_id":"source/_posts/virtual-memory/page-table1.png","slug":"page-table1.png","post":"cksq5v7o600bbn0pu0227fxnx","modified":0,"renderable":0},{"_id":"source/_posts/virtual-memory/page-table2.png","slug":"page-table2.png","post":"cksq5v7o600bbn0pu0227fxnx","modified":0,"renderable":0},{"_id":"source/_posts/virtual-memory/page-table3.png","slug":"page-table3.png","post":"cksq5v7o600bbn0pu0227fxnx","modified":0,"renderable":0},{"_id":"source/_posts/virtual-memory/program-secure.png","slug":"program-secure.png","post":"cksq5v7o600bbn0pu0227fxnx","modified":0,"renderable":0},{"_id":"source/_posts/virtual-memory/tlb-cache1.png","slug":"tlb-cache1.png","post":"cksq5v7o600bbn0pu0227fxnx","modified":0,"renderable":0},{"_id":"source/_posts/virtual-memory/tlb-cache2.png","slug":"tlb-cache2.png","post":"cksq5v7o600bbn0pu0227fxnx","modified":0,"renderable":0},{"_id":"source/_posts/virtual-memory/tlb-cache3.png","slug":"tlb-cache3.png","post":"cksq5v7o600bbn0pu0227fxnx","modified":0,"renderable":0},{"_id":"source/_posts/virtual-memory/tlb-cache4.png","slug":"tlb-cache4.png","post":"cksq5v7o600bbn0pu0227fxnx","modified":0,"renderable":0},{"_id":"source/_posts/virtual-memory/tlb-example1.png","slug":"tlb-example1.png","post":"cksq5v7o600bbn0pu0227fxnx","modified":0,"renderable":0},{"_id":"source/_posts/virtual-memory/tlb-example2.png","slug":"tlb-example2.png","post":"cksq5v7o600bbn0pu0227fxnx","modified":0,"renderable":0},{"_id":"source/_posts/virtual-memory/tlb-example3.png","slug":"tlb-example3.png","post":"cksq5v7o600bbn0pu0227fxnx","modified":0,"renderable":0},{"_id":"source/_posts/virtual-memory/tlb-example4.png","slug":"tlb-example4.png","post":"cksq5v7o600bbn0pu0227fxnx","modified":0,"renderable":0},{"_id":"source/_posts/virtual-memory/vm-cache.png","slug":"vm-cache.png","post":"cksq5v7o600bbn0pu0227fxnx","modified":0,"renderable":0},{"_id":"source/_posts/virtual-memory/vm-problem1.png","slug":"vm-problem1.png","post":"cksq5v7o600bbn0pu0227fxnx","modified":0,"renderable":0},{"_id":"source/_posts/virtual-memory/vm-problem2.png","slug":"vm-problem2.png","post":"cksq5v7o600bbn0pu0227fxnx","modified":0,"renderable":0},{"_id":"source/_posts/virtual-memory/vm-problem3.png","slug":"vm-problem3.png","post":"cksq5v7o600bbn0pu0227fxnx","modified":0,"renderable":0},{"_id":"source/_posts/virtual-memory/vm-work1.png","slug":"vm-work1.png","post":"cksq5v7o600bbn0pu0227fxnx","modified":0,"renderable":0},{"_id":"source/_posts/virtual-memory/vm-work2.png","slug":"vm-work2.png","post":"cksq5v7o600bbn0pu0227fxnx","modified":0,"renderable":0},{"_id":"source/_posts/virtual-memory/whatis-vm1.png","slug":"whatis-vm1.png","post":"cksq5v7o600bbn0pu0227fxnx","modified":0,"renderable":0},{"_id":"source/_posts/rCore-lab-1/result.png","post":"cky2gd74c0000wps02i454nfp","slug":"result.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cksq5v7lu0001n0pu2xr7gl47","category_id":"cksq5v7lx0004n0pu8wrycmpo","_id":"cksq5v7m2000en0puco2m1rj3"},{"post_id":"cksq5v7m1000cn0pu8w9d5mj7","category_id":"cksq5v7m1000an0puc6j33bkj","_id":"cksq5v7m5000kn0puaz97dg4g"},{"post_id":"cksq5v7lw0003n0pufnfj83ux","category_id":"cksq5v7m1000an0puc6j33bkj","_id":"cksq5v7m7000pn0pu2damdl2r"},{"post_id":"cksq5v7m4000hn0pua9hi1q3k","category_id":"cksq5v7m1000an0puc6j33bkj","_id":"cksq5v7mf001bn0pu2geo2hnm"},{"post_id":"cksq5v7m4000hn0pua9hi1q3k","category_id":"cksq5v7ma0011n0pufrq3bqor","_id":"cksq5v7mg001gn0pu9gwogw4y"},{"post_id":"cksq5v7me0017n0pufhesaacr","category_id":"cksq5v7m1000an0puc6j33bkj","_id":"cksq5v7mh001jn0pu7koeav5l"},{"post_id":"cksq5v7me0017n0pufhesaacr","category_id":"cksq5v7ma0011n0pufrq3bqor","_id":"cksq5v7mi001on0pu6x9s7uy9"},{"post_id":"cksq5v7lz0007n0pu1v1xh6na","category_id":"cksq5v7m1000an0puc6j33bkj","_id":"cksq5v7mj001rn0pudxsf7bm9"},{"post_id":"cksq5v7lz0007n0pu1v1xh6na","category_id":"cksq5v7mc0016n0pu5gz511uz","_id":"cksq5v7mk001wn0pu6kywho2d"},{"post_id":"cksq5v7me001an0pu8sdt330e","category_id":"cksq5v7m1000an0puc6j33bkj","_id":"cksq5v7mk001zn0puetq4g847"},{"post_id":"cksq5v7me001an0pu8sdt330e","category_id":"cksq5v7mc0016n0pu5gz511uz","_id":"cksq5v7ml0024n0pu8jsnhdpp"},{"post_id":"cksq5v7mf001cn0pugwzl1r5h","category_id":"cksq5v7m1000an0puc6j33bkj","_id":"cksq5v7mm0027n0pu5yc5ho7s"},{"post_id":"cksq5v7mf001cn0pugwzl1r5h","category_id":"cksq5v7mc0016n0pu5gz511uz","_id":"cksq5v7mn002bn0pubsmqc6f3"},{"post_id":"cksq5v7m6000on0pu929c7htr","category_id":"cksq5v7m1000an0puc6j33bkj","_id":"cksq5v7mn002en0pu9l745pp5"},{"post_id":"cksq5v7m6000on0pu929c7htr","category_id":"cksq5v7ma0011n0pufrq3bqor","_id":"cksq5v7mo002in0pu4ocx2xhf"},{"post_id":"cksq5v7mk001xn0pu2f26b5su","category_id":"cksq5v7m1000an0puc6j33bkj","_id":"cksq5v7mp002mn0pu546kbzgh"},{"post_id":"cksq5v7m00008n0pu2zp12533","category_id":"cksq5v7m1000an0puc6j33bkj","_id":"cksq5v7mp002qn0pu4wl05q0u"},{"post_id":"cksq5v7m00008n0pu2zp12533","category_id":"cksq5v7mc0016n0pu5gz511uz","_id":"cksq5v7mq002tn0puhz31hrdo"},{"post_id":"cksq5v7m7000qn0pu2zv630dj","category_id":"cksq5v7m1000an0puc6j33bkj","_id":"cksq5v7mr002wn0puhhaw8r7p"},{"post_id":"cksq5v7m7000qn0pu2zv630dj","category_id":"cksq5v7ma0011n0pufrq3bqor","_id":"cksq5v7mr002zn0puhbujchde"},{"post_id":"cksq5v7mm0028n0pu7kyk8sg6","category_id":"cksq5v7m1000an0puc6j33bkj","_id":"cksq5v7ms0033n0pu7d527v1t"},{"post_id":"cksq5v7mm0028n0pu7kyk8sg6","category_id":"cksq5v7mc0016n0pu5gz511uz","_id":"cksq5v7mt0037n0puf4bd85wm"},{"post_id":"cksq5v7m00009n0pugrvl2u98","category_id":"cksq5v7m1000an0puc6j33bkj","_id":"cksq5v7mu003bn0puhzgzafjp"},{"post_id":"cksq5v7m00009n0pugrvl2u98","category_id":"cksq5v7mc0016n0pu5gz511uz","_id":"cksq5v7mu003en0pual2r3tvh"},{"post_id":"cksq5v7m8000vn0pue0ung4sl","category_id":"cksq5v7m1000an0puc6j33bkj","_id":"cksq5v7mv003in0pues2gdp24"},{"post_id":"cksq5v7m8000vn0pue0ung4sl","category_id":"cksq5v7ma0011n0pufrq3bqor","_id":"cksq5v7mw003mn0pubx642l4e"},{"post_id":"cksq5v7m9000yn0pug3c7934g","category_id":"cksq5v7m1000an0puc6j33bkj","_id":"cksq5v7mw003pn0pu4iyj93zp"},{"post_id":"cksq5v7m9000yn0pug3c7934g","category_id":"cksq5v7ma0011n0pufrq3bqor","_id":"cksq5v7mx003sn0pu3znt9pfv"},{"post_id":"cksq5v7m2000dn0pu8e8372l3","category_id":"cksq5v7m9000wn0pu1y74f0dj","_id":"cksq5v7my003wn0pub7evbpnx"},{"post_id":"cksq5v7m2000dn0pu8e8372l3","category_id":"cksq5v7ms0032n0pu0j4mgpp6","_id":"cksq5v7my0040n0pu344y8ocj"},{"post_id":"cksq5v7mb0014n0pu7gwa2c2e","category_id":"cksq5v7m9000wn0pu1y74f0dj","_id":"cksq5v7mz0042n0pu3jo454js"},{"post_id":"cksq5v7mb0014n0pu7gwa2c2e","category_id":"cksq5v7mw003on0pug85e1d0g","_id":"cksq5v7n00046n0puai8v36w0"},{"post_id":"cksq5v7mz0043n0pu42rx9f2f","category_id":"cksq5v7m1000an0puc6j33bkj","_id":"cksq5v7n2004cn0pueykq9rw7"},{"post_id":"cksq5v7mz0043n0pu42rx9f2f","category_id":"cksq5v7ma0011n0pufrq3bqor","_id":"cksq5v7n2004gn0pugs8i0s8y"},{"post_id":"cksq5v7m4000jn0pu23545m9e","category_id":"cksq5v7m9000wn0pu1y74f0dj","_id":"cksq5v7n3004kn0puhym2d1ti"},{"post_id":"cksq5v7m4000jn0pu23545m9e","category_id":"cksq5v7ms0032n0pu0j4mgpp6","_id":"cksq5v7n4004on0pu6wwb77i8"},{"post_id":"cksq5v7n00048n0pu4qvk0d9q","category_id":"cksq5v7m1000an0puc6j33bkj","_id":"cksq5v7n5004sn0pug5maf106"},{"post_id":"cksq5v7n00048n0pu4qvk0d9q","category_id":"cksq5v7ma0011n0pufrq3bqor","_id":"cksq5v7n5004un0pu8bjwc7ev"},{"post_id":"cksq5v7n2004en0pud5fc9ftc","category_id":"cksq5v7m1000an0puc6j33bkj","_id":"cksq5v7n6004yn0pu0fzxh4x9"},{"post_id":"cksq5v7n2004en0pud5fc9ftc","category_id":"cksq5v7mc0016n0pu5gz511uz","_id":"cksq5v7n60050n0pu0qt50wfu"},{"post_id":"cksq5v7n4004mn0pu19a0g3j2","category_id":"cksq5v7m1000an0puc6j33bkj","_id":"cksq5v7n60054n0pu17yrf51a"},{"post_id":"cksq5v7n4004mn0pu19a0g3j2","category_id":"cksq5v7ma0011n0pufrq3bqor","_id":"cksq5v7n70056n0pu4ltv4rkh"},{"post_id":"cksq5v7n4004rn0pu6xlb8squ","category_id":"cksq5v7m1000an0puc6j33bkj","_id":"cksq5v7n7005an0puhhax8wtr"},{"post_id":"cksq5v7n4004rn0pu6xlb8squ","category_id":"cksq5v7mc0016n0pu5gz511uz","_id":"cksq5v7n8005cn0pu4je77lzc"},{"post_id":"cksq5v7m8000tn0pu0argcofo","category_id":"cksq5v7mm0029n0pu9zhd7h76","_id":"cksq5v7n9005kn0pubk3hbgzu"},{"post_id":"cksq5v7m8000tn0pu0argcofo","category_id":"cksq5v7n8005dn0puf6og1mob","_id":"cksq5v7na005nn0pu0zuoffpn"},{"post_id":"cksq5v7mo002kn0pu12ow9zl5","category_id":"cksq5v7mm0029n0pu9zhd7h76","_id":"cksq5v7nb005sn0pu0lmddmvu"},{"post_id":"cksq5v7mo002kn0pu12ow9zl5","category_id":"cksq5v7n9005jn0pufbwtcnan","_id":"cksq5v7nc005vn0pua259ch4e"},{"post_id":"cksq5v7mp002nn0pu1kz289vo","category_id":"cksq5v7mm0029n0pu9zhd7h76","_id":"cksq5v7nc005yn0pu35q71rh6"},{"post_id":"cksq5v7mp002nn0pu1kz289vo","category_id":"cksq5v7n9005jn0pufbwtcnan","_id":"cksq5v7nd0061n0publw4bee5"},{"post_id":"cksq5v7mp002rn0pubk440tf0","category_id":"cksq5v7mm0029n0pu9zhd7h76","_id":"cksq5v7nd0064n0pu79yi1l62"},{"post_id":"cksq5v7mp002rn0pubk440tf0","category_id":"cksq5v7n9005jn0pufbwtcnan","_id":"cksq5v7nd0067n0pu0yut91t2"},{"post_id":"cksq5v7mq002un0pu2hmb0ws4","category_id":"cksq5v7mm0029n0pu9zhd7h76","_id":"cksq5v7nd0069n0pu40z7c7f4"},{"post_id":"cksq5v7mq002un0pu2hmb0ws4","category_id":"cksq5v7n9005jn0pufbwtcnan","_id":"cksq5v7ne006bn0pu85le5twy"},{"post_id":"cksq5v7mr002xn0pub13sdiuo","category_id":"cksq5v7mm0029n0pu9zhd7h76","_id":"cksq5v7ne006en0pugy8k9r4o"},{"post_id":"cksq5v7mr002xn0pub13sdiuo","category_id":"cksq5v7n9005jn0pufbwtcnan","_id":"cksq5v7ne006gn0pughashmy1"},{"post_id":"cksq5v7mr0030n0pu14kdascj","category_id":"cksq5v7mm0029n0pu9zhd7h76","_id":"cksq5v7nf006jn0pugm9afkvx"},{"post_id":"cksq5v7mr0030n0pu14kdascj","category_id":"cksq5v7n9005jn0pufbwtcnan","_id":"cksq5v7nf006ln0pu9rurhedq"},{"post_id":"cksq5v7ms0034n0pucnnr9fca","category_id":"cksq5v7mm0029n0pu9zhd7h76","_id":"cksq5v7nf006nn0pu12ikdiq7"},{"post_id":"cksq5v7ms0034n0pucnnr9fca","category_id":"cksq5v7n9005jn0pufbwtcnan","_id":"cksq5v7nf006pn0pudcl55hwf"},{"post_id":"cksq5v7mt0038n0puahjoc7z6","category_id":"cksq5v7mm0029n0pu9zhd7h76","_id":"cksq5v7ng006sn0pu23ka1w3v"},{"post_id":"cksq5v7mt0038n0puahjoc7z6","category_id":"cksq5v7n9005jn0pufbwtcnan","_id":"cksq5v7ng006vn0pug6hm9b1s"},{"post_id":"cksq5v7mu003cn0pu5y0dby6e","category_id":"cksq5v7mm0029n0pu9zhd7h76","_id":"cksq5v7nh006yn0pu4qyj9f23"},{"post_id":"cksq5v7mu003cn0pu5y0dby6e","category_id":"cksq5v7n9005jn0pufbwtcnan","_id":"cksq5v7nh0070n0pu1fx47b8j"},{"post_id":"cksq5v7ma0010n0pu591wgprr","category_id":"cksq5v7mm0029n0pu9zhd7h76","_id":"cksq5v7nh0072n0pu3ktsc87e"},{"post_id":"cksq5v7ma0010n0pu591wgprr","category_id":"cksq5v7n8005dn0puf6og1mob","_id":"cksq5v7ni0074n0pufmo1gjwi"},{"post_id":"cksq5v7mu003fn0pucgy1a5yy","category_id":"cksq5v7mm0029n0pu9zhd7h76","_id":"cksq5v7ni0077n0pufc6k2bpd"},{"post_id":"cksq5v7mu003fn0pucgy1a5yy","category_id":"cksq5v7n9005jn0pufbwtcnan","_id":"cksq5v7ni0079n0pud7500xya"},{"post_id":"cksq5v7mv003jn0puhx9i4zpi","category_id":"cksq5v7mm0029n0pu9zhd7h76","_id":"cksq5v7ni007cn0pue3et11tp"},{"post_id":"cksq5v7mv003jn0puhx9i4zpi","category_id":"cksq5v7n9005jn0pufbwtcnan","_id":"cksq5v7nj007dn0pu4gzvd9vu"},{"post_id":"cksq5v7mb0012n0pu7adrfx4z","category_id":"cksq5v7mm0029n0pu9zhd7h76","_id":"cksq5v7nj007gn0pu1rpv42tm"},{"post_id":"cksq5v7mb0012n0pu7adrfx4z","category_id":"cksq5v7n8005dn0puf6og1mob","_id":"cksq5v7nj007in0pu3agrh9tk"},{"post_id":"cksq5v7mw003nn0pucjeggby0","category_id":"cksq5v7mm0029n0pu9zhd7h76","_id":"cksq5v7nj007ln0puc4qlbi3w"},{"post_id":"cksq5v7mw003nn0pucjeggby0","category_id":"cksq5v7n9005jn0pufbwtcnan","_id":"cksq5v7nk007on0pubbi6dfxd"},{"post_id":"cksq5v7mx003qn0puaq5narap","category_id":"cksq5v7mm0029n0pu9zhd7h76","_id":"cksq5v7nk007sn0puc9d7bq88"},{"post_id":"cksq5v7mx003qn0puaq5narap","category_id":"cksq5v7nj007fn0puar9j0vda","_id":"cksq5v7nk007un0pufe481g2s"},{"post_id":"cksq5v7mx003tn0pu7yfuabas","category_id":"cksq5v7mm0029n0pu9zhd7h76","_id":"cksq5v7nl007wn0pu6qk56ng6"},{"post_id":"cksq5v7mx003tn0pu7yfuabas","category_id":"cksq5v7n9005jn0pufbwtcnan","_id":"cksq5v7nl007zn0pufzix6tub"},{"post_id":"cksq5v7my003xn0pu5nhl0ld6","category_id":"cksq5v7nk007rn0pubjy40hhy","_id":"cksq5v7nl0081n0pu71t85lmm"},{"post_id":"cksq5v7mg001hn0pubzkrgp6i","category_id":"cksq5v7my003vn0pubik6dfpa","_id":"cksq5v7nm0089n0puc86gbkwl"},{"post_id":"cksq5v7mg001hn0pubzkrgp6i","category_id":"cksq5v7nl0082n0pu2b9majog","_id":"cksq5v7nm008bn0pubzntaqco"},{"post_id":"cksq5v7n00047n0pu200j05mf","category_id":"cksq5v7nm0086n0pudkxjaux9","_id":"cksq5v7nn008fn0pu87gv8dl2"},{"post_id":"cksq5v7n1004bn0pu5fgihj3u","category_id":"cksq5v7nm0086n0pudkxjaux9","_id":"cksq5v7nn008kn0pu5zi60kkl"},{"post_id":"cksq5v7mh001kn0pu3byp8j69","category_id":"cksq5v7my003vn0pubik6dfpa","_id":"cksq5v7no008mn0pu941n8q2k"},{"post_id":"cksq5v7mh001kn0pu3byp8j69","category_id":"cksq5v7nl0082n0pu2b9majog","_id":"cksq5v7no008on0pu9nlgeo42"},{"post_id":"cksq5v7mi001pn0pu2uc94uyf","category_id":"cksq5v7my003vn0pubik6dfpa","_id":"cksq5v7np008un0pu87ocaxz3"},{"post_id":"cksq5v7mi001pn0pu2uc94uyf","category_id":"cksq5v7nl0082n0pu2b9majog","_id":"cksq5v7np008wn0pu88zn6fal"},{"post_id":"cksq5v7mj001sn0puhcp32aqz","category_id":"cksq5v7n4004nn0puhjng8bci","_id":"cksq5v7np008zn0pucavp9899"},{"post_id":"cksq5v7mj001sn0puhcp32aqz","category_id":"cksq5v7no008rn0pudc460cux","_id":"cksq5v7nq0093n0pu3f3l1vyt"},{"post_id":"cksq5v7mk0020n0pu9t7phkvw","category_id":"cksq5v7my003vn0pubik6dfpa","_id":"cksq5v7nq0095n0pub9p81tys"},{"post_id":"cksq5v7mk0020n0pu9t7phkvw","category_id":"cksq5v7np008vn0pu1ofdeff5","_id":"cksq5v7nq0097n0pu9gsu1up9"},{"post_id":"cksq5v7ml0025n0pu0ce400fd","category_id":"cksq5v7my003vn0pubik6dfpa","_id":"cksq5v7nr0099n0pu18yxcf97"},{"post_id":"cksq5v7ml0025n0pu0ce400fd","category_id":"cksq5v7np008vn0pu1ofdeff5","_id":"cksq5v7nr009dn0puh4jg4yfs"},{"post_id":"cksq5v7mn002cn0pu2hsq9m0q","category_id":"cksq5v7n70057n0pu0g1w17d3","_id":"cksq5v7nr009fn0pufqrb142x"},{"post_id":"cksq5v7mn002cn0pu2hsq9m0q","category_id":"cksq5v7nq0094n0pub9kydb0t","_id":"cksq5v7ns009hn0puhwdoe24b"},{"post_id":"cksq5v7mn002fn0pu6328f62r","category_id":"cksq5v7n70057n0pu0g1w17d3","_id":"cksq5v7ns009jn0pu9xpuciyy"},{"post_id":"cksq5v7mn002fn0pu6328f62r","category_id":"cksq5v7nq0094n0pub9kydb0t","_id":"cksq5v7ns009mn0pueb211431"},{"post_id":"cksq5v7n3004jn0pu6u79ahcj","category_id":"cksq5v7nn008jn0puazvphqq7","_id":"cksq5v7ns009nn0pu5av37h7y"},{"post_id":"cksq5v7n3004jn0pu6u79ahcj","category_id":"cksq5v7nr009en0pugqr46494","_id":"cksq5v7ns009qn0pu3pfqf6bk"},{"post_id":"cksq5v7o300azn0pu6ei39t8a","category_id":"cksq5v7mm0029n0pu9zhd7h76","_id":"cksq5v7o500b6n0pufb2ufusm"},{"post_id":"cksq5v7o400b2n0pu29iabfag","category_id":"cksq5v7mm0029n0pu9zhd7h76","_id":"cksq5v7o600bcn0pu4g634213"},{"post_id":"cksq5v7o500b5n0pu4pql5tw2","category_id":"cksq5v7m1000an0puc6j33bkj","_id":"cksq5v7o700ben0pubcumep29"},{"post_id":"cksq5v7o500b5n0pu4pql5tw2","category_id":"cksq5v7ma0011n0pufrq3bqor","_id":"cksq5v7o700bhn0puh1ylene2"},{"post_id":"cksq5v7o400b0n0pua8io5dp2","category_id":"cksq5v7o500b3n0pu7dlrejqi","_id":"cksq5v7o700bjn0puhi2l3i24"},{"post_id":"cksq5v7o500b8n0puekhqdg1x","category_id":"cksq5v7m1000an0puc6j33bkj","_id":"cksq5v7o700bln0pu0job4way"},{"post_id":"cksq5v7o500b8n0puekhqdg1x","category_id":"cksq5v7ma0011n0pufrq3bqor","_id":"cksq5v7o700bnn0pu2q761e4v"},{"post_id":"cksq5v7o600bbn0pu0227fxnx","category_id":"cksq5v7m1000an0puc6j33bkj","_id":"cksq5v7o700bpn0pu2rxm04qe"},{"post_id":"cksq5v7o600bbn0pu0227fxnx","category_id":"cksq5v7ma0011n0pufrq3bqor","_id":"cksq5v7o700brn0pu1iux2sgb"}],"PostTag":[{"post_id":"cksq5v7lu0001n0pu2xr7gl47","tag_id":"cksq5v7ly0005n0puacbk0lcy","_id":"cksq5v7m4000in0pueat3g8rd"},{"post_id":"cksq5v7lu0001n0pu2xr7gl47","tag_id":"cksq5v7m1000bn0pucdj6b4ex","_id":"cksq5v7m5000ln0pugvruhp06"},{"post_id":"cksq5v7lw0003n0pufnfj83ux","tag_id":"cksq5v7m2000gn0puhtxk8llt","_id":"cksq5v7m8000un0pua4mo48y9"},{"post_id":"cksq5v7lw0003n0pufnfj83ux","tag_id":"cksq5v7m6000nn0pu6ooy6hv1","_id":"cksq5v7m9000xn0pufacfe66l"},{"post_id":"cksq5v7lz0007n0pu1v1xh6na","tag_id":"cksq5v7m8000sn0pu35fr4iik","_id":"cksq5v7mc0015n0pu83zoc93h"},{"post_id":"cksq5v7lz0007n0pu1v1xh6na","tag_id":"cksq5v7ma000zn0pu6w2j58p8","_id":"cksq5v7me0018n0pudtdueg69"},{"post_id":"cksq5v7me001an0pu8sdt330e","tag_id":"cksq5v7m8000sn0pu35fr4iik","_id":"cksq5v7mg001fn0puf3edb7y5"},{"post_id":"cksq5v7me001an0pu8sdt330e","tag_id":"cksq5v7ma000zn0pu6w2j58p8","_id":"cksq5v7mh001in0pu35h44kw1"},{"post_id":"cksq5v7m00008n0pu2zp12533","tag_id":"cksq5v7m8000sn0pu35fr4iik","_id":"cksq5v7mi001nn0pu1136fcas"},{"post_id":"cksq5v7m00008n0pu2zp12533","tag_id":"cksq5v7ma000zn0pu6w2j58p8","_id":"cksq5v7mi001qn0pud07ya974"},{"post_id":"cksq5v7mf001cn0pugwzl1r5h","tag_id":"cksq5v7m8000sn0pu35fr4iik","_id":"cksq5v7mk001vn0pu3ebua8y5"},{"post_id":"cksq5v7mf001cn0pugwzl1r5h","tag_id":"cksq5v7ma000zn0pu6w2j58p8","_id":"cksq5v7mk001yn0puckwh81z8"},{"post_id":"cksq5v7m00009n0pugrvl2u98","tag_id":"cksq5v7m8000sn0pu35fr4iik","_id":"cksq5v7ml0023n0pu1277f9j9"},{"post_id":"cksq5v7m00009n0pugrvl2u98","tag_id":"cksq5v7ma000zn0pu6w2j58p8","_id":"cksq5v7mm0026n0pu3rr62tdq"},{"post_id":"cksq5v7m1000cn0pu8w9d5mj7","tag_id":"cksq5v7m2000gn0puhtxk8llt","_id":"cksq5v7mn002dn0pug4fk14yp"},{"post_id":"cksq5v7m1000cn0pu8w9d5mj7","tag_id":"cksq5v7ml0022n0puftrk431v","_id":"cksq5v7mo002hn0pudewcbs5a"},{"post_id":"cksq5v7mm0028n0pu7kyk8sg6","tag_id":"cksq5v7m8000sn0pu35fr4iik","_id":"cksq5v7mo002ln0puaacx4mo4"},{"post_id":"cksq5v7mm0028n0pu7kyk8sg6","tag_id":"cksq5v7ma000zn0pu6w2j58p8","_id":"cksq5v7mp002pn0pub1b8coj8"},{"post_id":"cksq5v7m2000dn0pu8e8372l3","tag_id":"cksq5v7mm002an0pu7vwr4405","_id":"cksq5v7ms0031n0pu9w2a5nw9"},{"post_id":"cksq5v7m2000dn0pu8e8372l3","tag_id":"cksq5v7mo002jn0pu56i84l7y","_id":"cksq5v7ms0035n0pu72d99o2c"},{"post_id":"cksq5v7m2000dn0pu8e8372l3","tag_id":"cksq5v7mq002sn0pu0eygbp9y","_id":"cksq5v7mt0039n0puhm6y62p9"},{"post_id":"cksq5v7m4000hn0pua9hi1q3k","tag_id":"cksq5v7mr002yn0puahl2ejbc","_id":"cksq5v7mv003gn0pu61b41fif"},{"post_id":"cksq5v7m4000hn0pua9hi1q3k","tag_id":"cksq5v7ml0022n0puftrk431v","_id":"cksq5v7mw003kn0pubwq44wej"},{"post_id":"cksq5v7m4000jn0pu23545m9e","tag_id":"cksq5v7mm002an0pu7vwr4405","_id":"cksq5v7my003un0pug4lk0cc5"},{"post_id":"cksq5v7m4000jn0pu23545m9e","tag_id":"cksq5v7mq002sn0pu0eygbp9y","_id":"cksq5v7my003yn0puft15gg93"},{"post_id":"cksq5v7m6000on0pu929c7htr","tag_id":"cksq5v7mr002yn0puahl2ejbc","_id":"cksq5v7n2004dn0pu0ao63d0z"},{"post_id":"cksq5v7m6000on0pu929c7htr","tag_id":"cksq5v7ml0022n0puftrk431v","_id":"cksq5v7n3004hn0pu4lc5al05"},{"post_id":"cksq5v7m6000on0pu929c7htr","tag_id":"cksq5v7n00045n0pu1cem6v5y","_id":"cksq5v7n3004ln0pu0srearqf"},{"post_id":"cksq5v7n2004en0pud5fc9ftc","tag_id":"cksq5v7m8000sn0pu35fr4iik","_id":"cksq5v7n4004pn0pu01pv27ct"},{"post_id":"cksq5v7n2004en0pud5fc9ftc","tag_id":"cksq5v7ma000zn0pu6w2j58p8","_id":"cksq5v7n5004tn0puf4517gs3"},{"post_id":"cksq5v7n4004mn0pu19a0g3j2","tag_id":"cksq5v7mr002yn0puahl2ejbc","_id":"cksq5v7n5004wn0pu9rhhc73s"},{"post_id":"cksq5v7n4004rn0pu6xlb8squ","tag_id":"cksq5v7m8000sn0pu35fr4iik","_id":"cksq5v7n6004zn0pufcidanxc"},{"post_id":"cksq5v7n4004rn0pu6xlb8squ","tag_id":"cksq5v7ma000zn0pu6w2j58p8","_id":"cksq5v7n60052n0pu2lpu6698"},{"post_id":"cksq5v7m7000qn0pu2zv630dj","tag_id":"cksq5v7mr002yn0puahl2ejbc","_id":"cksq5v7n70055n0pu9ohu4kbu"},{"post_id":"cksq5v7m7000qn0pu2zv630dj","tag_id":"cksq5v7ml0022n0puftrk431v","_id":"cksq5v7n70058n0pu93uacd2g"},{"post_id":"cksq5v7m7000qn0pu2zv630dj","tag_id":"cksq5v7n00045n0pu1cem6v5y","_id":"cksq5v7n7005bn0pu5jff9492"},{"post_id":"cksq5v7m8000tn0pu0argcofo","tag_id":"cksq5v7n5004xn0pufaxkau8z","_id":"cksq5v7n8005en0pu3gim0ydf"},{"post_id":"cksq5v7m8000vn0pue0ung4sl","tag_id":"cksq5v7mr002yn0puahl2ejbc","_id":"cksq5v7n9005in0puf60t4z2t"},{"post_id":"cksq5v7m8000vn0pue0ung4sl","tag_id":"cksq5v7ml0022n0puftrk431v","_id":"cksq5v7n9005ln0puh63e7b2c"},{"post_id":"cksq5v7m8000vn0pue0ung4sl","tag_id":"cksq5v7n00045n0pu1cem6v5y","_id":"cksq5v7na005on0puelui66s4"},{"post_id":"cksq5v7m9000yn0pug3c7934g","tag_id":"cksq5v7mr002yn0puahl2ejbc","_id":"cksq5v7nc005un0pucy9cbbpd"},{"post_id":"cksq5v7m9000yn0pug3c7934g","tag_id":"cksq5v7ml0022n0puftrk431v","_id":"cksq5v7nc005wn0pu3b2a4usm"},{"post_id":"cksq5v7m9000yn0pug3c7934g","tag_id":"cksq5v7n00045n0pu1cem6v5y","_id":"cksq5v7nd0060n0pu4qc3g1c6"},{"post_id":"cksq5v7ma0010n0pu591wgprr","tag_id":"cksq5v7n5004xn0pufaxkau8z","_id":"cksq5v7nd0062n0pudksjgd1t"},{"post_id":"cksq5v7mb0012n0pu7adrfx4z","tag_id":"cksq5v7n5004xn0pufaxkau8z","_id":"cksq5v7nd0066n0pu5i8a4au0"},{"post_id":"cksq5v7mb0014n0pu7gwa2c2e","tag_id":"cksq5v7nd0065n0pu3u1v0gww","_id":"cksq5v7ne006cn0puadojdvld"},{"post_id":"cksq5v7me0017n0pufhesaacr","tag_id":"cksq5v7mr002yn0puahl2ejbc","_id":"cksq5v7ne006hn0pu7yk44j60"},{"post_id":"cksq5v7mg001hn0pubzkrgp6i","tag_id":"cksq5v7ne006fn0pu8h907sps","_id":"cksq5v7ng006qn0pu1s0f4yve"},{"post_id":"cksq5v7mg001hn0pubzkrgp6i","tag_id":"cksq5v7nf006kn0pu79le8k6i","_id":"cksq5v7ng006tn0pufnrq5l7j"},{"post_id":"cksq5v7mh001kn0pu3byp8j69","tag_id":"cksq5v7ne006fn0pu8h907sps","_id":"cksq5v7ng006wn0puciwzdrvf"},{"post_id":"cksq5v7mi001pn0pu2uc94uyf","tag_id":"cksq5v7ne006fn0pu8h907sps","_id":"cksq5v7ni0075n0pu2ncx4tc1"},{"post_id":"cksq5v7mi001pn0pu2uc94uyf","tag_id":"cksq5v7nf006kn0pu79le8k6i","_id":"cksq5v7ni0078n0pu47wyhvcz"},{"post_id":"cksq5v7mj001sn0puhcp32aqz","tag_id":"cksq5v7nh0073n0pudjdkctmm","_id":"cksq5v7nj007hn0puehetca7c"},{"post_id":"cksq5v7mj001sn0puhcp32aqz","tag_id":"cksq5v7ni007an0pu9p0d2vx7","_id":"cksq5v7nj007jn0pu854u171u"},{"post_id":"cksq5v7mk001xn0pu2f26b5su","tag_id":"cksq5v7m2000gn0puhtxk8llt","_id":"cksq5v7nj007mn0pu28uyfmhx"},{"post_id":"cksq5v7mk001xn0pu2f26b5su","tag_id":"cksq5v7ml0022n0puftrk431v","_id":"cksq5v7nk007pn0pu3e42afnz"},{"post_id":"cksq5v7mk0020n0pu9t7phkvw","tag_id":"cksq5v7nj007kn0pu6lqaehnq","_id":"cksq5v7nk007tn0puajczaloa"},{"post_id":"cksq5v7ml0025n0pu0ce400fd","tag_id":"cksq5v7nj007kn0pu6lqaehnq","_id":"cksq5v7nl007xn0puhpm3gba4"},{"post_id":"cksq5v7mn002cn0pu2hsq9m0q","tag_id":"cksq5v7nk007vn0pu77g45crj","_id":"cksq5v7nm0085n0puaxh4evzh"},{"post_id":"cksq5v7mn002cn0pu2hsq9m0q","tag_id":"cksq5v7nl0080n0pua08qel8e","_id":"cksq5v7nm0087n0pucuyf0x3n"},{"post_id":"cksq5v7mn002fn0pu6328f62r","tag_id":"cksq5v7nk007vn0pu77g45crj","_id":"cksq5v7nn008dn0puc0cgfpm5"},{"post_id":"cksq5v7mn002fn0pu6328f62r","tag_id":"cksq5v7nl0080n0pua08qel8e","_id":"cksq5v7nn008gn0pu0idbctzc"},{"post_id":"cksq5v7mo002kn0pu12ow9zl5","tag_id":"cksq5v7nm008cn0pubeua50lr","_id":"cksq5v7nn008in0puas65auau"},{"post_id":"cksq5v7mp002nn0pu1kz289vo","tag_id":"cksq5v7nm008cn0pubeua50lr","_id":"cksq5v7no008qn0pug2bcb9yu"},{"post_id":"cksq5v7mp002nn0pu1kz289vo","tag_id":"cksq5v7no008ln0pudt962gnc","_id":"cksq5v7np008sn0pu36jh85k1"},{"post_id":"cksq5v7mp002rn0pubk440tf0","tag_id":"cksq5v7nm008cn0pubeua50lr","_id":"cksq5v7np008yn0pubkyd8g1f"},{"post_id":"cksq5v7mp002rn0pubk440tf0","tag_id":"cksq5v7no008ln0pudt962gnc","_id":"cksq5v7nq0091n0pu2vxdet1v"},{"post_id":"cksq5v7mq002un0pu2hmb0ws4","tag_id":"cksq5v7nm008cn0pubeua50lr","_id":"cksq5v7nq0098n0puhxs791vk"},{"post_id":"cksq5v7mq002un0pu2hmb0ws4","tag_id":"cksq5v7no008ln0pudt962gnc","_id":"cksq5v7nr009bn0pu6lsh1g5h"},{"post_id":"cksq5v7mr002xn0pub13sdiuo","tag_id":"cksq5v7nm008cn0pubeua50lr","_id":"cksq5v7ns009in0puga8r59k3"},{"post_id":"cksq5v7mr002xn0pub13sdiuo","tag_id":"cksq5v7no008ln0pudt962gnc","_id":"cksq5v7ns009kn0pufeu64fwv"},{"post_id":"cksq5v7mr0030n0pu14kdascj","tag_id":"cksq5v7nm008cn0pubeua50lr","_id":"cksq5v7ns009pn0puct3ffqih"},{"post_id":"cksq5v7mr0030n0pu14kdascj","tag_id":"cksq5v7no008ln0pudt962gnc","_id":"cksq5v7nt009rn0pudht161zk"},{"post_id":"cksq5v7ms0034n0pucnnr9fca","tag_id":"cksq5v7nm008cn0pubeua50lr","_id":"cksq5v7nt009un0puehvu31yo"},{"post_id":"cksq5v7ms0034n0pucnnr9fca","tag_id":"cksq5v7no008ln0pudt962gnc","_id":"cksq5v7nt009vn0pucuor1ya4"},{"post_id":"cksq5v7mt0038n0puahjoc7z6","tag_id":"cksq5v7nm008cn0pubeua50lr","_id":"cksq5v7nu009yn0pug8gd2wuf"},{"post_id":"cksq5v7mt0038n0puahjoc7z6","tag_id":"cksq5v7no008ln0pudt962gnc","_id":"cksq5v7nu009zn0pu5dcubnym"},{"post_id":"cksq5v7mu003cn0pu5y0dby6e","tag_id":"cksq5v7nm008cn0pubeua50lr","_id":"cksq5v7nu00a2n0pu7xsn5zcw"},{"post_id":"cksq5v7mu003cn0pu5y0dby6e","tag_id":"cksq5v7no008ln0pudt962gnc","_id":"cksq5v7nu00a3n0pu10ho039a"},{"post_id":"cksq5v7mu003fn0pucgy1a5yy","tag_id":"cksq5v7nm008cn0pubeua50lr","_id":"cksq5v7nw00a5n0pu5zl78w1l"},{"post_id":"cksq5v7mv003jn0puhx9i4zpi","tag_id":"cksq5v7nm008cn0pubeua50lr","_id":"cksq5v7nw00a7n0pu3ni75sn2"},{"post_id":"cksq5v7mw003nn0pucjeggby0","tag_id":"cksq5v7nm008cn0pubeua50lr","_id":"cksq5v7nw00a9n0puan427tgu"},{"post_id":"cksq5v7mx003qn0puaq5narap","tag_id":"cksq5v7nw00a8n0pu54cug143","_id":"cksq5v7nx00abn0pu9f963y2x"},{"post_id":"cksq5v7mx003tn0pu7yfuabas","tag_id":"cksq5v7nm008cn0pubeua50lr","_id":"cksq5v7nx00adn0pucypwatnm"},{"post_id":"cksq5v7my003xn0pu5nhl0ld6","tag_id":"cksq5v7nx00acn0puh2q48s22","_id":"cksq5v7ny00ahn0puctu9drer"},{"post_id":"cksq5v7my003xn0pu5nhl0ld6","tag_id":"cksq5v7nx00aen0pu4nve44uf","_id":"cksq5v7ny00ain0pugwxibu1e"},{"post_id":"cksq5v7my003xn0pu5nhl0ld6","tag_id":"cksq5v7nx00afn0pu9jy71mz7","_id":"cksq5v7ny00akn0pu7t9q72de"},{"post_id":"cksq5v7mz0043n0pu42rx9f2f","tag_id":"cksq5v7mr002yn0puahl2ejbc","_id":"cksq5v7ny00ann0pu2zqt9d73"},{"post_id":"cksq5v7mz0043n0pu42rx9f2f","tag_id":"cksq5v7ne006fn0pu8h907sps","_id":"cksq5v7ny00aon0pu44me0udk"},{"post_id":"cksq5v7n00047n0pu200j05mf","tag_id":"cksq5v7ny00amn0pu3cas60jl","_id":"cksq5v7ny00aqn0pu2ll95xi2"},{"post_id":"cksq5v7n00048n0pu4qvk0d9q","tag_id":"cksq5v7ny00apn0pu5zd38z46","_id":"cksq5v7nz00asn0pufor3234i"},{"post_id":"cksq5v7n00048n0pu4qvk0d9q","tag_id":"cksq5v7mm002an0pu7vwr4405","_id":"cksq5v7nz00atn0puhrta978v"},{"post_id":"cksq5v7n1004bn0pu5fgihj3u","tag_id":"cksq5v7ny00amn0pu3cas60jl","_id":"cksq5v7nz00avn0pub4vi50xc"},{"post_id":"cksq5v7n3004jn0pu6u79ahcj","tag_id":"cksq5v7nz00aun0puc1wlbfej","_id":"cksq5v7o000axn0puf0cq7ft4"},{"post_id":"cksq5v7n3004jn0pu6u79ahcj","tag_id":"cksq5v7nz00awn0pu9aj06wcv","_id":"cksq5v7o000ayn0pu460aczhd"},{"post_id":"cksq5v7o400b0n0pua8io5dp2","tag_id":"cksq5v7mq002sn0pu0eygbp9y","_id":"cksq5v7o500b4n0pudvozhhd7"},{"post_id":"cksq5v7o400b0n0pua8io5dp2","tag_id":"cksq5v7m6000nn0pu6ooy6hv1","_id":"cksq5v7o500b7n0pueaxvblm5"},{"post_id":"cksq5v7o500b5n0pu4pql5tw2","tag_id":"cksq5v7mr002yn0puahl2ejbc","_id":"cksq5v7o600ban0pudmxaayvd"},{"post_id":"cksq5v7o500b5n0pu4pql5tw2","tag_id":"cksq5v7ml0022n0puftrk431v","_id":"cksq5v7o700bdn0pufyz02px6"},{"post_id":"cksq5v7o500b5n0pu4pql5tw2","tag_id":"cksq5v7n00045n0pu1cem6v5y","_id":"cksq5v7o700bgn0pu9duc7bms"},{"post_id":"cksq5v7o300azn0pu6ei39t8a","tag_id":"cksq5v7o400b1n0pu1c7eba1b","_id":"cksq5v7o700bin0pud0ddfobx"},{"post_id":"cksq5v7o500b8n0puekhqdg1x","tag_id":"cksq5v7mr002yn0puahl2ejbc","_id":"cksq5v7o700bkn0pu71xh5x5r"},{"post_id":"cksq5v7o500b8n0puekhqdg1x","tag_id":"cksq5v7ml0022n0puftrk431v","_id":"cksq5v7o700bmn0pu7b066xa0"},{"post_id":"cksq5v7o500b8n0puekhqdg1x","tag_id":"cksq5v7n00045n0pu1cem6v5y","_id":"cksq5v7o700bon0puatke5hoo"},{"post_id":"cksq5v7o600bbn0pu0227fxnx","tag_id":"cksq5v7mr002yn0puahl2ejbc","_id":"cksq5v7o700bqn0pu94m93u4o"},{"post_id":"cksq5v7o400b2n0pu29iabfag","tag_id":"cksq5v7o600b9n0pub91w8lu7","_id":"cksq5v7o700bsn0pu31g83t1l"},{"post_id":"cksq5v7o400b2n0pu29iabfag","tag_id":"cksq5v7o400b1n0pu1c7eba1b","_id":"cksq5v7o700btn0pu2rn0fw88"},{"post_id":"cky2gd74c0000wps02i454nfp","tag_id":"cksq5v7mr002yn0puahl2ejbc","_id":"cky2gd74m0002wps07dxb8plq"},{"post_id":"cky2gd74c0000wps02i454nfp","tag_id":"cky2gd74e0001wps09b6y82vy","_id":"cky2gd74n0003wps09udua2ed"}],"Tag":[{"name":"Technology","_id":"cksq5v7ly0005n0puacbk0lcy"},{"name":"5G","_id":"cksq5v7m1000bn0pucdj6b4ex"},{"name":"Computer Science","_id":"cksq5v7m2000gn0puhtxk8llt"},{"name":"Prose and Essay","_id":"cksq5v7m6000nn0pu6ooy6hv1"},{"name":"Computer Graphics","_id":"cksq5v7m8000sn0pu35fr4iik"},{"name":"DIP","_id":"cksq5v7ma000zn0pu6w2j58p8"},{"name":"CSAPP","_id":"cksq5v7ml0022n0puftrk431v"},{"name":"C","_id":"cksq5v7mm002an0pu7vwr4405"},{"name":"Functional Programming","_id":"cksq5v7mo002jn0pu56i84l7y"},{"name":"Express in English","_id":"cksq5v7mq002sn0pu0eygbp9y"},{"name":"Operating System","_id":"cksq5v7mr002yn0puahl2ejbc"},{"name":"CSAPP Lab","_id":"cksq5v7n00045n0pu1cem6v5y"},{"name":"CSS","_id":"cksq5v7n5004xn0pufaxkau8z"},{"name":"Java Web","_id":"cksq5v7nd0065n0pu3u1v0gww"},{"name":"Docker","_id":"cksq5v7ne006fn0pu8h907sps"},{"name":"Docker-Compose","_id":"cksq5v7nf006kn0pu79le8k6i"},{"name":"FPS","_id":"cksq5v7nh0073n0pudjdkctmm"},{"name":"Game","_id":"cksq5v7ni007an0pu9p0d2vx7"},{"name":"Git","_id":"cksq5v7nj007kn0pu6lqaehnq"},{"name":"Protocol","_id":"cksq5v7nk007vn0pu77g45crj"},{"name":"HTTP","_id":"cksq5v7nl0080n0pua08qel8e"},{"name":"JavaScript","_id":"cksq5v7nm008cn0pubeua50lr"},{"name":"33 JS Concept","_id":"cksq5v7no008ln0pudt962gnc"},{"name":"Web API","_id":"cksq5v7nw00a8n0pu54cug143"},{"name":"Algorithm","_id":"cksq5v7nx00acn0puh2q48s22"},{"name":"Data Structure","_id":"cksq5v7nx00aen0pu4nve44uf"},{"name":"LeetCode","_id":"cksq5v7nx00afn0pu9jy71mz7"},{"name":"Method","_id":"cksq5v7nx00agn0puezgqcohj"},{"name":"Security","_id":"cksq5v7ny00amn0pu3cas60jl"},{"name":"Windows API","_id":"cksq5v7ny00apn0pu5zd38z46"},{"name":"Tensorflow","_id":"cksq5v7nz00aun0puc1wlbfej"},{"name":"Python","_id":"cksq5v7nz00awn0pu9aj06wcv"},{"name":"Front-End Development","_id":"cksq5v7o400b1n0pu1c7eba1b"},{"name":"Webpack","_id":"cksq5v7o600b9n0pub91w8lu7"},{"name":"Rust","_id":"cky2gd74e0001wps09b6y82vy"}]}}